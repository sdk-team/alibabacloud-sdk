import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'business.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'business.ap-southeast-1.aliyuncs.com',
    cn-beijing = 'business.aliyuncs.com',
    cn-beijing-finance-1 = 'business.aliyuncs.com',
    cn-beijing-finance-pop = 'business.aliyuncs.com',
    cn-beijing-gov-1 = 'business.aliyuncs.com',
    cn-beijing-nu16-b01 = 'business.aliyuncs.com',
    cn-chengdu = 'business.aliyuncs.com',
    cn-edge-1 = 'business.aliyuncs.com',
    cn-fujian = 'business.aliyuncs.com',
    cn-haidian-cm12-c01 = 'business.aliyuncs.com',
    cn-hangzhou = 'business.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'business.aliyuncs.com',
    cn-hangzhou-finance = 'business.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'business.aliyuncs.com',
    cn-hangzhou-test-306 = 'business.aliyuncs.com',
    cn-hongkong = 'business.aliyuncs.com',
    cn-hongkong-finance-pop = 'business.aliyuncs.com',
    cn-huhehaote = 'business.aliyuncs.com',
    cn-north-2-gov-1 = 'business.aliyuncs.com',
    cn-qingdao = 'business.aliyuncs.com',
    cn-qingdao-nebula = 'business.aliyuncs.com',
    cn-shanghai = 'business.aliyuncs.com',
    cn-shanghai-et15-b01 = 'business.aliyuncs.com',
    cn-shanghai-et2-b01 = 'business.aliyuncs.com',
    cn-shanghai-finance-1 = 'business.aliyuncs.com',
    cn-shanghai-inner = 'business.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'business.aliyuncs.com',
    cn-shenzhen = 'business.aliyuncs.com',
    cn-shenzhen-finance-1 = 'business.aliyuncs.com',
    cn-shenzhen-inner = 'business.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'business.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'business.aliyuncs.com',
    cn-wuhan = 'business.aliyuncs.com',
    cn-yushanfang = 'business.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'business.aliyuncs.com',
    cn-zhangjiakou = 'business.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'business.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'business.aliyuncs.com',
    eu-central-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'business.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'business.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'business.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model QueryRIUtilizationDetailRequest = {
  RIInstanceId?: string(name='RIInstanceId', description='riInstanceId'),
  instanceSpec?: string(name='InstanceSpec', description='instanceSpec'),
  RICommodityCode: string(name='RICommodityCode', description='riCommodityCode'),
  deductedInstanceId?: string(name='DeductedInstanceId', description='deductInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryRIUtilizationDetailResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    pageNum: long(name='PageNum', description='pageNum'),
    pageSize: long(name='PageSize', description='pageSize'),
    totalCount: long(name='TotalCount', description='totalCount'),
    detailList: {
      detailList: [
        {
          RIInstanceId: string(name='RIInstanceId', description='riInstanceId'),
          instanceSpec: string(name='InstanceSpec', description='instanceSpec'),
          deductedInstanceId: string(name='DeductedInstanceId', description='deductedInstanceId'),
          deductedCommodityCode: string(name='DeductedCommodityCode', description='deductedCommodityCode'),
          deductDate: string(name='DeductDate', description='deductDate'),
          deductHours: string(name='DeductHours', description='deductHours'),
          deductedProductDetail: string(name='DeductedProductDetail', description='deductedCommodityName'),
          deductQuantity: float(name='DeductQuantity', description='deductQuantity'),
          deductFactorTotal: float(name='DeductFactorTotal', description='deductFactorTotal'),
        }
      ](name='DetailList', description='DetailList'),
    }(name='DetailList', description='detailList'),
  }(name='Data', description='data'),
}

async function queryRIUtilizationDetailEx(request: QueryRIUtilizationDetailRequest, runtime: Util.RuntimeOptions): QueryRIUtilizationDetailResponse {
  Util.validateModel(request);
  return doRequest('QueryRIUtilizationDetail', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryRIUtilizationDetail(request: QueryRIUtilizationDetailRequest): QueryRIUtilizationDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRIUtilizationDetailEx(request, runtime);
}

model QueryBillToOSSSubscriptionRequest = {
}

model QueryBillToOSSSubscriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    accountID: string(name='AccountID', description='accountID'),
    accountName: string(name='AccountName', description='accountName'),
    items: {
      item: [
        {
          subscribeType: string(name='SubscribeType', description='subscribeType'),
          subscribeBucket: string(name='SubscribeBucket', description='subscribeBucket'),
          bucketOwnerId: long(name='BucketOwnerId', description='bucketOwnerId'),
          subscribeTime: string(name='SubscribeTime', description='subscribeTime'),
          subscribeLanguage: string(name='SubscribeLanguage', description='subscribeLanguage'),
          multAccountRelSubscribe: string(name='MultAccountRelSubscribe', description='multAccountRelSubscribe'),
        }
      ](name='Item', description='Item'),
    }(name='Items', description='items'),
  }(name='Data', description='data'),
}

async function queryBillToOSSSubscriptionEx(request: QueryBillToOSSSubscriptionRequest, runtime: Util.RuntimeOptions): QueryBillToOSSSubscriptionResponse {
  Util.validateModel(request);
  return doRequest('QueryBillToOSSSubscription', 'HTTPS', 'POST', '2017-12-14', 'AK', null, request, runtime);
}

async function queryBillToOSSSubscription(request: QueryBillToOSSSubscriptionRequest): QueryBillToOSSSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillToOSSSubscriptionEx(request, runtime);
}

model QueryAccountBillRequest = {
  billingCycle: string(name='BillingCycle', description='billingCycle'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerID?: long(name='OwnerID', description='resourceOwnerId'),
  isGroupByProduct?: boolean(name='IsGroupByProduct', description='isGroupByProduct'),
  productCode?: string(name='ProductCode', description='productCode'),
}

model QueryAccountBillResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    billingCycle: string(name='BillingCycle', description='billingCycle'),
    accountID: string(name='AccountID', description='accountID'),
    accountName: string(name='AccountName', description='accountName'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    items: {
      item: [
        {
          costUnit: string(name='CostUnit', description='costUnit'),
          ownerID: string(name='OwnerID', description='ownerID'),
          pretaxGrossAmount: float(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          invoiceDiscount: float(name='InvoiceDiscount', description='invoiceDiscount'),
          deductedByCoupons: float(name='DeductedByCoupons', description='deductedByCoupons'),
          pretaxAmount: float(name='PretaxAmount', description='pretaxAmount'),
          deductedByCashCoupons: float(name='DeductedByCashCoupons', description='deductedByCashCoupons'),
          deductedByPrepaidCard: float(name='DeductedByPrepaidCard', description='deductedByPrepaidCard'),
          paymentAmount: float(name='PaymentAmount', description='paymentAmount'),
          outstandingAmount: float(name='OutstandingAmount', description='outstandingAmount'),
          currency: string(name='Currency', description='currency'),
          ownerName: string(name='OwnerName', description='ownerName'),
          productCode: string(name='ProductCode', description='productCode'),
          productName: string(name='ProductName', description='productName'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
        }
      ](name='Item', description='Item'),
    }(name='Items', description='items'),
  }(name='Data', description='data'),
}

async function queryAccountBillEx(request: QueryAccountBillRequest, runtime: Util.RuntimeOptions): QueryAccountBillResponse {
  Util.validateModel(request);
  return doRequest('QueryAccountBill', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryAccountBill(request: QueryAccountBillRequest): QueryAccountBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountBillEx(request, runtime);
}

model CreateCostUnitRequest = {
  unitEntityList?: [
    {
      ownerUid: long(name='OwnerUid', description='ownerUid'),
      parentUnitId: long(name='ParentUnitId', description='parentUnitId'),
      unitName: string(name='UnitName', description='unitName'),
    }
  ](name='UnitEntityList', description='unitEntityList'),
}

model CreateCostUnitResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    costUnitDtoList: [
      {
        ownerUid: long(name='OwnerUid', description='ownerUid'),
        parentUnitId: long(name='ParentUnitId', description='parentUnitId'),
        unitId: long(name='UnitId', description='unitId'),
        unitName: string(name='UnitName', description='unitName'),
      }
    ](name='CostUnitDtoList', description='costUnitDtoList'),
  }(name='Data', description='data'),
}

async function createCostUnitEx(request: CreateCostUnitRequest, runtime: Util.RuntimeOptions): CreateCostUnitResponse {
  Util.validateModel(request);
  return doRequest('CreateCostUnit', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function createCostUnit(request: CreateCostUnitRequest): CreateCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCostUnitEx(request, runtime);
}

model ModifyCostUnitRequest = {
  unitEntityList?: [
    {
      ownerUid: long(name='OwnerUid', description='ownerUid'),
      unitId: long(name='UnitId', description='unitId'),
      newUnitName: string(name='NewUnitName', description='unitName'),
    }
  ](name='UnitEntityList', description='unitEntityList'),
}

model ModifyCostUnitResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: [
    {
      ownerUid: long(name='OwnerUid', description='ownerUid'),
      unitId: long(name='UnitId', description='unitId'),
      isSuccess: boolean(name='IsSuccess', description='isSuccess'),
    }
  ](name='Data', description='data'),
}

async function modifyCostUnitEx(request: ModifyCostUnitRequest, runtime: Util.RuntimeOptions): ModifyCostUnitResponse {
  Util.validateModel(request);
  return doRequest('ModifyCostUnit', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function modifyCostUnit(request: ModifyCostUnitRequest): ModifyCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCostUnitEx(request, runtime);
}

model QueryCostUnitRequest = {
  ownerUid: long(name='OwnerUid', description='ownerUid'),
  parentUnitId: long(name='ParentUnitId', description='unitId'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryCostUnitResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    costUnitDtoList: [
      {
        ownerUid: long(name='OwnerUid', description='ownerUid'),
        parentUnitId: long(name='ParentUnitId', description='parentUnitId'),
        unitId: long(name='UnitId', description='unitId'),
        unitName: string(name='UnitName', description='unitName'),
      }
    ](name='CostUnitDtoList', description='costUnitDtoList'),
  }(name='Data', description='data'),
}

async function queryCostUnitEx(request: QueryCostUnitRequest, runtime: Util.RuntimeOptions): QueryCostUnitResponse {
  Util.validateModel(request);
  return doRequest('QueryCostUnit', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryCostUnit(request: QueryCostUnitRequest): QueryCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCostUnitEx(request, runtime);
}

model DeleteCostUnitRequest = {
  ownerUid: long(name='OwnerUid', description='ownerUid'),
  unitId: long(name='UnitId', description='unitId'),
}

model DeleteCostUnitResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    ownerUid: long(name='OwnerUid', description='ownerUid'),
    unitId: long(name='UnitId', description='unitId'),
    isSuccess: boolean(name='IsSuccess', description='isSuccess'),
  }(name='Data', description='data'),
}

async function deleteCostUnitEx(request: DeleteCostUnitRequest, runtime: Util.RuntimeOptions): DeleteCostUnitResponse {
  Util.validateModel(request);
  return doRequest('DeleteCostUnit', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function deleteCostUnit(request: DeleteCostUnitRequest): DeleteCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCostUnitEx(request, runtime);
}

model AllocateCostUnitResourceRequest = {
  fromUnitUserId: long(name='FromUnitUserId', description='fromUnitUserId'),
  fromUnitId: long(name='FromUnitId', description='fromUnitId'),
  resourceInstanceList: [
    {
      resourceUserId: long(name='ResourceUserId', description='resourceUserId'),
      resourceId: string(name='ResourceId', description='resourceId'),
      commodityCode: string(name='CommodityCode', description='commodityCode'),
    }
  ](name='ResourceInstanceList', description='resourceInstanceList'),
  toUnitUserId: long(name='ToUnitUserId', description='toUnitUserId'),
  toUnitId: long(name='ToUnitId', description='toUnitId'),
}

model AllocateCostUnitResourceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    toUnitUserId: long(name='ToUnitUserId', description='ownerUid'),
    toUnitId: long(name='ToUnitId', description='unitId'),
    isSuccess: boolean(name='IsSuccess', description='isSuccess'),
  }(name='Data', description='data'),
}

async function allocateCostUnitResourceEx(request: AllocateCostUnitResourceRequest, runtime: Util.RuntimeOptions): AllocateCostUnitResourceResponse {
  Util.validateModel(request);
  return doRequest('AllocateCostUnitResource', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function allocateCostUnitResource(request: AllocateCostUnitResourceRequest): AllocateCostUnitResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateCostUnitResourceEx(request, runtime);
}

model QueryCostUnitResourceRequest = {
  ownerUid: long(name='OwnerUid', description='ownerUid'),
  unitId: long(name='UnitId', description='unitId'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryCostUnitResourceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    resourceInstanceDtoList: [
      {
        resourceUserId: long(name='ResourceUserId', description='resourceUserId'),
        resourceId: string(name='ResourceId', description='resourceId'),
        commodityCode: string(name='CommodityCode', description='commodityCode'),
        resourceUserName: string(name='ResourceUserName', description='resourceUserName'),
        commodityName: string(name='CommodityName', description='commodityName'),
        resourceGroup: string(name='ResourceGroup', description='resourceGroup'),
        resourceTag: string(name='ResourceTag', description='resourceTag'),
        resourceNick: string(name='ResourceNick', description='resourceNick'),
        resourceType: string(name='ResourceType', description='resourceType'),
        resourceStatus: string(name='ResourceStatus', description='resourceStatus'),
        relatedResources: string(name='RelatedResources', description='relatedResources'),
        apportionCode: string(name='ApportionCode', description='apportionCode'),
        apportionName: string(name='ApportionName', description='apportionName'),
      }
    ](name='ResourceInstanceDtoList', description='resourceInstanceDtoList'),
    costUnit: {
      ownerUid: long(name='OwnerUid', description='ownerUid'),
      parentUnitId: long(name='ParentUnitId', description='parentUnitId'),
      unitId: long(name='UnitId', description='unitId'),
      unitName: string(name='UnitName', description='unitName'),
    }(name='CostUnit', description='costUnit'),
    costUnitStatisInfo: {
      resourceCount: long(name='ResourceCount', description='resourceCount'),
      resourceGroupCount: long(name='ResourceGroupCount', description='resourceGroupCount'),
      subUnitCount: long(name='SubUnitCount', description='subUnitCount'),
      userCount: long(name='UserCount', description='userCount'),
      totalResourceCount: long(name='TotalResourceCount', description='totalResourceCount'),
      totalUserCount: long(name='TotalUserCount', description='totalUserCount'),
      totalResourceGroupCount: long(name='TotalResourceGroupCount', description='totalResourceGroupCount'),
    }(name='CostUnitStatisInfo', description='costUnitStatisInfo'),
  }(name='Data', description='data'),
}

async function queryCostUnitResourceEx(request: QueryCostUnitResourceRequest, runtime: Util.RuntimeOptions): QueryCostUnitResourceResponse {
  Util.validateModel(request);
  return doRequest('QueryCostUnitResource', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryCostUnitResource(request: QueryCostUnitResourceRequest): QueryCostUnitResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCostUnitResourceEx(request, runtime);
}

model RenewResourcePackageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  effectiveDate?: string(name='EffectiveDate', description='effectiveDate'),
  duration: integer(name='Duration', description='duration'),
  pricingCycle: string(name='PricingCycle', description='pricingCycle'),
}

model RenewResourcePackageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: long(name='OrderId', description='orderId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    orderId: long(name='OrderId', description='orderId'),
    instanceId: string(name='InstanceId', description='instanceId'),
  }(name='Data', description='data'),
}

async function renewResourcePackageEx(request: RenewResourcePackageRequest, runtime: Util.RuntimeOptions): RenewResourcePackageResponse {
  Util.validateModel(request);
  return doRequest('RenewResourcePackage', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function renewResourcePackage(request: RenewResourcePackageRequest): RenewResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewResourcePackageEx(request, runtime);
}

model UpgradeResourcePackageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  effectiveDate?: string(name='EffectiveDate', description='effectiveDate'),
  specification?: string(name='Specification', description='specification'),
}

model UpgradeResourcePackageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: long(name='OrderId', description='orderId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    orderId: long(name='OrderId', description='orderId'),
    instanceId: string(name='InstanceId', description='instanceId'),
  }(name='Data', description='data'),
}

async function upgradeResourcePackageEx(request: UpgradeResourcePackageRequest, runtime: Util.RuntimeOptions): UpgradeResourcePackageResponse {
  Util.validateModel(request);
  return doRequest('UpgradeResourcePackage', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function upgradeResourcePackage(request: UpgradeResourcePackageRequest): UpgradeResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeResourcePackageEx(request, runtime);
}

model CreateAgAccountRequest = {
  loginEmail: string(name='LoginEmail', description='loginEmail'),
  accountAttr?: string(name='AccountAttr', description='accountAttr'),
  enterpriseName?: string(name='EnterpriseName', description='enterpriseName'),
  firstName?: string(name='FirstName', description='firstName'),
  lastName?: string(name='LastName', description='lastName'),
  nationCode?: string(name='NationCode', description='nationCode'),
  provinceName?: string(name='ProvinceName', description='provinceName'),
  cityName?: string(name='CityName', description='cityName'),
  postcode?: string(name='Postcode', description='postcode'),
}

model CreateAgAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  success: boolean(name='Success', description='success'),
  agRelationDto: {
    pk: string(name='Pk', description='pk'),
    type: string(name='Type', description='type'),
    mpk: string(name='Mpk', description='mpk'),
    ramAdminRoleName: string(name='RamAdminRoleName', description='ramAdminRoleName'),
  }(name='AgRelationDto', description='data'),
}

async function createAgAccountEx(request: CreateAgAccountRequest, runtime: Util.RuntimeOptions): CreateAgAccountResponse {
  Util.validateModel(request);
  return doRequest('CreateAgAccount', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function createAgAccount(request: CreateAgAccountRequest): CreateAgAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAgAccountEx(request, runtime);
}

model GetCustomerAccountInfoRequest = {
  ownerId: long(name='OwnerId', description='ownerId'),
}

model GetCustomerAccountInfoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    loginEmail: string(name='LoginEmail', description='loginEmail'),
    accountType: string(name='AccountType', description='accountType'),
    mpk: long(name='Mpk', description='mpk'),
    hostingStatus: string(name='HostingStatus', description='hostingStatus'),
    creditLimitStatus: string(name='CreditLimitStatus', description='creditLimitStatus'),
    isCertified: boolean(name='IsCertified', description='isCertified'),
  }(name='Data', description='data'),
}

async function getCustomerAccountInfoEx(request: GetCustomerAccountInfoRequest, runtime: Util.RuntimeOptions): GetCustomerAccountInfoResponse {
  Util.validateModel(request);
  return doRequest('GetCustomerAccountInfo', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function getCustomerAccountInfo(request: GetCustomerAccountInfoRequest): GetCustomerAccountInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomerAccountInfoEx(request, runtime);
}

model GetCustomerListRequest = {
}

model GetCustomerListResponse = {
  requestId: string(name='RequestId', description='request'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    uidList: [ string ](name='UidList', description='uidList'),
  }(name='Data', description='data'),
}

async function getCustomerListEx(request: GetCustomerListRequest, runtime: Util.RuntimeOptions): GetCustomerListResponse {
  Util.validateModel(request);
  return doRequest('GetCustomerList', 'HTTPS', 'POST', '2017-12-14', 'AK', null, request, runtime);
}

async function getCustomerList(request: GetCustomerListRequest): GetCustomerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomerListEx(request, runtime);
}

model ChangeResellerConsumeAmountRequest = {
  ownerId: long(name='OwnerId', description='ownerId'),
  adjustType: string(name='AdjustType', description='adjustType'),
  amount: string(name='Amount', description='amount'),
  currency: string(name='Currency', description='currency'),
  businessType: string(name='BusinessType', description='businessType'),
  source: string(name='Source', description='source'),
  outBizId: string(name='OutBizId', description='outBizId'),
  extendMap?: string(name='ExtendMap', description='extendMap'),
}

model ChangeResellerConsumeAmountResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  success: boolean(name='Success', description='success'),
  data: string(name='Data', description='data'),
}

async function changeResellerConsumeAmountEx(request: ChangeResellerConsumeAmountRequest, runtime: Util.RuntimeOptions): ChangeResellerConsumeAmountResponse {
  Util.validateModel(request);
  return doRequest('ChangeResellerConsumeAmount', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function changeResellerConsumeAmount(request: ChangeResellerConsumeAmountRequest): ChangeResellerConsumeAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResellerConsumeAmountEx(request, runtime);
}

model SetResellerUserStatusRequest = {
  ownerId: string(name='OwnerId', description='ownerId'),
  status: string(name='Status', description='status'),
  businessType: string(name='BusinessType', description='businessType'),
}

model SetResellerUserStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  success: boolean(name='Success', description='success'),
  data: boolean(name='Data', description='data'),
}

async function setResellerUserStatusEx(request: SetResellerUserStatusRequest, runtime: Util.RuntimeOptions): SetResellerUserStatusResponse {
  Util.validateModel(request);
  return doRequest('SetResellerUserStatus', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function setResellerUserStatus(request: SetResellerUserStatusRequest): SetResellerUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserStatusEx(request, runtime);
}

model CreateResellerUserQuotaRequest = {
  ownerId: long(name='OwnerId', description='ownerId'),
  amount: string(name='Amount', description='amount'),
  currency: string(name='Currency', description='currency'),
  outBizId?: string(name='OutBizId', description='outBizId'),
}

model CreateResellerUserQuotaResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  success: boolean(name='Success', description='success'),
  data: boolean(name='Data', description='data'),
}

async function createResellerUserQuotaEx(request: CreateResellerUserQuotaRequest, runtime: Util.RuntimeOptions): CreateResellerUserQuotaResponse {
  Util.validateModel(request);
  return doRequest('CreateResellerUserQuota', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function createResellerUserQuota(request: CreateResellerUserQuotaRequest): CreateResellerUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResellerUserQuotaEx(request, runtime);
}

model SetResellerUserQuotaRequest = {
  ownerId: long(name='OwnerId', description='ownerId'),
  amount: string(name='Amount', description='amount'),
  currency?: string(name='Currency', description='currency'),
  outBizId?: string(name='OutBizId', description='outBizId'),
}

model SetResellerUserQuotaResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  success: boolean(name='Success', description='success'),
  data: boolean(name='Data', description='data'),
}

async function setResellerUserQuotaEx(request: SetResellerUserQuotaRequest, runtime: Util.RuntimeOptions): SetResellerUserQuotaResponse {
  Util.validateModel(request);
  return doRequest('SetResellerUserQuota', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function setResellerUserQuota(request: SetResellerUserQuotaRequest): SetResellerUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserQuotaEx(request, runtime);
}

model QueryResellerAvailableQuotaRequest = {
  ownerId: long(name='OwnerId', description='ownerId'),
  itemCodes?: string(name='ItemCodes', description='itemCodes'),
}

model QueryResellerAvailableQuotaResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  success: boolean(name='Success', description='success'),
  data: string(name='Data', description='data'),
}

async function queryResellerAvailableQuotaEx(request: QueryResellerAvailableQuotaRequest, runtime: Util.RuntimeOptions): QueryResellerAvailableQuotaResponse {
  Util.validateModel(request);
  return doRequest('QueryResellerAvailableQuota', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryResellerAvailableQuota(request: QueryResellerAvailableQuotaRequest): QueryResellerAvailableQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryResellerAvailableQuotaEx(request, runtime);
}

model SetResellerUserAlarmThresholdRequest = {
  ownerId: long(name='OwnerId', description='ownerId'),
  alarmType: string(name='AlarmType', description='alarmType'),
  alarmThresholds?: string(name='AlarmThresholds', description='alarmThresholds'),
}

model SetResellerUserAlarmThresholdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  success: boolean(name='Success', description='success'),
  data: boolean(name='Data', description='data'),
}

async function setResellerUserAlarmThresholdEx(request: SetResellerUserAlarmThresholdRequest, runtime: Util.RuntimeOptions): SetResellerUserAlarmThresholdResponse {
  Util.validateModel(request);
  return doRequest('SetResellerUserAlarmThreshold', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function setResellerUserAlarmThreshold(request: SetResellerUserAlarmThresholdRequest): SetResellerUserAlarmThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserAlarmThresholdEx(request, runtime);
}

model QueryAccountTransactionsRequest = {
  transactionNumber?: string(name='TransactionNumber', description='transactionNumber'),
  recordID?: string(name='RecordID', description='recordID'),
  transactionChannelSN?: string(name='TransactionChannelSN', description='transactionChannelSN'),
  createTimeStart?: string(name='CreateTimeStart', description='createTimeStart'),
  createTimeEnd?: string(name='CreateTimeEnd', description='createTimeEnd'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryAccountTransactionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    accountName: string(name='AccountName', description='accountName'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    accountTransactionsList: {
      accountTransactionsList: [
        {
          transactionNumber: string(name='TransactionNumber', description='transactionNumber'),
          transactionTime: string(name='TransactionTime', description='transactionTime'),
          transactionFlow: string(name='TransactionFlow', description='transactionFlow'),
          transactionType: string(name='TransactionType', description='transactionType'),
          transactionChannel: string(name='TransactionChannel', description='transactionChannel'),
          transactionChannelSN: string(name='TransactionChannelSN', description='transactionChannelSN'),
          fundType: string(name='FundType', description='fundType'),
          recordID: string(name='RecordID', description='recordID'),
          remarks: string(name='Remarks', description='remarks'),
          billingCycle: string(name='BillingCycle', description='billingCycle'),
          amount: string(name='Amount', description='amount'),
          balance: string(name='Balance', description='balance'),
          transactionAccount: string(name='TransactionAccount', description='transactionAccount'),
        }
      ](name='AccountTransactionsList', description='AccountTransactionsList'),
    }(name='AccountTransactionsList', description='accountTransactionsList'),
  }(name='Data', description='data'),
}

async function queryAccountTransactionsEx(request: QueryAccountTransactionsRequest, runtime: Util.RuntimeOptions): QueryAccountTransactionsResponse {
  Util.validateModel(request);
  return doRequest('QueryAccountTransactions', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryAccountTransactions(request: QueryAccountTransactionsRequest): QueryAccountTransactionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountTransactionsEx(request, runtime);
}

model UnsubscribeBillToOSSRequest = {
  subscribeType: string(name='SubscribeType', description='subscribeType'),
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', description='multAccountRelSubscribe'),
}

model UnsubscribeBillToOSSResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function unsubscribeBillToOSSEx(request: UnsubscribeBillToOSSRequest, runtime: Util.RuntimeOptions): UnsubscribeBillToOSSResponse {
  Util.validateModel(request);
  return doRequest('UnsubscribeBillToOSS', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function unsubscribeBillToOSS(request: UnsubscribeBillToOSSRequest): UnsubscribeBillToOSSResponse {
  var runtime = new Util.RuntimeOptions{};
  return unsubscribeBillToOSSEx(request, runtime);
}

model SubscribeBillToOSSRequest = {
  subscribeBucket: string(name='SubscribeBucket', description='subscribeBucket'),
  subscribeType?: string(name='SubscribeType', description='subscribeType'),
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', description='multAccountRelSubscribe'),
  bucketOwnerId?: long(name='BucketOwnerId', description='bucketOwnerId'),
}

model SubscribeBillToOSSResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function subscribeBillToOSSEx(request: SubscribeBillToOSSRequest, runtime: Util.RuntimeOptions): SubscribeBillToOSSResponse {
  Util.validateModel(request);
  return doRequest('SubscribeBillToOSS', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function subscribeBillToOSS(request: SubscribeBillToOSSRequest): SubscribeBillToOSSResponse {
  var runtime = new Util.RuntimeOptions{};
  return subscribeBillToOSSEx(request, runtime);
}

model QueryUserOmsDataRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  table: string(name='Table', description='table'),
  dataType: string(name='DataType', description='dataType'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  marker?: string(name='Marker', description='marker'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryUserOmsDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    marker: string(name='Marker', description='marker'),
    hostId: string(name='HostId', description='hostId'),
    omsData: [ map[string]any ](name='OmsData', description='omsData'),
  }(name='Data', description='data'),
}

async function queryUserOmsDataEx(request: QueryUserOmsDataRequest, runtime: Util.RuntimeOptions): QueryUserOmsDataResponse {
  Util.validateModel(request);
  return doRequest('QueryUserOmsData', 'HTTPS', 'GET', '2017-12-14', 'AK', request, null, runtime);
}

async function queryUserOmsData(request: QueryUserOmsDataRequest): QueryUserOmsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserOmsDataEx(request, runtime);
}

model CancelOrderRequest = {
  orderId: string(name='OrderId', description='orderId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
}

model CancelOrderResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    hostId: string(name='HostId', description='hostId'),
  }(name='Data', description='data'),
}

async function cancelOrderEx(request: CancelOrderRequest, runtime: Util.RuntimeOptions): CancelOrderResponse {
  Util.validateModel(request);
  return doRequest('CancelOrder', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOrderEx(request, runtime);
}

model ApplyInvoiceRequest = {
  invoiceAmount: long(name='InvoiceAmount', description='invoiceAmount'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  customerId: long(name='CustomerId', description='customerId'),
  addressId: long(name='AddressId', description='addressId'),
  invoicingType?: integer(name='InvoicingType', description='invoicingType'),
  processWay?: integer(name='ProcessWay', description='processWay'),
  applyUserNick: string(name='ApplyUserNick', description='applyUserNick'),
  selectedIds: [ long ](name='SelectedIds', description='selectedIds'),
  invoiceByAmount?: boolean(name='InvoiceByAmount', description='invoiceByAmount'),
}

model ApplyInvoiceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    invoiceApplyId: long(name='InvoiceApplyId', description='invoiceApplyId'),
  }(name='Data', description='data'),
}

async function applyInvoiceEx(request: ApplyInvoiceRequest, runtime: Util.RuntimeOptions): ApplyInvoiceResponse {
  Util.validateModel(request);
  return doRequest('ApplyInvoice', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function applyInvoice(request: ApplyInvoiceRequest): ApplyInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyInvoiceEx(request, runtime);
}

model QueryCustomerAddressListRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
}

model QueryCustomerAddressListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    customerInvoiceAddressList: {
      customerInvoiceAddress: [
        {
          id: long(name='Id', description='id'),
          userId: long(name='UserId', description='userId'),
          userNick: string(name='UserNick', description='userNick'),
          addressee: string(name='Addressee', description='addressee'),
          province: string(name='Province', description='province'),
          city: string(name='City', description='city'),
          county: string(name='County', description='county'),
          street: string(name='Street', description='street'),
          postalCode: string(name='PostalCode', description='postalCode'),
          phone: string(name='Phone', description='phone'),
          bizType: string(name='BizType', description='bizType'),
          deliveryAddress: string(name='DeliveryAddress', description='deliveryAddress'),
        }
      ](name='CustomerInvoiceAddress', description='CustomerInvoiceAddress'),
    }(name='CustomerInvoiceAddressList', description='customerInvoiceAddressList'),
  }(name='Data', description='data'),
}

async function queryCustomerAddressListEx(request: QueryCustomerAddressListRequest, runtime: Util.RuntimeOptions): QueryCustomerAddressListResponse {
  Util.validateModel(request);
  return doRequest('QueryCustomerAddressList', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryCustomerAddressList(request: QueryCustomerAddressListRequest): QueryCustomerAddressListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCustomerAddressListEx(request, runtime);
}

model QueryEvaluateListRequest = {
  type?: integer(name='Type', description='type'),
  outBizId?: string(name='OutBizId', description='outBizId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  startAmount?: long(name='StartAmount', description='startAmount'),
  endAmount?: long(name='EndAmount', description='endAmount'),
  startBizTime?: string(name='StartBizTime', description='startBizTime'),
  endBizTime?: string(name='EndBizTime', description='endBizTime'),
  sortType?: integer(name='SortType', description='sortType'),
  startSearchTime?: string(name='StartSearchTime', description='startSearchTime'),
  endSearchTime?: string(name='EndSearchTime', description='endSearchTime'),
  billCycle?: string(name='BillCycle', description='billCycle'),
  bizTypeList?: [ string ](name='BizTypeList', description='bizTypeList'),
}

model QueryEvaluateListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    hostId: string(name='HostId', description='hostId'),
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    totalInvoiceAmount: long(name='TotalInvoiceAmount', description='totalInvoiceAmount'),
    totalUnAppliedInvoiceAmount: long(name='TotalUnAppliedInvoiceAmount', description='totalUnAppliedInvoiceAmount'),
    evaluateList: {
      evaluate: [
        {
          id: long(name='Id', description='id'),
          gmtCreate: string(name='GmtCreate', description='gmtCreate'),
          gmtModified: string(name='GmtModified', description='gmtModified'),
          userId: long(name='UserId', description='userId'),
          userNick: string(name='UserNick', description='userNick'),
          outBizId: string(name='OutBizId', description='outBizId'),
          billId: long(name='BillId', description='billId'),
          itemId: long(name='ItemId', description='itemId'),
          billCycle: string(name='BillCycle', description='billCycle'),
          bizType: string(name='BizType', description='bizType'),
          originalAmount: long(name='OriginalAmount', description='originalAmount'),
          presentAmount: long(name='PresentAmount', description='presentAmount'),
          canInvoiceAmount: long(name='CanInvoiceAmount', description='canInvoiceAmount'),
          invoicedAmount: long(name='InvoicedAmount', description='invoicedAmount'),
          offsetCostAmount: long(name='OffsetCostAmount', description='offsetCostAmount'),
          offsetAcceptAmount: long(name='OffsetAcceptAmount', description='offsetAcceptAmount'),
          status: integer(name='Status', description='status'),
          opId: string(name='OpId', description='opId'),
          name: string(name='Name', description='name'),
          bizTime: string(name='BizTime', description='bizTime'),
          type: integer(name='Type', description='type'),
        }
      ](name='Evaluate', description='Evaluate'),
    }(name='EvaluateList', description='evaluateList'),
  }(name='Data', description='data'),
}

async function queryEvaluateListEx(request: QueryEvaluateListRequest, runtime: Util.RuntimeOptions): QueryEvaluateListResponse {
  Util.validateModel(request);
  return doRequest('QueryEvaluateList', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryEvaluateList(request: QueryEvaluateListRequest): QueryEvaluateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEvaluateListEx(request, runtime);
}

model QueryInvoicingCustomerListRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
}

model QueryInvoicingCustomerListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    customerInvoiceList: {
      customerInvoice: [
        {
          id: long(name='Id', description='id'),
          userId: long(name='UserId', description='userId'),
          userNick: string(name='UserNick', description='userNick'),
          invoiceTitle: string(name='InvoiceTitle', description='invoiceTitle'),
          customerType: long(name='CustomerType', description='customerType'),
          taxpayerType: long(name='TaxpayerType', description='taxpayerType'),
          bank: string(name='Bank', description='bank'),
          bankNo: string(name='BankNo', description='bankNo'),
          operatingLicenseAddress: string(name='OperatingLicenseAddress', description='operatingLicenseAddress'),
          operatingLicensePhone: string(name='OperatingLicensePhone', description='operatingLicensePhone'),
          registerNo: string(name='RegisterNo', description='registerNo'),
          startCycle: long(name='StartCycle', description='startCycle'),
          status: long(name='Status', description='status'),
          gmtCreate: string(name='GmtCreate', description='gmtCreate'),
          taxationLicense: string(name='TaxationLicense', description='taxationLicense'),
          adjustType: long(name='AdjustType', description='adjustType'),
          endCycle: long(name='EndCycle', description='endCycle'),
          titleChangeInstructions: string(name='TitleChangeInstructions', description='titleChangeInstructions'),
          issueType: long(name='IssueType', description='issueType'),
          type: long(name='Type', description='type'),
          defaultRemark: string(name='DefaultRemark', description='defaultRemark'),
        }
      ](name='CustomerInvoice', description='CustomerInvoice'),
    }(name='CustomerInvoiceList', description='customerInvoiceList'),
  }(name='Data', description='data'),
}

async function queryInvoicingCustomerListEx(request: QueryInvoicingCustomerListRequest, runtime: Util.RuntimeOptions): QueryInvoicingCustomerListResponse {
  Util.validateModel(request);
  return doRequest('QueryInvoicingCustomerList', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryInvoicingCustomerList(request: QueryInvoicingCustomerListRequest): QueryInvoicingCustomerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInvoicingCustomerListEx(request, runtime);
}

model QueryBillOverviewRequest = {
  billingCycle: string(name='BillingCycle', description='billingCycle'),
  productCode?: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType?: string(name='SubscriptionType', description='subscriptionType'),
}

model QueryBillOverviewResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    billingCycle: string(name='BillingCycle', description='billingCycle'),
    accountID: string(name='AccountID', description='accountID'),
    accountName: string(name='AccountName', description='accountName'),
    items: {
      item: [
        {
          item: string(name='Item', description='item'),
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
          productName: string(name='ProductName', description='productName'),
          productDetail: string(name='ProductDetail', description='productDetail'),
          pretaxGrossAmount: float(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          invoiceDiscount: float(name='InvoiceDiscount', description='invoiceDiscount'),
          deductedByCoupons: float(name='DeductedByCoupons', description='deductedByCoupons'),
          pretaxAmount: float(name='PretaxAmount', description='pretaxAmount'),
          currency: string(name='Currency', description='currency'),
          paymentAmount: float(name='PaymentAmount', description='paymentAmount'),
          outstandingAmount: float(name='OutstandingAmount', description='outstandingAmount'),
          deductedByCashCoupons: float(name='DeductedByCashCoupons', description='deductedByCashCoupons'),
          deductedByPrepaidCard: float(name='DeductedByPrepaidCard', description='deductedByPrepaidCard'),
          pretaxAmountLocal: float(name='PretaxAmountLocal', description='pretaxAmountLocal'),
          tax: float(name='Tax', description='tax'),
          afterTaxAmount: float(name='AfterTaxAmount', description='afterTaxAmount'),
          paymentCurrency: string(name='PaymentCurrency', description='paymentCurrency'),
          roundDownDiscount: string(name='RoundDownDiscount', description='roundDownDiscount'),
        }
      ](name='Item', description='Item'),
    }(name='Items', description='items'),
  }(name='Data', description='data'),
}

async function queryBillOverviewEx(request: QueryBillOverviewRequest, runtime: Util.RuntimeOptions): QueryBillOverviewResponse {
  Util.validateModel(request);
  return doRequest('QueryBillOverview', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryBillOverview(request: QueryBillOverviewRequest): QueryBillOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillOverviewEx(request, runtime);
}

model QueryBillRequest = {
  billingCycle: string(name='BillingCycle', description='billingCycle'),
  type?: string(name='Type', description='type'),
  productCode?: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType?: string(name='SubscriptionType', description='subscriptionType'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', description='isHideZeroCharge'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency', description='isDisplayLocalCurrency'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryBillResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    billingCycle: string(name='BillingCycle', description='billingCycle'),
    accountID: string(name='AccountID', description='accountID'),
    accountName: string(name='AccountName', description='accountName'),
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    items: {
      item: [
        {
          recordID: string(name='RecordID', description='recordId'),
          item: string(name='Item', description='item'),
          ownerID: string(name='OwnerID', description='ownerId'),
          usageStartTime: string(name='UsageStartTime', description='usageStartTime'),
          usageEndTime: string(name='UsageEndTime', description='usageEndTime'),
          paymentTime: string(name='PaymentTime', description='paymentTime'),
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
          productName: string(name='ProductName', description='productName'),
          productDetail: string(name='ProductDetail', description='productDetail'),
          pretaxGrossAmount: float(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          deductedByCoupons: float(name='DeductedByCoupons', description='deductedByCoupons'),
          invoiceDiscount: float(name='InvoiceDiscount', description='invoiceDiscount'),
          pretaxAmount: float(name='PretaxAmount', description='pretaxAmount'),
          currency: string(name='Currency', description='currency'),
          pretaxAmountLocal: float(name='PretaxAmountLocal', description='pretaxAmountLocal'),
          tax: float(name='Tax', description='tax'),
          paymentAmount: float(name='PaymentAmount', description='paymentAmount'),
          deductedByCashCoupons: float(name='DeductedByCashCoupons', description='deductedByCashCoupons'),
          deductedByPrepaidCard: float(name='DeductedByPrepaidCard', description='deductedByPrepaidCard'),
          outstandingAmount: float(name='OutstandingAmount', description='outstandingAmount'),
          afterTaxAmount: float(name='AfterTaxAmount', description='afterTaxAmount'),
          status: string(name='Status', description='status'),
          paymentCurrency: string(name='PaymentCurrency', description='paymentCurrency'),
          paymentTransactionID: string(name='PaymentTransactionID', description='paymentTransactionID'),
          roundDownDiscount: string(name='RoundDownDiscount', description='roundDownDiscount'),
          subOrderId: string(name='SubOrderId', description='subOrderId'),
        }
      ](name='Item', description='Item'),
    }(name='Items', description='settleBillList'),
  }(name='Data', description='data'),
}

async function queryBillEx(request: QueryBillRequest, runtime: Util.RuntimeOptions): QueryBillResponse {
  Util.validateModel(request);
  return doRequest('QueryBill', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryBill(request: QueryBillRequest): QueryBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillEx(request, runtime);
}

model QueryInstanceBillRequest = {
  billingCycle: string(name='BillingCycle', description='billingCycle'),
  productCode?: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType?: string(name='SubscriptionType', description='subscriptionType'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  isBillingItem?: boolean(name='IsBillingItem', description='isBillingItem'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', description='isHideZeroCharge'),
  billingDate?: string(name='BillingDate', description='billingDate'),
  granularity?: string(name='Granularity', description='granularity'),
}

model QueryInstanceBillResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    billingCycle: string(name='BillingCycle', description='billingCycle'),
    accountID: string(name='AccountID', description='accountID'),
    accountName: string(name='AccountName', description='accountName'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    items: {
      item: [
        {
          instanceID: string(name='InstanceID', description='instanceID'),
          billingType: string(name='BillingType', description='billingType'),
          costUnit: string(name='CostUnit', description='costUnit'),
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
          productName: string(name='ProductName', description='productName'),
          productDetail: string(name='ProductDetail', description='productDetail'),
          ownerID: string(name='OwnerID', description='ownerID'),
          billingItem: string(name='BillingItem', description='billingItem'),
          listPrice: string(name='ListPrice', description='listPrice'),
          listPriceUnit: string(name='ListPriceUnit', description='listPriceUnit'),
          usage: string(name='Usage', description='usage'),
          usageUnit: string(name='UsageUnit', description='usageUnit'),
          deductedByResourcePackage: string(name='DeductedByResourcePackage', description='deductedByResourcePackage'),
          pretaxGrossAmount: float(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          invoiceDiscount: float(name='InvoiceDiscount', description='invoiceDiscount'),
          deductedByCoupons: float(name='DeductedByCoupons', description='deductedByCoupons'),
          pretaxAmount: float(name='PretaxAmount', description='pretaxAmount'),
          deductedByCashCoupons: float(name='DeductedByCashCoupons', description='deductedByCashCoupons'),
          deductedByPrepaidCard: float(name='DeductedByPrepaidCard', description='deductedByPrepaidCard'),
          paymentAmount: float(name='PaymentAmount', description='paymentAmount'),
          outstandingAmount: float(name='OutstandingAmount', description='outstandingAmount'),
          currency: string(name='Currency', description='currency'),
          nickName: string(name='NickName', description='nickName'),
          resourceGroup: string(name='ResourceGroup', description='resourceGroup'),
          tag: string(name='Tag', description='tag'),
          instanceConfig: string(name='InstanceConfig', description='instanceConfig'),
          instanceSpec: string(name='InstanceSpec', description='instanceSpec'),
          internetIP: string(name='InternetIP', description='internetIP'),
          intranetIP: string(name='IntranetIP', description='intranetIP'),
          region: string(name='Region', description='region'),
          zone: string(name='Zone', description='zone'),
          item: string(name='Item', description='item'),
          servicePeriod: string(name='ServicePeriod', description='servicePeriod'),
          billingDate: string(name='BillingDate', description='billingDate'),
        }
      ](name='Item', description='Item'),
    }(name='Items', description='items'),
  }(name='Data', description='data'),
}

async function queryInstanceBillEx(request: QueryInstanceBillRequest, runtime: Util.RuntimeOptions): QueryInstanceBillResponse {
  Util.validateModel(request);
  return doRequest('QueryInstanceBill', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryInstanceBill(request: QueryInstanceBillRequest): QueryInstanceBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceBillEx(request, runtime);
}

model EnableBillGenerationRequest = {
  productCode: string(name='ProductCode', description='productCode'),
  ownerId: long(name='OwnerId', description='ownerId'),
}

model EnableBillGenerationResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    boolean: boolean(name='Boolean', description='isSuccess'),
  }(name='Data', description='data'),
}

async function enableBillGenerationEx(request: EnableBillGenerationRequest, runtime: Util.RuntimeOptions): EnableBillGenerationResponse {
  Util.validateModel(request);
  return doRequest('EnableBillGeneration', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function enableBillGeneration(request: EnableBillGenerationRequest): EnableBillGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableBillGenerationEx(request, runtime);
}

model QueryRedeemRequest = {
  expiryTimeStart?: string(name='ExpiryTimeStart', description='expiryTimeStart'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', description='expiryTimeEnd'),
  effectiveOrNot?: boolean(name='EffectiveOrNot', description='effectiveOrNot'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryRedeemResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    pageNum: long(name='PageNum', description='pageNum'),
    pageSize: long(name='PageSize', description='pageSize'),
    totalCount: long(name='TotalCount', description='totalCount'),
    redeem: {
      redeem: [
        {
          redeemId: string(name='RedeemId', description='redeemId'),
          redeemNo: string(name='RedeemNo', description='redeemNo'),
          status: string(name='Status', description='status'),
          grantedTime: string(name='GrantedTime', description='grantedTime'),
          effectiveTime: string(name='EffectiveTime', description='effectiveTime'),
          expiryTime: string(name='ExpiryTime', description='expiryTime'),
          nominalValue: string(name='NominalValue', description='nominalValue'),
          balance: string(name='Balance', description='balance'),
          applicableProducts: string(name='ApplicableProducts', description='applicableProducts'),
          specification: string(name='Specification', description='specification'),
        }
      ](name='Redeem', description='Redeem'),
    }(name='Redeem', description='redeemList'),
  }(name='Data', description='data'),
}

async function queryRedeemEx(request: QueryRedeemRequest, runtime: Util.RuntimeOptions): QueryRedeemResponse {
  Util.validateModel(request);
  return doRequest('QueryRedeem', 'HTTPS', 'GET', '2017-12-14', 'AK', request, null, runtime);
}

async function queryRedeem(request: QueryRedeemRequest): QueryRedeemResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRedeemEx(request, runtime);
}

model ConvertChargeTypeRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
  period?: integer(name='Period', description='period'),
  productCode: string(name='ProductCode', description='productCode'),
  instanceId: string(name='InstanceId', description='instanceId'),
}

model ConvertChargeTypeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    orderId: string(name='OrderId', description='orderId'),
  }(name='Data', description='data'),
}

async function convertChargeTypeEx(request: ConvertChargeTypeRequest, runtime: Util.RuntimeOptions): ConvertChargeTypeResponse {
  Util.validateModel(request);
  return doRequest('ConvertChargeType', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function convertChargeType(request: ConvertChargeTypeRequest): ConvertChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertChargeTypeEx(request, runtime);
}

model CreateInstanceRequest = {
  productCode: string(name='ProductCode', description='productCode'),
  parameter?: [
    {
      code: string(name='Code', description='code'),
      value: string(name='Value', description='value'),
    }
  ](name='Parameter', description='parameter'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
  period?: integer(name='Period', description='period'),
  renewalStatus?: string(name='RenewalStatus', description='renewalStatus'),
  renewPeriod?: integer(name='RenewPeriod', description='renewPeriod'),
  clientToken?: string(name='ClientToken', description='clientToken'),
}

model CreateInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    instanceId: string(name='InstanceId', description='instanceId'),
    orderId: string(name='OrderId', description='orderId'),
  }(name='Data', description='data'),
}

async function createInstanceEx(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateInstance', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceEx(request, runtime);
}

model ModifyInstanceRequest = {
  productCode: string(name='ProductCode', description='productCode'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
  modifyType: string(name='ModifyType', description='modifyType'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  parameter?: [
    {
      code: string(name='Code', description='code'),
      value: string(name='Value', description='value'),
    }
  ](name='Parameter', description='parameter'),
  clientToken?: string(name='ClientToken', description='clientToken'),
}

model ModifyInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    hostId: string(name='HostId', description='hostId'),
    orderId: string(name='OrderId', description='orderId'),
  }(name='Data', description='data'),
}

async function modifyInstanceEx(request: ModifyInstanceRequest, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstance', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceEx(request, runtime);
}

model DescribePricingModuleRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  productCode: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
}

model DescribePricingModuleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    moduleList: {
      module: [
        {
          moduleCode: string(name='ModuleCode', description='moduleCode'),
          moduleName: string(name='ModuleName', description='moduleName'),
          priceType: string(name='PriceType', description='priceType'),
          currency: string(name='Currency', description='currency'),
          configList: {
            configList: [ string ](name='ConfigList', description='ConfigList'),
          }(name='ConfigList', description='configList'),
        }
      ](name='Module', description='Module'),
    }(name='ModuleList', description='moduleList'),
    attributeList: {
      attribute: [
        {
          code: string(name='Code', description='code'),
          name: string(name='Name', description='name'),
          unit: string(name='Unit', description='unit'),
          values: {
            attributeValue: [
              {
                type: string(name='Type', description='type'),
                name: string(name='Name', description='name'),
                value: string(name='Value', description='value'),
                remark: string(name='Remark', description='remark'),
              }
            ](name='AttributeValue', description='AttributeValue'),
          }(name='Values', description='values'),
        }
      ](name='Attribute', description='Attribute'),
    }(name='AttributeList', description='attributeList'),
  }(name='Data', description='data'),
}

async function describePricingModuleEx(request: DescribePricingModuleRequest, runtime: Util.RuntimeOptions): DescribePricingModuleResponse {
  Util.validateModel(request);
  return doRequest('DescribePricingModule', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function describePricingModule(request: DescribePricingModuleRequest): DescribePricingModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePricingModuleEx(request, runtime);
}

model QueryProductListRequest = {
  queryTotalCount?: boolean(name='QueryTotalCount', description='queryTotalCount'),
  pageNum: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryProductListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    totalCount: integer(name='TotalCount', description='totalCount'),
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    productList: {
      product: [
        {
          productCode: string(name='ProductCode', description='productCode'),
          productName: string(name='ProductName', description='productName'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
        }
      ](name='Product', description='Product'),
    }(name='ProductList', description='productList'),
  }(name='Data', description='data'),
}

async function queryProductListEx(request: QueryProductListRequest, runtime: Util.RuntimeOptions): QueryProductListResponse {
  Util.validateModel(request);
  return doRequest('QueryProductList', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductListEx(request, runtime);
}

model QueryInstanceGaapCostRequest = {
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  billingCycle: string(name='BillingCycle', description='billingCycle'),
  productCode?: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType?: string(name='SubscriptionType', description='subscriptionType'),
}

model QueryInstanceGaapCostResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    hostId: string(name='HostId', description='hostId'),
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    modules: {
      module: [
        {
          billingCycle: string(name='BillingCycle', description='billingCycle'),
          instanceID: string(name='InstanceID', description='instanceID'),
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
          tag: string(name='Tag', description='tag'),
          resourceGroup: string(name='ResourceGroup', description='resourceGroup'),
          accountingUnit: string(name='AccountingUnit', description='accountingUnit'),
          payerAccount: string(name='PayerAccount', description='payerAccount'),
          ownerID: string(name='OwnerID', description='ownerID'),
          region: string(name='Region', description='region'),
          currency: string(name='Currency', description='currency'),
          paymentCurrency: string(name='PaymentCurrency', description='paymentCurrency'),
          orderType: string(name='OrderType', description='orderType'),
          payTime: string(name='PayTime', description='payTime'),
          pretaxGrossAmount: string(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          pricingDiscount: string(name='PricingDiscount', description='pricingDiscount'),
          deductedByCoupons: string(name='DeductedByCoupons', description='deductedByCoupons'),
          pretaxAmount: string(name='PretaxAmount', description='pretaxAmount'),
          pretaxAmountLocal: string(name='PretaxAmountLocal', description='pretaxAmountLocal'),
          deductedByCashCoupons: string(name='DeductedByCashCoupons', description='deductedByCashCoupons'),
          deductedByPrepaidCard: string(name='DeductedByPrepaidCard', description='deductedByPrepaidCard'),
          paymentAmount: string(name='PaymentAmount', description='paymentAmount'),
          gaapPretaxGrossAmount: string(name='GaapPretaxGrossAmount', description='gaapPretaxGrossAmount'),
          gaapPricingDiscount: string(name='GaapPricingDiscount', description='gaapPricingDiscount'),
          gaapDeductedByCoupons: string(name='GaapDeductedByCoupons', description='gaapDeductedByCoupons'),
          gaapPretaxAmount: string(name='GaapPretaxAmount', description='gaapPretaxAmount'),
          gaapPretaxAmountLocal: string(name='GaapPretaxAmountLocal', description='gaapPretaxAmountLocal'),
          gaapDeductedByCashCoupons: string(name='GaapDeductedByCashCoupons', description='gaapDeductedByCashCoupons'),
          gaapDeductedByPrepaidCard: string(name='GaapDeductedByPrepaidCard', description='gaapDeductedByPrepaidCard'),
          gaapPaymentAmount: string(name='GaapPaymentAmount', description='gaapPaymentAmount'),
          monthGaapPretaxGrossAmount: string(name='MonthGaapPretaxGrossAmount', description='monthGaapPretaxGrossAmount'),
          monthGaapPricingDiscount: string(name='MonthGaapPricingDiscount', description='monthGaapPricingDiscount'),
          monthGaapDeductedByCoupons: string(name='MonthGaapDeductedByCoupons', description='monthGaapDeductedByCoupons'),
          monthGaapPretaxAmount: string(name='MonthGaapPretaxAmount', description='monthGaapPretaxAmount'),
          monthGaapPretaxAmountLocal: string(name='MonthGaapPretaxAmountLocal', description='monthGaapPretaxAmountLocal'),
          monthGaapDeductedByCashCoupons: string(name='MonthGaapDeductedByCashCoupons', description='monthGaapDeductedByCashCoupons'),
          monthGaapDeductedByPrepaidCard: string(name='MonthGaapDeductedByPrepaidCard', description='monthGaapDeductedByPrepaidCard'),
          monthGaapPaymentAmount: string(name='MonthGaapPaymentAmount', description='monthGaapPaymentAmount'),
          unallocatedPaymentAmount: string(name='UnallocatedPaymentAmount', description='unallocatedPaymentAmount'),
          usageStartDate: string(name='UsageStartDate', description='usageStartDate'),
          usageEndDate: string(name='UsageEndDate', description='usageEndDate'),
          billType: string(name='BillType', description='billType'),
          orderId: string(name='OrderId', description='orderId'),
          subOrderId: string(name='SubOrderId', description='subOrderId'),
          unallocatedPretaxGrossAmount: string(name='UnallocatedPretaxGrossAmount', description='unallocatedPretaxGrossAmount'),
          unallocatedPricingDiscount: string(name='UnallocatedPricingDiscount', description='unallocatedPricingDiscount'),
          unallocatedDeductedByCoupons: string(name='UnallocatedDeductedByCoupons', description='unallocatedDeductedByCoupons'),
          unallocatedPretaxAmount: string(name='UnallocatedPretaxAmount', description='unallocatedPretaxAmount'),
          unallocatedPretaxAmountLocal: string(name='UnallocatedPretaxAmountLocal', description='unallocatedPretaxAmountLocal'),
          unallocatedDeductedByCashCoupons: string(name='UnallocatedDeductedByCashCoupons', description='unallocatedDeductedByCashCoupons'),
          unallocatedDeductedByPrepaidCard: string(name='UnallocatedDeductedByPrepaidCard', description='unallocatedDeductedByPrepaidCard'),
        }
      ](name='Module', description='Module'),
    }(name='Modules', description='modules'),
  }(name='Data', description='data'),
}

async function queryInstanceGaapCostEx(request: QueryInstanceGaapCostRequest, runtime: Util.RuntimeOptions): QueryInstanceGaapCostResponse {
  Util.validateModel(request);
  return doRequest('QueryInstanceGaapCost', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryInstanceGaapCost(request: QueryInstanceGaapCostRequest): QueryInstanceGaapCostResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceGaapCostEx(request, runtime);
}

model RenewInstanceRequest = {
  productCode: string(name='ProductCode', description='productCode'),
  instanceId: string(name='InstanceId', description='instanceId'),
  renewPeriod: integer(name='RenewPeriod', description='renewPeriod'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  productType?: string(name='ProductType', description='productType'),
  ownerId?: long(name='OwnerId', description='ownerId'),
}

model RenewInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    orderId: string(name='OrderId', description='orderId'),
  }(name='Data', description='data'),
}

async function renewInstanceEx(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  return doRequest('RenewInstance', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceEx(request, runtime);
}

model GetOrderDetailRequest = {
  orderId: string(name='OrderId', description='orderId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
}

model GetOrderDetailResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    hostName: string(name='HostName', description='hostName'),
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    orderList: {
      order: [
        {
          orderId: string(name='OrderId', description='orderId'),
          subOrderId: string(name='SubOrderId', description='subOrderId'),
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
          orderType: string(name='OrderType', description='orderType'),
          createTime: string(name='CreateTime', description='createTime'),
          paymentTime: string(name='PaymentTime', description='paymentTime'),
          paymentStatus: string(name='PaymentStatus', description='paymentStatus'),
          region: string(name='Region', description='region'),
          config: string(name='Config', description='config'),
          quantity: string(name='Quantity', description='quantity'),
          usageStartTime: string(name='UsageStartTime', description='usageStartTime'),
          usageEndTime: string(name='UsageEndTime', description='usageEndTime'),
          instanceIDs: string(name='InstanceIDs', description='instanceIDs'),
          pretaxGrossAmount: string(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          pretaxAmount: string(name='PretaxAmount', description='pretaxAmount'),
          currency: string(name='Currency', description='currency'),
          pretaxAmountLocal: string(name='PretaxAmountLocal', description='pretaxAmountLocal'),
          tax: string(name='Tax', description='tax'),
          afterTaxAmount: string(name='AfterTaxAmount', description='afterTaxAmount'),
          paymentCurrency: string(name='PaymentCurrency', description='paymentCurrency'),
          operator: string(name='Operator', description='operator'),
          relatedOrderId: string(name='RelatedOrderId', description='relatedOrderId'),
          orderSubType: string(name='OrderSubType', description='orderSubType'),
          originalConfig: string(name='OriginalConfig', description='originalConfig'),
        }
      ](name='Order', description='Order'),
    }(name='OrderList', description='orderList'),
  }(name='Data', description='data'),
}

async function getOrderDetailEx(request: GetOrderDetailRequest, runtime: Util.RuntimeOptions): GetOrderDetailResponse {
  Util.validateModel(request);
  return doRequest('GetOrderDetail', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function getOrderDetail(request: GetOrderDetailRequest): GetOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderDetailEx(request, runtime);
}

model QueryOrdersRequest = {
  createTimeEnd?: string(name='CreateTimeEnd', description='createTimeEnd'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  productCode?: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType?: string(name='SubscriptionType', description='subscriptionType'),
  orderType?: string(name='OrderType', description='orderType'),
  paymentStatus?: string(name='PaymentStatus', description='paymentStatus'),
  createTimeStart?: string(name='CreateTimeStart', description='createTimeStart'),
  ownerId?: long(name='OwnerId', description='ownerId'),
}

model QueryOrdersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    hostName: string(name='HostName', description='hostName'),
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    orderList: {
      order: [
        {
          orderId: string(name='OrderId', description='orderId'),
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
          orderType: string(name='OrderType', description='orderType'),
          createTime: string(name='CreateTime', description='createTime'),
          paymentTime: string(name='PaymentTime', description='paymentTime'),
          paymentStatus: string(name='PaymentStatus', description='paymentStatus'),
          pretaxGrossAmount: string(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          pretaxAmount: string(name='PretaxAmount', description='pretaxAmount'),
          currency: string(name='Currency', description='currency'),
          pretaxAmountLocal: string(name='PretaxAmountLocal', description='pretaxAmountLocal'),
          tax: string(name='Tax', description='tax'),
          afterTaxAmount: string(name='AfterTaxAmount', description='afterTaxAmount'),
          paymentCurrency: string(name='PaymentCurrency', description='paymentCurrency'),
          relatedOrderId: string(name='RelatedOrderId', description='relatedOrderId'),
        }
      ](name='Order', description='Order'),
    }(name='OrderList', description='orderList'),
  }(name='Data', description='data'),
}

async function queryOrdersEx(request: QueryOrdersRequest, runtime: Util.RuntimeOptions): QueryOrdersResponse {
  Util.validateModel(request);
  return doRequest('QueryOrders', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryOrders(request: QueryOrdersRequest): QueryOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrdersEx(request, runtime);
}

model QueryMonthlyInstanceConsumptionRequest = {
  productCode?: string(name='ProductCode', description='productCode'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  billingCycle: string(name='BillingCycle', description='billingCycle'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType?: string(name='SubscriptionType', description='subscriptionType'),
}

model QueryMonthlyInstanceConsumptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    billingCycle: string(name='BillingCycle', description='billingCycle'),
    items: {
      item: [
        {
          instanceID: string(name='InstanceID', description='instanceID'),
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
          tag: string(name='Tag', description='tag'),
          resourceGroup: string(name='ResourceGroup', description='resourceGroup'),
          payerAccount: string(name='PayerAccount', description='payerAccount'),
          ownerID: string(name='OwnerID', description='ownerID'),
          region: string(name='Region', description='region'),
          pretaxGrossAmount: float(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          discountAmount: float(name='DiscountAmount', description='discountAmount'),
          pretaxAmount: float(name='PretaxAmount', description='pretaxAmount'),
          currency: string(name='Currency', description='currency'),
          pretaxAmountLocal: float(name='PretaxAmountLocal', description='pretaxAmountLocal'),
          tax: float(name='Tax', description='tax'),
          afterTaxAmount: float(name='AfterTaxAmount', description='afterTaxAmount'),
          paymentCurrency: string(name='PaymentCurrency', description='paymentCurrency'),
        }
      ](name='Item', description='Item'),
    }(name='Items', description='items'),
  }(name='Data', description='data'),
}

async function queryMonthlyInstanceConsumptionEx(request: QueryMonthlyInstanceConsumptionRequest, runtime: Util.RuntimeOptions): QueryMonthlyInstanceConsumptionResponse {
  Util.validateModel(request);
  return doRequest('QueryMonthlyInstanceConsumption', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryMonthlyInstanceConsumption(request: QueryMonthlyInstanceConsumptionRequest): QueryMonthlyInstanceConsumptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMonthlyInstanceConsumptionEx(request, runtime);
}

model QuerySettlementBillRequest = {
  pageSize?: integer(name='PageSize', description='pageSize'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  billingCycle: string(name='BillingCycle', description='billingCycle'),
  startTime?: string(name='StartTime', description='startTime'),
  endTime?: string(name='EndTime', description='endTime'),
  type?: string(name='Type', description='type'),
  productCode?: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType?: string(name='SubscriptionType', description='subscriptionType'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', description='isHideZeroCharge'),
}

model QuerySettlementBillResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    billingCycle: string(name='BillingCycle', description='billingCycle'),
    items: {
      item: [
        {
          recordID: string(name='RecordID', description='recordId'),
          item: string(name='Item', description='item'),
          payerAccount: string(name='PayerAccount', description='payerAccount'),
          ownerID: string(name='OwnerID', description='ownerId'),
          createTime: string(name='CreateTime', description='createTime'),
          usageStartTime: string(name='UsageStartTime', description='usageStartTime'),
          usageEndTime: string(name='UsageEndTime', description='usageEndTime'),
          suborderID: string(name='SuborderID', description='suborderId'),
          orderID: string(name='OrderID', description='orderId'),
          orderType: string(name='OrderType', description='orderType'),
          linkedCustomerOrderID: string(name='LinkedCustomerOrderID', description='linkedCustomerOrderId'),
          originalOrderID: string(name='OriginalOrderID', description='originalOrderId'),
          paymentTime: string(name='PaymentTime', description='paymentTime'),
          solutionID: string(name='SolutionID', description='solutionId'),
          solutionName: string(name='SolutionName', description='solutionName'),
          billID: string(name='BillID', description='billId'),
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
          region: string(name='Region', description='region'),
          config: string(name='Config', description='config'),
          quantity: string(name='Quantity', description='quantity'),
          pretaxGrossAmount: float(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          chargeDiscount: float(name='ChargeDiscount', description='chargeDiscount'),
          deductedByCoupons: float(name='DeductedByCoupons', description='deductedByCoupons'),
          accountDiscount: float(name='AccountDiscount', description='accountDiscount'),
          promotion: string(name='Promotion', description='promotion'),
          pretaxAmount: float(name='PretaxAmount', description='pretaxAmount'),
          currency: string(name='Currency', description='currency'),
          pretaxAmountLocal: float(name='PretaxAmountLocal', description='pretaxAmountLocal'),
          previousBillingCycleBalance: float(name='PreviousBillingCycleBalance', description='previousBillingCycleBalance'),
          tax: float(name='Tax', description='tax'),
          afterTaxAmount: float(name='AfterTaxAmount', description='afterTaxAmount'),
          status: string(name='Status', description='status'),
          clearedTime: string(name='ClearedTime', description='clearedTime'),
          outstandingAmount: float(name='OutstandingAmount', description='outstandingAmount'),
          deductedByCashCoupons: float(name='DeductedByCashCoupons', description='deductedByCashCoupons'),
          deductedByPrepaidCard: float(name='DeductedByPrepaidCard', description='deductedByPrepaidCard'),
          mybankPaymentAmount: float(name='MybankPaymentAmount', description='mybankPaymentAmount'),
          paymentAmount: float(name='PaymentAmount', description='paymentAmount'),
          paymentCurrency: string(name='PaymentCurrency', description='paymentCurrency'),
          seller: string(name='Seller', description='seller'),
          invoiceNo: string(name='InvoiceNo', description='invoiceNo'),
        }
      ](name='Item', description='Item'),
    }(name='Items', description='settleBillList'),
  }(name='Data', description='data'),
}

async function querySettlementBillEx(request: QuerySettlementBillRequest, runtime: Util.RuntimeOptions): QuerySettlementBillResponse {
  Util.validateModel(request);
  return doRequest('QuerySettlementBill', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function querySettlementBill(request: QuerySettlementBillRequest): QuerySettlementBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySettlementBillEx(request, runtime);
}

model QueryMonthlyBillRequest = {
  billingCycle: string(name='BillingCycle', description='billingCycle'),
}

model QueryMonthlyBillResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    outstandingAmount: float(name='OutstandingAmount', description='outstandingAmount'),
    totalOutstandingAmount: float(name='TotalOutstandingAmount', description='totalOutstandingAmount'),
    newInvoiceAmount: float(name='NewInvoiceAmount', description='newInvoiceAmount'),
    billingCycle: string(name='BillingCycle', description='billingCycle'),
    items: {
      item: [
        {
          item: string(name='Item', description='item'),
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
          solutionCode: string(name='SolutionCode', description='solutionCode'),
          solutionName: string(name='SolutionName', description='solutionName'),
          pretaxGrossAmount: float(name='PretaxGrossAmount', description='pretaxGrossAmount'),
          invoiceDiscount: float(name='InvoiceDiscount', description='invoiceDiscount'),
          deductedByCoupons: float(name='DeductedByCoupons', description='deductedByCoupons'),
          pretaxAmount: float(name='PretaxAmount', description='pretaxAmount'),
          currency: string(name='Currency', description='currency'),
          pretaxAmountLocal: float(name='PretaxAmountLocal', description='pretaxAmountLocal'),
          tax: float(name='Tax', description='tax'),
          afterTaxAmount: float(name='AfterTaxAmount', description='afterTaxAmount'),
          outstandingAmount: float(name='OutstandingAmount', description='outstandingAmount'),
          deductedByCashCoupons: float(name='DeductedByCashCoupons', description='deductedByCashCoupons'),
          deductedByPrepaidCard: float(name='DeductedByPrepaidCard', description='deductedByPrepaidCard'),
          paymentAmount: float(name='PaymentAmount', description='paymentAmount'),
          paymentCurrency: string(name='PaymentCurrency', description='paymentCurrency'),
        }
      ](name='Item', description='Item'),
    }(name='Items', description='items'),
  }(name='Data', description='data'),
}

async function queryMonthlyBillEx(request: QueryMonthlyBillRequest, runtime: Util.RuntimeOptions): QueryMonthlyBillResponse {
  Util.validateModel(request);
  return doRequest('QueryMonthlyBill', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryMonthlyBill(request: QueryMonthlyBillRequest): QueryMonthlyBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMonthlyBillEx(request, runtime);
}

model SetRenewalRequest = {
  renewalPeriod?: integer(name='RenewalPeriod', description='renewalPeriod'),
  instanceIDs: string(name='InstanceIDs', description='instanceIDs'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  productCode?: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType?: string(name='SubscriptionType', description='subscriptionType'),
  renewalPeriodUnit?: string(name='RenewalPeriodUnit', description='renewalPeriodUnit'),
  renewalStatus: string(name='RenewalStatus', description='renewalStatus'),
}

model SetRenewalResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function setRenewalEx(request: SetRenewalRequest, runtime: Util.RuntimeOptions): SetRenewalResponse {
  Util.validateModel(request);
  return doRequest('SetRenewal', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function setRenewal(request: SetRenewalRequest): SetRenewalResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRenewalEx(request, runtime);
}

model QueryAvailableInstancesRequest = {
  region?: string(name='Region', description='region'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  productCode?: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType?: string(name='SubscriptionType', description='subscriptionType'),
  instanceIDs?: string(name='InstanceIDs', description='instanceIDs'),
  endTimeStart?: string(name='EndTimeStart', description='endTimeStart'),
  endTimeEnd?: string(name='EndTimeEnd', description='endTimeEnd'),
  createTimeStart?: string(name='CreateTimeStart', description='createTimeStart'),
  createTimeEnd?: string(name='CreateTimeEnd', description='createTimeEnd'),
  renewStatus?: string(name='RenewStatus', description='renewStatus'),
}

model QueryAvailableInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    pageNum: integer(name='PageNum', description='pageNum'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    instanceList: [
      {
        ownerId: long(name='OwnerId', description='ownerId'),
        sellerId: long(name='SellerId', description='sellerId'),
        productCode: string(name='ProductCode', description='productCode'),
        productType: string(name='ProductType', description='productType'),
        subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
        instanceID: string(name='InstanceID', description='instanceID'),
        region: string(name='Region', description='region'),
        createTime: string(name='CreateTime', description='createTime'),
        endTime: string(name='EndTime', description='endTime'),
        stopTime: string(name='StopTime', description='stopTime'),
        releaseTime: string(name='ReleaseTime', description='releaseTime'),
        expectedReleaseTime: string(name='ExpectedReleaseTime', description='expectedReleaseTime'),
        status: string(name='Status', description='status'),
        subStatus: string(name='SubStatus', description='subStatus'),
        renewStatus: string(name='RenewStatus', description='renewStatus'),
        renewalDuration: integer(name='RenewalDuration', description='renewalDuration'),
        renewalDurationUnit: string(name='RenewalDurationUnit', description='renewalDurationUnit'),
        seller: string(name='Seller', description='seller'),
      }
    ](name='InstanceList', description='instanceList'),
  }(name='Data', description='data'),
}

async function queryAvailableInstancesEx(request: QueryAvailableInstancesRequest, runtime: Util.RuntimeOptions): QueryAvailableInstancesResponse {
  Util.validateModel(request);
  return doRequest('QueryAvailableInstances', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryAvailableInstances(request: QueryAvailableInstancesRequest): QueryAvailableInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAvailableInstancesEx(request, runtime);
}

model CreateResourcePackageRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  productCode?: string(name='ProductCode', description='productCode'),
  packageType?: string(name='PackageType', description='packageType'),
  effectiveDate?: string(name='EffectiveDate', description='effectiveDate'),
  specification?: string(name='Specification', description='specification'),
  duration?: integer(name='Duration', description='duration'),
  pricingCycle?: string(name='PricingCycle', description='pricingCycle'),
}

model CreateResourcePackageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: long(name='OrderId', description='orderId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    orderId: long(name='OrderId', description='orderId'),
    instanceId: string(name='InstanceId', description='instanceId'),
  }(name='Data', description='data'),
}

async function createResourcePackageEx(request: CreateResourcePackageRequest, runtime: Util.RuntimeOptions): CreateResourcePackageResponse {
  Util.validateModel(request);
  return doRequest('CreateResourcePackage', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function createResourcePackage(request: CreateResourcePackageRequest): CreateResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourcePackageEx(request, runtime);
}

model QueryResourcePackageInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  productCode?: string(name='ProductCode', description='productCode'),
  expiryTimeStart?: string(name='ExpiryTimeStart', description='expiryTimeStart'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', description='expiryTimeEnd'),
  pageNum?: integer(name='PageNum', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryResourcePackageInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  page: integer(name='Page', description='page'),
  pageSize: integer(name='PageSize', description='pageSize'),
  total: integer(name='Total', description='total'),
  data: {
    hostId: string(name='HostId', description='hostId'),
    pageNum: string(name='PageNum', description='pageNum'),
    pageSize: string(name='PageSize', description='pageSize'),
    totalCount: string(name='TotalCount', description='totalCount'),
    instances: {
      instance: [
        {
          instanceId: string(name='InstanceId', description='instanceId'),
          region: string(name='Region', description='region'),
          totalAmount: string(name='TotalAmount', description='totalAmount'),
          totalAmountUnit: string(name='TotalAmountUnit', description='totalAmountUnit'),
          remainingAmount: string(name='RemainingAmount', description='remainingAmount'),
          remainingAmountUnit: string(name='RemainingAmountUnit', description='remainingAmountUnit'),
          effectiveTime: string(name='EffectiveTime', description='effectiveFrom'),
          expiryTime: string(name='ExpiryTime', description='effectiveTo'),
          remark: string(name='Remark', description='remark'),
          packageType: string(name='PackageType', description='templateCode'),
          status: string(name='Status', description='status'),
          deductType: string(name='DeductType', description='deductType'),
          applicableProducts: {
            product: [ string ](name='Product', description='Product'),
          }(name='ApplicableProducts', description='resourceTypes'),
        }
      ](name='Instance', description='Instance'),
    }(name='Instances', description='instances'),
  }(name='Data', description='data'),
}

async function queryResourcePackageInstancesEx(request: QueryResourcePackageInstancesRequest, runtime: Util.RuntimeOptions): QueryResourcePackageInstancesResponse {
  Util.validateModel(request);
  return doRequest('QueryResourcePackageInstances', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryResourcePackageInstances(request: QueryResourcePackageInstancesRequest): QueryResourcePackageInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryResourcePackageInstancesEx(request, runtime);
}

model GetResourcePackagePriceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  productCode?: string(name='ProductCode', description='productCode'),
  packageType?: string(name='PackageType', description='packageType'),
  effectiveDate?: string(name='EffectiveDate', description='effectiveDate'),
  specification?: string(name='Specification', description='specification'),
  duration?: integer(name='Duration', description='duration'),
  pricingCycle?: string(name='PricingCycle', description='pricingCycle'),
  orderType?: string(name='OrderType', description='orderType'),
  instanceId?: string(name='InstanceId', description='instanceId'),
}

model GetResourcePackagePriceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    currency: string(name='Currency', description='currency'),
    originalPrice: float(name='OriginalPrice', description='originalPrice'),
    tradePrice: float(name='TradePrice', description='tradePrice'),
    discountPrice: float(name='DiscountPrice', description='discountPrice'),
    promotions: {
      promotion: [
        {
          id: long(name='Id', description='id'),
          name: string(name='Name', description='name'),
        }
      ](name='Promotion', description='Promotion'),
    }(name='Promotions', description='promotions'),
  }(name='Data', description='data'),
}

async function getResourcePackagePriceEx(request: GetResourcePackagePriceRequest, runtime: Util.RuntimeOptions): GetResourcePackagePriceResponse {
  Util.validateModel(request);
  return doRequest('GetResourcePackagePrice', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function getResourcePackagePrice(request: GetResourcePackagePriceRequest): GetResourcePackagePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourcePackagePriceEx(request, runtime);
}

model GetSubscriptionPriceRequest = {
  servicePeriodUnit?: string(name='ServicePeriodUnit', description='servicePeriodUnit'),
  subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  productCode: string(name='ProductCode', description='productCode'),
  orderType: string(name='OrderType', description='orderType'),
  servicePeriodQuantity?: integer(name='ServicePeriodQuantity', description='servicePeriodQuantity'),
  productType?: string(name='ProductType', description='productType'),
  region?: string(name='Region', description='region'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  moduleList: [
    {
      moduleCode: string(name='ModuleCode', description='moduleCode'),
      config: string(name='Config', description='config'),
      moduleStatus?: integer(name='ModuleStatus', description='moduleStatus'),
      tag?: string(name='Tag', description='tag'),
    }
  ](name='ModuleList', description='moduleList'),
  quantity?: integer(name='Quantity', description='quantity'),
}

model GetSubscriptionPriceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    originalPrice: float(name='OriginalPrice', description='originalPrice'),
    discountPrice: float(name='DiscountPrice', description='discountPrice'),
    tradePrice: float(name='TradePrice', description='tradePrice'),
    currency: string(name='Currency', description='currency'),
    quantity: integer(name='Quantity', description='quantity'),
    moduleDetails: {
      moduleDetail: [
        {
          moduleCode: string(name='ModuleCode', description='moduleCode'),
          originalCost: float(name='OriginalCost', description='originalCost'),
          invoiceDiscount: float(name='InvoiceDiscount', description='invoiceDiscount'),
          costAfterDiscount: float(name='CostAfterDiscount', description='costAfterDiscount'),
          unitPrice: float(name='UnitPrice', description='unitPrice'),
        }
      ](name='ModuleDetail', description='ModuleDetail'),
    }(name='ModuleDetails', description='moduleDetails'),
    promotionDetails: {
      promotionDetail: [
        {
          promotionName: string(name='PromotionName', description='promotionName'),
          promotionDesc: string(name='PromotionDesc', description='promotionDesc'),
          promotionId: long(name='PromotionId', description='promotionId'),
        }
      ](name='PromotionDetail', description='PromotionDetail'),
    }(name='PromotionDetails', description='promotionDetails'),
  }(name='Data', description='data'),
}

async function getSubscriptionPriceEx(request: GetSubscriptionPriceRequest, runtime: Util.RuntimeOptions): GetSubscriptionPriceResponse {
  Util.validateModel(request);
  return doRequest('GetSubscriptionPrice', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function getSubscriptionPrice(request: GetSubscriptionPriceRequest): GetSubscriptionPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubscriptionPriceEx(request, runtime);
}

model GetPayAsYouGoPriceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  productCode: string(name='ProductCode', description='productCode'),
  productType?: string(name='ProductType', description='productType'),
  subscriptionType: string(name='SubscriptionType', description='subscriptionType'),
  region?: string(name='Region', description='region'),
  moduleList: [
    {
      moduleCode: string(name='ModuleCode', description='moduleCode'),
      config: string(name='Config', description='config'),
      priceType: string(name='PriceType', description='priceType'),
    }
  ](name='ModuleList', description='moduleList'),
}

model GetPayAsYouGoPriceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    currency: string(name='Currency', description='currency'),
    moduleDetails: {
      moduleDetail: [
        {
          moduleCode: string(name='ModuleCode', description='moduleCode'),
          originalCost: float(name='OriginalCost', description='originalCost'),
          invoiceDiscount: float(name='InvoiceDiscount', description='invoiceDiscount'),
          costAfterDiscount: float(name='CostAfterDiscount', description='costAfterDiscount'),
          unitPrice: float(name='UnitPrice', description='unitPrice'),
        }
      ](name='ModuleDetail', description='ModuleDetail'),
    }(name='ModuleDetails', description='moduleDetails'),
    promotionDetails: {
      promotionDetail: [
        {
          promotionName: string(name='PromotionName', description='promotionName'),
          promotionDesc: string(name='PromotionDesc', description='promotionDesc'),
          promotionId: long(name='PromotionId', description='promotionId'),
        }
      ](name='PromotionDetail', description='PromotionDetail'),
    }(name='PromotionDetails', description='promotionDetails'),
  }(name='Data', description='data'),
}

async function getPayAsYouGoPriceEx(request: GetPayAsYouGoPriceRequest, runtime: Util.RuntimeOptions): GetPayAsYouGoPriceResponse {
  Util.validateModel(request);
  return doRequest('GetPayAsYouGoPrice', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function getPayAsYouGoPrice(request: GetPayAsYouGoPriceRequest): GetPayAsYouGoPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPayAsYouGoPriceEx(request, runtime);
}

model QueryPrepaidCardsRequest = {
  expiryTimeEnd?: string(name='ExpiryTimeEnd', description='expiryTimeEnd'),
  expiryTimeStart?: string(name='ExpiryTimeStart', description='expiryTimeStart'),
  effectiveOrNot?: boolean(name='EffectiveOrNot', description='effectiveOrNot'),
}

model QueryPrepaidCardsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    prepaidCard: [
      {
        prepaidCardId: long(name='PrepaidCardId', description='prepaidCardId'),
        prepaidCardNo: string(name='PrepaidCardNo', description='prepaidCardNo'),
        grantedTime: string(name='GrantedTime', description='grantedTime'),
        effectiveTime: string(name='EffectiveTime', description='effectiveTime'),
        expiryTime: string(name='ExpiryTime', description='expiryTime'),
        applicableProducts: string(name='ApplicableProducts', description='applicableProducts'),
        applicableScenarios: string(name='ApplicableScenarios', description='applicableScenarios'),
        nominalValue: string(name='NominalValue', description='nominalValue'),
        balance: string(name='Balance', description='balance'),
        status: string(name='Status', description='status'),
      }
    ](name='PrepaidCard', description='PrepaidCard'),
  }(name='Data', description='data'),
}

async function queryPrepaidCardsEx(request: QueryPrepaidCardsRequest, runtime: Util.RuntimeOptions): QueryPrepaidCardsResponse {
  Util.validateModel(request);
  return doRequest('QueryPrepaidCards', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryPrepaidCards(request: QueryPrepaidCardsRequest): QueryPrepaidCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPrepaidCardsEx(request, runtime);
}

model QueryCashCouponsRequest = {
  expiryTimeEnd?: string(name='ExpiryTimeEnd', description='expiryTimeEnd'),
  expiryTimeStart?: string(name='ExpiryTimeStart', description='expiryTimeStart'),
  effectiveOrNot?: boolean(name='EffectiveOrNot', description='effectiveOrNot'),
}

model QueryCashCouponsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    cashCoupon: [
      {
        cashCouponId: long(name='CashCouponId', description='cashCouponId'),
        cashCouponNo: string(name='CashCouponNo', description='cashCouponNo'),
        grantedTime: string(name='GrantedTime', description='grantedTime'),
        effectiveTime: string(name='EffectiveTime', description='effectiveTime'),
        expiryTime: string(name='ExpiryTime', description='expiryTime'),
        applicableProducts: string(name='ApplicableProducts', description='applicableProducts'),
        applicableScenarios: string(name='ApplicableScenarios', description='applicableScenarios'),
        nominalValue: string(name='NominalValue', description='nominalValue'),
        balance: string(name='Balance', description='balance'),
        status: string(name='Status', description='status'),
      }
    ](name='CashCoupon', description='CashCoupon'),
  }(name='Data', description='data'),
}

async function queryCashCouponsEx(request: QueryCashCouponsRequest, runtime: Util.RuntimeOptions): QueryCashCouponsResponse {
  Util.validateModel(request);
  return doRequest('QueryCashCoupons', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function queryCashCoupons(request: QueryCashCouponsRequest): QueryCashCouponsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCashCouponsEx(request, runtime);
}

model QueryAccountBalanceRequest = {
}

model QueryAccountBalanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    availableAmount: string(name='AvailableAmount', description='availableAmount'),
    availableCashAmount: string(name='AvailableCashAmount', description='availableCashAmount'),
    creditAmount: string(name='CreditAmount', description='creditAmount'),
    mybankCreditAmount: string(name='MybankCreditAmount', description='mybankCreditAmount'),
    currency: string(name='Currency', description='currency'),
  }(name='Data', description='data'),
}

async function queryAccountBalanceEx(request: QueryAccountBalanceRequest, runtime: Util.RuntimeOptions): QueryAccountBalanceResponse {
  Util.validateModel(request);
  return doRequest('QueryAccountBalance', 'HTTPS', 'POST', '2017-12-14', 'AK', null, request, runtime);
}

async function queryAccountBalance(request: QueryAccountBalanceRequest): QueryAccountBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountBalanceEx(request, runtime);
}

model DescribeResourcePackageProductRequest = {
  productCode?: string(name='ProductCode', description='productCode'),
}

model DescribeResourcePackageProductResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: long(name='OrderId', description='orderId'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    resourcePackages: {
      resourcePackage: [
        {
          productCode: string(name='ProductCode', description='productCode'),
          productType: string(name='ProductType', description='productType'),
          name: string(name='Name', description='name'),
          packageTypes: {
            packageType: [
              {
                name: string(name='Name', description='name'),
                code: string(name='Code', description='code'),
                properties: {
                  property: [
                    {
                      name: string(name='Name', description='name'),
                      value: string(name='Value', description='value'),
                    }
                  ](name='Property', description='Property'),
                }(name='Properties', description='properties'),
                specifications: {
                  specification: [
                    {
                      name: string(name='Name', description='name'),
                      value: string(name='Value', description='value'),
                      availableDurations: {
                        availableDuration: [
                          {
                            name: string(name='Name', description='name'),
                            value: integer(name='Value', description='value'),
                            unit: string(name='Unit', description='unit'),
                          }
                        ](name='AvailableDuration', description='AvailableDuration'),
                      }(name='AvailableDurations', description='availableDurations'),
                    }
                  ](name='Specification', description='Specification'),
                }(name='Specifications', description='specifications'),
              }
            ](name='PackageType', description='PackageType'),
          }(name='PackageTypes', description='packageTypes'),
        }
      ](name='ResourcePackage', description='ResourcePackage'),
    }(name='ResourcePackages', description='resourcePackages'),
  }(name='Data', description='data'),
}

async function describeResourcePackageProductEx(request: DescribeResourcePackageProductRequest, runtime: Util.RuntimeOptions): DescribeResourcePackageProductResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourcePackageProduct', 'HTTPS', 'POST', '2017-12-14', 'AK', request, null, runtime);
}

async function describeResourcePackageProduct(request: DescribeResourcePackageProductRequest): DescribeResourcePackageProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackageProductEx(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
