import * as $Util from '@alicloud/tea-util';
import Credential from '@alicloud/credentials';
import * as $tea from '@alicloud/tea-typescript';
export declare class Config extends $tea.Model {
    accessKeyId?: string;
    accessKeySecret?: string;
    network?: string;
    suffix?: string;
    securityToken?: string;
    endpoint?: string;
    protocol?: string;
    regionId?: string;
    productId?: string;
    userAgent?: string;
    readTimeout?: number;
    connectTimeout?: number;
    httpProxy?: string;
    httpsProxy?: string;
    noProxy?: string;
    credential?: Credential;
    socks5Proxy?: string;
    socks5NetWork?: string;
    maxIdleConns?: number;
    endpointType?: string;
    openPlatformEndpoint?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client {
    _endpoint: string;
    _regionId: string;
    _protocol: string;
    _userAgent: string;
    _endpointRule: string;
    _endpointMap: {
        [key: string]: string;
    };
    _suffix: string;
    _readTimeout: number;
    _connectTimeout: number;
    _httpProxy: string;
    _httpsProxy: string;
    _socks5Proxy: string;
    _socks5NetWork: string;
    _noProxy: string;
    _network: string;
    _productId: string;
    _maxIdleConns: number;
    _endpointType: string;
    _openPlatformEndpoint: string;
    _credential: Credential;
    constructor(config: Config);
    doRequest(action: string, protocol: string, method: string, version: string, authType: string, query: {
        [key: string]: any;
    }, body: {
        [key: string]: any;
    }, runtime: $Util.RuntimeOptions): Promise<{
        [key: string]: any;
    }>;
    getUserAgent(): string;
    getAccessKeyId(): Promise<string>;
    getAccessKeySecret(): Promise<string>;
    getSecurityToken(): Promise<string>;
    checkConfig(config: Config): void;
}
