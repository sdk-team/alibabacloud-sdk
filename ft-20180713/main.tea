import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'ft.aliyuncs.com',
    ap-south-1 = 'ft.aliyuncs.com',
    ap-southeast-1 = 'ft.aliyuncs.com',
    ap-southeast-2 = 'ft.aliyuncs.com',
    ap-southeast-3 = 'ft.aliyuncs.com',
    ap-southeast-5 = 'ft.aliyuncs.com',
    cn-beijing = 'ft.aliyuncs.com',
    cn-beijing-finance-1 = 'ft.aliyuncs.com',
    cn-beijing-finance-pop = 'ft.aliyuncs.com',
    cn-beijing-gov-1 = 'ft.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ft.aliyuncs.com',
    cn-chengdu = 'ft.aliyuncs.com',
    cn-edge-1 = 'ft.aliyuncs.com',
    cn-fujian = 'ft.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ft.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ft.aliyuncs.com',
    cn-hangzhou-finance = 'ft.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ft.aliyuncs.com',
    cn-hangzhou-test-306 = 'ft.aliyuncs.com',
    cn-hongkong-finance-pop = 'ft.aliyuncs.com',
    cn-huhehaote = 'ft.aliyuncs.com',
    cn-qingdao = 'ft.aliyuncs.com',
    cn-qingdao-nebula = 'ft.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ft.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ft.aliyuncs.com',
    cn-shanghai-finance-1 = 'ft.aliyuncs.com',
    cn-shanghai-inner = 'ft.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ft.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ft.aliyuncs.com',
    cn-shenzhen-inner = 'ft.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ft.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ft.aliyuncs.com',
    cn-wuhan = 'ft.aliyuncs.com',
    cn-yushanfang = 'ft.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ft.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ft.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ft.aliyuncs.com',
    eu-central-1 = 'ft.aliyuncs.com',
    eu-west-1 = 'ft.aliyuncs.com',
    eu-west-1-oxs = 'ft.aliyuncs.com',
    me-east-1 = 'ft.aliyuncs.com',
    rus-west-1-pop = 'ft.aliyuncs.com',
    us-west-1 = 'ft.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model TestFlowStrategy01Request = {
  names?: map[string]any(name='Names', description='names'),
}

model TestFlowStrategy01Response = {
  requestId: string(name='RequestId', description='RequestId'),
  list: [ string ] (name='List', description='List'),
  names: [ string ] (name='Names', description='Names'),
}

async function testFlowStrategy01WithOptions(request: TestFlowStrategy01Request, runtime: Util.RuntimeOptions): TestFlowStrategy01Response {
  Util.validateModel(request);
  return doRequest('TestFlowStrategy01', 'HTTPS', 'PUT', '2018-07-13', 'AK', null, request, runtime);
}

async function testFlowStrategy01(request: TestFlowStrategy01Request): TestFlowStrategy01Response {
  var runtime = new Util.RuntimeOptions{};
  return testFlowStrategy01WithOptions(request, runtime);
}

model TestHttpApiRequest = {
  stringValue?: map[string]any(name='StringValue', description='stringValue'),
  defaultValue?: map[string]any(name='DefaultValue', description='defaultValue'),
  otherParam?: map[string]any(name='OtherParam', description='otherParam'),
  booleanParam?: boolean(name='BooleanParam', description='booleanParam'),
}

model TestHttpApiResponse = {
  params: string(name='Params', description='Params'),
  serviceRpcSign: string(name='ServiceRpcSign', description='ServiceRpcSign'),
}

async function testHttpApiWithOptions(request: TestHttpApiRequest, runtime: Util.RuntimeOptions): TestHttpApiResponse {
  Util.validateModel(request);
  return doRequest('TestHttpApi', 'HTTPS', 'POST', '2018-07-13', 'AK', null, request, runtime);
}

async function testHttpApi(request: TestHttpApiRequest): TestHttpApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return testHttpApiWithOptions(request, runtime);
}

model BatchAuditTest01Request = {
  name?: string(name='Name', description='name'),
  batchAuditTest01?: string(name='BatchAuditTest01', description='BatchAuditTest01'),
  demo01?: string(name='Demo01', description='Demo01'),
  test010101?: boolean(name='Test010101', description='Test010101'),
}

model BatchAuditTest01Response = {
  requestId: string(name='RequestId', description='Params.requestId'),
  name: string(name='Name', description='Params.name'),
  demo01: {
    demo011: {
      demo011: [
        {
          demo0111: string(name='Demo0111', description='Demo01111'),
        }
      ](name='Demo011', description='Demo011'),
    }(name='Demo011', description='Demo011'),
  }(name='Demo01', description='Demo01'),
}

async function batchAuditTest01WithOptions(request: BatchAuditTest01Request, runtime: Util.RuntimeOptions): BatchAuditTest01Response {
  Util.validateModel(request);
  return doRequest('BatchAuditTest01', 'HTTPS', 'POST', '2018-07-13', 'Anonymous', null, request, runtime);
}

async function batchAuditTest01(request: BatchAuditTest01Request): BatchAuditTest01Response {
  var runtime = new Util.RuntimeOptions{};
  return batchAuditTest01WithOptions(request, runtime);
}

model FtIpFlowControlRequest = {
  name?: string(name='Name', description='name'),
}

model FtIpFlowControlResponse = {
  requestId: string(name='RequestId', description='Params.requestId'),
  name: string(name='Name', description='Params.name'),
}

async function ftIpFlowControlWithOptions(request: FtIpFlowControlRequest, runtime: Util.RuntimeOptions): FtIpFlowControlResponse {
  Util.validateModel(request);
  return doRequest('FtIpFlowControl', 'HTTPS', 'POST', '2018-07-13', 'Anonymous', null, request, runtime);
}

async function ftIpFlowControl(request: FtIpFlowControlRequest): FtIpFlowControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftIpFlowControlWithOptions(request, runtime);
}

model FtDynamicAddressDubboRequest = {
  intValue?: integer(name='IntValue', description='intValue'),
  stringValue?: string(name='StringValue', description='stringValue'),
}

model FtDynamicAddressDubboResponse = {
  requestId: string(name='RequestId', description='Params.requestId'),
  stringValue: string(name='StringValue', description='stringValue'),
  intValue: integer(name='IntValue', description='intValue'),
}

async function ftDynamicAddressDubboWithOptions(request: FtDynamicAddressDubboRequest, runtime: Util.RuntimeOptions): FtDynamicAddressDubboResponse {
  Util.validateModel(request);
  return doRequest('FtDynamicAddressDubbo', 'HTTPS', 'POST', '2018-07-13', 'AK', null, request, runtime);
}

async function ftDynamicAddressDubbo(request: FtDynamicAddressDubboRequest): FtDynamicAddressDubboResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftDynamicAddressDubboWithOptions(request, runtime);
}

model FtDynamicAddressHsfRequest = {
}

model FtDynamicAddressHsfResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function ftDynamicAddressHsfWithOptions(request: FtDynamicAddressHsfRequest, runtime: Util.RuntimeOptions): FtDynamicAddressHsfResponse {
  Util.validateModel(request);
  return doRequest('FtDynamicAddressHsf', 'HTTPS', 'POST', '2018-07-13', 'AK', null, request, runtime);
}

async function ftDynamicAddressHsf(request: FtDynamicAddressHsfRequest): FtDynamicAddressHsfResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftDynamicAddressHsfWithOptions(request, runtime);
}

model FtFlowSpecialRequest = {
  name?: string(name='Name', description='name'),
}

model FtFlowSpecialResponse = {
  requestId: string(name='RequestId', description='Params.requestId'),
  name: string(name='Name', description='Params.name'),
}

async function ftFlowSpecialWithOptions(request: FtFlowSpecialRequest, runtime: Util.RuntimeOptions): FtFlowSpecialResponse {
  Util.validateModel(request);
  return doRequest('FtFlowSpecial', 'HTTPS', 'POST', '2018-07-13', 'AK', null, request, runtime);
}

async function ftFlowSpecial(request: FtFlowSpecialRequest): FtFlowSpecialResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftFlowSpecialWithOptions(request, runtime);
}

model FTApiAliasApiRequest = {
  name?: string(name='Name', description='name'),
}

model FTApiAliasApiResponse = {
  requestId: string(name='RequestId', description='Params.requestId'),
  name: string(name='Name', description='Params.name'),
}

async function FTApiAliasApiWithOptions(request: FTApiAliasApiRequest, runtime: Util.RuntimeOptions): FTApiAliasApiResponse {
  Util.validateModel(request);
  return doRequest('FTApiAliasApi', 'HTTPS', 'POST', '2018-07-13', 'AK', null, request, runtime);
}

async function FTApiAliasApi(request: FTApiAliasApiRequest): FTApiAliasApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return FTApiAliasApiWithOptions(request, runtime);
}

model FtEagleEyeRequest = {
  name?: string(name='Name', description='name'),
}

model FtEagleEyeResponse = {
  requestId: string(name='RequestId', description='Params.requestId'),
  name: string(name='Name', description='Params.name'),
  eagleEyeTraceId: string(name='eagleEyeTraceId', description='Params.eagleEyeTraceId'),
}

async function ftEagleEyeWithOptions(request: FtEagleEyeRequest, runtime: Util.RuntimeOptions): FtEagleEyeResponse {
  Util.validateModel(request);
  return doRequest('FtEagleEye', 'HTTPS', 'POST', '2018-07-13', 'AK', null, request, runtime);
}

async function ftEagleEye(request: FtEagleEyeRequest): FtEagleEyeResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftEagleEyeWithOptions(request, runtime);
}

model FtParamListRequest = {
  name?: string(name='Name', description='name'),
  disk?: [
    {
      size: [ string ](name='Size', description='sizes'),
      type: [ string ](name='Type', description='types'),
    }
  ](name='Disk', description='disks'),
}

model FtParamListResponse = {
  requestId: string(name='RequestId', description='Params.requestId'),
  name: string(name='Name', description='Params.name'),
}

async function ftParamListWithOptions(request: FtParamListRequest, runtime: Util.RuntimeOptions): FtParamListResponse {
  Util.validateModel(request);
  return doRequest('FtParamList', 'HTTPS', 'POST', '2018-07-13', 'AK', null, request, runtime);
}

async function ftParamList(request: FtParamListRequest): FtParamListResponse {
  var runtime = new Util.RuntimeOptions{};
  return ftParamListWithOptions(request, runtime);
}

model FtGatedLaunchPolicy4Request = {
  isGatedLaunch?: string(name='IsGatedLaunch', description='isGatedLaunch'),
}

model FtGatedLaunchPolicy4Response = {
  requestId: string(name='RequestId', description='Params.requestId'),
  isGatedLaunch: string(name='IsGatedLaunch', description='Params.isGatedLaunch'),
}

async function ftGatedLaunchPolicy4WithOptions(request: FtGatedLaunchPolicy4Request, runtime: Util.RuntimeOptions): FtGatedLaunchPolicy4Response {
  Util.validateModel(request);
  return doRequest('FtGatedLaunchPolicy4', 'HTTPS', 'POST', '2018-07-13', 'AK', null, request, runtime);
}

async function ftGatedLaunchPolicy4(request: FtGatedLaunchPolicy4Request): FtGatedLaunchPolicy4Response {
  var runtime = new Util.RuntimeOptions{};
  return ftGatedLaunchPolicy4WithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
