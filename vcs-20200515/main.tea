import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetFaceOptionsRequest = {
  corpId?: string(name='CorpId', description='corpId'),
}

model GetFaceOptionsResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: [
    {
      key: string(name='Key', description='key'),
      name: string(name='Name', description='name'),
      optionList: [
        {
          key: string(name='Key', description='key'),
          name: string(name='Name', description='name'),
        }
      ](name='OptionList', description='optionList'),
    }
  ](name='Data', description='data'),
}

async function getFaceOptionsWithOptions(request: GetFaceOptionsRequest, runtime: Util.RuntimeOptions): GetFaceOptionsResponse {
  Util.validateModel(request);
  return doRequest('GetFaceOptions', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getFaceOptions(request: GetFaceOptionsRequest): GetFaceOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFaceOptionsWithOptions(request, runtime);
}

model GetBodyOptionsRequest = {
  corpId?: string(name='CorpId', description='corpId'),
}

model GetBodyOptionsResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: [
    {
      key: string(name='Key', description='key'),
      name: string(name='Name', description='name'),
      optionList: [
        {
          key: string(name='Key', description='key'),
          name: string(name='Name', description='name'),
        }
      ](name='OptionList', description='optionList'),
    }
  ](name='Data', description='data'),
}

async function getBodyOptionsWithOptions(request: GetBodyOptionsRequest, runtime: Util.RuntimeOptions): GetBodyOptionsResponse {
  Util.validateModel(request);
  return doRequest('GetBodyOptions', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getBodyOptions(request: GetBodyOptionsRequest): GetBodyOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBodyOptionsWithOptions(request, runtime);
}

model StopMonitorRequest = {
  taskId?: string(name='TaskId', description='taskId'),
}

model StopMonitorResponse = {
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
}

async function stopMonitorWithOptions(request: StopMonitorRequest, runtime: Util.RuntimeOptions): StopMonitorResponse {
  Util.validateModel(request);
  return doRequest('StopMonitor', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function stopMonitor(request: StopMonitorRequest): StopMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMonitorWithOptions(request, runtime);
}

model SearchBodyRequest = {
  corpId: string(name='CorpId', description='corpId'),
  gbId?: string(name='GbId', description='gbId'),
  startTimeStamp: long(name='StartTimeStamp', description='startTimestamp'),
  endTimeStamp: long(name='EndTimeStamp', description='endTimestamp'),
  pageNo: integer(name='PageNo', description='pageNo'),
  pageSize: integer(name='PageSize', description='pageSize'),
  optionList?: map[string]any(name='OptionList', description='optionList_json'),
}

model SearchBodyResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: {
    pageNo: integer(name='PageNo', description='pageNo'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    totalPage: integer(name='TotalPage', description='totalPage'),
    records: [
      {
        gbId: string(name='GbId', description='deviceGbId'),
        imageUrl: string(name='ImageUrl', description='imageUrl'),
        leftTopX: float(name='LeftTopX', description='leftTopX'),
        leftTopY: float(name='LeftTopY', description='leftTopY'),
        rightBottomX: float(name='RightBottomX', description='rightBtmX'),
        rightBottomY: float(name='RightBottomY', description='rightBtmY'),
        score: float(name='Score', description='score'),
        targetImageUrl: string(name='TargetImageUrl', description='targetImageUrl'),
      }
    ](name='Records', description='records'),
  }(name='Data', description='data'),
}

async function searchBodyWithOptions(request: SearchBodyRequest, runtime: Util.RuntimeOptions): SearchBodyResponse {
  Util.validateModel(request);
  return doRequest('SearchBody', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function searchBody(request: SearchBodyRequest): SearchBodyResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchBodyWithOptions(request, runtime);
}

model AddMonitorRequest = {
  corpId?: string(name='CorpId', description='corpId'),
  monitorType?: string(name='MonitorType', description='taskType'),
  description?: string(name='Description', description='remark'),
  batchIndicator?: integer(name='BatchIndicator', description='createNewTable'),
}

model AddMonitorResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  data: {
    taskId: string(name='TaskId', description='taskId'),
  }(name='Data', description='data'),
}

async function addMonitorWithOptions(request: AddMonitorRequest, runtime: Util.RuntimeOptions): AddMonitorResponse {
  Util.validateModel(request);
  return doRequest('AddMonitor', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addMonitor(request: AddMonitorRequest): AddMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMonitorWithOptions(request, runtime);
}

model GetMonitorResultRequest = {
  corpId: string(name='CorpId', description='corpId'),
  taskId: string(name='TaskId', description='taskId'),
  minRecordId?: string(name='MinRecordId', description='minId'),
  startTime?: long(name='StartTime', description='startTime'),
  endTime?: long(name='EndTime', description='endTime'),
}

model GetMonitorResultResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: {
    maxId: string(name='MaxId', description='maxId'),
    records: [
      {
        rightBottomY: string(name='RightBottomY', description='yxjyzb'),
        rightBottomX: string(name='RightBottomX', description='yxjxzb'),
        leftUpY: string(name='LeftUpY', description='zsjyzb'),
        leftUpX: string(name='LeftUpX', description='zsjxzb'),
        gbId: string(name='GbId', description='sxtid'),
        score: string(name='Score', description='xsd'),
        picUrl: string(name='PicUrl', description='cjtid'),
        shotTime: string(name='ShotTime', description='bdsj'),
        monitorPicUrl: string(name='MonitorPicUrl', description='bktid'),
      }
    ](name='Records', description='vcsRealMatchResultDOS'),
  }(name='Data', description='data'),
}

async function getMonitorResultWithOptions(request: GetMonitorResultRequest, runtime: Util.RuntimeOptions): GetMonitorResultResponse {
  Util.validateModel(request);
  return doRequest('GetMonitorResult', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getMonitorResult(request: GetMonitorResultRequest): GetMonitorResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMonitorResultWithOptions(request, runtime);
}

model UpdateMonitorRequest = {
  corpId?: string(name='CorpId', description='corpId'),
  taskId?: string(name='TaskId', description='taskId'),
  ruleName?: string(name='RuleName', description='ruleName'),
  deviceOperateType?: string(name='DeviceOperateType', description='cameraOperType'),
  deviceList?: string(name='DeviceList', description='cameraIdList'),
  picOperateType?: string(name='PicOperateType', description='picOperType'),
  picList?: string(name='PicList', description='picList'),
  attributeOperateType?: string(name='AttributeOperateType', description='attrOperType'),
  attributeName?: string(name='AttributeName', description='attrName'),
  attributeValueList?: string(name='AttributeValueList', description='attrValueList'),
  description?: string(name='Description', description='remark'),
  ruleExpression?: string(name='RuleExpression', description='rawExpression'),
}

model UpdateMonitorResponse = {
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
}

async function updateMonitorWithOptions(request: UpdateMonitorRequest, runtime: Util.RuntimeOptions): UpdateMonitorResponse {
  Util.validateModel(request);
  return doRequest('UpdateMonitor', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateMonitor(request: UpdateMonitorRequest): UpdateMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMonitorWithOptions(request, runtime);
}

model GetDeviceVideoUrlRequest = {
  corpId: string(name='CorpId', description='corpId'),
  gbId?: string(name='GbId', description='gbId'),
  startTime?: long(name='StartTime', description='startTimestamp'),
  endTime?: long(name='EndTime', description='endTimestamp'),
}

model GetDeviceVideoUrlResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  url: string(name='Url', description='data'),
}

async function getDeviceVideoUrlWithOptions(request: GetDeviceVideoUrlRequest, runtime: Util.RuntimeOptions): GetDeviceVideoUrlResponse {
  Util.validateModel(request);
  return doRequest('GetDeviceVideoUrl', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getDeviceVideoUrl(request: GetDeviceVideoUrlRequest): GetDeviceVideoUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceVideoUrlWithOptions(request, runtime);
}

model GetInventoryRequest = {
  commodityCode?: string(name='CommodityCode', description='commodityCode'),
}

model GetInventoryResponse = {
  success: boolean(name='Success', description='Success'),
  data: {
    resultObject: [
      {
        buyerId: string(name='BuyerId', description='buyerId'),
        commodityCode: string(name='CommodityCode', description='commodityCode'),
        currentInventory: string(name='CurrentInventory', description='currentInventory'),
        validEndTime: string(name='ValidEndTime', description='gmtValidEndTime'),
        validStartTime: string(name='ValidStartTime', description='gmtValidStartTime'),
        instanceId: string(name='InstanceId', description='instanceId'),
        inventoryId: string(name='InventoryId', description='inventoryId'),
      }
    ](name='ResultObject', description='resultObject'),
  }(name='Data', description='Data'),
}

async function getInventoryWithOptions(request: GetInventoryRequest, runtime: Util.RuntimeOptions): GetInventoryResponse {
  Util.validateModel(request);
  return doRequest('GetInventory', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getInventory(request: GetInventoryRequest): GetInventoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInventoryWithOptions(request, runtime);
}

model RecognizeImageRequest = {
  corpId: string(name='CorpId', description='corpId'),
  picContent: string(name='PicContent', description='picContent'),
  picFormat: string(name='PicFormat', description='picFormat'),
}

model RecognizeImageResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: {
    bodyList: [
      {
        feature: string(name='Feature', description='feature'),
        fileName: string(name='FileName', description='fileName'),
        imageBaseSixFour: string(name='ImageBaseSixFour', description='imgBase64'),
        leftTopX: string(name='LeftTopX', description='leftTopX'),
        leftTopY: string(name='LeftTopY', description='leftTopY'),
        localFeature: string(name='LocalFeature', description='localFeature'),
        respiratorColor: string(name='RespiratorColor', description='respiratorColor'),
        rightBottomX: string(name='RightBottomX', description='rightBtmX'),
        rightBottomY: string(name='RightBottomY', description='rightBtmY'),
      }
    ](name='BodyList', description='bodyList'),
    faceList: [
      {
        feature: string(name='Feature', description='feature'),
        fileName: string(name='FileName', description='fileName'),
        imageBaseSixFour: string(name='ImageBaseSixFour', description='imgBase64'),
        leftTopX: string(name='LeftTopX', description='leftTopX'),
        leftTopY: string(name='LeftTopY', description='leftTopY'),
        localFeature: string(name='LocalFeature', description='localFeature'),
        respiratorColor: string(name='RespiratorColor', description='respiratorColor'),
        rightBottomX: string(name='RightBottomX', description='rightBtmX'),
        rightBottomY: string(name='RightBottomY', description='rightBtmY'),
      }
    ](name='FaceList', description='faceList'),
  }(name='Data', description='data'),
}

async function recognizeImageWithOptions(request: RecognizeImageRequest, runtime: Util.RuntimeOptions): RecognizeImageResponse {
  Util.validateModel(request);
  return doRequest('RecognizeImage', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function recognizeImage(request: RecognizeImageRequest): RecognizeImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeImageWithOptions(request, runtime);
}

model ListCorpsRequest = {
  pageNumber: integer(name='PageNumber', description='pageNo'),
  pageSize: integer(name='PageSize', description='pageSize'),
}

model ListCorpsResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: {
    pageNumber: integer(name='PageNumber', description='pageNo'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    totalPage: integer(name='TotalPage', description='totalPage'),
    records: [
      {
        corpId: string(name='CorpId', description='corpId'),
        corpName: string(name='CorpName', description='corpName'),
        description: string(name='Description', description='description'),
        createDate: string(name='CreateDate', description='gmtCreate'),
        parentCorpId: string(name='ParentCorpId', description='parentCorpId'),
        appName: string(name='AppName', description='isvName'),
        deviceCount: integer(name='DeviceCount', description='deviceCount'),
      }
    ](name='Records', description='records'),
  }(name='Data', description='data'),
}

async function listCorpsWithOptions(request: ListCorpsRequest, runtime: Util.RuntimeOptions): ListCorpsResponse {
  Util.validateModel(request);
  return doRequest('ListCorps', 'HTTPS', 'POST', '2020-05-15', 'AK,APP', null, request, runtime);
}

async function listCorps(request: ListCorpsRequest): ListCorpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpsWithOptions(request, runtime);
}

model UpdateCorpRequest = {
  corpId?: string(name='CorpId', description='corpId'),
  corpName?: string(name='CorpName', description='corpName'),
  appName?: string(name='AppName', description='isvName'),
  parentCorpId?: string(name='ParentCorpId', description='parentCorpId'),
  description?: string(name='Description', description='description'),
}

model UpdateCorpResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='data'),
}

async function updateCorpWithOptions(request: UpdateCorpRequest, runtime: Util.RuntimeOptions): UpdateCorpResponse {
  Util.validateModel(request);
  return doRequest('UpdateCorp', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateCorp(request: UpdateCorpRequest): UpdateCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCorpWithOptions(request, runtime);
}

model UpdateDeviceRequest = {
  gbId?: string(name='GbId', description='gbId'),
  deviceName?: string(name='DeviceName', description='name'),
  deviceType?: string(name='DeviceType', description='type'),
  deviceAddress?: string(name='DeviceAddress', description='installAddress'),
  deviceSite?: string(name='DeviceSite', description='installSite'),
  deviceDirection?: string(name='DeviceDirection', description='installDirection'),
  deviceResolution?: string(name='DeviceResolution', description='resolution'),
  bitRate?: string(name='BitRate', description='bitRate'),
  corpId?: string(name='CorpId', description='corpId'),
  vendor?: string(name='Vendor', description='vendor'),
}

model UpdateDeviceResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='data'),
}

async function updateDeviceWithOptions(request: UpdateDeviceRequest, runtime: Util.RuntimeOptions): UpdateDeviceResponse {
  Util.validateModel(request);
  return doRequest('UpdateDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function updateDevice(request: UpdateDeviceRequest): UpdateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceWithOptions(request, runtime);
}

model ListDevicesRequest = {
  corpId?: string(name='CorpId', description='corpId'),
  gbId?: string(name='GbId', description='gbId'),
  deviceName?: string(name='DeviceName', description='name'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model ListDevicesResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: {
    pageNumber: integer(name='PageNumber', description='pageNo'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    totalPage: integer(name='TotalPage', description='totalPage'),
    records: [
      {
        accessProtocolType: string(name='AccessProtocolType', description='accessProtocolType'),
        bitRate: string(name='BitRate', description='bitRate'),
        coverImageUrl: string(name='CoverImageUrl', description='CoverImgUrl'),
        gbId: string(name='GbId', description='gbId'),
        deviceAddress: string(name='DeviceAddress', description='installAddress'),
        deviceDirection: string(name='DeviceDirection', description='installDirection'),
        deviceSite: string(name='DeviceSite', description='installSite'),
        latitude: string(name='Latitude', description='latitude'),
        longitude: string(name='Longitude', description='longitude'),
        deviceName: string(name='DeviceName', description='name'),
        resolution: string(name='Resolution', description='resolution'),
        sipGBId: string(name='SipGBId', description='sipGbId'),
        sipPassword: string(name='SipPassword', description='sipPassword'),
        sipServerIp: string(name='SipServerIp', description='sipServerIp'),
        sipServerPort: string(name='SipServerPort', description='sipServerPort'),
        status: integer(name='Status', description='status'),
        deviceType: string(name='DeviceType', description='type'),
        vendor: string(name='Vendor', description='vendor'),
        createTime: string(name='CreateTime', description='gmtCreate'),
      }
    ](name='Records', description='records'),
  }(name='Data', description='data'),
}

async function listDevicesWithOptions(request: ListDevicesRequest, runtime: Util.RuntimeOptions): ListDevicesResponse {
  Util.validateModel(request);
  return doRequest('ListDevices', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicesWithOptions(request, runtime);
}

model GetDeviceLiveUrlRequest = {
  corpId: string(name='CorpId', description='corpId'),
  gbId?: string(name='GbId', description='gbId'),
}

model GetDeviceLiveUrlResponse = {
  code: string(name='Code', description='code'),
  url: string(name='Url', description='data'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getDeviceLiveUrlWithOptions(request: GetDeviceLiveUrlRequest, runtime: Util.RuntimeOptions): GetDeviceLiveUrlResponse {
  Util.validateModel(request);
  return doRequest('GetDeviceLiveUrl', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function getDeviceLiveUrl(request: GetDeviceLiveUrlRequest): GetDeviceLiveUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceLiveUrlWithOptions(request, runtime);
}

model SearchFaceRequest = {
  corpId: string(name='CorpId', description='corpId'),
  gbId?: string(name='GbId', description='gbId'),
  startTimeStamp: long(name='StartTimeStamp', description='startTimestamp'),
  endTimeStamp: long(name='EndTimeStamp', description='endTimestamp'),
  pageNo: integer(name='PageNo', description='pageNo'),
  pageSize: integer(name='PageSize', description='pageSize'),
  optionList?: map[string]any(name='OptionList', description='optionList_json'),
}

model SearchFaceResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: {
    pageNo: integer(name='PageNo', description='pageNo'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalCount: integer(name='TotalCount', description='totalCount'),
    totalPage: integer(name='TotalPage', description='totalPage'),
    records: [
      {
        gbId: string(name='GbId', description='deviceGbId'),
        imageUrl: string(name='ImageUrl', description='imageUrl'),
        leftTopX: float(name='LeftTopX', description='leftTopX'),
        leftTopY: float(name='LeftTopY', description='leftTopY'),
        rightBottomX: float(name='RightBottomX', description='rightBtmX'),
        rightBottomY: float(name='RightBottomY', description='rightBtmY'),
        score: float(name='Score', description='score'),
        targetImageUrl: string(name='TargetImageUrl', description='targetImageUrl'),
      }
    ](name='Records', description='records'),
  }(name='Data', description='data'),
}

async function searchFaceWithOptions(request: SearchFaceRequest, runtime: Util.RuntimeOptions): SearchFaceResponse {
  Util.validateModel(request);
  return doRequest('SearchFace', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function searchFace(request: SearchFaceRequest): SearchFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchFaceWithOptions(request, runtime);
}

model AddDeviceRequest = {
  gbId?: string(name='GbId', description='gbId'),
  deviceName?: string(name='DeviceName', description='name'),
  deviceType?: string(name='DeviceType', description='type'),
  deviceAddress?: string(name='DeviceAddress', description='installAddress'),
  deviceSite?: string(name='DeviceSite', description='installSite'),
  deviceDirection?: string(name='DeviceDirection', description='installDirection'),
  deviceResolution?: string(name='DeviceResolution', description='resolution'),
  bitRate?: string(name='BitRate', description='bitRate'),
  corpId?: string(name='CorpId', description='corpId'),
  vendor?: string(name='Vendor', description='vendor'),
}

model AddDeviceResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='data'),
}

async function addDeviceWithOptions(request: AddDeviceRequest, runtime: Util.RuntimeOptions): AddDeviceResponse {
  Util.validateModel(request);
  return doRequest('AddDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function addDevice(request: AddDeviceRequest): AddDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDeviceWithOptions(request, runtime);
}

model CreateCorpRequest = {
  corpName: string(name='CorpName', description='corpName'),
  appName: string(name='AppName', description='isvName'),
  parentCorpId?: string(name='ParentCorpId', description='parentCorpId'),
  description?: string(name='Description', description='description'),
}

model CreateCorpResponse = {
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  requestId: string(name='RequestId', description='requestId'),
  corpId: string(name='CorpId', description='data'),
}

async function createCorpWithOptions(request: CreateCorpRequest, runtime: Util.RuntimeOptions): CreateCorpResponse {
  Util.validateModel(request);
  return doRequest('CreateCorp', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function createCorp(request: CreateCorpRequest): CreateCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpWithOptions(request, runtime);
}

model DeleteDeviceRequest = {
  corpId?: string(name='CorpId', description='corpId'),
  gbId?: string(name='GbId', description='gbId'),
}

model DeleteDeviceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
  message: string(name='Message', description='message'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  return doRequest('DeleteDevice', 'HTTPS', 'POST', '2020-05-15', 'AK', null, request, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
