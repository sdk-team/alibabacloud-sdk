import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'rds.aliyuncs.com',
    cn-beijing = 'rds.aliyuncs.com',
    cn-hangzhou = 'rds.aliyuncs.com',
    cn-shanghai = 'rds.aliyuncs.com',
    cn-shenzhen = 'rds.aliyuncs.com',
    cn-hongkong = 'rds.aliyuncs.com',
    ap-southeast-1 = 'rds.aliyuncs.com',
    us-west-1 = 'rds.aliyuncs.com',
    us-east-1 = 'rds.aliyuncs.com',
    cn-shanghai-finance-1 = 'rds.aliyuncs.com',
    cn-shenzhen-finance-1 = 'rds.aliyuncs.com',
    cn-north-2-gov-1 = 'rds.aliyuncs.com',
    ap-northeast-2-pop = 'rds.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'rds.aliyuncs.com',
    cn-beijing-finance-pop = 'rds.aliyuncs.com',
    cn-beijing-gov-1 = 'rds.aliyuncs.com',
    cn-beijing-nu16-b01 = 'rds.aliyuncs.com',
    cn-edge-1 = 'rds.aliyuncs.com',
    cn-fujian = 'rds.aliyuncs.com',
    cn-haidian-cm12-c01 = 'rds.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'rds.aliyuncs.com',
    cn-hangzhou-finance = 'rds.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'rds.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'rds.aliyuncs.com',
    cn-hangzhou-test-306 = 'rds.aliyuncs.com',
    cn-hongkong-finance-pop = 'rds.aliyuncs.com',
    cn-qingdao-nebula = 'rds.aliyuncs.com',
    cn-shanghai-et15-b01 = 'rds.aliyuncs.com',
    cn-shanghai-et2-b01 = 'rds.aliyuncs.com',
    cn-shanghai-inner = 'rds.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'rds.aliyuncs.com',
    cn-shenzhen-inner = 'rds.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'rds.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'rds.aliyuncs.com',
    cn-wuhan = 'rds.aliyuncs.com',
    cn-yushanfang = 'rds.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'rds.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'rds.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'rds.aliyuncs.com',
    eu-west-1-oxs = 'rds.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'rds.ap-northeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeDedicatedHostImageCategoriesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  hostGroup: string(name='HostGroup', description='dedicatedHostGroupId'),
}

model DescribeDedicatedHostImageCategoriesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  images: {
    images: [
      {
        imageName: string(name='ImageName', description='imageName'),
        imageCode: string(name='ImageCode', description='imageCode'),
      }
    ](name='Images', description='Images'),
  }(name='Images', description='data.itemList'),
}

async function describeDedicatedHostImageCategoriesWithOptions(request: DescribeDedicatedHostImageCategoriesRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostImageCategoriesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDedicatedHostImageCategories', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDedicatedHostImageCategories(request: DescribeDedicatedHostImageCategoriesRequest): DescribeDedicatedHostImageCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostImageCategoriesWithOptions(request, runtime);
}

model DescribeCrossBackupMetaListRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  backupSetId: string(name='BackupSetId', description='backupSetId'),
  getDbName?: string(name='GetDbName', description='getDbName'),
  pattern?: string(name='Pattern', description='pattern'),
  pageSize?: string(name='PageSize', description='pageSize'),
  pageIndex?: string(name='PageIndex', description='pageIndex'),
  region?: string(name='Region', description='region'),
}

model DescribeCrossBackupMetaListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceName: string(name='DBInstanceName', description='data.dbInstanceName'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageRecordCount: integer(name='PageRecordCount', description='data.pageRecordCount'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecordCount'),
  totalPageCount: integer(name='TotalPageCount', description='data.totalPageCount'),
  items: {
    meta: [
      {
        database: string(name='Database', description='database'),
        tables: string(name='Tables', description='tables'),
        size: string(name='Size', description='size'),
      }
    ](name='Meta', description='Meta'),
  }(name='Items', description='data.items'),
}

async function describeCrossBackupMetaListWithOptions(request: DescribeCrossBackupMetaListRequest, runtime: Util.RuntimeOptions): DescribeCrossBackupMetaListResponse {
  Util.validateModel(request);
  return doRequest('DescribeCrossBackupMetaList', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeCrossBackupMetaList(request: DescribeCrossBackupMetaListRequest): DescribeCrossBackupMetaListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCrossBackupMetaListWithOptions(request, runtime);
}

model RestoreDdrTableRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  regionId?: string(name='RegionId', description='regionId'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  restoreType: string(name='RestoreType', description='restoreType'),
  backupId?: string(name='BackupId', description='backupId'),
  restoreTime?: string(name='RestoreTime', description='restoreTime'),
  sourceRegion?: string(name='SourceRegion', description='sourceRegion'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName', description='sourceDBInstanceName'),
  tableMeta?: string(name='TableMeta', description='tableMeta'),
}

model RestoreDdrTableResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function restoreDdrTableWithOptions(request: RestoreDdrTableRequest, runtime: Util.RuntimeOptions): RestoreDdrTableResponse {
  Util.validateModel(request);
  return doRequest('RestoreDdrTable', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function restoreDdrTable(request: RestoreDdrTableRequest): RestoreDdrTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreDdrTableWithOptions(request, runtime);
}

model ModifyDBProxyEndpointAddressRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBProxyEndpointId: string(name='DBProxyEndpointId', description='dbProxyEndpointId'),
  DBProxyNewConnectString?: string(name='DBProxyNewConnectString', description='dbProxyNewConnectString'),
  DBProxyNewConnectStringPort?: string(name='DBProxyNewConnectStringPort', description='dbProxyNewConnectStringPort'),
  DBProxyConnectStringNetType?: string(name='DBProxyConnectStringNetType', description='dbProxyConnectStringNetType'),
}

model ModifyDBProxyEndpointAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBProxyEndpointAddressWithOptions(request: ModifyDBProxyEndpointAddressRequest, runtime: Util.RuntimeOptions): ModifyDBProxyEndpointAddressResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBProxyEndpointAddress', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBProxyEndpointAddress(request: ModifyDBProxyEndpointAddressRequest): ModifyDBProxyEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBProxyEndpointAddressWithOptions(request, runtime);
}

model TerminateMigrateTaskRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  migrateTaskId: string(name='MigrateTaskId', description='migrateTaskId'),
}

model TerminateMigrateTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function terminateMigrateTaskWithOptions(request: TerminateMigrateTaskRequest, runtime: Util.RuntimeOptions): TerminateMigrateTaskResponse {
  Util.validateModel(request);
  return doRequest('TerminateMigrateTask', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function terminateMigrateTask(request: TerminateMigrateTaskRequest): TerminateMigrateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateMigrateTaskWithOptions(request, runtime);
}

model DescribeLocalAvailableRecoveryTimeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  region?: string(name='Region', description='region'),
}

model DescribeLocalAvailableRecoveryTimeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  recoveryBeginTime: string(name='RecoveryBeginTime', description='data.recoveryBeginTime'),
  recoveryEndTime: string(name='RecoveryEndTime', description='data.recoveryEndTime'),
}

async function describeLocalAvailableRecoveryTimeWithOptions(request: DescribeLocalAvailableRecoveryTimeRequest, runtime: Util.RuntimeOptions): DescribeLocalAvailableRecoveryTimeResponse {
  Util.validateModel(request);
  return doRequest('DescribeLocalAvailableRecoveryTime', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeLocalAvailableRecoveryTime(request: DescribeLocalAvailableRecoveryTimeRequest): DescribeLocalAvailableRecoveryTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLocalAvailableRecoveryTimeWithOptions(request, runtime);
}

model DescribeAvailableZonesRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  engine: string(name='Engine', description='engine'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  engineVersion?: string(name='EngineVersion', description='version'),
}

model DescribeAvailableZonesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  availableZones: [
    {
      regionId: string(name='RegionId', description='regionId'),
      zoneId: string(name='ZoneId', description='zoneId'),
      networkTypes: string(name='NetworkTypes', description='networkTypes'),
      supportedEngines: [
        {
          engine: string(name='Engine', description='engine'),
          supportedEngineVersions: [
            {
              version: string(name='Version', description='version'),
              supportedCategorys: [
                {
                  category: string(name='Category', description='category'),
                  supportedStorageTypes: [
                    {
                      storageType: string(name='StorageType', description='dbInstanceStorageType'),
                    }
                  ](name='SupportedStorageTypes', description='storageTypes'),
                }
              ](name='SupportedCategorys', description='categorys'),
            }
          ](name='SupportedEngineVersions', description='versions'),
        }
      ](name='SupportedEngines', description='engines'),
    }
  ](name='AvailableZones', description='data.availableZones'),
}

async function describeAvailableZonesWithOptions(request: DescribeAvailableZonesRequest, runtime: Util.RuntimeOptions): DescribeAvailableZonesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableZones', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeAvailableZones(request: DescribeAvailableZonesRequest): DescribeAvailableZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableZonesWithOptions(request, runtime);
}

model DescribeAvailableClassesRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  zoneId: string(name='ZoneId', description='zoneId'),
  instanceChargeType: string(name='InstanceChargeType', description='chargeType'),
  engine: string(name='Engine', description='engine'),
  engineVersion: string(name='EngineVersion', description='version'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  orderType?: string(name='OrderType', description='orderType'),
  DBInstanceStorageType: string(name='DBInstanceStorageType', description='storageType'),
  category: string(name='Category', description='category'),
}

model DescribeAvailableClassesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceClasses: [
    {
      DBInstanceClass: string(name='DBInstanceClass', description='value'),
      storageRange: string(name='StorageRange', description='storageRange'),
      DBInstanceStorageRange: {
        maxValue: integer(name='MaxValue', description='max'),
        minValue: integer(name='MinValue', description='min'),
        step: integer(name='Step', description='step'),
      }(name='DBInstanceStorageRange', description='range'),
    }
  ](name='DBInstanceClasses', description='data'),
}

async function describeAvailableClassesWithOptions(request: DescribeAvailableClassesRequest, runtime: Util.RuntimeOptions): DescribeAvailableClassesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableClasses', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeAvailableClasses(request: DescribeAvailableClassesRequest): DescribeAvailableClassesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableClassesWithOptions(request, runtime);
}

model CreateDedicatedHostAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  dedicatedHostId: string(name='DedicatedHostId', description='DedicatedHostId'),
  accountName: string(name='AccountName', description='AccountName'),
  accountPassword: string(name='AccountPassword', description='AccountPassword'),
  regionId?: string(name='RegionId', description='RegionId'),
}

model CreateDedicatedHostAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createDedicatedHostAccountWithOptions(request: CreateDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostAccountResponse {
  Util.validateModel(request);
  return doRequest('CreateDedicatedHostAccount', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createDedicatedHostAccount(request: CreateDedicatedHostAccountRequest): CreateDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostAccountWithOptions(request, runtime);
}

model DeleteDedicatedHostAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  dedicatedHostId: string(name='DedicatedHostId', description='DedicatedHostId'),
  accountName: string(name='AccountName', description='AccountName'),
  regionId?: string(name='RegionId', description='RegionId'),
}

model DeleteDedicatedHostAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDedicatedHostAccountWithOptions(request: DeleteDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostAccountResponse {
  Util.validateModel(request);
  return doRequest('DeleteDedicatedHostAccount', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function deleteDedicatedHostAccount(request: DeleteDedicatedHostAccountRequest): DeleteDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostAccountWithOptions(request, runtime);
}

model ModifyDedicatedHostAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  dedicatedHostId: string(name='DedicatedHostId', description='DedicatedHostId'),
  accountName: string(name='AccountName', description='AccountName'),
  accountPassword: string(name='AccountPassword', description='AccountPassword'),
  regionId?: string(name='RegionId', description='RegionId'),
}

model ModifyDedicatedHostAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDedicatedHostAccountWithOptions(request: ModifyDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAccountResponse {
  Util.validateModel(request);
  return doRequest('ModifyDedicatedHostAccount', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDedicatedHostAccount(request: ModifyDedicatedHostAccountRequest): ModifyDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAccountWithOptions(request, runtime);
}

model CreateDedicatedHostUserRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  dedicatedHostName: string(name='DedicatedHostName', description='dedicatedHostName'),
  userName: string(name='UserName', description='userName'),
  userPassword: string(name='UserPassword', description='userPassword'),
  regionId?: string(name='RegionId', description='regionId'),
}

model CreateDedicatedHostUserResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createDedicatedHostUserWithOptions(request: CreateDedicatedHostUserRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostUserResponse {
  Util.validateModel(request);
  return doRequest('CreateDedicatedHostUser', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createDedicatedHostUser(request: CreateDedicatedHostUserRequest): CreateDedicatedHostUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostUserWithOptions(request, runtime);
}

model ModifyDedicatedHostUserRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  dedicatedHostName: string(name='DedicatedHostName', description='dedicatedHostName'),
  userName: string(name='UserName', description='userName'),
  oldPassword: string(name='OldPassword', description='oldPassword'),
  newPassword: string(name='NewPassword', description='newPassword'),
  regionId?: string(name='RegionId', description='regionId'),
}

model ModifyDedicatedHostUserResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDedicatedHostUserWithOptions(request: ModifyDedicatedHostUserRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostUserResponse {
  Util.validateModel(request);
  return doRequest('ModifyDedicatedHostUser', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDedicatedHostUser(request: ModifyDedicatedHostUserRequest): ModifyDedicatedHostUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostUserWithOptions(request, runtime);
}

model DropDedicatedHostUserRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  dedicatedHostName: string(name='DedicatedHostName', description='dedicatedHostName'),
  userName: string(name='UserName', description='userName'),
  regionId?: string(name='RegionId', description='regionId'),
}

model DropDedicatedHostUserResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function dropDedicatedHostUserWithOptions(request: DropDedicatedHostUserRequest, runtime: Util.RuntimeOptions): DropDedicatedHostUserResponse {
  Util.validateModel(request);
  return doRequest('DropDedicatedHostUser', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function dropDedicatedHostUser(request: DropDedicatedHostUserRequest): DropDedicatedHostUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return dropDedicatedHostUserWithOptions(request, runtime);
}

model UpgradeDBProxyInstanceKernelVersionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  upgradeTime?: string(name='UpgradeTime', description='switchTimeMode'),
  switchTime?: string(name='SwitchTime', description='switchTime'),
}

model UpgradeDBProxyInstanceKernelVersionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceName: string(name='DBInstanceName', description='data.dbInstanceName'),
  taskId: string(name='TaskId', description='data.taskId'),
  targetMinorVersion: string(name='TargetMinorVersion', description='data.targetMinorVersion'),
}

async function upgradeDBProxyInstanceKernelVersionWithOptions(request: UpgradeDBProxyInstanceKernelVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBProxyInstanceKernelVersionResponse {
  Util.validateModel(request);
  return doRequest('UpgradeDBProxyInstanceKernelVersion', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function upgradeDBProxyInstanceKernelVersion(request: UpgradeDBProxyInstanceKernelVersionRequest): UpgradeDBProxyInstanceKernelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBProxyInstanceKernelVersionWithOptions(request, runtime);
}

model StopDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  regionId: string(name='RegionId', description='regionId'),
}

model StopDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function stopDBInstanceWithOptions(request: StopDBInstanceRequest, runtime: Util.RuntimeOptions): StopDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('StopDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function stopDBInstance(request: StopDBInstanceRequest): StopDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDBInstanceWithOptions(request, runtime);
}

model StartDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster', description='targetDedicatedHostIdForMaster'),
  targetDedicatedHostIdForSlave?: string(name='TargetDedicatedHostIdForSlave', description='targetDedicatedHostIdForSlave'),
  targetDedicatedHostIdForLog?: string(name='TargetDedicatedHostIdForLog', description='targetDedicatedHostIdForLog'),
  effectiveTime?: string(name='EffectiveTime', description='effectiveTime'),
  specifiedTime?: string(name='SpecifiedTime', description='specifiedTime'),
  targetDBInstanceClass?: string(name='TargetDBInstanceClass', description='targetDBInstanceClass'),
  engineVersion?: string(name='EngineVersion', description='engineVersion'),
  DBInstanceTransType?: integer(name='DBInstanceTransType', description='dbInstanceTransType'),
  storage?: integer(name='Storage', description='storage'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  zoneId?: string(name='ZoneId', description='zoneId'),
}

model StartDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: integer(name='TaskId', description='data.taskId'),
  migrationId: integer(name='MigrationId', description='data.migrationId'),
}

async function startDBInstanceWithOptions(request: StartDBInstanceRequest, runtime: Util.RuntimeOptions): StartDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('StartDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function startDBInstance(request: StartDBInstanceRequest): StartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDBInstanceWithOptions(request, runtime);
}

model DescribeSignedEventActionsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  beginEventId?: integer(name='BeginEventId', description='beginEventId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeSignedEventActionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  nextPageEventId: integer(name='NextPageEventId', description='data.nextPageEventId'),
  pageRecordCount: integer(name='PageRecordCount', description='data.pageRecordCount'),
  fromBegin: boolean(name='FromBegin', description='data.fromBegin'),
  toEnd: boolean(name='ToEnd', description='data.toEnd'),
  eventItems: {
    eventItems: [
      {
        eventId: integer(name='EventId', description='eventId'),
        eventContent: string(name='EventContent', description='eventContent'),
        eventSig: string(name='EventSig', description='eventSig'),
        eventRcpt: string(name='EventRcpt', description='eventRcpt'),
      }
    ](name='EventItems', description='EventItems'),
  }(name='EventItems', description='data.eventItems'),
}

async function describeSignedEventActionsWithOptions(request: DescribeSignedEventActionsRequest, runtime: Util.RuntimeOptions): DescribeSignedEventActionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSignedEventActions', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSignedEventActions(request: DescribeSignedEventActionsRequest): DescribeSignedEventActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignedEventActionsWithOptions(request, runtime);
}

model SignEventActionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  eventId: integer(name='EventId', description='eventId'),
  eventSig: string(name='EventSig', description='eventSig'),
}

model SignEventActionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  eventId: string(name='EventId', description='data.eventId'),
  eventRcpt: string(name='EventRcpt', description='data.eventRcpt'),
}

async function signEventActionWithOptions(request: SignEventActionRequest, runtime: Util.RuntimeOptions): SignEventActionResponse {
  Util.validateModel(request);
  return doRequest('SignEventAction', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function signEventAction(request: SignEventActionRequest): SignEventActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return signEventActionWithOptions(request, runtime);
}

model DescribeNextEventForSignRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
}

model DescribeNextEventForSignResponse = {
  requestId: string(name='RequestId', description='requestId'),
  eventItems: {
    eventItems: [
      {
        eventId: integer(name='EventId', description='eventId'),
        eventContent: string(name='EventContent', description='eventContent'),
      }
    ](name='EventItems', description='EventItems'),
  }(name='EventItems', description='data.eventItems'),
}

async function describeNextEventForSignWithOptions(request: DescribeNextEventForSignRequest, runtime: Util.RuntimeOptions): DescribeNextEventForSignResponse {
  Util.validateModel(request);
  return doRequest('DescribeNextEventForSign', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeNextEventForSign(request: DescribeNextEventForSignRequest): DescribeNextEventForSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNextEventForSignWithOptions(request, runtime);
}

model ModifyActionEventVerifyPolicyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  userPublicKey: string(name='UserPublicKey', description='userPublicKey'),
}

model ModifyActionEventVerifyPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  serverPublicKey: string(name='ServerPublicKey', description='data.serverPublicKey'),
}

async function modifyActionEventVerifyPolicyWithOptions(request: ModifyActionEventVerifyPolicyRequest, runtime: Util.RuntimeOptions): ModifyActionEventVerifyPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyActionEventVerifyPolicy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyActionEventVerifyPolicy(request: ModifyActionEventVerifyPolicyRequest): ModifyActionEventVerifyPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyActionEventVerifyPolicyWithOptions(request, runtime);
}

model DescribeDBInstancesOverviewRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  proxyId?: string(name='ProxyId', description='proxyId'),
  engine?: string(name='Engine', description='dbType'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  expired?: string(name='Expired', description='expired'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  regionId: string(name='RegionId', description='region'),
}

model DescribeDBInstancesOverviewResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regions: {
    regionModel: [
      {
        region: string(name='Region', description='region'),
        engineCount: string(name='EngineCount', description='engineCount'),
        totalCount: integer(name='TotalCount', description='totalCount'),
        typeModels: {
          typeModel: [
            {
              instanceDateType: string(name='InstanceDateType', description='instanceDateType'),
              count: integer(name='Count', description='count'),
              instanceModels: {
                instanceModel: [
                  {
                    DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
                    region: string(name='Region', description='region'),
                    zoneId: string(name='ZoneId', description='zoneId'),
                    engine: string(name='Engine', description='engine'),
                    payType: string(name='PayType', description='payType'),
                    createdTime: string(name='CreatedTime', description='createdTime'),
                    expireTime: string(name='ExpireTime', description='expireTime'),
                    lockMode: string(name='LockMode', description='lockMode'),
                    DBInstanceStatus: string(name='DBInstanceStatus', description='statusDesc'),
                  }
                ](name='InstanceModel', description='InstanceModel'),
              }(name='InstanceModels', description='instanceModels'),
            }
          ](name='TypeModel', description='TypeModel'),
        }(name='TypeModels', description='typeModel'),
      }
    ](name='RegionModel', description='RegionModel'),
  }(name='Regions', description='data'),
}

async function describeDBInstancesOverviewWithOptions(request: DescribeDBInstancesOverviewRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesOverviewResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstancesOverview', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstancesOverview(request: DescribeDBInstancesOverviewRequest): DescribeDBInstancesOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesOverviewWithOptions(request, runtime);
}

model DescribeMigrateTaskByIdRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  migrateTaskId: string(name='MigrateTaskId', description='migrateTaskId'),
}

model DescribeMigrateTaskByIdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceName: string(name='DBInstanceName', description='data.dbInstanceId'),
  DBName: string(name='DBName', description='data.dbName'),
  migrateTaskId: string(name='MigrateTaskId', description='data.migrateTaskId'),
  createTime: string(name='CreateTime', description='data.createTime'),
  endTime: string(name='EndTime', description='data.endTime'),
  backupMode: string(name='BackupMode', description='data.backupMode'),
  status: string(name='Status', description='data.status'),
  isDBReplaced: string(name='IsDBReplaced', description='data.isDBReplaced'),
  description: string(name='Description', description='data.description'),
}

async function describeMigrateTaskByIdWithOptions(request: DescribeMigrateTaskByIdRequest, runtime: Util.RuntimeOptions): DescribeMigrateTaskByIdResponse {
  Util.validateModel(request);
  return doRequest('DescribeMigrateTaskById', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeMigrateTaskById(request: DescribeMigrateTaskByIdRequest): DescribeMigrateTaskByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrateTaskByIdWithOptions(request, runtime);
}

model DeleteBackupFileRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  backupId?: string(name='BackupId', description='backupId'),
  DBName?: string(name='DBName', description='dbName'),
  backupTime?: string(name='BackupTime', description='backupTime'),
}

model DeleteBackupFileResponse = {
  requestId: string(name='RequestId', description='requestId'),
  deletedBaksetIds: {
    deletedBaksetIds: [ integer ](name='DeletedBaksetIds', description='DeletedBaksetIds'),
  }(name='DeletedBaksetIds', description='data.deletedBaksetIds'),
}

async function deleteBackupFileWithOptions(request: DeleteBackupFileRequest, runtime: Util.RuntimeOptions): DeleteBackupFileResponse {
  Util.validateModel(request);
  return doRequest('DeleteBackupFile', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function deleteBackupFile(request: DeleteBackupFileRequest): DeleteBackupFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupFileWithOptions(request, runtime);
}

model DescribeDetachedBackupsRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  backupId?: string(name='BackupId', description='backupId'),
  backupStatus?: string(name='BackupStatus', description='backupSetStatus'),
  backupMode?: string(name='BackupMode', description='jobMode'),
  startTime?: string(name='StartTime', description='startTime'),
  endTime?: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  region: string(name='Region', description='region'),
}

model DescribeDetachedBackupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: string(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: string(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: string(name='PageRecordCount', description='data.backupsetNumbers'),
  totalBackupSize: long(name='TotalBackupSize', description='data.totalBackupSize'),
  items: {
    backup: [
      {
        backupId: string(name='BackupId', description='backupSetId'),
        DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
        backupStatus: string(name='BackupStatus', description='backupSetStatus'),
        backupStartTime: string(name='BackupStartTime', description='backupStartTime'),
        backupEndTime: string(name='BackupEndTime', description='backupEndTime'),
        backupType: string(name='BackupType', description='backupType'),
        backupMode: string(name='BackupMode', description='jobMode'),
        backupMethod: string(name='BackupMethod', description='backupMethod'),
        backupDownloadURL: string(name='BackupDownloadURL', description='backupDownloadURL'),
        backupIntranetDownloadURL: string(name='BackupIntranetDownloadURL', description='backupIntranetDownloadURL'),
        backupLocation: string(name='BackupLocation', description='backupsetLocation'),
        backupExtractionStatus: string(name='BackupExtractionStatus', description='dataExtractionStatus'),
        backupScale: string(name='BackupScale', description='backupSetScale'),
        backupDBNames: string(name='BackupDBNames', description='backupDbList'),
        totalBackupSize: long(name='TotalBackupSize', description='totalBackupSize'),
        backupSize: long(name='BackupSize', description='backupSetSize'),
        hostInstanceID: string(name='HostInstanceID', description='instanceID'),
        storeStatus: string(name='StoreStatus', description='storeStatus'),
        metaStatus: string(name='MetaStatus', description='metaStatus'),
        slaveStatus: string(name='SlaveStatus', description='slaveStatus'),
        consistentTime: long(name='ConsistentTime', description='consistentTime'),
      }
    ](name='Backup', description='Backup'),
  }(name='Items', description='data.backupsetItems'),
}

async function describeDetachedBackupsWithOptions(request: DescribeDetachedBackupsRequest, runtime: Util.RuntimeOptions): DescribeDetachedBackupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDetachedBackups', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDetachedBackups(request: DescribeDetachedBackupsRequest): DescribeDetachedBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDetachedBackupsWithOptions(request, runtime);
}

model EvaluateDedicatedHostInstanceResourceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  diskType?: string(name='DiskType', description='diskType'),
  diskSize?: string(name='DiskSize', description='diskSize'),
  instanceClassNames: string(name='InstanceClassNames', description='instanceClassNames'),
  engine: string(name='Engine', description='engine'),
  engineVersion: string(name='EngineVersion', description='engineVersion'),
}

model EvaluateDedicatedHostInstanceResourceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceClass: string(name='DBInstanceClass', description='data.dbInstanceClass'),
  available: integer(name='Available', description='data.available'),
}

async function evaluateDedicatedHostInstanceResourceWithOptions(request: EvaluateDedicatedHostInstanceResourceRequest, runtime: Util.RuntimeOptions): EvaluateDedicatedHostInstanceResourceResponse {
  Util.validateModel(request);
  return doRequest('EvaluateDedicatedHostInstanceResource', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function evaluateDedicatedHostInstanceResource(request: EvaluateDedicatedHostInstanceResourceRequest): EvaluateDedicatedHostInstanceResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return evaluateDedicatedHostInstanceResourceWithOptions(request, runtime);
}

model DescribeAvailableDedicatedHostClassesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  zoneId: string(name='ZoneId', description='zoneId'),
  storageType?: string(name='StorageType', description='storageType'),
}

model DescribeAvailableDedicatedHostClassesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  hostClasses: {
    hostClasses: [
      {
        hostClassName: string(name='HostClassName', description='hostClassName'),
        description: string(name='Description', description='description'),
      }
    ](name='HostClasses', description='HostClasses'),
  }(name='HostClasses', description='data.hostClasses'),
}

async function describeAvailableDedicatedHostClassesWithOptions(request: DescribeAvailableDedicatedHostClassesRequest, runtime: Util.RuntimeOptions): DescribeAvailableDedicatedHostClassesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableDedicatedHostClasses', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeAvailableDedicatedHostClasses(request: DescribeAvailableDedicatedHostClassesRequest): DescribeAvailableDedicatedHostClassesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableDedicatedHostClassesWithOptions(request, runtime);
}

model DescribeAvailableDedicatedHostZonesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
}

model DescribeAvailableDedicatedHostZonesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  zones: {
    dedicatedHostZones: [
      {
        zoneId: string(name='ZoneId', description='zoneId'),
        description: string(name='Description', description='description'),
      }
    ](name='DedicatedHostZones', description='DedicatedHostZones'),
  }(name='Zones', description='data.zones'),
}

async function describeAvailableDedicatedHostZonesWithOptions(request: DescribeAvailableDedicatedHostZonesRequest, runtime: Util.RuntimeOptions): DescribeAvailableDedicatedHostZonesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableDedicatedHostZones', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeAvailableDedicatedHostZones(request: DescribeAvailableDedicatedHostZonesRequest): DescribeAvailableDedicatedHostZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableDedicatedHostZonesWithOptions(request, runtime);
}

model ReleaseInstanceConnectionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  currentConnectionString: string(name='CurrentConnectionString', description='connectionString'),
  instanceNetworkType: string(name='InstanceNetworkType', description='instanceNetworkType'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ReleaseInstanceConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function releaseInstanceConnectionWithOptions(request: ReleaseInstanceConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstanceConnectionResponse {
  Util.validateModel(request);
  return doRequest('ReleaseInstanceConnection', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function releaseInstanceConnection(request: ReleaseInstanceConnectionRequest): ReleaseInstanceConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceConnectionWithOptions(request, runtime);
}

model UnlockAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
}

model UnlockAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function unlockAccountWithOptions(request: UnlockAccountRequest, runtime: Util.RuntimeOptions): UnlockAccountResponse {
  Util.validateModel(request);
  return doRequest('UnlockAccount', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function unlockAccount(request: UnlockAccountRequest): UnlockAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return unlockAccountWithOptions(request, runtime);
}

model LockAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
}

model LockAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function lockAccountWithOptions(request: LockAccountRequest, runtime: Util.RuntimeOptions): LockAccountResponse {
  Util.validateModel(request);
  return doRequest('LockAccount', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function lockAccount(request: LockAccountRequest): LockAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return lockAccountWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  resourceType: string(name='ResourceType', description='resourceType'),
  nextToken?: string(name='NextToken', description='nextToken'),
  resourceId?: [ string ](name='ResourceId', description='resourceIdList'),
  tag?: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagList'),
}

model ListTagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  nextToken: string(name='NextToken', description='data.nextToken'),
  tagResources: {
    tagResource: [
      {
        tagKey: string(name='TagKey', description='key'),
        tagValue: string(name='TagValue', description='value'),
        resourceType: string(name='ResourceType', description='resourceType'),
        resourceId: string(name='ResourceId', description='resourceId'),
      }
    ](name='TagResource', description='TagResource'),
  }(name='TagResources', description='data.resources'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  resourceType: string(name='ResourceType', description='resourceType'),
  resourceId: [ string ](name='ResourceId', description='resourceIdList'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagList'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  resourceType: string(name='ResourceType', description='resourceType'),
  all?: boolean(name='All', description='all'),
  resourceId: [ string ](name='ResourceId', description='resourceIdList'),
  tagKey?: [ string ](name='TagKey', description='tagKeys'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model DescribeDedicatedHostGroupsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
}

model DescribeDedicatedHostGroupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  dedicatedHostGroups: {
    dedicatedHostGroups: [
      {
        dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
        dedicatedHostGroupDesc: string(name='DedicatedHostGroupDesc', description='dedicatedHostGroupDesc'),
        cpuAllocationRatio: integer(name='CpuAllocationRatio', description='cpuAllocationRatio'),
        memAllocationRatio: integer(name='MemAllocationRatio', description='memAllocationRatio'),
        diskAllocationRatio: integer(name='DiskAllocationRatio', description='diskAllocationRatio'),
        allocationPolicy: string(name='AllocationPolicy', description='allocationPolicy'),
        hostReplacePolicy: string(name='HostReplacePolicy', description='hostReplacePolicy'),
        createTime: string(name='CreateTime', description='createTime'),
        VPCId: string(name='VPCId', description='vpcId'),
        hostNumber: integer(name='HostNumber', description='hostNumber'),
        instanceNumber: integer(name='InstanceNumber', description='instanceNumber'),
        engine: string(name='Engine', description='engine'),
        text: string(name='Text', description='text'),
        dedicatedHostCountGroupByHostType: map[string]any(name='DedicatedHostCountGroupByHostType', description='dedicatedHostCountGroupByHostType'),
        bastionInstanceId: string(name='BastionInstanceId', description='bastionInstanceId'),
        openPermission: string(name='OpenPermission', description='openPermission'),
        zoneIDList: {
          zoneIDList: [ string ](name='ZoneIDList', description='ZoneIDList'),
        }(name='ZoneIDList', description='zoneIDList'),
      }
    ](name='DedicatedHostGroups', description='DedicatedHostGroups'),
  }(name='DedicatedHostGroups', description='data.itemList'),
}

async function describeDedicatedHostGroupsWithOptions(request: DescribeDedicatedHostGroupsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDedicatedHostGroups', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDedicatedHostGroups(request: DescribeDedicatedHostGroupsRequest): DescribeDedicatedHostGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostGroupsWithOptions(request, runtime);
}

model CreateDedicatedHostGroupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  engine: string(name='Engine', description='engine'),
  cpuAllocationRatio?: integer(name='CpuAllocationRatio', description='cpuAllocationRatio'),
  memAllocationRatio?: integer(name='MemAllocationRatio', description='memAllocationRatio'),
  diskAllocationRatio?: integer(name='DiskAllocationRatio', description='diskAllocationRatio'),
  allocationPolicy?: string(name='AllocationPolicy', description='allocationPolicy'),
  VPCId: string(name='VPCId', description='vpcId'),
  hostReplacePolicy?: string(name='HostReplacePolicy', description='hostReplacePolicy'),
  clientToken: string(name='ClientToken', description='clientToken'),
  openPermission?: integer(name='OpenPermission', description='openPermission'),
}

model CreateDedicatedHostGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='data.dedicatedHostGroupId'),
}

async function createDedicatedHostGroupWithOptions(request: CreateDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateDedicatedHostGroup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createDedicatedHostGroup(request: CreateDedicatedHostGroupRequest): CreateDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostGroupWithOptions(request, runtime);
}

model DeleteDedicatedHostGroupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  regionId?: string(name='RegionId', description='regionId'),
}

model DeleteDedicatedHostGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDedicatedHostGroupWithOptions(request: DeleteDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteDedicatedHostGroup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function deleteDedicatedHostGroup(request: DeleteDedicatedHostGroupRequest): DeleteDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostGroupWithOptions(request, runtime);
}

model ModifyDedicatedHostGroupAttributeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', description='dedicatedHostGroupDesc'),
  cpuAllocationRatio?: integer(name='CpuAllocationRatio', description='cpuAllocationRatio'),
  memAllocationRatio?: integer(name='MemAllocationRatio', description='memAllocationRatio'),
  diskAllocationRatio?: integer(name='DiskAllocationRatio', description='diskAllocationRatio'),
  allocationPolicy?: string(name='AllocationPolicy', description='allocationPolicy'),
  hostReplacePolicy?: string(name='HostReplacePolicy', description='hostReplacePolicy'),
}

model ModifyDedicatedHostGroupAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDedicatedHostGroupAttributeWithOptions(request: ModifyDedicatedHostGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostGroupAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDedicatedHostGroupAttribute', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDedicatedHostGroupAttribute(request: ModifyDedicatedHostGroupAttributeRequest): ModifyDedicatedHostGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostGroupAttributeWithOptions(request, runtime);
}

model RestartDedicatedHostRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
  failoverMode: string(name='FailoverMode', description='failoverMode'),
}

model RestartDedicatedHostResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: integer(name='TaskId', description='data.taskId'),
  dedicatedHostId: string(name='DedicatedHostId', description='data.dedicatedHostId'),
}

async function restartDedicatedHostWithOptions(request: RestartDedicatedHostRequest, runtime: Util.RuntimeOptions): RestartDedicatedHostResponse {
  Util.validateModel(request);
  return doRequest('RestartDedicatedHost', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function restartDedicatedHost(request: RestartDedicatedHostRequest): RestartDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDedicatedHostWithOptions(request, runtime);
}

model ReplaceDedicatedHostRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
  failoverMode: string(name='FailoverMode', description='failoverMode'),
}

model ReplaceDedicatedHostResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: integer(name='TaskId', description='data.taskId'),
  dedicatedHostId: string(name='DedicatedHostId', description='data.dedicatedHostId'),
}

async function replaceDedicatedHostWithOptions(request: ReplaceDedicatedHostRequest, runtime: Util.RuntimeOptions): ReplaceDedicatedHostResponse {
  Util.validateModel(request);
  return doRequest('ReplaceDedicatedHost', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function replaceDedicatedHost(request: ReplaceDedicatedHostRequest): ReplaceDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceDedicatedHostWithOptions(request, runtime);
}

model DescribeDedicatedHostsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  orderId?: long(name='OrderId', description='orderId'),
  hostType?: string(name='HostType', description='hostType'),
}

model DescribeDedicatedHostsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='data.dedicatedHostGroupId'),
  dedicatedHosts: {
    dedicatedHosts: [
      {
        hostName: string(name='HostName', description='hostName'),
        hostStatus: string(name='HostStatus', description='hostStatus'),
        instanceNumber: string(name='InstanceNumber', description='instanceNumber'),
        CPUAllocationRatio: string(name='CPUAllocationRatio', description='cpuAllocationRatio'),
        memAllocationRatio: string(name='MemAllocationRatio', description='memAllocationRatio'),
        diskAllocationRatio: string(name='DiskAllocationRatio', description='diskAllocationRatio'),
        VPCId: string(name='VPCId', description='vpcId'),
        VSwitchId: string(name='VSwitchId', description='vswitchId'),
        zoneId: string(name='ZoneId', description='zoneId'),
        IPAddress: string(name='IPAddress', description='ipAddress'),
        hostClass: string(name='HostClass', description='hostClass'),
        createdTime: string(name='CreatedTime', description='createdTime'),
        dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
        allocationStatus: string(name='AllocationStatus', description='allocationStatus'),
        endTime: string(name='EndTime', description='endTime'),
        hostType: string(name='HostType', description='hostType'),
        bastionInstanceId: string(name='BastionInstanceId', description='bastionInstanceId'),
        openPermission: string(name='OpenPermission', description='openPermission'),
        accountName: string(name='AccountName', description='userAccount'),
        hostCPU: string(name='HostCPU', description='hostCPU'),
        hostMem: string(name='HostMem', description='hostMem'),
        hostStorage: string(name='HostStorage', description='hostStorage'),
        cpuUsed: string(name='CpuUsed', description='cpuUsed'),
        memoryUsed: string(name='MemoryUsed', description='memoryUsed'),
        storageUsed: string(name='StorageUsed', description='storageUsed'),
        imageCategory: string(name='ImageCategory', description='imageCategory'),
      }
    ](name='DedicatedHosts', description='DedicatedHosts'),
  }(name='DedicatedHosts', description='data.dedicatedHosts'),
}

async function describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDedicatedHosts', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsWithOptions(request, runtime);
}

model DescribeDedicatedHostAttributeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
}

model DescribeDedicatedHostAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='data.dedicatedHostGroupId'),
  dedicatedHostId: string(name='DedicatedHostId', description='data.dedicatedHostId'),
  regionId: string(name='RegionId', description='data.regionId'),
  zoneId: string(name='ZoneId', description='data.zoneId'),
  VPCId: string(name='VPCId', description='data.vpcId'),
  VSwitchId: string(name='VSwitchId', description='data.vswitchId'),
  IPAddress: string(name='IPAddress', description='data.ipAddress'),
  hostName: string(name='HostName', description='data.hostName'),
  hostStatus: string(name='HostStatus', description='data.hostStatus'),
  hostClass: string(name='HostClass', description='data.hostClass'),
  hostCPU: integer(name='HostCPU', description='data.hostCPU'),
  hostMem: integer(name='HostMem', description='data.hostMem'),
  hostStorage: integer(name='HostStorage', description='data.hostStorage'),
  CPUAllocationRatio: string(name='CPUAllocationRatio', description='data.cpuAllocationRatio'),
  memAllocationRatio: string(name='MemAllocationRatio', description='data.memAllocationRatio'),
  diskAllocationRatio: string(name='DiskAllocationRatio', description='data.diskAllocationRatio'),
  instanceNumber: integer(name='InstanceNumber', description='data.instanceNumber'),
  instanceNumberMaster: integer(name='InstanceNumberMaster', description='data.instanceNumberMaster'),
  instanceNumberSlave: integer(name='InstanceNumberSlave', description='data.instanceNumberSlave'),
  instanceNumberROMaster: integer(name='InstanceNumberROMaster', description='data.instanceNumberROMaster'),
  instanceNumberROSlave: integer(name='InstanceNumberROSlave', description='data.instanceNumberROSlave'),
  createdTime: string(name='CreatedTime', description='data.createdTime'),
  expiredTime: string(name='ExpiredTime', description='data.expiredTime'),
  autoRenew: string(name='AutoRenew', description='data.autoRenew'),
  allocationStatus: string(name='AllocationStatus', description='data.allocationStatus'),
  cpuUsed: string(name='CpuUsed', description='data.cpuUsed'),
  memoryUsed: string(name='MemoryUsed', description='data.memoryUsed'),
  storageUsed: string(name='StorageUsed', description='data.storageUsed'),
  hostType: string(name='HostType', description='data.hostType'),
  accountName: string(name='AccountName', description='data.userAccount'),
  openPermission: string(name='OpenPermission', description='data.openPermission'),
  imageCategory: string(name='ImageCategory', description='data.imageCategory'),
}

async function describeDedicatedHostAttributeWithOptions(request: DescribeDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeDedicatedHostAttribute', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDedicatedHostAttribute(request: DescribeDedicatedHostAttributeRequest): DescribeDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostAttributeWithOptions(request, runtime);
}

model ClearDedicatedHostRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
  failoverMode: string(name='FailoverMode', description='failoverMode'),
}

model ClearDedicatedHostResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
  dedicatedHostId: string(name='DedicatedHostId', description='data.dedicatedHostId'),
}

async function clearDedicatedHostWithOptions(request: ClearDedicatedHostRequest, runtime: Util.RuntimeOptions): ClearDedicatedHostResponse {
  Util.validateModel(request);
  return doRequest('ClearDedicatedHost', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function clearDedicatedHost(request: ClearDedicatedHostRequest): ClearDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearDedicatedHostWithOptions(request, runtime);
}

model ModifyDedicatedHostAttributeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
  hostName?: string(name='HostName', description='hostName'),
  allocationStatus?: string(name='AllocationStatus', description='allocationStatus'),
}

model ModifyDedicatedHostAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDedicatedHostAttributeWithOptions(request: ModifyDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDedicatedHostAttribute', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAttributeWithOptions(request, runtime);
}

model MigrateDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster', description='targetDedicatedHostIdForMaster'),
  targetDedicatedHostIdForSlave?: string(name='TargetDedicatedHostIdForSlave', description='targetDedicatedHostIdForSlave'),
  effectiveTime?: string(name='EffectiveTime', description='effectiveTime'),
  specifiedTime?: string(name='SpecifiedTime', description='specifiedTime'),
}

model MigrateDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: integer(name='TaskId', description='data.taskId'),
  migrationId: integer(name='MigrationId', description='data.migrationId'),
}

async function migrateDBInstanceWithOptions(request: MigrateDBInstanceRequest, runtime: Util.RuntimeOptions): MigrateDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('MigrateDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function migrateDBInstance(request: MigrateDBInstanceRequest): MigrateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateDBInstanceWithOptions(request, runtime);
}

model CreateDedicatedHostRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  hostName?: string(name='HostName', description='hostName'),
  zoneId: string(name='ZoneId', description='zoneId'),
  VSwitchId: string(name='VSwitchId', description='vswitchId'),
  hostClass: string(name='HostClass', description='hostClass'),
  payType: string(name='PayType', description='payType'),
  period?: string(name='Period', description='period'),
  usedTime?: string(name='UsedTime', description='usedTime'),
  clientToken: string(name='ClientToken', description='clientToken'),
  autoRenew: string(name='AutoRenew', description='autoRenew'),
}

model CreateDedicatedHostResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: long(name='OrderId', description='data.orderId'),
  dedicateHostList: {
    dedicateHostList: [
      {
        dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
      }
    ](name='DedicateHostList', description='DedicateHostList'),
  }(name='DedicateHostList', description='data.dedicateHostList'),
}

async function createDedicatedHostWithOptions(request: CreateDedicatedHostRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostResponse {
  Util.validateModel(request);
  return doRequest('CreateDedicatedHost', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createDedicatedHost(request: CreateDedicatedHostRequest): CreateDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostWithOptions(request, runtime);
}

model RebuildDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  dedicatedHostId?: string(name='DedicatedHostId', description='dedicatedHostId'),
}

model RebuildDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: integer(name='TaskId', description='data.taskId'),
  migrationId: integer(name='MigrationId', description='data.migrationId'),
}

async function rebuildDBInstanceWithOptions(request: RebuildDBInstanceRequest, runtime: Util.RuntimeOptions): RebuildDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('RebuildDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function rebuildDBInstance(request: RebuildDBInstanceRequest): RebuildDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebuildDBInstanceWithOptions(request, runtime);
}

model DescribeDBProxyEndpointRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBProxyEndpointId?: string(name='DBProxyEndpointId', description='dBProxyEndpointId'),
  DBProxyConnectString?: string(name='DBProxyConnectString', description='dBProxyConnectString'),
  regionId: string(name='RegionId', description='regionId'),
}

model DescribeDBProxyEndpointResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBProxyEndpointId: string(name='DBProxyEndpointId', description='data.dBProxyEndpointId'),
  DBProxyConnectString: string(name='DBProxyConnectString', description='data.dBProxyConnectString'),
  DBProxyConnectStringPort: string(name='DBProxyConnectStringPort', description='data.dBProxyConnectStringPort'),
  DBProxyConnectStringNetType: string(name='DBProxyConnectStringNetType', description='data.dBProxyConnectStringNetType'),
  DBProxyFeatures: string(name='DBProxyFeatures', description='data.dBProxyFeatures'),
  readOnlyInstanceMaxDelayTime: string(name='ReadOnlyInstanceMaxDelayTime', description='data.readOnlyInstanceMaxDelayTime'),
  readOnlyInstanceDistributionType: string(name='ReadOnlyInstanceDistributionType', description='data.readOnlyInstanceDistributionType'),
  readOnlyInstanceWeight: string(name='ReadOnlyInstanceWeight', description='data.readOnlyInstanceWeight'),
}

async function describeDBProxyEndpointWithOptions(request: DescribeDBProxyEndpointRequest, runtime: Util.RuntimeOptions): DescribeDBProxyEndpointResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBProxyEndpoint', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBProxyEndpoint(request: DescribeDBProxyEndpointRequest): DescribeDBProxyEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBProxyEndpointWithOptions(request, runtime);
}

model DescribeDBProxyPerformanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBProxyInstanceType?: string(name='DBProxyInstanceType', description='dBProxyInstanceType'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  regionId: string(name='RegionId', description='regionId'),
  metricsName: string(name='MetricsName', description='metricsName'),
}

model DescribeDBProxyPerformanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  startTime: string(name='StartTime', description='data.startTime'),
  endTime: string(name='EndTime', description='data.endTime'),
  performanceKeys: {
    performanceKey: [
      {
        key: string(name='Key', description='metricName'),
        valueFormat: string(name='ValueFormat', description='measurement'),
      }
    ](name='PerformanceKey', description='PerformanceKey'),
  }(name='PerformanceKeys', description='data.performanceKeys'),
}

async function describeDBProxyPerformanceWithOptions(request: DescribeDBProxyPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBProxyPerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBProxyPerformance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBProxyPerformance(request: DescribeDBProxyPerformanceRequest): DescribeDBProxyPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBProxyPerformanceWithOptions(request, runtime);
}

model DescribeDBProxyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  regionId?: string(name='RegionId', description='regionId'),
}

model DescribeDBProxyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBProxyServiceStatus: string(name='DBProxyServiceStatus', description='data.dBProxyServiceStatus'),
  DBProxyInstanceType: string(name='DBProxyInstanceType', description='data.dBProxyInstanceType'),
  DBProxyInstanceNum: integer(name='DBProxyInstanceNum', description='data.dBProxyInstanceNum'),
  DBProxyInstanceStatus: string(name='DBProxyInstanceStatus', description='data.dbProxyInstanceStatus'),
  DBProxyInstanceCurrentMinorVersion: string(name='DBProxyInstanceCurrentMinorVersion', description='data.dbProxyInstanceCurrentMinorVersion'),
  DBProxyInstanceLatestMinorVersion: string(name='DBProxyInstanceLatestMinorVersion', description='data.dbProxyInstanceLatestMinorVersion'),
  DBProxyInstanceName: string(name='DBProxyInstanceName', description='data.dbProxyInstanceName'),
  DBProxyConnectStringItems: {
    DBProxyConnectStringItems: [
      {
        DBProxyEndpointId: string(name='DBProxyEndpointId', description='dBProxyEndpointId'),
        DBProxyConnectString: string(name='DBProxyConnectString', description='dBProxyConnectString'),
        DBProxyConnectStringPort: string(name='DBProxyConnectStringPort', description='dBProxyConnectStringPort'),
        DBProxyConnectStringNetType: string(name='DBProxyConnectStringNetType', description='dBProxyConnectStringNetType'),
        DBProxyVpcInstanceId: string(name='DBProxyVpcInstanceId', description='dbProxyVpcInstanceId'),
        DBProxyEndpointName: string(name='DBProxyEndpointName', description='dBProxyEndpointName'),
        DBProxyConnectStringNetWorkType: string(name='DBProxyConnectStringNetWorkType', description='dBProxyConnectStringNetType'),
      }
    ](name='DBProxyConnectStringItems', description='DBProxyConnectStringItems'),
  }(name='DBProxyConnectStringItems', description='data.dBProxyConnectStringItems'),
}

async function describeDBProxyWithOptions(request: DescribeDBProxyRequest, runtime: Util.RuntimeOptions): DescribeDBProxyResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBProxy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBProxy(request: DescribeDBProxyRequest): DescribeDBProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBProxyWithOptions(request, runtime);
}

model ModifyDBProxyEndpointRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBProxyEndpointId: string(name='DBProxyEndpointId', description='dbProxyEndpointId'),
  configDBProxyFeatures?: string(name='ConfigDBProxyFeatures', description='configDBProxyFeatures'),
  regionId?: string(name='RegionId', description='regionId'),
  readOnlyInstanceMaxDelayTime?: string(name='ReadOnlyInstanceMaxDelayTime', description='readOnlyInstanceMaxDelayTime'),
  readOnlyInstanceDistributionType?: string(name='ReadOnlyInstanceDistributionType', description='readOnlyInstanceDistributionType'),
  readOnlyInstanceWeight?: string(name='ReadOnlyInstanceWeight', description='readOnlyInstanceWeight'),
}

model ModifyDBProxyEndpointResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBProxyEndpointWithOptions(request: ModifyDBProxyEndpointRequest, runtime: Util.RuntimeOptions): ModifyDBProxyEndpointResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBProxyEndpoint', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBProxyEndpoint(request: ModifyDBProxyEndpointRequest): ModifyDBProxyEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBProxyEndpointWithOptions(request, runtime);
}

model ModifyDBProxyInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBProxyInstanceType: string(name='DBProxyInstanceType', description='dbProxyInstanceType'),
  DBProxyInstanceNum: string(name='DBProxyInstanceNum', description='dbProxyInstanceNum'),
  effectiveTime?: string(name='EffectiveTime', description='effectiveTime'),
  effectiveSpecificTime?: string(name='EffectiveSpecificTime', description='effectiveSpecificTime'),
  regionId?: string(name='RegionId', description='regionId'),
}

model ModifyDBProxyInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBProxyInstanceWithOptions(request: ModifyDBProxyInstanceRequest, runtime: Util.RuntimeOptions): ModifyDBProxyInstanceResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBProxyInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBProxyInstance(request: ModifyDBProxyInstanceRequest): ModifyDBProxyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBProxyInstanceWithOptions(request, runtime);
}

model ModifyDBProxyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  configDBProxyService: string(name='ConfigDBProxyService', description='configDBProxyService'),
  DBProxyInstanceNum?: string(name='DBProxyInstanceNum', description='dbProxyInstanceNum'),
  regionId?: string(name='RegionId', description='regionId'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='instanceNetworkType'),
  VPCId?: string(name='VPCId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
}

model ModifyDBProxyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBProxyWithOptions(request: ModifyDBProxyRequest, runtime: Util.RuntimeOptions): ModifyDBProxyResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBProxy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBProxy(request: ModifyDBProxyRequest): ModifyDBProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBProxyWithOptions(request, runtime);
}

model ModifyHASwitchConfigRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  HAConfig?: string(name='HAConfig', description='haConfig'),
  manualHATime?: string(name='ManualHATime', description='manualHATime'),
  regionId: string(name='RegionId', description='regionId'),
}

model ModifyHASwitchConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyHASwitchConfigWithOptions(request: ModifyHASwitchConfigRequest, runtime: Util.RuntimeOptions): ModifyHASwitchConfigResponse {
  Util.validateModel(request);
  return doRequest('ModifyHASwitchConfig', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyHASwitchConfig(request: ModifyHASwitchConfigRequest): ModifyHASwitchConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHASwitchConfigWithOptions(request, runtime);
}

model DescribeHASwitchConfigRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  regionId: string(name='RegionId', description='regionId'),
}

model DescribeHASwitchConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
  HAConfig: string(name='HAConfig', description='data.haConfig'),
  manualHATime: string(name='ManualHATime', description='data.manualHATime'),
}

async function describeHASwitchConfigWithOptions(request: DescribeHASwitchConfigRequest, runtime: Util.RuntimeOptions): DescribeHASwitchConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeHASwitchConfig', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeHASwitchConfig(request: DescribeHASwitchConfigRequest): DescribeHASwitchConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHASwitchConfigWithOptions(request, runtime);
}

model ModifyActionEventPolicyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  enableEventLog: string(name='EnableEventLog', description='enableEventLog'),
}

model ModifyActionEventPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  enableEventLog: string(name='EnableEventLog', description='data.enableEventLog'),
}

async function modifyActionEventPolicyWithOptions(request: ModifyActionEventPolicyRequest, runtime: Util.RuntimeOptions): ModifyActionEventPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyActionEventPolicy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyActionEventPolicy(request: ModifyActionEventPolicyRequest): ModifyActionEventPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyActionEventPolicyWithOptions(request, runtime);
}

model DescribeActionEventPolicyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
}

model DescribeActionEventPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  enableEventLog: string(name='EnableEventLog', description='data.enableEventLog'),
}

async function describeActionEventPolicyWithOptions(request: DescribeActionEventPolicyRequest, runtime: Util.RuntimeOptions): DescribeActionEventPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeActionEventPolicy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeActionEventPolicy(request: DescribeActionEventPolicyRequest): DescribeActionEventPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActionEventPolicyWithOptions(request, runtime);
}

model DescribeEventsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  startTime?: string(name='StartTime', description='startTime'),
  endTime?: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeEventsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecordCount'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  eventItems: {
    eventItems: [
      {
        eventId: integer(name='EventId', description='eventId'),
        eventType: string(name='EventType', description='eventType'),
        eventName: string(name='EventName', description='eventName'),
        eventTime: string(name='EventTime', description='eventTime'),
        resourceType: string(name='ResourceType', description='resourceType'),
        resourceName: string(name='ResourceName', description='resourceName'),
        regionId: string(name='RegionId', description='regionId'),
        eventUserType: string(name='EventUserType', description='eventUserType'),
        eventReason: string(name='EventReason', description='eventReason'),
        eventPayload: string(name='EventPayload', description='eventPayload'),
        eventRecordTime: string(name='EventRecordTime', description='eventRecordTime'),
      }
    ](name='EventItems', description='EventItems'),
  }(name='EventItems', description='data.eventItems'),
}

async function describeEventsWithOptions(request: DescribeEventsRequest, runtime: Util.RuntimeOptions): DescribeEventsResponse {
  Util.validateModel(request);
  return doRequest('DescribeEvents', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventsWithOptions(request, runtime);
}

model DescribeDBInstancesForCloneRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  proxyId?: string(name='proxyId', description='proxyId'),
  engine?: string(name='Engine', description='dbType'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  DBInstanceStatus?: string(name='DBInstanceStatus', description='dbInstanceStatusDesc'),
  expired?: string(name='Expired', description='expired'),
  searchKey?: string(name='SearchKey', description='description'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  DBInstanceType?: string(name='DBInstanceType', description='instanceUsedType'),
  regionId: string(name='RegionId', description='region'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='page'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='instanceNetworkType'),
  vpcId?: string(name='VpcId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  DBInstanceClass?: string(name='DBInstanceClass', description='dbInstanceClass'),
  engineVersion?: string(name='EngineVersion', description='engineVersion'),
  nodeType?: string(name='NodeType', description='nodeType'),
  payType?: string(name='PayType', description='chargeType'),
  connectionMode?: string(name='ConnectionMode', description='connectionMode'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  currentInstanceId?: string(name='CurrentInstanceId', description='currentDbInstanceId'),
}

model DescribeDBInstancesForCloneResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecordCount'),
  pageRecordCount: integer(name='PageRecordCount', description='data.count'),
  items: {
    DBInstance: [
      {
        insId: integer(name='InsId', description='model.dbInstanceId'),
        DBInstanceId: string(name='DBInstanceId', description='model.dbInstanceName'),
        DBInstanceDescription: string(name='DBInstanceDescription', description='model.dbInstanceDescription'),
        payType: string(name='PayType', description='model.dbInstancePayType'),
        DBInstanceType: string(name='DBInstanceType', description='model.dbInstanceUsedType'),
        regionId: string(name='RegionId', description='model.region'),
        expireTime: string(name='ExpireTime', description='model.dbInstanceExpireTime'),
        destroyTime: string(name='DestroyTime', description='model.destroyTime'),
        DBInstanceStatus: string(name='DBInstanceStatus', description='model.dbInstanceStatusDesc'),
        engine: string(name='Engine', description='model.engine'),
        DBInstanceNetType: string(name='DBInstanceNetType', description='model.dbInstanceNetType'),
        connectionMode: string(name='ConnectionMode', description='model.connectionMode'),
        lockMode: string(name='LockMode', description='model.lockMode'),
        category: string(name='Category', description='model.category'),
        DBInstanceStorageType: string(name='DBInstanceStorageType', description='model.dbInstanceStorageType'),
        DBInstanceClass: string(name='DBInstanceClass', description='model.dbInstanceClass'),
        instanceNetworkType: string(name='InstanceNetworkType', description='model.instanceNetworkType'),
        vpcCloudInstanceId: string(name='VpcCloudInstanceId', description='model.vpcCloudInstanceId'),
        lockReason: string(name='LockReason', description='model.lockReason'),
        zoneId: string(name='ZoneId', description='model.availableArea'),
        mutriORsignle: boolean(name='MutriORsignle', description='mutriORsignle'),
        createTime: string(name='CreateTime', description='createTime'),
        engineVersion: string(name='EngineVersion', description='model.engineVersion'),
        guardDBInstanceId: string(name='GuardDBInstanceId', description='model.guardDBInstanceName'),
        tempDBInstanceId: string(name='TempDBInstanceId', description='model.childDBInstanceName'),
        masterInstanceId: string(name='MasterInstanceId', description='model.masterDBInstanceName'),
        vpcId: string(name='VpcId', description='model.vpcId'),
        VSwitchId: string(name='VSwitchId', description='model.vSwitchId'),
        replicateId: string(name='ReplicateId', description='model.replacateId'),
        resourceGroupId: string(name='ResourceGroupId', description='model.resourceGroupId'),
        readOnlyDBInstanceIds: {
          readOnlyDBInstanceId: [
            {
              DBInstanceId: string(name='DBInstanceId', description='readOnlyDBInstanceId'),
            }
          ](name='ReadOnlyDBInstanceId', description='ReadOnlyDBInstanceId'),
        }(name='ReadOnlyDBInstanceIds', description='readOnlyDBInstanceNameList'),
      }
    ](name='DBInstance', description='DBInstance'),
  }(name='Items', description='data.data'),
}

async function describeDBInstancesForCloneWithOptions(request: DescribeDBInstancesForCloneRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesForCloneResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstancesForClone', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstancesForClone(request: DescribeDBInstancesForCloneRequest): DescribeDBInstancesForCloneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesForCloneWithOptions(request, runtime);
}

model DescribeDTCSecurityIpHostsForSQLServerRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  securityToken?: string(name='SecurityToken', description='stsSecurityToken'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  regionId: string(name='RegionId', description='description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看。; '),
}

model DescribeDTCSecurityIpHostsForSQLServerResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  ipHostPairNum: string(name='IpHostPairNum', description='description: 分布式事务白名单条目数。; '),
  items: {
    whiteListGroups: [
      {
        securityIpHosts: string(name='SecurityIpHosts', description='description: ECS实例的IP地址和Windows系统的计算机名。格式：ip,hostname。多个实例之间以英文分号（;）隔开。; '),
        whitelistGroupName: string(name='WhitelistGroupName', description='description: 分布式事务白名单分组名称。; '),
      }
    ](name='WhiteListGroups', description='WhiteListGroups'),
  }(name='Items', description='description: 分布式事务白名单分组列表。'),
}

/**
 * DescribeDTCSecurityIpHostsForSQLServer 调用DescribeDTCSecurityIpHostsForSQLServer接口查询RDS实例的分布式事务白名单信息。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeDTCSecurityIpHostsForSQLServer
  * &DBInstanceId=rm-uf6wjk5xxxxxxx
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description:   * 关于分布式事务白名单请参见[设置分布式事务白名单](~~124321~~)。
  * 仅适用于如下版本实例：
  * * SQL Server 2012/2016企业版高可用版
  * * SQL Server 2012/2016标准版

 */
async function describeDTCSecurityIpHostsForSQLServerWithOptions(request: DescribeDTCSecurityIpHostsForSQLServerRequest, runtime: Util.RuntimeOptions): DescribeDTCSecurityIpHostsForSQLServerResponse {
  Util.validateModel(request);
  return doRequest('DescribeDTCSecurityIpHostsForSQLServer', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * DescribeDTCSecurityIpHostsForSQLServer 调用DescribeDTCSecurityIpHostsForSQLServer接口查询RDS实例的分布式事务白名单信息。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeDTCSecurityIpHostsForSQLServer
  * &DBInstanceId=rm-uf6wjk5xxxxxxx
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description:   * 关于分布式事务白名单请参见[设置分布式事务白名单](~~124321~~)。
  * 仅适用于如下版本实例：
  * * SQL Server 2012/2016企业版高可用版
  * * SQL Server 2012/2016标准版

 */
async function describeDTCSecurityIpHostsForSQLServer(request: DescribeDTCSecurityIpHostsForSQLServerRequest): DescribeDTCSecurityIpHostsForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDTCSecurityIpHostsForSQLServerWithOptions(request, runtime);
}

model ModifyDTCSecurityIpHostsForSQLServerRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  securityToken?: string(name='SecurityToken', description='stsSecurityToken'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='description: RDS实例ID。; '),
  securityIpHosts: string(name='SecurityIpHosts', description='description: ECS实例的IP地址和Windows系统的计算机名。格式：ip,hostname。多个实例之间以英文分号（;）隔开。>计算机名查看方式请参见[设置分布式事务白名单](~~124321~~)。; '),
  whiteListGroupName: string(name='WhiteListGroupName', description='description: 白名单分组名称。; '),
  regionId: string(name='RegionId', description='description: RDS实例的地域ID，可以通过接口[DescribeRegions](~~26243~~)查看。; '),
}

model ModifyDTCSecurityIpHostsForSQLServerResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  DBInstanceId: string(name='DBInstanceId', description='description: RDS实例ID。; '),
  DTCSetResult: string(name='DTCSetResult', description='description: 设置白名单的结果，取值：* **Success**：设置成功；* **Fail**：设置失败。; '),
  taskId: string(name='TaskId', description='description: 设置任务ID。; '),
}

/**
 * ModifyDTCSecurityIpHostsForSQLServer 调用ModifyDTCSecurityIpHostsForSQLServer接口设置分布式事务白名单。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=ModifyDTCSecurityIpHostsForSQLServer
  * &DBInstanceId=rm-uf6wjk5xxxxxxx
  * &RegionId=cn-hangzhou
  * &SecurityIpHosts=192.168.1.100,k3ecstest
  * &WhiteListGroupName=test1
  * &<公共请求参数>
  * ```
  * description:   * 分布式事务白名单可以让ECS实例和RDS实例之间支持分布式事务。详情请参见[设置分布式事务白名单](~~124321~~)。
  * 仅适用于如下版本实例：
  * * SQL Server 2012/2016企业版高可用版
  * * SQL Server 2012/2016标准版

 */
async function modifyDTCSecurityIpHostsForSQLServerWithOptions(request: ModifyDTCSecurityIpHostsForSQLServerRequest, runtime: Util.RuntimeOptions): ModifyDTCSecurityIpHostsForSQLServerResponse {
  Util.validateModel(request);
  return doRequest('ModifyDTCSecurityIpHostsForSQLServer', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * ModifyDTCSecurityIpHostsForSQLServer 调用ModifyDTCSecurityIpHostsForSQLServer接口设置分布式事务白名单。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=ModifyDTCSecurityIpHostsForSQLServer
  * &DBInstanceId=rm-uf6wjk5xxxxxxx
  * &RegionId=cn-hangzhou
  * &SecurityIpHosts=192.168.1.100,k3ecstest
  * &WhiteListGroupName=test1
  * &<公共请求参数>
  * ```
  * description:   * 分布式事务白名单可以让ECS实例和RDS实例之间支持分布式事务。详情请参见[设置分布式事务白名单](~~124321~~)。
  * 仅适用于如下版本实例：
  * * SQL Server 2012/2016企业版高可用版
  * * SQL Server 2012/2016标准版

 */
async function modifyDTCSecurityIpHostsForSQLServer(request: ModifyDTCSecurityIpHostsForSQLServerRequest): ModifyDTCSecurityIpHostsForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDTCSecurityIpHostsForSQLServerWithOptions(request, runtime);
}

model DescribeDBInstanceIpHostnameRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  securityToken?: string(name='SecurityToken', description='stsSecurityToken'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='description: RDS实例ID。; '),
  regionId: string(name='RegionId', description='description: RDS实例的地域ID，可以通过接口[DescribeRegions](~~26243~~)查看。; '),
}

model DescribeDBInstanceIpHostnameResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  ipHostnameInfos: string(name='IpHostnameInfos', description='description: RDS实例所在ECS实例的内网IP和ECS主机名，包含主备实例。格式：ip1,hostname1;ip2,hostname2。; '),
}

/**
 * DescribeDBInstanceIpHostname 调用DescribeDBInstanceIpHostname接口查询RDS实例的底层ECS实例的hostname。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeDBInstanceIpHostname
  * &DBInstanceId=rm-uf6wjk5xxxxxxx	
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description:   * RDS实例是基于ECS实例搭建的，本接口用于[设置分布式事务白名单](~~124321~~)时查询RDS实例的底层ECS实例的hostname。
  * 仅适用于如下版本实例：
  * * SQL Server 2012/2016企业版高可用版
  * * SQL Server 2012/2016标准版

 */
async function describeDBInstanceIpHostnameWithOptions(request: DescribeDBInstanceIpHostnameRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIpHostnameResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceIpHostname', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * DescribeDBInstanceIpHostname 调用DescribeDBInstanceIpHostname接口查询RDS实例的底层ECS实例的hostname。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeDBInstanceIpHostname
  * &DBInstanceId=rm-uf6wjk5xxxxxxx	
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description:   * RDS实例是基于ECS实例搭建的，本接口用于[设置分布式事务白名单](~~124321~~)时查询RDS实例的底层ECS实例的hostname。
  * 仅适用于如下版本实例：
  * * SQL Server 2012/2016企业版高可用版
  * * SQL Server 2012/2016标准版

 */
async function describeDBInstanceIpHostname(request: DescribeDBInstanceIpHostnameRequest): DescribeDBInstanceIpHostnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIpHostnameWithOptions(request, runtime);
}

model ModifyDBInstanceAutoUpgradeMinorVersionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  autoUpgradeMinorVersion: string(name='AutoUpgradeMinorVersion', description='autoUpgradeMinorVersion'),
}

model ModifyDBInstanceAutoUpgradeMinorVersionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceAutoUpgradeMinorVersionWithOptions(request: ModifyDBInstanceAutoUpgradeMinorVersionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceAutoUpgradeMinorVersionResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceAutoUpgradeMinorVersion', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceAutoUpgradeMinorVersion(request: ModifyDBInstanceAutoUpgradeMinorVersionRequest): ModifyDBInstanceAutoUpgradeMinorVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceAutoUpgradeMinorVersionWithOptions(request, runtime);
}

model DescribeAvailableCrossRegionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='description: 地域ID。可以通过接口[DescribeRegions](~~26243~~)查看地域ID。; '),
}

model DescribeAvailableCrossRegionResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  regions: {
    region: [ string ](name='Region', description='Region'),
  }(name='Regions', description='data.regionList'),
}

/**
 * DescribeAvailableCrossRegion 调用DescribeAvailableCrossRegion接口查询所选地域当前可以进行跨地域备份的目的地域。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeAvailableCrossRegion
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description: 
 */
async function describeAvailableCrossRegionWithOptions(request: DescribeAvailableCrossRegionRequest, runtime: Util.RuntimeOptions): DescribeAvailableCrossRegionResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableCrossRegion', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * DescribeAvailableCrossRegion 调用DescribeAvailableCrossRegion接口查询所选地域当前可以进行跨地域备份的目的地域。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeAvailableCrossRegion
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description: 
 */
async function describeAvailableCrossRegion(request: DescribeAvailableCrossRegionRequest): DescribeAvailableCrossRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableCrossRegionWithOptions(request, runtime);
}

model CheckCreateDdrDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  engine: string(name='Engine', description='engine'),
  engineVersion: string(name='EngineVersion', description='engineVersion'),
  DBInstanceClass: string(name='DBInstanceClass', description='dbInstanceClass'),
  DBInstanceStorage: integer(name='DBInstanceStorage', description='dbInstanceStorage'),
  restoreType: string(name='RestoreType', description='restoreType'),
  backupSetId?: string(name='BackupSetId', description='backupSetId'),
  restoreTime?: string(name='RestoreTime', description='restoreTime'),
  sourceRegion?: string(name='SourceRegion', description='sourceRegion'),
  sourceDBInstanceName?: string(name='SourceDBInstanceName', description='sourceDBInstanceName'),
}

model CheckCreateDdrDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isValid: string(name='IsValid', description='data.valid'),
}

async function checkCreateDdrDBInstanceWithOptions(request: CheckCreateDdrDBInstanceRequest, runtime: Util.RuntimeOptions): CheckCreateDdrDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('CheckCreateDdrDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function checkCreateDdrDBInstance(request: CheckCreateDdrDBInstanceRequest): CheckCreateDdrDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCreateDdrDBInstanceWithOptions(request, runtime);
}

model DescribeAvailableRecoveryTimeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  crossBackupId: integer(name='CrossBackupId', description='description: 跨地域备份文件ID。可以通过接口[DescribeCrossRegionBackups](~~121733~~)查看备份集ID。; '),
  regionId?: string(name='RegionId', description='description: 地域ID。; '),
}

model DescribeAvailableRecoveryTimeResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  recoveryBeginTime: string(name='RecoveryBeginTime', description='description: 跨地域备份文件可恢复的起始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。; '),
  recoveryEndTime: string(name='RecoveryEndTime', description='description: 跨地域备份文件可恢复的结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。; '),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceId'),
  regionId: string(name='RegionId', description='description: 源实例所在地域ID。; '),
  crossBackupId: integer(name='CrossBackupId', description='description: 跨地域备份文件ID。; '),
}

/**
 * DescribeAvailableRecoveryTime 调用DescribeAvailableRecoveryTime接口查询某跨地域备份文件可恢复哪个时间段的数据。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeAvailableRecoveryTime
  * &CrossBackupId=14377
  * &<公共请求参数>
  * ```
  * description:   * 查看普通备份文件可恢复哪个时间段的数据请参见[DescribeBackups](~~26273~~)。
  * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function describeAvailableRecoveryTimeWithOptions(request: DescribeAvailableRecoveryTimeRequest, runtime: Util.RuntimeOptions): DescribeAvailableRecoveryTimeResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableRecoveryTime', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * DescribeAvailableRecoveryTime 调用DescribeAvailableRecoveryTime接口查询某跨地域备份文件可恢复哪个时间段的数据。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeAvailableRecoveryTime
  * &CrossBackupId=14377
  * &<公共请求参数>
  * ```
  * description:   * 查看普通备份文件可恢复哪个时间段的数据请参见[DescribeBackups](~~26273~~)。
  * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function describeAvailableRecoveryTime(request: DescribeAvailableRecoveryTimeRequest): DescribeAvailableRecoveryTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableRecoveryTimeWithOptions(request, runtime);
}

model DescribeCrossRegionLogBackupFilesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  regionId: string(name='RegionId', description='description: 实例所在地域ID。可以通过接口[DescribeRegions](~~26243~~)查看地域ID。; '),
  crossBackupRegion?: string(name='CrossBackupRegion', description='description: 跨地域备份目的地域ID。可以通过接口[DescribeCrossRegionBackupDBInstance](~~121737~~)查看地域ID。; '),
  startTime: string(name='StartTime', description='description: 查询开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
  endTime: string(name='EndTime', description='description: 查询结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
  pageSize?: integer(name='PageSize', description='description: 每页记录数，取值：* **30**；* **50**；* **100**。默认值：30。; '),
  pageNumber?: integer(name='PageNumber', description='description: 页码，取值：大于0且不超过Integer的最大值。默认值：**1**。; '),
}

model DescribeCrossRegionLogBackupFilesResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  regionId: string(name='RegionId', description='description: 实例所在地域ID。; '),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  startTime: string(name='StartTime', description='description: 查询开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
  endTime: string(name='EndTime', description='description: 查询结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
  totalRecordCount: integer(name='TotalRecordCount', description='description: 总记录数。; '),
  pageRecordCount: integer(name='PageRecordCount', description='description: 本页备份文件个数。; '),
  pageNumber: integer(name='PageNumber', description='description: 页码，取值：大于0且不超过Integer的最大值。默认值：**1**。; '),
  items: {
    item: [
      {
        crossLogBackupId: integer(name='CrossLogBackupId', description='description: 跨地域日志备份文件ID。; '),
        crossBackupRegion: string(name='CrossBackupRegion', description='description: 跨地域备份目的地域ID。; '),
        crossLogBackupSize: long(name='CrossLogBackupSize', description='description: 跨地域日志备份文件大小，单位：Byte。; '),
        logBeginTime: string(name='LogBeginTime', description='description: 跨地域日志备份文件记录的开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
        logEndTime: string(name='LogEndTime', description='description: 跨地域日志备份文件记录的结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
        crossDownloadLink: string(name='CrossDownloadLink', description='description: 跨地域日志备份外网下载链接。; '),
        crossIntranetDownloadLink: string(name='CrossIntranetDownloadLink', description='description: 跨地域日志备份内网下载链接。; '),
        linkExpiredTime: string(name='LinkExpiredTime', description='description: 下载链接过期时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。; '),
        logFileName: string(name='LogFileName', description='description: 跨地域日志备份文件名称。; '),
        instanceId: integer(name='InstanceId', description='description: 实例编号。; '),
      }
    ](name='Item', description='Item'),
  }(name='Items', description='description: 跨地域日志备份列表。'),
}

/**
 * DescribeCrossRegionLogBackupFiles 调用DescribeCrossRegionLogBackupFiles接口查看跨地域日志备份文件列表。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeCrossRegionLogBackupFiles
  * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
  * &StartTime=2019-05-30T12:10Z
  * &EndTime=2019-06-15T12:10Z
  * &<公共请求参数>
  * ```
  * description:   * 查看数据备份文件请参见[DescribeCrossRegionBackups](~~121733~~)。
  * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function describeCrossRegionLogBackupFilesWithOptions(request: DescribeCrossRegionLogBackupFilesRequest, runtime: Util.RuntimeOptions): DescribeCrossRegionLogBackupFilesResponse {
  Util.validateModel(request);
  return doRequest('DescribeCrossRegionLogBackupFiles', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * DescribeCrossRegionLogBackupFiles 调用DescribeCrossRegionLogBackupFiles接口查看跨地域日志备份文件列表。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeCrossRegionLogBackupFiles
  * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
  * &StartTime=2019-05-30T12:10Z
  * &EndTime=2019-06-15T12:10Z
  * &<公共请求参数>
  * ```
  * description:   * 查看数据备份文件请参见[DescribeCrossRegionBackups](~~121733~~)。
  * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function describeCrossRegionLogBackupFiles(request: DescribeCrossRegionLogBackupFilesRequest): DescribeCrossRegionLogBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCrossRegionLogBackupFilesWithOptions(request, runtime);
}

model ModifyInstanceCrossBackupPolicyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  regionId: string(name='RegionId', description='description: 源实例地域ID，可以通过接口[DescribeRegions](~~26243~~)查看地域ID。; '),
  crossBackupType?: string(name='CrossBackupType', description='description: 跨地域备份保存类型。默认值：**1**，表示每个备份都保存。; '),
  logBackupEnabled?: string(name='LogBackupEnabled', description='description: 跨地域日志备份开关，取值：* **0**：关闭；* **1**：开启。; '),
  backupEnabled?: string(name='BackupEnabled', description='description: 跨地域备份总开关（数据备份+日志备份），取值：* **0**：关闭；* **1**：开启。; '),
  crossBackupRegion?: string(name='CrossBackupRegion', description='description: 跨地域备份的目的地域ID。; '),
  retentType?: integer(name='RetentType', description='description: 跨地域备份保留方式。默认值：**1**，表示按时长保留。; '),
  retention?: integer(name='Retention', description='description: 跨地域备份保留天数，取值：**7~1825**。; '),
}

model ModifyInstanceCrossBackupPolicyResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  regionId: string(name='RegionId', description='description: 源实例地域ID，可以通过接口[DescribeRegions](~~26243~~)查看地域ID。; '),
  crossBackupRegion: string(name='CrossBackupRegion', description='description: 跨地域备份的目的地域ID。; '),
  crossBackupType: string(name='CrossBackupType', description='description: 跨地域备份保存类型。默认值：**1**，表示每个备份都保存。; '),
  backupEnabled: string(name='BackupEnabled', description='description: 跨地域备份总开关，取值：* **0**：关闭；* **1**：开启。; '),
  logBackupEnabled: string(name='LogBackupEnabled', description='description: 跨地域日志备份开关，取值：* **0**：关闭；* **1**：开启。; '),
  storageOwner: string(name='StorageOwner', description='data.storageOwner'),
  storageType: string(name='StorageType', description='data.storageType'),
  endpoint: string(name='Endpoint', description='data.endpoint'),
  retentType: integer(name='RetentType', description='description: 跨地域备份保留方式。默认值：**1**，表示按时长保留。; '),
  retention: integer(name='Retention', description='description: 跨地域备份保留天数，取值：**7~1825**。; '),
}

/**
 * ModifyInstanceCrossBackupPolicy 调用ModifyInstanceCrossBackupPolicy接口修改RDS跨地域备份设置。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=ModifyInstanceCrossBackupPolicy
  * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description:   * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function modifyInstanceCrossBackupPolicyWithOptions(request: ModifyInstanceCrossBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyInstanceCrossBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceCrossBackupPolicy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * ModifyInstanceCrossBackupPolicy 调用ModifyInstanceCrossBackupPolicy接口修改RDS跨地域备份设置。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=ModifyInstanceCrossBackupPolicy
  * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description:   * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function modifyInstanceCrossBackupPolicy(request: ModifyInstanceCrossBackupPolicyRequest): ModifyInstanceCrossBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceCrossBackupPolicyWithOptions(request, runtime);
}

model CreateDdrInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='description: 目的地域ID，可以通过接口[DescribeRegions](~~26243~~)查看地域ID。; '),
  engine: string(name='Engine', description='description: 目的数据库类型，取值：**MySQL**。; '),
  engineVersion: string(name='EngineVersion', description='description: 目的数据库版本，取值：* **5.6**；* **5.7**。; '),
  DBInstanceClass: string(name='DBInstanceClass', description='description: 目的实例规格，详见[实例规格表](~~26312~~)。; '),
  DBInstanceStorage: integer(name='DBInstanceStorage', description='description: 目的实例存储空间，取值： **5~2000**。每5G进行递增，单位：GB。详见[实例规格表](~~26312~~)。; '),
  systemDBCharset?: string(name='SystemDBCharset', description='description: 目的实例的字符集，取值：* **utf8**；* **gbk**；* **latin1**；* **utf8mb4**。; '),
  DBInstanceNetType: string(name='DBInstanceNetType', description='description: 目的实例的网络连接类型，取值：* **Internet**：公网连接；* **Intranet**：内网连接。; '),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='description: 目的实例名称，长度为2~256个字符。以中文、英文字母开头，可以包含数字、中文、英文、下划线（_）、短横线（-）。>不能以 http:// 和 https:// 开头。; '),
  securityIPList: string(name='SecurityIPList', description='description: 目的实例的[IP白名单](~~43185~~)，多个IP地址请以英文逗号（,）隔开，不可重复，最多1000个。支持如下两种格式：* IP地址形式，例如：10.23.12.24；* CIDR形式，例如：10.23.12.24/24（无类域间路由，24表示了地址中前缀的长度，范围为1~32）。; '),
  clientToken?: string(name='ClientToken', description='description: 用于保证请求的幂等性，防止重复提交请求。由客户端生成该参数值，要保证在不同请求间唯一，最大值不超过64个ASCII字符，且该参数值中不能包含非ASCII字符。; '),
  payType: string(name='PayType', description='description: 目的实例的付费类型，取值：* **Postpaid**：后付费（按量付费）；* **Prepaid**：预付费（包年包月）。; '),
  zoneId?: string(name='ZoneId', description='description: 目的实例的可用区ID。多可用区用英文冒号（:）分隔。> 指定了VPC和交换机时，为匹配交换机对应的可用区，该参数必填。; '),
  instanceNetworkType?: string(name='InstanceNetworkType', description='description: 目的实例的网络类型，取值：* **VPC**：VPC网络；* **Classic**：经典网络。默认创建经典网络类型的实例。>当本参数值为 **VPC**时，还需要传入参数**VpcId**、**VSwitchId**。; '),
  connectionMode?: string(name='ConnectionMode', description='description: 目的实例的访问模式，取值：* **Standard**：标准访问模式；* **Safe**：数据库代理模式。默认值：**Standard**。; '),
  VPCId?: string(name='VPCId', description='description: 目的实例的VPC ID。当**InstanceNetworkType**=**VPC**时，本参数可用。>如果传入此参数，您还需要传入参数**ZoneId**。; '),
  VSwitchId?: string(name='VSwitchId', description='description: 目的实例的VSwitch ID，多个值用英文逗号（,）隔开。当**InstanceNetworkType**=**VPC**时，本参数可用。>如果传入此参数，您还需要传入参数**ZoneId**。; '),
  privateIpAddress?: string(name='PrivateIpAddress', description='description: 设置目的实例的内网IP，需要在指定交换机的IP地址范围内。系统默认通过**VPCId**和**VSwitchId**自动分配。; '),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  usedTime?: string(name='UsedTime', description='description: 指定购买时长，取值：* 当参数**Period**为**Year**时，UsedTime取值为**1~3**；* 当参数**Period**为**Month**时，UsedTime取值为**1~9**。> 若付费类型为**Prepaid**则该参数必须传入。; '),
  period?: string(name='Period', description='description: 指定预付费目的实例为包年或者包月类型，取值：* **Year**：包年；* **Month**：包月。> 若付费类型为**Prepaid**则该参数必须传入。; '),
  resourceGroupId?: string(name='ResourceGroupId', description='description: 资源组ID。; '),
  restoreType: string(name='RestoreType', description='description: 恢复方式，取值：* **0**：基于备份集恢复，您还需要传入参数**BackupSetID**；* **1**：基于时间点恢复，您还需要传入参数**RestoreTime**、**SourceRegion**、**SourceDBInstanceName**。; '),
  backupSetId?: string(name='BackupSetId', description='description: 基于备份集恢复时，使用的备份集的ID。可以通过接口[DescribeCrossRegionBackups](~~121733~~)查看备份集ID。>**RestoreTyp**e=**0**时必传。; '),
  restoreTime?: string(name='RestoreTime', description='description: 基于时间点恢复时，要恢复的时间节点，需要早于当前时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。>**RestoreType**=**1**时必传 。; '),
  sourceRegion?: string(name='SourceRegion', description='description: 基于时间点恢复时，源地域的ID。>**RestoreType**=**1**时必传。; '),
  sourceDBInstanceName?: string(name='SourceDBInstanceName', description='description: 基于时间点恢复时，源实例的ID。>**RestoreType**=**1**时必传。; '),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='description: 目的实例存储类型，当前仅支持SSD本地盘，默认值：**local_ssd**。; '),
  binlogName?: string(name='BinlogName', description='binlogName'),
  binlogPosition?: string(name='BinlogPosition', description='binlogPosition'),
  binlogRole?: string(name='BinlogRole', description='binlogRole'),
}

model CreateDdrInstanceResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  DBInstanceId: string(name='DBInstanceId', description='description: 新实例ID。; '),
  orderId: string(name='OrderId', description='description: 订单ID。; '),
  connectionString: string(name='ConnectionString', description='description: 新实例连接地址。>参数**DBInstanceNetType**决定该地址为内网或外网。; '),
  port: string(name='Port', description='description: 新实例连接端口。>参数**DBInstanceNetType**决定该端口为内网端口或外网端口。; '),
}

/**
 * CreateDdrInstance 调用CreateDdrInstance接口跨地域恢复数据到新实例。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action==CreateDdrInstance
  * &RegionId=cn-hangzhou
  * &Engine=MySQL
  * &EngineVersion=5.6
  * &DBInstanceClass=rds.mysql.s1.small
  * &DBInstanceStorage=20
  * &DBInstanceNetType=Intranet
  * &PayType=Prepaid
  * &RestoreType=0
  * &SecurityIPList=127.0.0.1
  * &BackupSetId=14358
  * &<公共请求参数>
  * ```
  * description:   * 恢复前可以调用[CheckCreateDdrDBInstance](~~121721~~)接口预检查某RDS实例是否可以用跨地域备份集进行跨地域恢复。
  * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function createDdrInstanceWithOptions(request: CreateDdrInstanceRequest, runtime: Util.RuntimeOptions): CreateDdrInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateDdrInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * CreateDdrInstance 调用CreateDdrInstance接口跨地域恢复数据到新实例。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action==CreateDdrInstance
  * &RegionId=cn-hangzhou
  * &Engine=MySQL
  * &EngineVersion=5.6
  * &DBInstanceClass=rds.mysql.s1.small
  * &DBInstanceStorage=20
  * &DBInstanceNetType=Intranet
  * &PayType=Prepaid
  * &RestoreType=0
  * &SecurityIPList=127.0.0.1
  * &BackupSetId=14358
  * &<公共请求参数>
  * ```
  * description:   * 恢复前可以调用[CheckCreateDdrDBInstance](~~121721~~)接口预检查某RDS实例是否可以用跨地域备份集进行跨地域恢复。
  * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function createDdrInstance(request: CreateDdrInstanceRequest): CreateDdrInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDdrInstanceWithOptions(request, runtime);
}

model DescribeCrossRegionBackupDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeCrossRegionBackupDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  totalRecords: integer(name='TotalRecords', description='data.totalRecords'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  itemsNumbers: integer(name='ItemsNumbers', description='data.itemsNumbers'),
  items: {
    item: [
      {
        DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
        DBInstanceDescription: string(name='DBInstanceDescription', description='dbInstanceDescription'),
        DBInstanceStatus: string(name='DBInstanceStatus', description='dbInstanceStatus'),
        DBInstanceStatusDesc: string(name='DBInstanceStatusDesc', description='dbInstanceStatusDesc'),
        engine: string(name='Engine', description='engine'),
        engineVersion: string(name='EngineVersion', description='engineVersion'),
        crossBackupRegion: string(name='CrossBackupRegion', description='crossBackupRegion'),
        crossBackupType: string(name='CrossBackupType', description='crossBackupType'),
        backupEnabled: string(name='BackupEnabled', description='backupEnabled'),
        logBackupEnabled: string(name='LogBackupEnabled', description='logBackupEnabled'),
        logBackupEnabledTime: string(name='LogBackupEnabledTime', description='logBackupEnabledTime'),
        backupEnabledTime: string(name='BackupEnabledTime', description='backupEnabledTime'),
        retentType: integer(name='RetentType', description='retentType'),
        retention: integer(name='Retention', description='retention'),
        lockMode: string(name='LockMode', description='lockMode'),
        relService: string(name='RelService', description='relService'),
        relServiceId: string(name='RelServiceId', description='relServiceId'),
      }
    ](name='Item', description='Item'),
  }(name='Items', description='data.items'),
}

async function describeCrossRegionBackupDBInstanceWithOptions(request: DescribeCrossRegionBackupDBInstanceRequest, runtime: Util.RuntimeOptions): DescribeCrossRegionBackupDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeCrossRegionBackupDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeCrossRegionBackupDBInstance(request: DescribeCrossRegionBackupDBInstanceRequest): DescribeCrossRegionBackupDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCrossRegionBackupDBInstanceWithOptions(request, runtime);
}

model DescribeInstanceCrossBackupPolicyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  regionId: string(name='RegionId', description='description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看地域ID。; '),
}

model DescribeInstanceCrossBackupPolicyResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  DBInstanceDescription: string(name='DBInstanceDescription', description='description: 实例名称，长度为2~256个字符。以中文、英文字母开头，可以包含数字、中文、英文、下划线（_）、短横线（-）。>不能以 http:// 和 https:// 开头。; '),
  DBInstanceStatus: string(name='DBInstanceStatus', description='description: 实例状态。详情请参见[实例状态表](~~26315~~)。; '),
  DBInstanceStatusDesc: string(name='DBInstanceStatusDesc', description='data.dbInstanceStatusDesc'),
  engine: string(name='Engine', description='description: 数据库类型。; '),
  engineVersion: string(name='EngineVersion', description='description: 数据库版本。; '),
  regionId: string(name='RegionId', description='description: 实例所在地域ID。; '),
  crossBackupRegion: string(name='CrossBackupRegion', description='description: 跨地域备份的目的地域ID。; '),
  crossBackupType: string(name='CrossBackupType', description='description: 跨地域备份保存类型。默认值：**1**，表示每个备份都保存。; '),
  backupEnabledTime: string(name='BackupEnabledTime', description='description: 跨地域备份开启时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。; '),
  backupEnabled: string(name='BackupEnabled', description='description: 跨地域备份总开关，取值：* **Disable**：关闭；* **Enable**：开启。; '),
  logBackupEnabled: string(name='LogBackupEnabled', description='description: 跨地域日志备份开关，取值：* **Disable**：关闭；* **Enable**：开启。; '),
  logBackupEnabledTime: string(name='LogBackupEnabledTime', description='description: 跨地域日志备份开启时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。; '),
  storageOwner: string(name='StorageOwner', description='data.storageOwner'),
  storageType: string(name='StorageType', description='data.storageType'),
  endpoint: string(name='Endpoint', description='data.endpoint'),
  retentType: integer(name='RetentType', description='description: 跨地域备份保留方式。默认值：**1**，表示按时长保留。; '),
  retention: integer(name='Retention', description='description: 跨地域备份保留天数，取值：**7~1825**。; '),
  lockMode: string(name='LockMode', description='description: 实例锁定状态，取值：* **Unlock**：正常，没有锁定；* **ManualLock**：手动触发锁定；* **LockByExpiration**：实例过期自动锁定；* **LockByRestoration**：实例回滚前的自动锁定；* **LockByDiskQuota**：实例空间满自动锁定，不可访问实例。; '),
  relService: string(name='RelService', description='data.relService'),
  relServiceId: string(name='RelServiceId', description='data.relServiceId'),
}

/**
 * DescribeInstanceCrossBackupPolicy 调用DescribeInstanceCrossBackupPolicy接口查询跨地域备份设置。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeInstanceCrossBackupPolicy
  * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
  * &<公共请求参数>
  * ```
  * description:   * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function describeInstanceCrossBackupPolicyWithOptions(request: DescribeInstanceCrossBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeInstanceCrossBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceCrossBackupPolicy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * DescribeInstanceCrossBackupPolicy 调用DescribeInstanceCrossBackupPolicy接口查询跨地域备份设置。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeInstanceCrossBackupPolicy
  * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
  * &<公共请求参数>
  * ```
  * description:   * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function describeInstanceCrossBackupPolicy(request: DescribeInstanceCrossBackupPolicyRequest): DescribeInstanceCrossBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceCrossBackupPolicyWithOptions(request, runtime);
}

model DescribeCrossRegionBackupsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  regionId: string(name='RegionId', description='description: 实例所在地域ID。; '),
  crossBackupRegion?: string(name='CrossBackupRegion', description='description: 跨地域备份目的地域ID。; '),
  crossBackupId?: integer(name='CrossBackupId', description='description: 跨地域备份文件ID。>**CrossBackupId**和起止时间参数（**StartTime**、**EndTime**）必须传入其中一组。; '),
  startTime?: string(name='StartTime', description='description: 查询开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
  endTime?: string(name='EndTime', description='description: 查询结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
  pageSize?: integer(name='PageSize', description='description: 每页记录数，取值：* **30**；* **50**；* **100**。默认值：30。; '),
  pageNumber?: integer(name='PageNumber', description='description: 页码，取值：大于0且不超过Integer的最大值。默认值：**1**。; '),
}

model DescribeCrossRegionBackupsResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  regionId: string(name='RegionId', description='description: 实例所在地域ID。; '),
  startTime: string(name='StartTime', description='description: 查询开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
  endTime: string(name='EndTime', description='description: 查询结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
  totalRecordCount: integer(name='TotalRecordCount', description='description: 总记录数。; '),
  pageRecordCount: integer(name='PageRecordCount', description='description: 本页备份文件个数。; '),
  pageNumber: integer(name='PageNumber', description='description: 页码，取值：大于0且不超过Integer的最大值。默认值：**1**。; '),
  items: {
    item: [
      {
        crossBackupId: integer(name='CrossBackupId', description='description: 跨地域备份文件ID。; '),
        crossBackupRegion: string(name='CrossBackupRegion', description='description: 跨地域备份的目的地域ID。; '),
        backupSetStatus: integer(name='BackupSetStatus', description='description: 备份文件状态，取值：* **0**：完成备份；* **1**：备份失败。; '),
        backupStartTime: string(name='BackupStartTime', description='description: 跨地域备份开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
        backupEndTime: string(name='BackupEndTime', description='description: 跨地域备份结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。; '),
        backupType: string(name='BackupType', description='description: 跨地域备份类型，取值：* **F**：全量；* **I**：增量。; '),
        backupMethod: string(name='BackupMethod', description='description: 跨地域备份方式，取值：* **L**：逻辑备份；* **P**：物理备份。; '),
        crossBackupSetSize: long(name='CrossBackupSetSize', description='description: 跨地域备份文件大小，单位：Byte。; '),
        crossBackupSetFile: string(name='CrossBackupSetFile', description='description: 跨地域备份文件压缩包名称。; '),
        crossBackupDownloadLink: string(name='CrossBackupDownloadLink', description='description: 跨地域备份文件外网下载链接。; '),
        engine: string(name='Engine', description='description: 数据库类型。; '),
        engineVersion: string(name='EngineVersion', description='description: 数据库版本。; '),
        crossBackupSetLocation: string(name='CrossBackupSetLocation', description='description: 备份文件存储位置。; '),
        backupSetScale: integer(name='BackupSetScale', description='description: 备份文件的备份策略，取值：* **0**：实例备份；* **1**：单库备份。; '),
        instanceId: integer(name='InstanceId', description='description: 实例编号。用于区分该备份集产生于主实例或备实例。; '),
        DBInstanceStorageType: string(name='DBInstanceStorageType', description='description: 存储类型。; '),
        category: string(name='Category', description='description: 实例系列，取值：* **Basic**：基础版；* **HighAvailability**：高可用版；* **Finance**：金融版（仅中国站支持）。; '),
        consistentTime: string(name='ConsistentTime', description='description: 备份文件里数据的时间点。; '),
        hasBackupTableMeta: string(name='HasBackupTableMeta', description='hasBackupTableMeta'),
        restoreRegions: {
          restoreRegion: [ string ](name='RestoreRegion', description='RestoreRegion'),
        }(name='RestoreRegions', description='restoreRegion'),
      }
    ](name='Item', description='Item'),
  }(name='Items', description='description: 跨地域备份列表。'),
}

/**
 * DescribeCrossRegionBackups 调用DescribeCrossRegionBackups接口查看某RDS实例跨地域数据备份文件列表。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeCrossRegionBackups
  * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
  * &CrossBackupId=14562
  * &<公共请求参数>
  * ```
  * description:   * 查看日志备份文件请参见[DescribeCrossRegionLogBackupFiles](~~121734~~)。
  * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function describeCrossRegionBackupsWithOptions(request: DescribeCrossRegionBackupsRequest, runtime: Util.RuntimeOptions): DescribeCrossRegionBackupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeCrossRegionBackups', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * DescribeCrossRegionBackups 调用DescribeCrossRegionBackups接口查看某RDS实例跨地域数据备份文件列表。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeCrossRegionBackups
  * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
  * &CrossBackupId=14562
  * &<公共请求参数>
  * ```
  * description:   * 查看日志备份文件请参见[DescribeCrossRegionLogBackupFiles](~~121734~~)。
  * 仅适用于如下实例：
  * * MySQL 5.7高可用本地SSD盘版
  * * MySQL 5.6

 */
async function describeCrossRegionBackups(request: DescribeCrossRegionBackupsRequest): DescribeCrossRegionBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCrossRegionBackupsWithOptions(request, runtime);
}

model DescribeReadDBInstanceDelayRequest = {
  securityToken?: string(name='SecurityToken', description='stsSecurityToken'),
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
  readInstanceId: string(name='ReadInstanceId', description='readInstanceName'),
}

model DescribeReadDBInstanceDelayResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  readDBInstanceId: string(name='ReadDBInstanceId', description='data.readDBInstanceName'),
  delayTime: integer(name='DelayTime', description='data.delayTime'),
  items: {
    items: [
      {
        DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
        readonlyInstanceDelay: {
          readonlyInstanceDelay: [
            {
              replayLatency: string(name='ReplayLatency', description='replayLatency'),
              flushLag: string(name='FlushLag', description='flushLag'),
              flushLatency: string(name='FlushLatency', description='flushLatency'),
              sendLatency: string(name='SendLatency', description='sendLatency'),
              writeLag: string(name='WriteLag', description='writeLag'),
              replayLag: string(name='ReplayLag', description='replayLag'),
              writeLatency: string(name='WriteLatency', description='writeLatency'),
              readDBInstanceName: string(name='ReadDBInstanceName', description='readDBInstanceName'),
            }
          ](name='ReadonlyInstanceDelay', description='ReadonlyInstanceDelay'),
        }(name='ReadonlyInstanceDelay', description='readonlyInstanceDelay'),
        readDBInstanceNames: {
          readDBInstanceName: [ string ](name='ReadDBInstanceName', description='ReadDBInstanceName'),
        }(name='ReadDBInstanceNames', description='readDBInstanceNames'),
        readDelayTimes: {
          readDelayTime: [ string ](name='ReadDelayTime', description='ReadDelayTime'),
        }(name='ReadDelayTimes', description='readDelayTimes'),
      }
    ](name='Items', description='Items'),
  }(name='Items', description='data.items'),
}

async function describeReadDBInstanceDelayWithOptions(request: DescribeReadDBInstanceDelayRequest, runtime: Util.RuntimeOptions): DescribeReadDBInstanceDelayResponse {
  Util.validateModel(request);
  return doRequest('DescribeReadDBInstanceDelay', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeReadDBInstanceDelay(request: DescribeReadDBInstanceDelayRequest): DescribeReadDBInstanceDelayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReadDBInstanceDelayWithOptions(request, runtime);
}

model RestoreTableRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  backupId?: string(name='BackupId', description='backupId'),
  restoreTime?: string(name='RestoreTime', description='restoreTime'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  tableMeta: string(name='TableMeta', description='tableMeta'),
}

model RestoreTableResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function restoreTableWithOptions(request: RestoreTableRequest, runtime: Util.RuntimeOptions): RestoreTableResponse {
  Util.validateModel(request);
  return doRequest('RestoreTable', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function restoreTable(request: RestoreTableRequest): RestoreTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreTableWithOptions(request, runtime);
}

model CreateParameterGroupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  parameterGroupName: string(name='ParameterGroupName', description='parameterGroupName'),
  engine: string(name='Engine', description='engine'),
  engineVersion: string(name='EngineVersion', description='engineVersion'),
  parameters: string(name='Parameters', description='parameters'),
  parameterGroupDesc?: string(name='ParameterGroupDesc', description='parameterGroupDesc'),
}

model CreateParameterGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createParameterGroupWithOptions(request: CreateParameterGroupRequest, runtime: Util.RuntimeOptions): CreateParameterGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateParameterGroup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createParameterGroup(request: CreateParameterGroupRequest): CreateParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createParameterGroupWithOptions(request, runtime);
}

model DescribeParameterGroupsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
}

model DescribeParameterGroupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  signalForOptimizeParams: boolean(name='SignalForOptimizeParams', description='data.signalForOptimizeParams'),
  parameterGroups: {
    parameterGroup: [
      {
        parameterGroupType: integer(name='ParameterGroupType', description='parameterGroupType'),
        parameterGroupName: string(name='ParameterGroupName', description='parameterGroupName'),
        paramCounts: integer(name='ParamCounts', description='paramCounts'),
        parameterGroupDesc: string(name='ParameterGroupDesc', description='parameterGroupDesc'),
        forceRestart: integer(name='ForceRestart', description='forceRestart'),
        engine: string(name='Engine', description='engine'),
        engineVersion: string(name='EngineVersion', description='engineVersion'),
        createTime: string(name='CreateTime', description='created'),
        updateTime: string(name='UpdateTime', description='modified'),
        parameterGroupId: string(name='ParameterGroupId', description='paramGroupId'),
      }
    ](name='ParameterGroup', description='ParameterGroup'),
  }(name='ParameterGroups', description='data.parameterGroups'),
}

async function describeParameterGroupsWithOptions(request: DescribeParameterGroupsRequest, runtime: Util.RuntimeOptions): DescribeParameterGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeParameterGroups', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeParameterGroups(request: DescribeParameterGroupsRequest): DescribeParameterGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterGroupsWithOptions(request, runtime);
}

model CloneParameterGroupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  targetRegionId: string(name='TargetRegionId', description='targetRegionId'),
  parameterGroupId: string(name='ParameterGroupId', description='parameterGroupId'),
  parameterGroupName: string(name='ParameterGroupName', description='parameterGroupName'),
  parameterGroupDesc?: string(name='ParameterGroupDesc', description='parameterGroupDesc'),
}

model CloneParameterGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function cloneParameterGroupWithOptions(request: CloneParameterGroupRequest, runtime: Util.RuntimeOptions): CloneParameterGroupResponse {
  Util.validateModel(request);
  return doRequest('CloneParameterGroup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function cloneParameterGroup(request: CloneParameterGroupRequest): CloneParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneParameterGroupWithOptions(request, runtime);
}

model DescribeParameterGroupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  parameterGroupId: string(name='ParameterGroupId', description='parameterGroupId'),
  regionId: string(name='RegionId', description='regionId'),
}

model DescribeParameterGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  paramGroup: {
    parameterGroup: [
      {
        parameterGroupType: integer(name='ParameterGroupType', description='parameterGroupType'),
        parameterGroupName: string(name='ParameterGroupName', description='parameterGroupName'),
        paramCounts: integer(name='ParamCounts', description='paramCounts'),
        parameterGroupDesc: string(name='ParameterGroupDesc', description='parameterGroupDesc'),
        forceRestart: integer(name='ForceRestart', description='forceRestart'),
        engine: string(name='Engine', description='engine'),
        engineVersion: string(name='EngineVersion', description='engineVersion'),
        parameterGroupId: string(name='ParameterGroupId', description='paramGroupId'),
        createTime: string(name='CreateTime', description='created'),
        updateTime: string(name='UpdateTime', description='modified'),
        paramDetail: {
          parameterDetail: [
            {
              paramName: string(name='ParamName', description='paramName'),
              paramValue: string(name='ParamValue', description='paramValue'),
            }
          ](name='ParameterDetail', description='ParameterDetail'),
        }(name='ParamDetail', description='paramDetail'),
      }
    ](name='ParameterGroup', description='ParameterGroup'),
  }(name='ParamGroup', description='data.paramGroup'),
}

async function describeParameterGroupWithOptions(request: DescribeParameterGroupRequest, runtime: Util.RuntimeOptions): DescribeParameterGroupResponse {
  Util.validateModel(request);
  return doRequest('DescribeParameterGroup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeParameterGroup(request: DescribeParameterGroupRequest): DescribeParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterGroupWithOptions(request, runtime);
}

model ModifyParameterGroupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  parameterGroupId: string(name='ParameterGroupId', description='parameterGroupId'),
  parameterGroupName?: string(name='ParameterGroupName', description='parameterGroupName'),
  parameterGroupDesc?: string(name='ParameterGroupDesc', description='parameterGroupDesc'),
  parameters?: string(name='Parameters', description='parameters'),
  regionId: string(name='RegionId', description='regionId'),
}

model ModifyParameterGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyParameterGroupWithOptions(request: ModifyParameterGroupRequest, runtime: Util.RuntimeOptions): ModifyParameterGroupResponse {
  Util.validateModel(request);
  return doRequest('ModifyParameterGroup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyParameterGroup(request: ModifyParameterGroupRequest): ModifyParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParameterGroupWithOptions(request, runtime);
}

model DeleteParameterGroupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  parameterGroupId: string(name='ParameterGroupId', description='parameterGroupId'),
}

model DeleteParameterGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteParameterGroupWithOptions(request: DeleteParameterGroupRequest, runtime: Util.RuntimeOptions): DeleteParameterGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteParameterGroup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function deleteParameterGroup(request: DeleteParameterGroupRequest): DeleteParameterGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteParameterGroupWithOptions(request, runtime);
}

model ModifySQLCollectorRetentionRequest = {
  securityToken?: string(name='SecurityToken', description='stsSecurityToken'),
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  configValue: string(name='ConfigValue', description='configValue'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model ModifySQLCollectorRetentionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifySQLCollectorRetentionWithOptions(request: ModifySQLCollectorRetentionRequest, runtime: Util.RuntimeOptions): ModifySQLCollectorRetentionResponse {
  Util.validateModel(request);
  return doRequest('ModifySQLCollectorRetention', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifySQLCollectorRetention(request: ModifySQLCollectorRetentionRequest): ModifySQLCollectorRetentionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySQLCollectorRetentionWithOptions(request, runtime);
}

model DescribeSQLCollectorRetentionRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  securityToken?: string(name='SecurityToken', description='stsSecurityToken'),
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model DescribeSQLCollectorRetentionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  configValue: string(name='ConfigValue', description='data.configValue'),
}

async function describeSQLCollectorRetentionWithOptions(request: DescribeSQLCollectorRetentionRequest, runtime: Util.RuntimeOptions): DescribeSQLCollectorRetentionResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLCollectorRetention', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSQLCollectorRetention(request: DescribeSQLCollectorRetentionRequest): DescribeSQLCollectorRetentionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLCollectorRetentionWithOptions(request, runtime);
}

model CheckInstanceExistRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
}

model CheckInstanceExistResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isExistInstance: boolean(name='IsExistInstance', description='data'),
}

async function checkInstanceExistWithOptions(request: CheckInstanceExistRequest, runtime: Util.RuntimeOptions): CheckInstanceExistResponse {
  Util.validateModel(request);
  return doRequest('CheckInstanceExist', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function checkInstanceExist(request: CheckInstanceExistRequest): CheckInstanceExistResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkInstanceExistWithOptions(request, runtime);
}

model DescribeLogBackupFilesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeLogBackupFilesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  totalFileSize: long(name='TotalFileSize', description='data.totalFileSize'),
  items: {
    binLogFile: [
      {
        fileSize: long(name='FileSize', description='fileSize'),
        logBeginTime: string(name='LogBeginTime', description='logBeginTime'),
        logEndTime: string(name='LogEndTime', description='logEndTime'),
        downloadLink: string(name='DownloadLink', description='downloadLink'),
        intranetDownloadLink: string(name='IntranetDownloadLink', description='intranetDownloadLink'),
        linkExpiredTime: string(name='LinkExpiredTime', description='linkExpiredTime'),
      }
    ](name='BinLogFile', description='BinLogFile'),
  }(name='Items', description='data.items'),
}

async function describeLogBackupFilesWithOptions(request: DescribeLogBackupFilesRequest, runtime: Util.RuntimeOptions): DescribeLogBackupFilesResponse {
  Util.validateModel(request);
  return doRequest('DescribeLogBackupFiles', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeLogBackupFiles(request: DescribeLogBackupFilesRequest): DescribeLogBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogBackupFilesWithOptions(request, runtime);
}

model MigrateSecurityIPModeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: The AccessKey ID issued by Alibaba Cloud for users to access services. ; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='description: The ID of the instance. ; '),
}

model MigrateSecurityIPModeResponse = {
  requestId: string(name='RequestId', description='description: The ID of the request. ; '),
  DBInstanceId: string(name='DBInstanceId', description='description: The ID of the instance. ; '),
  securityIPMode: string(name='SecurityIPMode', description='description: The mode of the whitelist after the switch. Valid values:**safety**.; '),
}

/**
 * MigrateSecurityIPMode You can call this operation to switch a whitelist from normal mode to safe mode.
  * request demo:   * http(s)://rds.aliyuncs.com/? Action=MigrateSecurityIPMode
  * &DBInstanceId=rm-uf6wjk5xxxxxxx
  * &<Common request parameters>
  * description:   * * In normal mode, IP addresses in the whitelist apply to both classic networks and VPCs. In case of security risks, we recommend that you switch to safe mode.
  * * In safe mode, IP addresses in the whitelist are divided into VPC IP addresses and the IP addresses of classic networks and public networks.
  * > 
  * * Safe mode cannot be switched to normal mode.
  * * This operation is not applicable to SQL Server and MariaDB instances. 

 */
async function migrateSecurityIPModeWithOptions(request: MigrateSecurityIPModeRequest, runtime: Util.RuntimeOptions): MigrateSecurityIPModeResponse {
  Util.validateModel(request);
  return doRequest('MigrateSecurityIPMode', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * MigrateSecurityIPMode You can call this operation to switch a whitelist from normal mode to safe mode.
  * request demo:   * http(s)://rds.aliyuncs.com/? Action=MigrateSecurityIPMode
  * &DBInstanceId=rm-uf6wjk5xxxxxxx
  * &<Common request parameters>
  * description:   * * In normal mode, IP addresses in the whitelist apply to both classic networks and VPCs. In case of security risks, we recommend that you switch to safe mode.
  * * In safe mode, IP addresses in the whitelist are divided into VPC IP addresses and the IP addresses of classic networks and public networks.
  * > 
  * * Safe mode cannot be switched to normal mode.
  * * This operation is not applicable to SQL Server and MariaDB instances. 

 */
async function migrateSecurityIPMode(request: MigrateSecurityIPModeRequest): MigrateSecurityIPModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateSecurityIPModeWithOptions(request, runtime);
}

model SwitchDBInstanceVpcRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  VPCId?: string(name='VPCId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='cloudInstanceIp'),
}

model SwitchDBInstanceVpcResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function switchDBInstanceVpcWithOptions(request: SwitchDBInstanceVpcRequest, runtime: Util.RuntimeOptions): SwitchDBInstanceVpcResponse {
  Util.validateModel(request);
  return doRequest('SwitchDBInstanceVpc', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function switchDBInstanceVpc(request: SwitchDBInstanceVpcRequest): SwitchDBInstanceVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceVpcWithOptions(request, runtime);
}

model DescribeCollationTimeZonesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
}

model DescribeCollationTimeZonesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  collationTimeZones: {
    collationTimeZone: [
      {
        timeZone: string(name='TimeZone', description='timezone'),
        standardTimeOffset: string(name='StandardTimeOffset', description='collation'),
        description: string(name='Description', description='description'),
      }
    ](name='CollationTimeZone', description='CollationTimeZone'),
  }(name='CollationTimeZones', description='data'),
}

async function describeCollationTimeZonesWithOptions(request: DescribeCollationTimeZonesRequest, runtime: Util.RuntimeOptions): DescribeCollationTimeZonesResponse {
  Util.validateModel(request);
  return doRequest('DescribeCollationTimeZones', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeCollationTimeZones(request: DescribeCollationTimeZonesRequest): DescribeCollationTimeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCollationTimeZonesWithOptions(request, runtime);
}

model DescribeInstanceKeywordsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  key?: string(name='Key', description='key'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeInstanceKeywordsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  key: string(name='Key', description='data.key'),
  words: {
    word: [ string ](name='word', description='word'),
  }(name='Words', description='data.words'),
}

async function describeInstanceKeywordsWithOptions(request: DescribeInstanceKeywordsRequest, runtime: Util.RuntimeOptions): DescribeInstanceKeywordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceKeywords', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeInstanceKeywords(request: DescribeInstanceKeywordsRequest): DescribeInstanceKeywordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceKeywordsWithOptions(request, runtime);
}

model ModifyCollationTimeZoneRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  collation?: string(name='Collation', description='collation'),
  timezone?: string(name='Timezone', description='timezone'),
}

model ModifyCollationTimeZoneResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  taskId: string(name='TaskId', description='data.taskId'),
  timezone: string(name='Timezone', description='data.timeZone'),
  collation: string(name='Collation', description='data.collation'),
}

async function modifyCollationTimeZoneWithOptions(request: ModifyCollationTimeZoneRequest, runtime: Util.RuntimeOptions): ModifyCollationTimeZoneResponse {
  Util.validateModel(request);
  return doRequest('ModifyCollationTimeZone', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyCollationTimeZone(request: ModifyCollationTimeZoneRequest): ModifyCollationTimeZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCollationTimeZoneWithOptions(request, runtime);
}

model DescribeBackupDatabaseRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  backupId?: string(name='BackupId', description='backupId'),
}

model DescribeBackupDatabaseResponse = {
  requestId: string(name='RequestId', description='requestId'),
  databaseNames: string(name='DatabaseNames', description='data.backupDbList'),
}

async function describeBackupDatabaseWithOptions(request: DescribeBackupDatabaseRequest, runtime: Util.RuntimeOptions): DescribeBackupDatabaseResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupDatabase', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeBackupDatabase(request: DescribeBackupDatabaseRequest): DescribeBackupDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupDatabaseWithOptions(request, runtime);
}

model CopyDatabaseBetweenInstancesRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='sourceDBInstanceName'),
  targetDBInstanceId: string(name='TargetDBInstanceId', description='targetDBInstanceName'),
  dbNames: string(name='DbNames', description='backupDbNames'),
  backupId?: string(name='BackupId', description='backupSetId'),
  restoreTime?: string(name='RestoreTime', description='restoreTime'),
  syncUserPrivilege?: string(name='SyncUserPrivilege', description='syncUserPrivilege'),
}

model CopyDatabaseBetweenInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceId'),
}

async function copyDatabaseBetweenInstancesWithOptions(request: CopyDatabaseBetweenInstancesRequest, runtime: Util.RuntimeOptions): CopyDatabaseBetweenInstancesResponse {
  Util.validateModel(request);
  return doRequest('CopyDatabaseBetweenInstances', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function copyDatabaseBetweenInstances(request: CopyDatabaseBetweenInstancesRequest): CopyDatabaseBetweenInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyDatabaseBetweenInstancesWithOptions(request, runtime);
}

model RecoveryDBInstanceRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceClass?: string(name='DBInstanceClass', description='dbInstanceClass'),
  DBInstanceStorage?: integer(name='DBInstanceStorage', description='dbInstanceStorage'),
  payType?: string(name='PayType', description='payType'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='instanceNetworkType'),
  DBInstanceId?: string(name='DBInstanceId', description='sourceDBInstanceName'),
  targetDBInstanceId?: string(name='TargetDBInstanceId', description='targetDBInstanceName'),
  dbNames: string(name='DbNames', description='backupDbNames'),
  backupId?: string(name='BackupId', description='backupSetId'),
  restoreTime?: string(name='RestoreTime', description='restoreTime'),
  VPCId?: string(name='VPCId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='cloudInstanceIp'),
  usedTime?: string(name='UsedTime', description='usedTime'),
  period?: string(name='Period', description='timeType'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='dbInstanceStorageType'),
}

model RecoveryDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceId'),
  orderId: string(name='OrderId', description='data.orderId'),
}

async function recoveryDBInstanceWithOptions(request: RecoveryDBInstanceRequest, runtime: Util.RuntimeOptions): RecoveryDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('RecoveryDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function recoveryDBInstance(request: RecoveryDBInstanceRequest): RecoveryDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoveryDBInstanceWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  instanceChargeType: string(name='InstanceChargeType', description='chargeType'),
  engine?: string(name='Engine', description='engine'),
  engineVersion?: string(name='EngineVersion', description='version'),
  DBInstanceClass?: string(name='DBInstanceClass', description='dbInstanceClass'),
  orderType?: string(name='OrderType', description='orderType'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='storageType'),
  category?: string(name='Category', description='category'),
  dispenseMode?: integer(name='DispenseMode', description='dispenseMode'),
}

model DescribeAvailableResourceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  availableZones: {
    availableZone: [
      {
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='zoneId'),
        status: string(name='Status', description='status'),
        networkTypes: string(name='NetworkTypes', description='networkTypes'),
        supportedEngines: {
          supportedEngine: [
            {
              engine: string(name='Engine', description='engine'),
              supportedEngineVersions: {
                supportedEngineVersion: [
                  {
                    version: string(name='Version', description='version'),
                    supportedCategorys: {
                      supportedCategory: [
                        {
                          category: string(name='Category', description='category'),
                          supportedStorageTypes: {
                            supportedStorageType: [
                              {
                                storageType: string(name='StorageType', description='dbInstanceStorageType'),
                                availableResources: {
                                  availableResource: [
                                    {
                                      DBInstanceClass: string(name='DBInstanceClass', description='value'),
                                      storageRange: string(name='StorageRange', description='storageRange'),
                                      DBInstanceStorageRange: {
                                        max: integer(name='Max', description='max'),
                                        min: integer(name='Min', description='min'),
                                        step: integer(name='Step', description='step'),
                                      }(name='DBInstanceStorageRange', description='range'),
                                    }
                                  ](name='AvailableResource', description='AvailableResource'),
                                }(name='AvailableResources', description='availableResources'),
                              }
                            ](name='SupportedStorageType', description='SupportedStorageType'),
                          }(name='SupportedStorageTypes', description='storageTypes'),
                        }
                      ](name='SupportedCategory', description='SupportedCategory'),
                    }(name='SupportedCategorys', description='categorys'),
                  }
                ](name='SupportedEngineVersion', description='SupportedEngineVersion'),
              }(name='SupportedEngineVersions', description='versions'),
            }
          ](name='SupportedEngine', description='SupportedEngine'),
        }(name='SupportedEngines', description='engines'),
      }
    ](name='AvailableZone', description='AvailableZone'),
  }(name='AvailableZones', description='data.availableZones'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableResource', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DestroyDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DestroyDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function destroyDBInstanceWithOptions(request: DestroyDBInstanceRequest, runtime: Util.RuntimeOptions): DestroyDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('DestroyDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function destroyDBInstance(request: DestroyDBInstanceRequest): DestroyDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return destroyDBInstanceWithOptions(request, runtime);
}

model ModifyReadonlyInstanceDelayReplicationTimeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  readSQLReplicationTime: string(name='ReadSQLReplicationTime', description='sqlDelay'),
}

model ModifyReadonlyInstanceDelayReplicationTimeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  readSQLReplicationTime: string(name='ReadSQLReplicationTime', description='data.sqlDelay'),
  taskId: string(name='TaskId', description='data.taskId'),
}

async function modifyReadonlyInstanceDelayReplicationTimeWithOptions(request: ModifyReadonlyInstanceDelayReplicationTimeRequest, runtime: Util.RuntimeOptions): ModifyReadonlyInstanceDelayReplicationTimeResponse {
  Util.validateModel(request);
  return doRequest('ModifyReadonlyInstanceDelayReplicationTime', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyReadonlyInstanceDelayReplicationTime(request: ModifyReadonlyInstanceDelayReplicationTimeRequest): ModifyReadonlyInstanceDelayReplicationTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReadonlyInstanceDelayReplicationTimeWithOptions(request, runtime);
}

model DescribeDBInstanceProxyConfigurationRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
}

model DescribeDBInstanceProxyConfigurationResponse = {
  requestId: string(name='RequestId', description='requestId'),
  transparentSwitchConfiguration: string(name='TransparentSwitchConfiguration', description='data.transparentSwitchConfiguration'),
  persistentConnectionsConfiguration: string(name='PersistentConnectionsConfiguration', description='data.persistentConnectionsConfiguration'),
  attacksProtectionConfiguration: string(name='AttacksProtectionConfiguration', description='data.attacksProtectionConfiguration'),
}

async function describeDBInstanceProxyConfigurationWithOptions(request: DescribeDBInstanceProxyConfigurationRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceProxyConfigurationResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceProxyConfiguration', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstanceProxyConfiguration(request: DescribeDBInstanceProxyConfigurationRequest): DescribeDBInstanceProxyConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceProxyConfigurationWithOptions(request, runtime);
}

model CreateOnlineDatabaseTaskRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBName: string(name='DBName', description='dbName'),
  migrateTaskId: string(name='MigrateTaskId', description='migrateTaskId'),
  checkDBMode: string(name='CheckDBMode', description='dbCheckModel'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CreateOnlineDatabaseTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createOnlineDatabaseTaskWithOptions(request: CreateOnlineDatabaseTaskRequest, runtime: Util.RuntimeOptions): CreateOnlineDatabaseTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateOnlineDatabaseTask', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createOnlineDatabaseTask(request: CreateOnlineDatabaseTaskRequest): CreateOnlineDatabaseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOnlineDatabaseTaskWithOptions(request, runtime);
}

model UpgradeDBInstanceKernelVersionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  upgradeTime?: string(name='UpgradeTime', description='switchTimeMode'),
  switchTime?: string(name='SwitchTime', description='switchTime'),
}

model UpgradeDBInstanceKernelVersionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceName: string(name='DBInstanceName', description='data.dbInstanceName'),
  taskId: string(name='TaskId', description='data.taskId'),
  targetMinorVersion: string(name='TargetMinorVersion', description='data.targetMinorVersion'),
}

async function upgradeDBInstanceKernelVersionWithOptions(request: UpgradeDBInstanceKernelVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceKernelVersionResponse {
  Util.validateModel(request);
  return doRequest('UpgradeDBInstanceKernelVersion', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function upgradeDBInstanceKernelVersion(request: UpgradeDBInstanceKernelVersionRequest): UpgradeDBInstanceKernelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceKernelVersionWithOptions(request, runtime);
}

model ModifyDBInstanceProxyConfigurationRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  proxyConfigurationKey: string(name='ProxyConfigurationKey', description='proxyConfigurationKey'),
  proxyConfigurationValue: string(name='ProxyConfigurationValue', description='proxyConfigurationValue'),
}

model ModifyDBInstanceProxyConfigurationResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceProxyConfigurationWithOptions(request: ModifyDBInstanceProxyConfigurationRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceProxyConfigurationResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceProxyConfiguration', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceProxyConfiguration(request: ModifyDBInstanceProxyConfigurationRequest): ModifyDBInstanceProxyConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceProxyConfigurationWithOptions(request, runtime);
}

model DescribeSecurityGroupConfigurationRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
}

model DescribeSecurityGroupConfigurationResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceName: string(name='DBInstanceName', description='data.dbInstanceName'),
  items: {
    ecsSecurityGroupRelation: [
      {
        regionId: string(name='RegionId', description='regionId'),
        securityGroupId: string(name='SecurityGroupId', description='securityGroupId'),
        networkType: string(name='NetworkType', description='netType'),
      }
    ](name='EcsSecurityGroupRelation', description='EcsSecurityGroupRelation'),
  }(name='Items', description='data.rdsEcsSecurityGroupRel'),
}

async function describeSecurityGroupConfigurationWithOptions(request: DescribeSecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupConfigurationResponse {
  Util.validateModel(request);
  return doRequest('DescribeSecurityGroupConfiguration', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSecurityGroupConfiguration(request: DescribeSecurityGroupConfigurationRequest): DescribeSecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupConfigurationWithOptions(request, runtime);
}

model ModifySecurityGroupConfigurationRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  securityGroupId: string(name='SecurityGroupId', description='ecsSecurityGroupId'),
}

model ModifySecurityGroupConfigurationResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceName: string(name='DBInstanceName', description='data.dbInstanceName'),
  items: {
    ecsSecurityGroupRelation: [
      {
        regionId: string(name='RegionId', description='regionId'),
        securityGroupId: string(name='SecurityGroupId', description='securityGroupId'),
        networkType: string(name='NetworkType', description='netType'),
      }
    ](name='EcsSecurityGroupRelation', description='EcsSecurityGroupRelation'),
  }(name='Items', description='data.rdsEcsSecurityGroupRel'),
}

async function modifySecurityGroupConfigurationWithOptions(request: ModifySecurityGroupConfigurationRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupConfigurationResponse {
  Util.validateModel(request);
  return doRequest('ModifySecurityGroupConfiguration', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifySecurityGroupConfiguration(request: ModifySecurityGroupConfigurationRequest): ModifySecurityGroupConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupConfigurationWithOptions(request, runtime);
}

model DescribeOssDownloadsForSQLServerRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  migrateTaskId: string(name='MigrateTaskId', description='migrateTaskId'),
}

model DescribeOssDownloadsForSQLServerResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceName: string(name='DBInstanceName', description='data.dbInstanceName'),
  migrateIaskId: string(name='MigrateIaskId', description='data.migrateIaskId'),
  items: {
    ossDownload: [
      {
        fileName: string(name='FileName', description='fileName'),
        createTime: string(name='CreateTime', description='createTime'),
        bakType: string(name='BakType', description='bakType'),
        fileSize: string(name='FileSize', description='fileSize'),
        status: string(name='Status', description='status'),
        isAvail: string(name='IsAvail', description='isAvail'),
        desc: string(name='Desc', description='desc'),
      }
    ](name='OssDownload', description='OssDownload'),
  }(name='Items', description='data.items'),
}

async function describeOssDownloadsForSQLServerWithOptions(request: DescribeOssDownloadsForSQLServerRequest, runtime: Util.RuntimeOptions): DescribeOssDownloadsForSQLServerResponse {
  Util.validateModel(request);
  return doRequest('DescribeOssDownloadsForSQLServer', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeOssDownloadsForSQLServer(request: DescribeOssDownloadsForSQLServerRequest): DescribeOssDownloadsForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOssDownloadsForSQLServerWithOptions(request, runtime);
}

model DescribeMigrateTasksForSQLServerRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
}

model DescribeMigrateTasksForSQLServerResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceID: string(name='DBInstanceID', description='data.dbInstanceId'),
  DBInstanceName: string(name='DBInstanceName', description='data.dbInstanceName'),
  startTime: string(name='StartTime', description='data.startTime'),
  endTime: string(name='EndTime', description='data.endTime'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalNumbers'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  items: {
    migrateTask: [
      {
        DBName: string(name='DBName', description='dbName'),
        migrateIaskId: string(name='MigrateIaskId', description='migrateIaskId'),
        createTime: string(name='CreateTime', description='createTime'),
        endTime: string(name='EndTime', description='endTime'),
        taskType: string(name='TaskType', description='taskType'),
        status: string(name='Status', description='status'),
        isDBReplaced: string(name='IsDBReplaced', description='isDBReplaced'),
        desc: string(name='Desc', description='desc'),
      }
    ](name='MigrateTask', description='MigrateTask'),
  }(name='Items', description='data.items'),
}

async function describeMigrateTasksForSQLServerWithOptions(request: DescribeMigrateTasksForSQLServerRequest, runtime: Util.RuntimeOptions): DescribeMigrateTasksForSQLServerResponse {
  Util.validateModel(request);
  return doRequest('DescribeMigrateTasksForSQLServer', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeMigrateTasksForSQLServer(request: DescribeMigrateTasksForSQLServerRequest): DescribeMigrateTasksForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrateTasksForSQLServerWithOptions(request, runtime);
}

model CreateMigrateTaskForSQLServerRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBName: string(name='DBName', description='dbName'),
  taskType: string(name='TaskType', description='taskType'),
  isOnlineDB: string(name='IsOnlineDB', description='isOnlineDB'),
  OSSUrls: string(name='OSSUrls', description='ossUrls'),
}

model CreateMigrateTaskForSQLServerResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceId'),
  DBInstanceName: string(name='DBInstanceName', description='data.dbInstanceName'),
  taskId: string(name='TaskId', description='data.taskId'),
  DBName: string(name='DBName', description='data.dbName'),
  migrateIaskId: string(name='MigrateIaskId', description='data.migrateIaskId'),
  taskType: string(name='TaskType', description='data.taskType'),
}

async function createMigrateTaskForSQLServerWithOptions(request: CreateMigrateTaskForSQLServerRequest, runtime: Util.RuntimeOptions): CreateMigrateTaskForSQLServerResponse {
  Util.validateModel(request);
  return doRequest('CreateMigrateTaskForSQLServer', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createMigrateTaskForSQLServer(request: CreateMigrateTaskForSQLServerRequest): CreateMigrateTaskForSQLServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMigrateTaskForSQLServerWithOptions(request, runtime);
}

model CreateMigrateTaskRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBName: string(name='DBName', description='dbName'),
  backupMode: string(name='BackupMode', description='taskType'),
  isOnlineDB: string(name='IsOnlineDB', description='isOnlineDB'),
  checkDBMode?: string(name='CheckDBMode', description='checkDbMode'),
  ossObjectPositions?: string(name='OssObjectPositions', description='OssObjectPositions'),
  OSSUrls?: string(name='OSSUrls', description='ossUrls'),
  migrateTaskId?: string(name='MigrateTaskId', description='migrateTaskId'),
}

model CreateMigrateTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  taskId: string(name='TaskId', description='data.taskId'),
  DBName: string(name='DBName', description='data.dbName'),
  migrateTaskId: string(name='MigrateTaskId', description='data.migrateTaskId'),
  backupMode: string(name='BackupMode', description='data.taskType'),
}

async function createMigrateTaskWithOptions(request: CreateMigrateTaskRequest, runtime: Util.RuntimeOptions): CreateMigrateTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateMigrateTask', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createMigrateTask(request: CreateMigrateTaskRequest): CreateMigrateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMigrateTaskWithOptions(request, runtime);
}

model DescribeOssDownloadsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  migrateTaskId: string(name='MigrateTaskId', description='migrateTaskId'),
}

model DescribeOssDownloadsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  migrateTaskId: string(name='MigrateTaskId', description='data.migrateIaskId'),
  items: {
    ossDownload: [
      {
        fileName: string(name='FileName', description='fileName'),
        createTime: string(name='CreateTime', description='createTime'),
        endTime: string(name='EndTime', description='endTime'),
        backupMode: string(name='BackupMode', description='bakType'),
        fileSize: string(name='FileSize', description='fileSize'),
        status: string(name='Status', description='status'),
        isAvailable: string(name='IsAvailable', description='isAvail'),
        description: string(name='Description', description='desc'),
      }
    ](name='OssDownload', description='OssDownload'),
  }(name='Items', description='data.items'),
}

async function describeOssDownloadsWithOptions(request: DescribeOssDownloadsRequest, runtime: Util.RuntimeOptions): DescribeOssDownloadsResponse {
  Util.validateModel(request);
  return doRequest('DescribeOssDownloads', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeOssDownloads(request: DescribeOssDownloadsRequest): DescribeOssDownloadsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOssDownloadsWithOptions(request, runtime);
}

model DescribeMigrateTasksRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
}

model DescribeMigrateTasksResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalNumbers'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  items: {
    migrateTask: [
      {
        DBName: string(name='DBName', description='dbName'),
        migrateTaskId: string(name='MigrateTaskId', description='migrateTaskId'),
        createTime: string(name='CreateTime', description='createTime'),
        endTime: string(name='EndTime', description='endTime'),
        backupMode: string(name='BackupMode', description='taskType'),
        status: string(name='Status', description='status'),
        isDBReplaced: string(name='IsDBReplaced', description='isDBReplaced'),
        description: string(name='Description', description='desc'),
      }
    ](name='MigrateTask', description='MigrateTask'),
  }(name='Items', description='data.items'),
}

async function describeMigrateTasksWithOptions(request: DescribeMigrateTasksRequest, runtime: Util.RuntimeOptions): DescribeMigrateTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeMigrateTasks', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeMigrateTasks(request: DescribeMigrateTasksRequest): DescribeMigrateTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMigrateTasksWithOptions(request, runtime);
}

model CopyDatabaseRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
}

model CopyDatabaseResponse = {
  DBName: string(name='DBName', description='dbName'),
  DBStatus: string(name='DBStatus', description='dbStatus'),
  taskId: string(name='TaskId', description='taskId'),
}

async function copyDatabaseWithOptions(request: CopyDatabaseRequest, runtime: Util.RuntimeOptions): CopyDatabaseResponse {
  Util.validateModel(request);
  return doRequest('CopyDatabase', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function copyDatabase(request: CopyDatabaseRequest): CopyDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyDatabaseWithOptions(request, runtime);
}

model ResetAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
  accountPassword: string(name='AccountPassword', description='accountPassword'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ResetAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resetAccountWithOptions(request: ResetAccountRequest, runtime: Util.RuntimeOptions): ResetAccountResponse {
  Util.validateModel(request);
  return doRequest('ResetAccount', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function resetAccount(request: ResetAccountRequest): ResetAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountWithOptions(request, runtime);
}

model DescribeDBInstancesAsCsvRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
}

model DescribeDBInstancesAsCsvResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: {
    DBInstanceAttribute: [
      {
        DBInstanceId: string(name='DBInstanceId', description='model.dbInstanceName'),
        payType: string(name='PayType', description='model.dbInstancePayType'),
        DBInstanceClassType: string(name='DBInstanceClassType', description='model.dbInstanceType'),
        DBInstanceType: string(name='DBInstanceType', description='model.dbInstanceUsedType'),
        regionId: string(name='RegionId', description='model.region'),
        connectionString: string(name='ConnectionString', description='model.connectionString'),
        port: string(name='Port', description='model.port'),
        engine: string(name='Engine', description='model.engine'),
        engineVersion: string(name='EngineVersion', description='model.engineVersion'),
        DBInstanceClass: string(name='DBInstanceClass', description='model.dbInstanceClass'),
        DBInstanceMemory: long(name='DBInstanceMemory', description='model.dbInstanceMemory'),
        DBInstanceStorage: integer(name='DBInstanceStorage', description='model.dbInstanceStorage'),
        DBInstanceNetType: string(name='DBInstanceNetType', description='model.dbInstanceNetType'),
        DBInstanceStatus: string(name='DBInstanceStatus', description='model.dbInstanceStatusDesc'),
        DBInstanceDescription: string(name='DBInstanceDescription', description='model.dbInstanceDescription'),
        lockMode: string(name='LockMode', description='model.lockMode'),
        lockReason: string(name='LockReason', description='model.lockReason'),
        readDelayTime: string(name='ReadDelayTime', description='model.readDelayTime'),
        DBMaxQuantity: integer(name='DBMaxQuantity', description='model.dbMaxQty'),
        accountMaxQuantity: integer(name='AccountMaxQuantity', description='model.accountMaxQty'),
        creationTime: string(name='CreationTime', description='model.dbInstanceCreateTime'),
        expireTime: string(name='ExpireTime', description='model.dbInstanceExpireTime'),
        maintainTime: string(name='MaintainTime', description='maintainTime'),
        availabilityValue: string(name='AvailabilityValue', description='model.availabilityValue'),
        maxIOPS: integer(name='MaxIOPS', description='model.maxIOPS'),
        maxConnections: integer(name='MaxConnections', description='model.maxConnections'),
        masterInstanceId: string(name='MasterInstanceId', description='model.masterDBInstanceName'),
        DBInstanceCPU: string(name='DBInstanceCPU', description='model.dbInstanceCpuCores'),
        incrementSourceDBInstanceId: string(name='IncrementSourceDBInstanceId', description='model.datacomefromInstanceName'),
        guardDBInstanceId: string(name='GuardDBInstanceId', description='model.guardDBInstanceName'),
        tempDBInstanceId: string(name='TempDBInstanceId', description='model.childDBInstanceName'),
        securityIPList: string(name='SecurityIPList', description='securityIPs'),
        zoneId: string(name='ZoneId', description='model.availableArea'),
        instanceNetworkType: string(name='InstanceNetworkType', description='model.instanceNetworkType'),
        category: string(name='Category', description='model.category'),
        accountType: string(name='AccountType', description='model.accountType'),
        supportUpgradeAccountType: string(name='SupportUpgradeAccountType', description='model.supportUpgradeAccountType'),
        vpcId: string(name='VpcId', description='model.vpcId'),
        VSwitchId: string(name='VSwitchId', description='model.vSwitchId'),
        connectionMode: string(name='ConnectionMode', description='model.connectionMode'),
        tags: string(name='Tags', description='model.datacomefromInstanceName'),
      }
    ](name='DBInstanceAttribute', description='DBInstanceAttribute'),
  }(name='Items', description='data.data'),
}

async function describeDBInstancesAsCsvWithOptions(request: DescribeDBInstancesAsCsvRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesAsCsvResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstancesAsCsv', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstancesAsCsv(request: DescribeDBInstancesAsCsvRequest): DescribeDBInstancesAsCsvResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesAsCsvWithOptions(request, runtime);
}

model ModifyDBInstanceNetworkExpireTimeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  connectionString: string(name='ConnectionString', description='connectionString'),
  classicExpiredDays: integer(name='ClassicExpiredDays', description='classicExpendExpiredDays'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDBInstanceNetworkExpireTimeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceNetworkExpireTimeWithOptions(request: ModifyDBInstanceNetworkExpireTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceNetworkExpireTimeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceNetworkExpireTime', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceNetworkExpireTime(request: ModifyDBInstanceNetworkExpireTimeRequest): ModifyDBInstanceNetworkExpireTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceNetworkExpireTimeWithOptions(request, runtime);
}

model ModifyResourceGroupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
}

model ModifyResourceGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyResourceGroupWithOptions(request: ModifyResourceGroupRequest, runtime: Util.RuntimeOptions): ModifyResourceGroupResponse {
  Util.validateModel(request);
  return doRequest('ModifyResourceGroup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyResourceGroup(request: ModifyResourceGroupRequest): ModifyResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyResourceGroupWithOptions(request, runtime);
}

model DescribeRenewalPriceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  regionId?: string(name='RegionId', description='regionId'),
  payType?: string(name='PayType', description='payType'),
  DBInstanceClass?: string(name='DBInstanceClass', description='dbInstanceClass'),
  usedTime: integer(name='UsedTime', description='usedTime'),
  timeType: string(name='TimeType', description='timeType'),
  quantity?: integer(name='Quantity', description='quantity'),
  orderType?: string(name='OrderType', description='orderType'),
  businessInfo?: string(name='BusinessInfo', description='businessInfo'),
}

model DescribeRenewalPriceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  rules: {
    rule: [
      {
        ruleId: long(name='RuleId', description='ruleDescId'),
        name: string(name='Name', description='name'),
        description: string(name='Description', description='title'),
      }
    ](name='Rule', description='Rule'),
  }(name='Rules', description='data.rules'),
  priceInfo: {
    currency: string(name='Currency', description='currency'),
    originalPrice: float(name='OriginalPrice', description='originalAmount'),
    tradePrice: float(name='TradePrice', description='tradeAmount'),
    discountPrice: float(name='DiscountPrice', description='discountAmount'),
    coupons: {
      coupon: [
        {
          couponNo: string(name='CouponNo', description='promotionOptionNo'),
          name: string(name='Name', description='promotionName'),
          description: string(name='Description', description='promotionDesc'),
          isSelected: string(name='IsSelected', description='selected'),
        }
      ](name='Coupon', description='Coupon'),
    }(name='Coupons', description='optionalPromotions'),
    activityInfo: {
      checkErrMsg: string(name='CheckErrMsg', description='aliyunCpsResult.checkErrMsg'),
      errorCode: string(name='ErrorCode', description='aliyunCpsResult.errorCode'),
      success: string(name='Success', description='aliyunCpsResult.success'),
    }(name='ActivityInfo', description='activityInfo'),
    ruleIds: {
      ruleId: [ string ](name='RuleId', description='RuleId'),
    }(name='RuleIds', description='ruleIds'),
  }(name='PriceInfo', description='data.orderResult'),
}

async function describeRenewalPriceWithOptions(request: DescribeRenewalPriceRequest, runtime: Util.RuntimeOptions): DescribeRenewalPriceResponse {
  Util.validateModel(request);
  return doRequest('DescribeRenewalPrice', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeRenewalPrice(request: DescribeRenewalPriceRequest): DescribeRenewalPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRenewalPriceWithOptions(request, runtime);
}

model DescribePriceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  commodityCode?: string(name='CommodityCode', description='commodity'),
  regionId?: string(name='RegionId', description='regionId'),
  engine: string(name='Engine', description='engine'),
  engineVersion: string(name='EngineVersion', description='engineVersion'),
  DBInstanceClass: string(name='DBInstanceClass', description='dbInstanceClass'),
  DBInstanceStorage: integer(name='DBInstanceStorage', description='dbInstanceStorage'),
  payType?: string(name='PayType', description='payType'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  usedTime?: integer(name='UsedTime', description='usedTime'),
  timeType?: string(name='TimeType', description='timeType'),
  quantity: integer(name='Quantity', description='quantity'),
  instanceUsedType?: integer(name='InstanceUsedType', description='dbInstanceUsedType'),
  orderType?: string(name='OrderType', description='orderType'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='dbInstanceStorageType'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
}

model DescribePriceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  rules: {
    rule: [
      {
        ruleId: long(name='RuleId', description='ruleDescId'),
        name: string(name='Name', description='name'),
        description: string(name='Description', description='title'),
      }
    ](name='Rule', description='Rule'),
  }(name='Rules', description='data.rules'),
  priceInfo: {
    currency: string(name='Currency', description='currency'),
    originalPrice: float(name='OriginalPrice', description='originalAmount'),
    tradePrice: float(name='TradePrice', description='tradeAmount'),
    discountPrice: float(name='DiscountPrice', description='discountAmount'),
    coupons: {
      coupon: [
        {
          couponNo: string(name='CouponNo', description='promotionOptionNo'),
          name: string(name='Name', description='promotionName'),
          description: string(name='Description', description='promotionDesc'),
          isSelected: string(name='IsSelected', description='selected'),
        }
      ](name='Coupon', description='Coupon'),
    }(name='Coupons', description='optionalPromotions'),
    activityInfo: {
      checkErrMsg: string(name='CheckErrMsg', description='aliyunCpsResult.checkErrMsg'),
      errorCode: string(name='ErrorCode', description='aliyunCpsResult.errorCode'),
      success: string(name='Success', description='aliyunCpsResult.success'),
    }(name='ActivityInfo', description='activityInfo'),
    ruleIds: {
      ruleId: [ string ](name='RuleId', description='RuleId'),
    }(name='RuleIds', description='ruleIds'),
  }(name='PriceInfo', description='data.orderResult'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  return doRequest('DescribePrice', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model RenewInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  period: integer(name='Period', description='period'),
  autoPay?: string(name='AutoPay', description='payMode'),
}

model RenewInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  orderId: long(name='OrderId', description='data.orderId'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  return doRequest('RenewInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model CheckRecoveryConditionsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
  backupId?: string(name='BackupId', description='backupId'),
  backupFile?: string(name='BackupFile', description='backupFile'),
  restoreTime?: string(name='RestoreTime', description='restoreTime'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CheckRecoveryConditionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  recoveryStatus: string(name='RecoveryStatus', description='data.isValid'),
}

async function checkRecoveryConditionsWithOptions(request: CheckRecoveryConditionsRequest, runtime: Util.RuntimeOptions): CheckRecoveryConditionsResponse {
  Util.validateModel(request);
  return doRequest('CheckRecoveryConditions', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function checkRecoveryConditions(request: CheckRecoveryConditionsRequest): CheckRecoveryConditionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkRecoveryConditionsWithOptions(request, runtime);
}

model ModifyInstanceAutoRenewalAttributeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  clientToken?: string(name='ClientToken', description='token'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  duration?: string(name='Duration', description='duration'),
  autoRenew?: string(name='AutoRenew', description='autoRenew'),
}

model ModifyInstanceAutoRenewalAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyInstanceAutoRenewalAttributeWithOptions(request: ModifyInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstanceAutoRenewalAttribute', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyInstanceAutoRenewalAttribute(request: ModifyInstanceAutoRenewalAttributeRequest): ModifyInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewalAttributeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  proxyId?: string(name='proxyId', description='proxyId'),
  regionId: string(name='RegionId', description='region'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeInstanceAutoRenewalAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  items: {
    item: [
      {
        DBInstanceId: string(name='DBInstanceId', description='instanceName'),
        regionId: string(name='RegionId', description='region'),
        duration: integer(name='Duration', description='renewalDuration'),
        status: string(name='Status', description='resourceStatus'),
        autoRenew: string(name='AutoRenew', description='autoRenewal'),
      }
    ](name='Item', description='Item'),
  }(name='Items', description='data.items'),
}

async function describeInstanceAutoRenewalAttributeWithOptions(request: DescribeInstanceAutoRenewalAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewalAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceAutoRenewalAttribute', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeInstanceAutoRenewalAttribute(request: DescribeInstanceAutoRenewalAttributeRequest): DescribeInstanceAutoRenewalAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewalAttributeWithOptions(request, runtime);
}

model ReleaseReadWriteSplittingConnectionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
}

model ReleaseReadWriteSplittingConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function releaseReadWriteSplittingConnectionWithOptions(request: ReleaseReadWriteSplittingConnectionRequest, runtime: Util.RuntimeOptions): ReleaseReadWriteSplittingConnectionResponse {
  Util.validateModel(request);
  return doRequest('ReleaseReadWriteSplittingConnection', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function releaseReadWriteSplittingConnection(request: ReleaseReadWriteSplittingConnectionRequest): ReleaseReadWriteSplittingConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseReadWriteSplittingConnectionWithOptions(request, runtime);
}

model ModifyReadWriteSplittingConnectionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='connectionStringPrefix'),
  port?: string(name='Port', description='port'),
  maxDelayTime?: string(name='MaxDelayTime', description='maxDelayTime'),
  distributionType?: string(name='DistributionType', description='distributionType'),
  weight?: string(name='Weight', description='weight'),
}

model ModifyReadWriteSplittingConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyReadWriteSplittingConnectionWithOptions(request: ModifyReadWriteSplittingConnectionRequest, runtime: Util.RuntimeOptions): ModifyReadWriteSplittingConnectionResponse {
  Util.validateModel(request);
  return doRequest('ModifyReadWriteSplittingConnection', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyReadWriteSplittingConnection(request: ModifyReadWriteSplittingConnectionRequest): ModifyReadWriteSplittingConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReadWriteSplittingConnectionWithOptions(request, runtime);
}

model CalculateDBInstanceWeightRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
}

model CalculateDBInstanceWeightResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: {
    DBInstanceWeight: [
      {
        DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
        DBInstanceType: string(name='DBInstanceType', description='dbInstanceType'),
        readonlyInstanceSQLDelayedTime: string(name='ReadonlyInstanceSQLDelayedTime', description='readSQLDelayTime'),
        availability: string(name='Availability', description='availability'),
        weight: string(name='Weight', description='weight'),
      }
    ](name='DBInstanceWeight', description='DBInstanceWeight'),
  }(name='Items', description='data.dbInstanceWeightList'),
}

async function calculateDBInstanceWeightWithOptions(request: CalculateDBInstanceWeightRequest, runtime: Util.RuntimeOptions): CalculateDBInstanceWeightResponse {
  Util.validateModel(request);
  return doRequest('CalculateDBInstanceWeight', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function calculateDBInstanceWeight(request: CalculateDBInstanceWeightRequest): CalculateDBInstanceWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return calculateDBInstanceWeightWithOptions(request, runtime);
}

model AllocateReadWriteSplittingConnectionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='connectionString'),
  port?: string(name='Port', description='port'),
  maxDelayTime?: string(name='MaxDelayTime', description='maxDelayTime'),
  netType?: string(name='NetType', description='dbInstanceNetType'),
  distributionType?: string(name='DistributionType', description='distributionType'),
  weight?: string(name='Weight', description='weight'),
}

model AllocateReadWriteSplittingConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function allocateReadWriteSplittingConnectionWithOptions(request: AllocateReadWriteSplittingConnectionRequest, runtime: Util.RuntimeOptions): AllocateReadWriteSplittingConnectionResponse {
  Util.validateModel(request);
  return doRequest('AllocateReadWriteSplittingConnection', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function allocateReadWriteSplittingConnection(request: AllocateReadWriteSplittingConnectionRequest): AllocateReadWriteSplittingConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateReadWriteSplittingConnectionWithOptions(request, runtime);
}

model ModifyDBInstancePayTypeRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  usedTime?: integer(name='UsedTime', description='usedTime'),
  payType: string(name='PayType', description='payType'),
  period: string(name='Period', description='timeType'),
}

model ModifyDBInstancePayTypeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  orderId: long(name='OrderId', description='data.orderId'),
}

async function modifyDBInstancePayTypeWithOptions(request: ModifyDBInstancePayTypeRequest, runtime: Util.RuntimeOptions): ModifyDBInstancePayTypeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstancePayType', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstancePayType(request: ModifyDBInstancePayTypeRequest): ModifyDBInstancePayTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstancePayTypeWithOptions(request, runtime);
}

model DescribeCharacterSetNameRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  engine: string(name='Engine', description='engine'),
  regionId: string(name='RegionId', description='regionId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeCharacterSetNameResponse = {
  requestId: string(name='RequestId', description='requestId'),
  engine: string(name='Engine', description='data.engine'),
  characterSetNameItems: {
    characterSetName: [ string ](name='CharacterSetName', description='CharacterSetName'),
  }(name='CharacterSetNameItems', description='data.characterSetNameItems'),
}

async function describeCharacterSetNameWithOptions(request: DescribeCharacterSetNameRequest, runtime: Util.RuntimeOptions): DescribeCharacterSetNameResponse {
  Util.validateModel(request);
  return doRequest('DescribeCharacterSetName', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeCharacterSetName(request: DescribeCharacterSetNameRequest): DescribeCharacterSetNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCharacterSetNameWithOptions(request, runtime);
}

model DeleteBackupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  backupId: string(name='BackupId', description='backupId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteBackupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteBackupWithOptions(request: DeleteBackupRequest, runtime: Util.RuntimeOptions): DeleteBackupResponse {
  Util.validateModel(request);
  return doRequest('DeleteBackup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function deleteBackup(request: DeleteBackupRequest): DeleteBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupWithOptions(request, runtime);
}

model DescribeDiagnosticReportListRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
}

model DescribeDiagnosticReportListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  reportList: [
    {
      diagnosticTime: string(name='DiagnosticTime', description='diagnosticTime'),
      score: integer(name='Score', description='score'),
      startTime: string(name='StartTime', description='startTime'),
      endTime: string(name='EndTime', description='endTime'),
      downloadURL: string(name='DownloadURL', description='downloadURL'),
    }
  ](name='ReportList', description='data.reportList'),
}

async function describeDiagnosticReportListWithOptions(request: DescribeDiagnosticReportListRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticReportListResponse {
  Util.validateModel(request);
  return doRequest('DescribeDiagnosticReportList', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDiagnosticReportList(request: DescribeDiagnosticReportListRequest): DescribeDiagnosticReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticReportListWithOptions(request, runtime);
}

model CreateDiagnosticReportRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
}

model CreateDiagnosticReportResponse = {
  requestId: string(name='RequestId', description='requestId'),
  reportId: string(name='ReportId', description='data.reportId'),
}

async function createDiagnosticReportWithOptions(request: CreateDiagnosticReportRequest, runtime: Util.RuntimeOptions): CreateDiagnosticReportResponse {
  Util.validateModel(request);
  return doRequest('CreateDiagnosticReport', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createDiagnosticReport(request: CreateDiagnosticReportRequest): CreateDiagnosticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosticReportWithOptions(request, runtime);
}

model CloneDBInstanceRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='regionId'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  DBInstanceClass?: string(name='DBInstanceClass', description='dbInstanceClass'),
  DBInstanceStorage?: integer(name='DBInstanceStorage', description='dbInstanceStorage'),
  dbNames?: string(name='DbNames', description='dbNames'),
  payType: string(name='PayType', description='payType'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='instanceNetworkType'),
  DBInstanceId: string(name='DBInstanceId', description='sourceDBInstanceName'),
  backupId?: string(name='BackupId', description='backupSetId'),
  restoreTime?: string(name='RestoreTime', description='restoreTime'),
  VPCId?: string(name='VPCId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='cloudInstanceIp'),
  usedTime?: integer(name='UsedTime', description='usedTime'),
  period?: string(name='Period', description='timeType'),
  category?: string(name='Category', description='category'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='dbInstanceStorageType'),
  restoreTable?: string(name='RestoreTable', description='restoreTable'),
  tableMeta?: string(name='TableMeta', description='tableMeta'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  backupType?: string(name='BackupType', description='backupType'),
}

model CloneDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceId'),
  orderId: string(name='OrderId', description='data.orderId'),
  connectionString: string(name='ConnectionString', description='data.connectionString'),
  port: string(name='Port', description='data.port'),
}

async function cloneDBInstanceWithOptions(request: CloneDBInstanceRequest, runtime: Util.RuntimeOptions): CloneDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('CloneDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function cloneDBInstance(request: CloneDBInstanceRequest): CloneDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return cloneDBInstanceWithOptions(request, runtime);
}

model DescribeTagsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='description: 用于保证请求的幂等性，防止重复提交请求。由客户端生成该参数值，要保证在不同请求间唯一，最大值不超过64个ASCII字符，且该参数值中不能包含非ASCII字符。; '),
  proxyId?: string(name='proxyId', description='description: 代理模式ID。; '),
  regionId: string(name='RegionId', description='description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看可用的地域ID。; '),
  DBInstanceId?: string(name='DBInstanceId', description='description: 实例ID。>传入该参数，其他过滤条件失效。; '),
  tags?: string(name='Tags', description='description: 需要查询的标签，包括TagKey和TagValue。格式：{“key1”:”value1”}。; '),
  ownerAccount?: string(name='OwnerAccount', description='description: ; '),
}

model DescribeTagsResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  items: {
    tagInfos: [
      {
        tagKey: string(name='TagKey', description='description: 标签键。; '),
        tagValue: string(name='TagValue', description='description: 标签值。; '),
        DBInstanceIds: {
          DBInstanceIds: [ string ](name='DBInstanceIds', description='DBInstanceIds'),
        }(name='DBInstanceIds', description='dbInstanceIds'),
      }
    ](name='TagInfos', description='TagInfos'),
  }(name='Items', description='description: 由Tag信息组成的数组。'),
}

/**
 * DescribeTags 调用DescribeTags接口查询RDS实例的标签。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeTags
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description:   * 调用本接口时限制条件如下：
  * * 如果传入指定实例ID，则查询该实例下所有标签，其他过滤条件失效；
  * * 若查询标签时仅传入标签键（TagKey），未传入标签值（TagValue），则返回所有符合标签键条件的结果。若同时传入标签键和标签值，则返回两个条件都符合的结果。

 */
async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  return doRequest('DescribeTags', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * DescribeTags 调用DescribeTags接口查询RDS实例的标签。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=DescribeTags
  * &RegionId=cn-hangzhou
  * &<公共请求参数>
  * ```
  * description:   * 调用本接口时限制条件如下：
  * * 如果传入指定实例ID，则查询该实例下所有标签，其他过滤条件失效；
  * * 若查询标签时仅传入标签键（TagKey），未传入标签值（TagValue），则返回所有符合标签键条件的结果。若同时传入标签键和标签值，则返回两个条件都符合的结果。

 */
async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeDBInstanceByTagsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  proxyId?: string(name='proxyId', description='proxyId'),
  regionId: string(name='RegionId', description='regionId'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='page'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeDBInstanceByTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  pageRecordCount: integer(name='PageRecordCount', description='data.count'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecordCount'),
  items: {
    DBInstanceTag: [
      {
        DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='key'),
              tagValue: string(name='TagValue', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tagInfo'),
      }
    ](name='DBInstanceTag', description='DBInstanceTag'),
  }(name='Items', description='data.data'),
}

async function describeDBInstanceByTagsWithOptions(request: DescribeDBInstanceByTagsRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceByTagsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceByTags', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstanceByTags(request: DescribeDBInstanceByTagsRequest): DescribeDBInstanceByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceByTagsWithOptions(request, runtime);
}

model RevokeOperatorPermissionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model RevokeOperatorPermissionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function revokeOperatorPermissionWithOptions(request: RevokeOperatorPermissionRequest, runtime: Util.RuntimeOptions): RevokeOperatorPermissionResponse {
  Util.validateModel(request);
  return doRequest('RevokeOperatorPermission', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function revokeOperatorPermission(request: RevokeOperatorPermissionRequest): RevokeOperatorPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeOperatorPermissionWithOptions(request, runtime);
}

model ModifyDBInstanceTDERequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  TDEStatus: string(name='TDEStatus', description='tdeStatus'),
  DBName?: string(name='DBName', description='dbName'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  encryptionKey?: string(name='EncryptionKey', description='encryptionKey'),
  roleArn?: string(name='RoleArn', description='roleARN'),
}

model ModifyDBInstanceTDEResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceTDEWithOptions(request: ModifyDBInstanceTDERequest, runtime: Util.RuntimeOptions): ModifyDBInstanceTDEResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceTDE', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceTDE(request: ModifyDBInstanceTDERequest): ModifyDBInstanceTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceTDEWithOptions(request, runtime);
}

model ModifyDBInstanceSSLRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  connectionString: string(name='ConnectionString', description='connectionString'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  SSLEnabled?: integer(name='SSLEnabled', description='sslEnabled'),
}

model ModifyDBInstanceSSLResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceSSLWithOptions(request: ModifyDBInstanceSSLRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSSLResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceSSL', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceSSL(request: ModifyDBInstanceSSLRequest): ModifyDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSSLWithOptions(request, runtime);
}

model GrantOperatorPermissionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  expiredTime: string(name='ExpiredTime', description='expiredTime'),
  privileges: string(name='Privileges', description='operatorType'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model GrantOperatorPermissionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function grantOperatorPermissionWithOptions(request: GrantOperatorPermissionRequest, runtime: Util.RuntimeOptions): GrantOperatorPermissionResponse {
  Util.validateModel(request);
  return doRequest('GrantOperatorPermission', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function grantOperatorPermission(request: GrantOperatorPermissionRequest): GrantOperatorPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantOperatorPermissionWithOptions(request, runtime);
}

model DescribeDBInstanceTDERequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeDBInstanceTDEResponse = {
  requestId: string(name='RequestId', description='requestId'),
  TDEStatus: string(name='TDEStatus', description='data.tdeStatus'),
  databases: {
    database: [
      {
        DBName: string(name='DBName', description='dbName'),
        TDEStatus: string(name='TDEStatus', description='tdeStatus'),
      }
    ](name='Database', description='Database'),
  }(name='Databases', description='data.databases'),
}

async function describeDBInstanceTDEWithOptions(request: DescribeDBInstanceTDERequest, runtime: Util.RuntimeOptions): DescribeDBInstanceTDEResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceTDE', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstanceTDE(request: DescribeDBInstanceTDERequest): DescribeDBInstanceTDEResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceTDEWithOptions(request, runtime);
}

model DescribeDBInstanceSSLRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeDBInstanceSSLResponse = {
  requestId: string(name='RequestId', description='requestId'),
  connectionString: string(name='ConnectionString', description='data.certCommonName'),
  SSLExpireTime: string(name='SSLExpireTime', description='data.sslExpiredTime'),
  requireUpdate: string(name='RequireUpdate', description='data.sslEnabled'),
  requireUpdateReason: string(name='RequireUpdateReason', description='data.requireUpdateReason'),
}

async function describeDBInstanceSSLWithOptions(request: DescribeDBInstanceSSLRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceSSLResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceSSL', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstanceSSL(request: DescribeDBInstanceSSLRequest): DescribeDBInstanceSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceSSLWithOptions(request, runtime);
}

model DescribeSQLLogFilesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  fileName?: string(name='FileName', description='fileName'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeSQLLogFilesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  items: {
    logFile: [
      {
        fileID: string(name='FileID', description='fileName'),
        logStatus: string(name='LogStatus', description='status'),
        logDownloadURL: string(name='LogDownloadURL', description='downloadLink'),
        logSize: string(name='LogSize', description='fileSize'),
        logStartTime: string(name='LogStartTime', description='startTime'),
        logEndTime: string(name='LogEndTime', description='endTime'),
      }
    ](name='LogFile', description='LogFile'),
  }(name='Items', description='data.items'),
}

async function describeSQLLogFilesWithOptions(request: DescribeSQLLogFilesRequest, runtime: Util.RuntimeOptions): DescribeSQLLogFilesResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLLogFiles', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSQLLogFiles(request: DescribeSQLLogFilesRequest): DescribeSQLLogFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogFilesWithOptions(request, runtime);
}

model ModifyDBInstanceMonitorRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
  period: string(name='Period', description='period'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDBInstanceMonitorResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceMonitorWithOptions(request: ModifyDBInstanceMonitorRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMonitorResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceMonitor', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceMonitor(request: ModifyDBInstanceMonitorRequest): ModifyDBInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMonitorWithOptions(request, runtime);
}

model SwitchDBInstanceHARequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  nodeId: string(name='NodeId', description='targetInstanceId'),
  force?: string(name='Force', description='switchType'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  effectiveTime?: string(name='EffectiveTime', description='effectiveTime'),
}

model SwitchDBInstanceHAResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function switchDBInstanceHAWithOptions(request: SwitchDBInstanceHARequest, runtime: Util.RuntimeOptions): SwitchDBInstanceHAResponse {
  Util.validateModel(request);
  return doRequest('SwitchDBInstanceHA', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function switchDBInstanceHA(request: SwitchDBInstanceHARequest): SwitchDBInstanceHAResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceHAWithOptions(request, runtime);
}

model DescribeDBInstanceMonitorRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeDBInstanceMonitorResponse = {
  requestId: string(name='RequestId', description='requestId'),
  period: string(name='Period', description='data.configValue'),
}

async function describeDBInstanceMonitorWithOptions(request: DescribeDBInstanceMonitorRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceMonitorResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceMonitor', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstanceMonitor(request: DescribeDBInstanceMonitorRequest): DescribeDBInstanceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceMonitorWithOptions(request, runtime);
}

model DescribeSQLCollectorPolicyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model DescribeSQLCollectorPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  SQLCollectorStatus: string(name='SQLCollectorStatus', description='data.configValue'),
  storagePeriod: integer(name='StoragePeriod', description='data.storagePeriod'),
}

async function describeSQLCollectorPolicyWithOptions(request: DescribeSQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): DescribeSQLCollectorPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLCollectorPolicy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSQLCollectorPolicy(request: DescribeSQLCollectorPolicyRequest): DescribeSQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLCollectorPolicyWithOptions(request, runtime);
}

model ModifySQLCollectorPolicyRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  SQLCollectorStatus: string(name='SQLCollectorStatus', description='sqlCollectorStatus'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model ModifySQLCollectorPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifySQLCollectorPolicyWithOptions(request: ModifySQLCollectorPolicyRequest, runtime: Util.RuntimeOptions): ModifySQLCollectorPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifySQLCollectorPolicy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifySQLCollectorPolicy(request: ModifySQLCollectorPolicyRequest): ModifySQLCollectorPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySQLCollectorPolicyWithOptions(request, runtime);
}

model ModifyDBInstanceHAConfigRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  syncMode: string(name='SyncMode', description='syncMode'),
  HAMode: string(name='HAMode', description='haMode'),
  dbInstanceId: string(name='DbInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDBInstanceHAConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceHAConfigWithOptions(request: ModifyDBInstanceHAConfigRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceHAConfigResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceHAConfig', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceHAConfig(request: ModifyDBInstanceHAConfigRequest): ModifyDBInstanceHAConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceHAConfigWithOptions(request, runtime);
}

model DescribeDBInstanceHAConfigRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeDBInstanceHAConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  syncMode: string(name='SyncMode', description='data.syncMode'),
  HAMode: string(name='HAMode', description='data.haMode'),
  hostInstanceInfos: {
    nodeInfo: [
      {
        nodeId: string(name='NodeId', description='nodeId'),
        regionId: string(name='RegionId', description='region'),
        logSyncTime: string(name='LogSyncTime', description='logDelay'),
        dataSyncTime: string(name='DataSyncTime', description='dataDelay'),
        nodeType: string(name='NodeType', description='nodeType'),
        zoneId: string(name='ZoneId', description='zoneId'),
        syncStatus: string(name='SyncStatus', description='syncStatus'),
      }
    ](name='NodeInfo', description='NodeInfo'),
  }(name='HostInstanceInfos', description='data.hostInstanceInfos'),
}

async function describeDBInstanceHAConfigWithOptions(request: DescribeDBInstanceHAConfigRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceHAConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceHAConfig', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstanceHAConfig(request: DescribeDBInstanceHAConfigRequest): DescribeDBInstanceHAConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceHAConfigWithOptions(request, runtime);
}

model DescribeSQLReportsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeSQLReportsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  items: {
    item: [
      {
        reportTime: string(name='ReportTime', description='reportTime'),
        latencyTopNItems: {
          latencyTopNItem: [
            {
              SQLText: string(name='SQLText', description='sqlText'),
              avgLatency: long(name='AvgLatency', description='avgLatency'),
              SQLExecuteTimes: long(name='SQLExecuteTimes', description='sqlExecuteTimes'),
            }
          ](name='LatencyTopNItem', description='LatencyTopNItem'),
        }(name='LatencyTopNItems', description='latencyTopNItems'),
        QPSTopNItems: {
          QPSTopNItem: [
            {
              SQLText: string(name='SQLText', description='sqlText'),
              SQLExecuteTimes: long(name='SQLExecuteTimes', description='sqlExecuteTimes'),
            }
          ](name='QPSTopNItem', description='QPSTopNItem'),
        }(name='QPSTopNItems', description='qpsTopNItems'),
      }
    ](name='Item', description='Item'),
  }(name='Items', description='data.items'),
}

async function describeSQLReportsWithOptions(request: DescribeSQLReportsRequest, runtime: Util.RuntimeOptions): DescribeSQLReportsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLReports', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSQLReports(request: DescribeSQLReportsRequest): DescribeSQLReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLReportsWithOptions(request, runtime);
}

model DescribeDBInstanceIPArrayListRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  whitelistNetworkType?: string(name='WhitelistNetworkType', description='whitelistNetType'),
}

model DescribeDBInstanceIPArrayListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: {
    DBInstanceIPArray: [
      {
        DBInstanceIPArrayName: string(name='DBInstanceIPArrayName', description='groupName'),
        DBInstanceIPArrayAttribute: string(name='DBInstanceIPArrayAttribute', description='groupTag'),
        securityIPType: string(name='SecurityIPType', description='securityIPType'),
        securityIPList: string(name='SecurityIPList', description='securityIPList'),
        whitelistNetworkType: string(name='WhitelistNetworkType', description='whitelistNetType'),
      }
    ](name='DBInstanceIPArray', description='DBInstanceIPArray'),
  }(name='Items', description='data.groupItems'),
}

async function describeDBInstanceIPArrayListWithOptions(request: DescribeDBInstanceIPArrayListRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceIPArrayListResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceIPArrayList', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstanceIPArrayList(request: DescribeDBInstanceIPArrayListRequest): DescribeDBInstanceIPArrayListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceIPArrayListWithOptions(request, runtime);
}

model DescribeSQLLogReportListRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeSQLLogReportListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  items: {
    item: [
      {
        reportTime: string(name='ReportTime', description='reportTime'),
        latencyTopNItems: {
          latencyTopNItem: [
            {
              SQLText: string(name='SQLText', description='sqlText'),
              avgLatency: long(name='AvgLatency', description='avgLatency'),
              SQLExecuteTimes: long(name='SQLExecuteTimes', description='sqlExecuteTimes'),
            }
          ](name='LatencyTopNItem', description='LatencyTopNItem'),
        }(name='LatencyTopNItems', description='latencyTopNItems'),
        QPSTopNItems: {
          QPSTopNItem: [
            {
              SQLText: string(name='SQLText', description='sqlText'),
              SQLExecuteTimes: long(name='SQLExecuteTimes', description='sqlExecuteTimes'),
            }
          ](name='QPSTopNItem', description='QPSTopNItem'),
        }(name='QPSTopNItems', description='qpsTopNItems'),
      }
    ](name='Item', description='Item'),
  }(name='Items', description='data.items'),
}

async function describeSQLLogReportListWithOptions(request: DescribeSQLLogReportListRequest, runtime: Util.RuntimeOptions): DescribeSQLLogReportListResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLLogReportList', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSQLLogReportList(request: DescribeSQLLogReportListRequest): DescribeSQLLogReportListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogReportListWithOptions(request, runtime);
}

model ResetAccountForPGRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
  accountPassword: string(name='AccountPassword', description='accountPassword'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ResetAccountForPGResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resetAccountForPGWithOptions(request: ResetAccountForPGRequest, runtime: Util.RuntimeOptions): ResetAccountForPGResponse {
  Util.validateModel(request);
  return doRequest('ResetAccountForPG', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function resetAccountForPG(request: ResetAccountForPGRequest): ResetAccountForPGResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountForPGWithOptions(request, runtime);
}

model UpgradeDBInstanceEngineVersionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  engineVersion: string(name='EngineVersion', description='engineVersion'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  effectiveTime?: string(name='EffectiveTime', description='effectiveTime'),
}

model UpgradeDBInstanceEngineVersionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
}

async function upgradeDBInstanceEngineVersionWithOptions(request: UpgradeDBInstanceEngineVersionRequest, runtime: Util.RuntimeOptions): UpgradeDBInstanceEngineVersionResponse {
  Util.validateModel(request);
  return doRequest('UpgradeDBInstanceEngineVersion', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function upgradeDBInstanceEngineVersion(request: UpgradeDBInstanceEngineVersionRequest): UpgradeDBInstanceEngineVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeDBInstanceEngineVersionWithOptions(request, runtime);
}

model RevokeAccountPrivilegeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
  DBName: string(name='DBName', description='dbName'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model RevokeAccountPrivilegeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function revokeAccountPrivilegeWithOptions(request: RevokeAccountPrivilegeRequest, runtime: Util.RuntimeOptions): RevokeAccountPrivilegeResponse {
  Util.validateModel(request);
  return doRequest('RevokeAccountPrivilege', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function revokeAccountPrivilege(request: RevokeAccountPrivilegeRequest): RevokeAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeAccountPrivilegeWithOptions(request, runtime);
}

model RestartDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model RestartDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function restartDBInstanceWithOptions(request: RestartDBInstanceRequest, runtime: Util.RuntimeOptions): RestartDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('RestartDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function restartDBInstance(request: RestartDBInstanceRequest): RestartDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBInstanceWithOptions(request, runtime);
}

model ResetAccountPasswordRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
  accountPassword: string(name='AccountPassword', description='accountNewPassword'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ResetAccountPasswordResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  return doRequest('ResetAccountPassword', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model RemoveTagsFromResourceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='description: 阿里云颁发给用户的访问服务所用的密钥ID。; '),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='description: 用于保证请求的幂等性，防止重复提交请求。由客户端生成该参数值，要保证在不同请求间唯一，最大值不超过64个ASCII字符，且该参数值中不能包含非ASCII字符。; '),
  proxyId?: string(name='proxyId', description='description: 代理模式ID。; '),
  regionId: string(name='RegionId', description='description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看可用的地域ID。; '),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  tags?: string(name='Tags', description='description: 需要解绑的一组标签，包括TagKey和TagValue。格式：{"key1":"value1"}。>TagKey不能为空，TagValue可以为空。; '),
  tag: [
    {
      key?: string(name='key', description='description: 要解绑的第一组标签的Tagkey。需要解绑的标签，包括TagKey和TagValue，单次最多支持传入5组值。TagKey不能为空，TagValue可以为空。; '),
      value?: string(name='value', description='description: 要解绑的第一组标签的TagValue。需要解绑的标签，包括TagKey和TagValue，单次最多支持传入5组值。TagKey不能为空，TagValue可以为空。; '),
    }
  ](name='Tag', description='Tag'),
  ownerAccount?: string(name='OwnerAccount', description='description: ; '),
}

model RemoveTagsFromResourceResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
}

/**
 * RemoveTagsFromResource 调用RemoveTagsFromResource接口解绑标签。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=RemoveTagsFromResource
  * &DBInstanceId=rm-uf6wjk5xxxxxxx
  * &RegionId=cn-hangzhou
  * &Tag.1.key=test
  * &<公共请求参数>
  * ```
  * description:   * 限制条件如下：
  * * 单次最多支持解绑10个标签；
  * * 若一个标签所绑定的实例全都解绑，则该标签自动删除；
  * * 若解绑标签时仅传入标签键（TagKey），未传入标签值（TagValue），则解绑所有符合标签键条件的标签。
  * * 必须传入至少一组标签或者单独的一个标签键。

 */
async function removeTagsFromResourceWithOptions(request: RemoveTagsFromResourceRequest, runtime: Util.RuntimeOptions): RemoveTagsFromResourceResponse {
  Util.validateModel(request);
  return doRequest('RemoveTagsFromResource', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * RemoveTagsFromResource 调用RemoveTagsFromResource接口解绑标签。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=RemoveTagsFromResource
  * &DBInstanceId=rm-uf6wjk5xxxxxxx
  * &RegionId=cn-hangzhou
  * &Tag.1.key=test
  * &<公共请求参数>
  * ```
  * description:   * 限制条件如下：
  * * 单次最多支持解绑10个标签；
  * * 若一个标签所绑定的实例全都解绑，则该标签自动删除；
  * * 若解绑标签时仅传入标签键（TagKey），未传入标签值（TagValue），则解绑所有符合标签键条件的标签。
  * * 必须传入至少一组标签或者单独的一个标签键。

 */
async function removeTagsFromResource(request: RemoveTagsFromResourceRequest): RemoveTagsFromResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagsFromResourceWithOptions(request, runtime);
}

model PurgeDBInstanceLogRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model PurgeDBInstanceLogResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function purgeDBInstanceLogWithOptions(request: PurgeDBInstanceLogRequest, runtime: Util.RuntimeOptions): PurgeDBInstanceLogResponse {
  Util.validateModel(request);
  return doRequest('PurgeDBInstanceLog', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function purgeDBInstanceLog(request: PurgeDBInstanceLogRequest): PurgeDBInstanceLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return purgeDBInstanceLogWithOptions(request, runtime);
}

model ModifySecurityIpsRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  securityIps: string(name='SecurityIps', description='securityIPList'),
  DBInstanceIPArrayName?: string(name='DBInstanceIPArrayName', description='groupName'),
  DBInstanceIPArrayAttribute?: string(name='DBInstanceIPArrayAttribute', description='groupTag'),
  securityIPType?: string(name='SecurityIPType', description='securityIPType'),
  whitelistNetworkType?: string(name='WhitelistNetworkType', description='whitelistNetType'),
  modifyMode?: string(name='ModifyMode', description='modifyMode'),
}

model ModifySecurityIpsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='data.taskId'),
}

async function modifySecurityIpsWithOptions(request: ModifySecurityIpsRequest, runtime: Util.RuntimeOptions): ModifySecurityIpsResponse {
  Util.validateModel(request);
  return doRequest('ModifySecurityIps', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifySecurityIps(request: ModifySecurityIpsRequest): ModifySecurityIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityIpsWithOptions(request, runtime);
}

model ModifyParameterRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  parameters?: string(name='Parameters', description='parameters'),
  forcerestart?: boolean(name='Forcerestart', description='forcerestart'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  parameterGroupId?: string(name='ParameterGroupId', description='parameterGroupId'),
}

model ModifyParameterResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyParameterWithOptions(request: ModifyParameterRequest, runtime: Util.RuntimeOptions): ModifyParameterResponse {
  Util.validateModel(request);
  return doRequest('ModifyParameter', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyParameter(request: ModifyParameterRequest): ModifyParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParameterWithOptions(request, runtime);
}

model ModifyDBInstanceSpecRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBInstanceClass?: string(name='DBInstanceClass', description='dbInstanceClass'),
  DBInstanceStorage?: integer(name='DBInstanceStorage', description='dbInstanceStorage'),
  payType: string(name='PayType', description='payType'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  effectiveTime?: string(name='EffectiveTime', description='effectiveTime'),
  engineVersion?: string(name='EngineVersion', description='engineVersion'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='dbInstanceStorageType'),
  direction?: string(name='Direction', description='direction'),
  sourceBiz?: string(name='SourceBiz', description='sourceBiz'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  zoneId?: string(name='ZoneId', description='zoneId'),
}

model ModifyDBInstanceSpecResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceSpecWithOptions(request: ModifyDBInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSpecResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceSpec', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceSpec(request: ModifyDBInstanceSpecRequest): ModifyDBInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSpecWithOptions(request, runtime);
}

model ModifyDBInstanceMaintainTimeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  maintainTime: string(name='MaintainTime', description='maintainTime'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDBInstanceMaintainTimeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceMaintainTimeWithOptions(request: ModifyDBInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceMaintainTimeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceMaintainTime', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceMaintainTime(request: ModifyDBInstanceMaintainTimeRequest): ModifyDBInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyDBInstanceDescriptionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBInstanceDescription: string(name='DBInstanceDescription', description='description'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDBInstanceDescriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceDescriptionWithOptions(request: ModifyDBInstanceDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceDescription', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceDescription(request: ModifyDBInstanceDescriptionRequest): ModifyDBInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceDescriptionWithOptions(request, runtime);
}

model ModifyDBDescriptionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBName: string(name='DBName', description='dbName'),
  DBDescription: string(name='DBDescription', description='dbDescription'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDBDescriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBDescriptionWithOptions(request: ModifyDBDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBDescription', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBDescription(request: ModifyDBDescriptionRequest): ModifyDBDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBDescriptionWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  backupPolicyMode?: string(name='BackupPolicyMode', description='backupPolicyMode'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='backupTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='backupPeriod'),
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', description='backupRetentionPeriod'),
  backupLog?: string(name='BackupLog', description='backupLog'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod', description='logBackupRetentionPeriod'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  enableBackupLog?: string(name='EnableBackupLog', description='enableBackupLog'),
  localLogRetentionHours?: string(name='LocalLogRetentionHours', description='logBackupLocalRetentionPeriod'),
  localLogRetentionSpace?: string(name='LocalLogRetentionSpace', description='logBackupLocalRetentionSpace'),
  highSpaceUsageProtection?: string(name='HighSpaceUsageProtection', description='forceCleanOnHighSpaceUsage'),
  logBackupFrequency?: string(name='LogBackupFrequency', description='logBackupFrequency'),
  compressType?: string(name='CompressType', description='compressType'),
  archiveBackupRetentionPeriod?: string(name='ArchiveBackupRetentionPeriod', description='archiveBackupRetentionPeriod'),
  archiveBackupKeepPolicy?: string(name='ArchiveBackupKeepPolicy', description='archiveBackupKeepPolicy'),
  archiveBackupKeepCount?: string(name='ArchiveBackupKeepCount', description='archiveBackupKeepCount'),
  releasedKeepPolicy?: string(name='ReleasedKeepPolicy', description='releasedKeepPolicy'),
  logBackupLocalRetentionNumber?: integer(name='LogBackupLocalRetentionNumber', description='logBackupLocalRetentionNumber'),
}

model ModifyBackupPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceID: string(name='DBInstanceID', description='data.dbInstanceName'),
  enableBackupLog: string(name='EnableBackupLog', description='data.enableBackupLog'),
  localLogRetentionHours: integer(name='LocalLogRetentionHours', description='data.logBackupLocalRetentionPeriod'),
  localLogRetentionSpace: string(name='LocalLogRetentionSpace', description='data.logBackupLocalRetentionSpace'),
  highSpaceUsageProtection: string(name='HighSpaceUsageProtection', description='data.forceCleanOnHighSpaceUsage'),
  compressType: string(name='CompressType', description='data.compressType'),
  logBackupLocalRetentionNumber: integer(name='LogBackupLocalRetentionNumber', description='data.logBackupLocalRetentionNumber'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyBackupPolicy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
  accountDescription: string(name='AccountDescription', description='accountDescription'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyAccountDescriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccountDescription', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model MigrateToOtherZoneRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  VPCId?: string(name='VPCId', description='vpcId'),
  zoneId: string(name='ZoneId', description='zoneId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  effectiveTime?: string(name='EffectiveTime', description='effectiveTime'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  category?: string(name='Category', description='category'),
  zoneIdSlave1?: string(name='ZoneIdSlave1', description='zoneIdSlave1'),
  zoneIdSlave2?: string(name='ZoneIdSlave2', description='zoneIdSlave2'),
}

model MigrateToOtherZoneResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function migrateToOtherZoneWithOptions(request: MigrateToOtherZoneRequest, runtime: Util.RuntimeOptions): MigrateToOtherZoneResponse {
  Util.validateModel(request);
  return doRequest('MigrateToOtherZone', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function migrateToOtherZone(request: MigrateToOtherZoneRequest): MigrateToOtherZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return migrateToOtherZoneWithOptions(request, runtime);
}

model ImportDatabaseBetweenInstancesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='targetInstanceName'),
  sourceDBInstanceId: string(name='SourceDBInstanceId', description='instanceName'),
  DBInfo: string(name='DBInfo', description='dbInfo'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ImportDatabaseBetweenInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  importId: string(name='ImportId', description='data.migrationId'),
}

async function importDatabaseBetweenInstancesWithOptions(request: ImportDatabaseBetweenInstancesRequest, runtime: Util.RuntimeOptions): ImportDatabaseBetweenInstancesResponse {
  Util.validateModel(request);
  return doRequest('ImportDatabaseBetweenInstances', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function importDatabaseBetweenInstances(request: ImportDatabaseBetweenInstancesRequest): ImportDatabaseBetweenInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDatabaseBetweenInstancesWithOptions(request, runtime);
}

model GrantAccountPrivilegeRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
  DBName: string(name='DBName', description='dbName'),
  accountPrivilege: string(name='AccountPrivilege', description='accountPrivilege'),
}

model GrantAccountPrivilegeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function grantAccountPrivilegeWithOptions(request: GrantAccountPrivilegeRequest, runtime: Util.RuntimeOptions): GrantAccountPrivilegeResponse {
  Util.validateModel(request);
  return doRequest('GrantAccountPrivilege', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function grantAccountPrivilege(request: GrantAccountPrivilegeRequest): GrantAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantAccountPrivilegeWithOptions(request, runtime);
}

model DescribeTasksRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime?: string(name='StartTime', description='startTime'),
  endTime?: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='page'),
  status?: string(name='Status', description='status'),
  taskAction?: string(name='TaskAction', description='taskAction'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeTasksResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.ItemNumbers'),
  items: {
    taskProgressInfo: [
      {
        DBName: string(name='DBName', description='dbName'),
        beginTime: string(name='BeginTime', description='beginTime'),
        progressInfo: string(name='ProgressInfo', description='progressInfo'),
        finishTime: string(name='FinishTime', description='finishTime'),
        taskAction: string(name='TaskAction', description='taskAction'),
        taskId: string(name='TaskId', description='taskId'),
        progress: string(name='Progress', description='progress'),
        expectedFinishTime: string(name='ExpectedFinishTime', description='expectedFinishTime'),
        status: string(name='Status', description='status'),
        taskErrorCode: string(name='TaskErrorCode', description='taskErrorCode'),
        taskErrorMessage: string(name='TaskErrorMessage', description='taskErrorMessage'),
        stepsInfo: string(name='StepsInfo', description='stepsInfo'),
        remain: integer(name='Remain', description='remain'),
        stepProgressInfo: string(name='StepProgressInfo', description='stepProgressInfo'),
        currentStepName: string(name='CurrentStepName', description='currentStepName'),
      }
    ](name='TaskProgressInfo', description='TaskProgressInfo'),
  }(name='Items', description='data.tasks'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeTasks', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DescribeSQLLogReportsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeSQLLogReportsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  items: {
    item: [
      {
        reportTime: string(name='ReportTime', description='reportTime'),
        latencyTopNItems: {
          latencyTopNItem: [
            {
              SQLText: string(name='SQLText', description='sqlText'),
              avgLatency: long(name='AvgLatency', description='avgLatency'),
              SQLExecuteTimes: long(name='SQLExecuteTimes', description='sqlExecuteTimes'),
            }
          ](name='LatencyTopNItem', description='LatencyTopNItem'),
        }(name='LatencyTopNItems', description='latencyTopNItems'),
        QPSTopNItems: {
          QPSTopNItem: [
            {
              SQLText: string(name='SQLText', description='sqlText'),
              SQLExecuteTimes: long(name='SQLExecuteTimes', description='sqlExecuteTimes'),
            }
          ](name='QPSTopNItem', description='QPSTopNItem'),
        }(name='QPSTopNItems', description='qpsTopNItems'),
      }
    ](name='Item', description='Item'),
  }(name='Items', description='data.items'),
}

async function describeSQLLogReportsWithOptions(request: DescribeSQLLogReportsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogReportsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLLogReports', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSQLLogReports(request: DescribeSQLLogReportsRequest): DescribeSQLLogReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogReportsWithOptions(request, runtime);
}

model DescribeSQLLogRecordsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  SQLId?: long(name='SQLId', description='sqlId'),
  queryKeywords?: string(name='QueryKeywords', description='queryKeyword'),
  startTime: string(name='StartTime', description='startTime'),
  database?: string(name='Database', description='dbName'),
  user?: string(name='User', description='accountName'),
  form?: string(name='Form', description='form'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeSQLLogRecordsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: long(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  items: {
    SQLRecord: [
      {
        DBName: string(name='DBName', description='dbName'),
        accountName: string(name='AccountName', description='accountName'),
        hostAddress: string(name='HostAddress', description='hostAddress'),
        SQLText: string(name='SQLText', description='sqlText'),
        totalExecutionTimes: long(name='TotalExecutionTimes', description='latencyTime'),
        returnRowCounts: long(name='ReturnRowCounts', description='returnNumbers'),
        executeTime: string(name='ExecuteTime', description='executeTime'),
        threadID: string(name='ThreadID', description='threadId'),
      }
    ](name='SQLRecord', description='SQLRecord'),
  }(name='Items', description='data.items'),
}

async function describeSQLLogRecordsWithOptions(request: DescribeSQLLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSQLLogRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSQLLogRecords', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSQLLogRecords(request: DescribeSQLLogRecordsRequest): DescribeSQLLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSQLLogRecordsWithOptions(request, runtime);
}

model DescribeSlowLogsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  DBName?: string(name='DBName', description='dbName'),
  sortKey?: string(name='SortKey', description='sortKey'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='page'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeSlowLogsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  engine: string(name='Engine', description='data.engine'),
  startTime: string(name='StartTime', description='data.startTime'),
  endTime: string(name='EndTime', description='data.endTime'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.sqlItemsNumbers'),
  items: {
    SQLSlowLog: [
      {
        slowLogId: long(name='SlowLogId', description='slowLogId'),
        SQLHASH: string(name='SQLHASH', description='sqlhash'),
        SQLIdStr: string(name='SQLIdStr', description='sqlIdStr'),
        DBName: string(name='DBName', description='dbName'),
        SQLText: string(name='SQLText', description='sqlText'),
        mySQLTotalExecutionCounts: long(name='MySQLTotalExecutionCounts', description='totalNumberOfExecution'),
        mySQLTotalExecutionTimes: long(name='MySQLTotalExecutionTimes', description='totalQueryTime'),
        totalLockTimes: long(name='TotalLockTimes', description='totalLockTime'),
        maxLockTime: long(name='MaxLockTime', description='maxlockTime'),
        parseTotalRowCounts: long(name='ParseTotalRowCounts', description='parseTotalRowNumbers'),
        parseMaxRowCount: long(name='ParseMaxRowCount', description='parseMaxRowNumbers'),
        returnTotalRowCounts: long(name='ReturnTotalRowCounts', description='returnTotalItemNumbers'),
        returnMaxRowCount: long(name='ReturnMaxRowCount', description='returnMaxItemNumbers'),
        createTime: string(name='CreateTime', description='createTime'),
        SQLServerTotalExecutionCounts: long(name='SQLServerTotalExecutionCounts', description='totalExecutionCount'),
        SQLServerTotalExecutionTimes: long(name='SQLServerTotalExecutionTimes', description='totalExecutionTime'),
        totalLogicalReadCounts: long(name='TotalLogicalReadCounts', description='totalLogicalReads'),
        totalPhysicalReadCounts: long(name='TotalPhysicalReadCounts', description='totalPhysicalReads'),
        reportTime: string(name='ReportTime', description='reportTime'),
        maxExecutionTime: long(name='MaxExecutionTime', description='maxQueryTime'),
        avgExecutionTime: long(name='AvgExecutionTime', description='avgExecutionTime'),
      }
    ](name='SQLSlowLog', description='SQLSlowLog'),
  }(name='Items', description='data.sqls'),
}

async function describeSlowLogsWithOptions(request: DescribeSlowLogsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlowLogs', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSlowLogs(request: DescribeSlowLogsRequest): DescribeSlowLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogsWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  SQLHASH?: string(name='SQLHASH', description='sqlhash'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  DBName?: string(name='DBName', description='dbName'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='page'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeSlowLogRecordsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  engine: string(name='Engine', description='data.engine'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.sqlItemsNumbers'),
  items: {
    SQLSlowRecord: [
      {
        hostAddress: string(name='HostAddress', description='hostAddress'),
        DBName: string(name='DBName', description='dbName'),
        SQLText: string(name='SQLText', description='sqlText'),
        queryTimes: long(name='QueryTimes', description='queryTime'),
        lockTimes: long(name='LockTimes', description='lockTime'),
        parseRowCounts: long(name='ParseRowCounts', description='parseRowNumbers'),
        returnRowCounts: long(name='ReturnRowCounts', description='returnItemNumbers'),
        executionStartTime: string(name='ExecutionStartTime', description='queryStartTime'),
        queryTimeMS: long(name='QueryTimeMS', description='queryTimeMS'),
      }
    ](name='SQLSlowRecord', description='SQLSlowRecord'),
  }(name='Items', description='data.sqls'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlowLogRecords', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeResourceUsageRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeResourceUsageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  engine: string(name='Engine', description='data.engine'),
  diskUsed: long(name='DiskUsed', description='data.diskUsed'),
  dataSize: long(name='DataSize', description='data.dataSize'),
  logSize: long(name='LogSize', description='data.logSize'),
  backupSize: long(name='BackupSize', description='data.backupSize'),
  backupOssDataSize: long(name='BackupOssDataSize', description='data.backupOssSize'),
  backupOssLogSize: long(name='BackupOssLogSize', description='data.logOssSize'),
  SQLSize: long(name='SQLSize', description='data.sqlSize'),
  coldBackupSize: long(name='ColdBackupSize', description='data.coldBackupSize'),
  backupDataSize: long(name='BackupDataSize', description='data.backupDataSize'),
  backupLogSize: long(name='BackupLogSize', description='data.backupLogSize'),
  paidBackupSize: long(name='PaidBackupSize', description='data.paidBackupSize'),
  archiveBackupSize: long(name='ArchiveBackupSize', description='data.archiveBackupSize'),
}

async function describeResourceUsageWithOptions(request: DescribeResourceUsageRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageResponse {
  Util.validateModel(request);
  return doRequest('DescribeResourceUsage', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeResourceUsage(request: DescribeResourceUsageRequest): DescribeResourceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regions: {
    RDSRegion: [
      {
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='avz'),
      }
    ](name='RDSRegion', description='RDSRegion'),
  }(name='Regions', description='data.regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeParameterTemplatesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  engine: string(name='Engine', description='engine'),
  engineVersion: string(name='EngineVersion', description='engineVersion'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  category?: string(name='Category', description='category'),
  regionId?: string(name='RegionId', description='regionId'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
}

model DescribeParameterTemplatesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  engine: string(name='Engine', description='data.engine'),
  engineVersion: string(name='EngineVersion', description='data.engineVersion'),
  parameterCount: string(name='ParameterCount', description='data.parameterNumbers'),
  parameters: {
    templateRecord: [
      {
        parameterName: string(name='ParameterName', description='parameterName'),
        parameterValue: string(name='ParameterValue', description='parameterValue'),
        forceModify: string(name='ForceModify', description='revisable'),
        forceRestart: string(name='ForceRestart', description='effective'),
        checkingCode: string(name='CheckingCode', description='checkingCode'),
        parameterDescription: string(name='ParameterDescription', description='parameterDescription'),
      }
    ](name='TemplateRecord', description='TemplateRecord'),
  }(name='Parameters', description='data.parameters'),
}

async function describeParameterTemplatesWithOptions(request: DescribeParameterTemplatesRequest, runtime: Util.RuntimeOptions): DescribeParameterTemplatesResponse {
  Util.validateModel(request);
  return doRequest('DescribeParameterTemplates', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeParameterTemplates(request: DescribeParameterTemplatesRequest): DescribeParameterTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterTemplatesWithOptions(request, runtime);
}

model DescribeParametersRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeParametersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  engine: string(name='Engine', description='data.engine'),
  engineVersion: string(name='EngineVersion', description='data.engineVersion'),
  configParameters: {
    DBInstanceParameter: [
      {
        parameterName: string(name='ParameterName', description='parameterName'),
        parameterValue: string(name='ParameterValue', description='parameterValue'),
        parameterDescription: string(name='ParameterDescription', description='parameterDescription'),
      }
    ](name='DBInstanceParameter', description='DBInstanceParameter'),
  }(name='ConfigParameters', description='data.configParameters'),
  runningParameters: {
    DBInstanceParameter: [
      {
        parameterName: string(name='ParameterName', description='parameterName'),
        parameterValue: string(name='ParameterValue', description='parameterValue'),
        parameterDescription: string(name='ParameterDescription', description='parameterDescription'),
      }
    ](name='DBInstanceParameter', description='DBInstanceParameter'),
  }(name='RunningParameters', description='data.runningParameters'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  return doRequest('DescribeParameters', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeModifyParameterLogRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeModifyParameterLogResponse = {
  requestId: string(name='RequestId', description='requestId'),
  engine: string(name='Engine', description='data.engine'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  engineVersion: string(name='EngineVersion', description='data.engineVersion'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.ItemNumbers'),
  items: {
    parameterChangeLog: [
      {
        modifyTime: string(name='ModifyTime', description='changeTime'),
        oldParameterValue: string(name='OldParameterValue', description='oldParameterValue'),
        newParameterValue: string(name='NewParameterValue', description='newParameterValue'),
        parameterName: string(name='ParameterName', description='parameterName'),
        status: string(name='Status', description='isApplied'),
      }
    ](name='ParameterChangeLog', description='ParameterChangeLog'),
  }(name='Items', description='data.parameters'),
}

async function describeModifyParameterLogWithOptions(request: DescribeModifyParameterLogRequest, runtime: Util.RuntimeOptions): DescribeModifyParameterLogResponse {
  Util.validateModel(request);
  return doRequest('DescribeModifyParameterLog', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeModifyParameterLog(request: DescribeModifyParameterLogRequest): DescribeModifyParameterLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModifyParameterLogWithOptions(request, runtime);
}

model DescribeErrorLogsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeErrorLogsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.logItemsNumbers'),
  items: {
    errorLog: [
      {
        errorInfo: string(name='ErrorInfo', description='errorInfo'),
        createTime: string(name='CreateTime', description='createTime'),
      }
    ](name='ErrorLog', description='ErrorLog'),
  }(name='Items', description='data.logs'),
}

async function describeErrorLogsWithOptions(request: DescribeErrorLogsRequest, runtime: Util.RuntimeOptions): DescribeErrorLogsResponse {
  Util.validateModel(request);
  return doRequest('DescribeErrorLogs', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeErrorLogs(request: DescribeErrorLogsRequest): DescribeErrorLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeErrorLogsWithOptions(request, runtime);
}

model DescribeDBInstancePerformanceRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  key: string(name='Key', description='performanceKeys'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
}

model DescribeDBInstancePerformanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceName'),
  engine: string(name='Engine', description='data.engine'),
  startTime: string(name='StartTime', description='data.startTime'),
  endTime: string(name='EndTime', description='data.endTime'),
  performanceKeys: {
    performanceKey: [
      {
        key: string(name='Key', description='key'),
        unit: string(name='Unit', description='unit'),
        valueFormat: string(name='ValueFormat', description='valueFormat'),
      }
    ](name='PerformanceKey', description='PerformanceKey'),
  }(name='PerformanceKeys', description='data.performanceKeys'),
}

async function describeDBInstancePerformanceWithOptions(request: DescribeDBInstancePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstancePerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstancePerformance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstancePerformance(request: DescribeDBInstancePerformanceRequest): DescribeDBInstancePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancePerformanceWithOptions(request, runtime);
}

model DescribeDatabasesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBName?: string(name='DBName', description='dbName'),
  DBStatus?: string(name='DBStatus', description='dbStatus'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='page'),
}

model DescribeDatabasesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  databases: {
    database: [
      {
        DBName: string(name='DBName', description='dbName'),
        DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
        engine: string(name='Engine', description='engine'),
        DBStatus: string(name='DBStatus', description='dbStatus'),
        characterSetName: string(name='CharacterSetName', description='characterSetName'),
        DBDescription: string(name='DBDescription', description='dbDescription'),
        accounts: {
          accountPrivilegeInfo: [
            {
              account: string(name='Account', description='accountName'),
              accountPrivilege: string(name='AccountPrivilege', description='accountPrivilege'),
              accountPrivilegeDetail: string(name='AccountPrivilegeDetail', description='accountPrivilegeDetail'),
            }
          ](name='AccountPrivilegeInfo', description='AccountPrivilegeInfo'),
        }(name='Accounts', description='accounts'),
      }
    ](name='Database', description='Database'),
  }(name='Databases', description='data'),
}

async function describeDatabasesWithOptions(request: DescribeDatabasesRequest, runtime: Util.RuntimeOptions): DescribeDatabasesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDatabases', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabasesWithOptions(request, runtime);
}

model DescribeBinlogFilesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeBinlogFilesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.itemsNumbers'),
  totalFileSize: long(name='TotalFileSize', description='data.totalFileSize'),
  items: {
    binLogFile: [
      {
        fileSize: long(name='FileSize', description='fileSize'),
        logBeginTime: string(name='LogBeginTime', description='logBeginTime'),
        logEndTime: string(name='LogEndTime', description='logEndTime'),
        downloadLink: string(name='DownloadLink', description='downloadLink'),
        intranetDownloadLink: string(name='IntranetDownloadLink', description='intranetDownloadLink'),
        linkExpiredTime: string(name='LinkExpiredTime', description='linkExpiredTime'),
        checksum: string(name='Checksum', description='checksum'),
        hostInstanceID: string(name='HostInstanceID', description='instanceID'),
        logFileName: string(name='LogFileName', description='logname'),
      }
    ](name='BinLogFile', description='BinLogFile'),
  }(name='Items', description='data.items'),
}

async function describeBinlogFilesWithOptions(request: DescribeBinlogFilesRequest, runtime: Util.RuntimeOptions): DescribeBinlogFilesResponse {
  Util.validateModel(request);
  return doRequest('DescribeBinlogFiles', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeBinlogFiles(request: DescribeBinlogFilesRequest): DescribeBinlogFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBinlogFilesWithOptions(request, runtime);
}

model DescribeBackupTasksRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  flag?: string(name='Flag', description='flag'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  backupJobId?: integer(name='BackupJobId', description='backupjobId'),
  backupMode?: string(name='BackupMode', description='jobMode'),
  backupJobStatus?: string(name='BackupJobStatus', description='backupjobStatus'),
}

model DescribeBackupTasksResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: {
    backupJob: [
      {
        backupProgressStatus: string(name='BackupProgressStatus', description='backupProgressStatus'),
        backupStatus: string(name='BackupStatus', description='backupStatus'),
        jobMode: string(name='JobMode', description='jobMode'),
        process: string(name='Process', description='process'),
        taskAction: string(name='TaskAction', description='taskAction'),
        backupJobId: string(name='BackupJobId', description='backupjobId'),
        backupId: string(name='BackupId', description='backupSetID'),
      }
    ](name='BackupJob', description='BackupJob'),
  }(name='Items', description='data.backupjobItems'),
}

async function describeBackupTasksWithOptions(request: DescribeBackupTasksRequest, runtime: Util.RuntimeOptions): DescribeBackupTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupTasks', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeBackupTasks(request: DescribeBackupTasksRequest): DescribeBackupTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupTasksWithOptions(request, runtime);
}

model DescribeBackupsRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  backupId?: string(name='BackupId', description='backupId'),
  backupStatus?: string(name='BackupStatus', description='backupSetStatus'),
  backupMode?: string(name='BackupMode', description='jobMode'),
  startTime?: string(name='StartTime', description='startTime'),
  endTime?: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
}

model DescribeBackupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: string(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: string(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: string(name='PageRecordCount', description='data.backupsetNumbers'),
  totalBackupSize: long(name='TotalBackupSize', description='data.totalBackupSize'),
  totalEcsSnapshotSize: long(name='TotalEcsSnapshotSize', description='data.totalEcsSnapshotSize'),
  items: {
    backup: [
      {
        backupId: string(name='BackupId', description='backupSetId'),
        DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
        backupStatus: string(name='BackupStatus', description='backupSetStatus'),
        backupStartTime: string(name='BackupStartTime', description='backupStartTime'),
        backupEndTime: string(name='BackupEndTime', description='backupEndTime'),
        backupType: string(name='BackupType', description='backupType'),
        backupMode: string(name='BackupMode', description='jobMode'),
        backupMethod: string(name='BackupMethod', description='backupMethod'),
        backupDownloadURL: string(name='BackupDownloadURL', description='backupDownloadURL'),
        backupIntranetDownloadURL: string(name='BackupIntranetDownloadURL', description='backupIntranetDownloadURL'),
        backupLocation: string(name='BackupLocation', description='backupsetLocation'),
        backupExtractionStatus: string(name='BackupExtractionStatus', description='dataExtractionStatus'),
        backupScale: string(name='BackupScale', description='backupSetScale'),
        backupDBNames: string(name='BackupDBNames', description='backupDbList'),
        totalBackupSize: long(name='TotalBackupSize', description='totalBackupSize'),
        backupSize: long(name='BackupSize', description='backupSetSize'),
        hostInstanceID: string(name='HostInstanceID', description='instanceID'),
        storeStatus: string(name='StoreStatus', description='storeStatus'),
        metaStatus: string(name='MetaStatus', description='metaStatus'),
        slaveStatus: string(name='SlaveStatus', description='slaveStatus'),
        consistentTime: long(name='ConsistentTime', description='consistentTime'),
        backupInitiator: string(name='BackupInitiator', description='backupInitiator'),
        copyOnlyBackup: string(name='CopyOnlyBackup', description='copyOnly'),
        storageClass: string(name='StorageClass', description='storageClass'),
      }
    ](name='Backup', description='Backup'),
  }(name='Items', description='data.backupsetItems'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackups', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  backupPolicyMode?: string(name='BackupPolicyMode', description='backupPolicyMode'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  compressType?: string(name='CompressType', description='compressType'),
}

model DescribeBackupPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  backupRetentionPeriod: integer(name='BackupRetentionPeriod', description='data.model.backupRetentionPeriod'),
  preferredNextBackupTime: string(name='PreferredNextBackupTime', description='data.model.preferredNextBackupTime'),
  preferredBackupTime: string(name='PreferredBackupTime', description='data.preferredBackupTime'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', description='data.preferredBackupPeriod'),
  backupLog: string(name='BackupLog', description='data.backupLog'),
  logBackupRetentionPeriod: integer(name='LogBackupRetentionPeriod', description='data.model.logBackupRetentionPeriod'),
  enableBackupLog: string(name='EnableBackupLog', description='data.model.enableBackupLog'),
  localLogRetentionHours: integer(name='LocalLogRetentionHours', description='data.model.logBackupLocalRetentionPeriod'),
  localLogRetentionSpace: string(name='LocalLogRetentionSpace', description='data.model.logBackupLocalRetentionSpace'),
  duplication: string(name='Duplication', description='data.model.dumpBackupEnable'),
  duplicationContent: string(name='DuplicationContent', description='data.duplicationContent'),
  highSpaceUsageProtection: string(name='HighSpaceUsageProtection', description='data.model.forceCleanOnHighSpaceUsage'),
  logBackupFrequency: string(name='LogBackupFrequency', description='data.logBackupFrequency'),
  compressType: string(name='CompressType', description='data.model.compressType'),
  archiveBackupRetentionPeriod: string(name='ArchiveBackupRetentionPeriod', description='data.archiveBackupRetentionPeriod'),
  archiveBackupKeepPolicy: string(name='ArchiveBackupKeepPolicy', description='data.archiveBackupKeepPolicy'),
  archiveBackupKeepCount: string(name='ArchiveBackupKeepCount', description='data.archiveBackupKeepCount'),
  releasedKeepPolicy: string(name='ReleasedKeepPolicy', description='data.releasedKeepPolicy'),
  logBackupLocalRetentionNumber: integer(name='LogBackupLocalRetentionNumber', description='data.logBackupLocalRetentionNumber'),
  duplicationLocation: {
    sotrage: string(name='Sotrage', description='storage'),
    location: {
      endpoint: string(name='Endpoint', description='endpoint'),
      bucket: string(name='Bucket', description='bucket'),
    }(name='Location', description='location'),
  }(name='DuplicationLocation', description='data.duplicationLocation'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupPolicy', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeAccountsRequest = {
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName?: string(name='AccountName', description='accountName'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='page'),
}

model DescribeAccountsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  systemAdminAccountStatus: string(name='SystemAdminAccountStatus', description='data.sysadminAccountStatus'),
  systemAdminAccountFirstActivationTime: string(name='SystemAdminAccountFirstActivationTime', description='data.sysadminAccountFirstActivationTime'),
  accounts: {
    DBInstanceAccount: [
      {
        DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
        accountName: string(name='AccountName', description='accountName'),
        accountStatus: string(name='AccountStatus', description='accountStatus'),
        accountType: string(name='AccountType', description='accountType'),
        accountDescription: string(name='AccountDescription', description='accountDescription'),
        privExceeded: string(name='PrivExceeded', description='privExceeded'),
        databasePrivileges: {
          databasePrivilege: [
            {
              DBName: string(name='DBName', description='dbName'),
              accountPrivilege: string(name='AccountPrivilege', description='accountPrivilege'),
              accountPrivilegeDetail: string(name='AccountPrivilegeDetail', description='accountPrivilegeDetail'),
            }
          ](name='DatabasePrivilege', description='DatabasePrivilege'),
        }(name='DatabasePrivileges', description='databasePrivileges'),
      }
    ](name='DBInstanceAccount', description='DBInstanceAccount'),
  }(name='Accounts', description='data.accounts'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccounts', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescibeImportsFromDatabaseRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  engine: string(name='Engine', description='engine'),
  importId?: integer(name='ImportId', description='importId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescibeImportsFromDatabaseResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.maxRecordsPerPage'),
  items: {
    importResultFromDB: [
      {
        importId: integer(name='ImportId', description='migrationId'),
        importDataType: string(name='ImportDataType', description='transferType'),
        importDataStatus: string(name='ImportDataStatus', description='migrationStatusforDrc'),
        importDataStatusDescription: string(name='ImportDataStatusDescription', description='migrationStatusDescription'),
        incrementalImportingTime: string(name='IncrementalImportingTime', description='incrementalSyncTime'),
      }
    ](name='ImportResultFromDB', description='ImportResultFromDB'),
  }(name='Items', description='data.items'),
}

async function descibeImportsFromDatabaseWithOptions(request: DescibeImportsFromDatabaseRequest, runtime: Util.RuntimeOptions): DescibeImportsFromDatabaseResponse {
  Util.validateModel(request);
  return doRequest('DescibeImportsFromDatabase', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function descibeImportsFromDatabase(request: DescibeImportsFromDatabaseRequest): DescibeImportsFromDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return descibeImportsFromDatabaseWithOptions(request, runtime);
}

model DeleteDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDBInstanceWithOptions(request: DeleteDBInstanceRequest, runtime: Util.RuntimeOptions): DeleteDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('DeleteDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function deleteDBInstance(request: DeleteDBInstanceRequest): DeleteDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBInstanceWithOptions(request, runtime);
}

model DeleteDatabaseRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBName: string(name='DBName', description='dbName'),
}

model DeleteDatabaseResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDatabaseWithOptions(request: DeleteDatabaseRequest, runtime: Util.RuntimeOptions): DeleteDatabaseResponse {
  Util.validateModel(request);
  return doRequest('DeleteDatabase', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatabaseWithOptions(request, runtime);
}

model DeleteAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DeleteAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  return doRequest('DeleteAccount', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model CreateTempDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  backupId?: integer(name='BackupId', description='backupSetId'),
  restoreTime?: string(name='RestoreTime', description='restoreTime'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CreateTempDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  tempDBInstanceId: string(name='TempDBInstanceId', description='data.childDBInstanceName'),
}

async function createTempDBInstanceWithOptions(request: CreateTempDBInstanceRequest, runtime: Util.RuntimeOptions): CreateTempDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateTempDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createTempDBInstance(request: CreateTempDBInstanceRequest): CreateTempDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTempDBInstanceWithOptions(request, runtime);
}

model CreateDatabaseRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBName: string(name='DBName', description='dbName'),
  characterSetName: string(name='CharacterSetName', description='encoding'),
  DBDescription?: string(name='DBDescription', description='dbDescription'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CreateDatabaseResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createDatabaseWithOptions(request: CreateDatabaseRequest, runtime: Util.RuntimeOptions): CreateDatabaseResponse {
  Util.validateModel(request);
  return doRequest('CreateDatabase', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatabaseWithOptions(request, runtime);
}

model CreateBackupRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBName?: string(name='DBName', description='dbName'),
  backupStrategy?: string(name='BackupStrategy', description='backupStrategy'),
  backupMethod?: string(name='BackupMethod', description='backupMethod'),
  backupType?: string(name='BackupType', description='backupType'),
}

model CreateBackupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  backupJobId: string(name='BackupJobId', description='data.backupjobId'),
}

async function createBackupWithOptions(request: CreateBackupRequest, runtime: Util.RuntimeOptions): CreateBackupResponse {
  Util.validateModel(request);
  return doRequest('CreateBackup', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupWithOptions(request, runtime);
}

model CreateAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
  accountPassword: string(name='AccountPassword', description='accountPassword'),
  accountDescription?: string(name='AccountDescription', description='accountDescription'),
  accountType?: string(name='AccountType', description='accountType'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CreateAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  return doRequest('CreateAccount', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model CheckDBNameAvailableRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBName: string(name='DBName', description='dbName'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CheckDBNameAvailableResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function checkDBNameAvailableWithOptions(request: CheckDBNameAvailableRequest, runtime: Util.RuntimeOptions): CheckDBNameAvailableResponse {
  Util.validateModel(request);
  return doRequest('CheckDBNameAvailable', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function checkDBNameAvailable(request: CheckDBNameAvailableRequest): CheckDBNameAvailableResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDBNameAvailableWithOptions(request, runtime);
}

model CheckAccountNameAvailableRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  accountName: string(name='AccountName', description='accountName'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CheckAccountNameAvailableResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function checkAccountNameAvailableWithOptions(request: CheckAccountNameAvailableRequest, runtime: Util.RuntimeOptions): CheckAccountNameAvailableResponse {
  Util.validateModel(request);
  return doRequest('CheckAccountNameAvailable', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function checkAccountNameAvailable(request: CheckAccountNameAvailableRequest): CheckAccountNameAvailableResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkAccountNameAvailableWithOptions(request, runtime);
}

model CancelImportRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  importId: integer(name='ImportId', description='taskId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model CancelImportResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function cancelImportWithOptions(request: CancelImportRequest, runtime: Util.RuntimeOptions): CancelImportResponse {
  Util.validateModel(request);
  return doRequest('CancelImport', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function cancelImport(request: CancelImportRequest): CancelImportResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelImportWithOptions(request, runtime);
}

model AddTagsToResourceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  proxyId?: string(name='proxyId', description='proxyId'),
  regionId: string(name='RegionId', description='regionId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  tags?: string(name='Tags', description='tags'),
  tag: [
    {
      key?: string(name='key', description='tagKey1'),
      value?: string(name='value', description='tagValue1'),
    }
  ](name='Tag', description='Tag'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model AddTagsToResourceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function addTagsToResourceWithOptions(request: AddTagsToResourceRequest, runtime: Util.RuntimeOptions): AddTagsToResourceResponse {
  Util.validateModel(request);
  return doRequest('AddTagsToResource', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function addTagsToResource(request: AddTagsToResourceRequest): AddTagsToResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagsToResourceWithOptions(request, runtime);
}

model SwitchDBInstanceNetTypeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='connectionString'),
  port?: string(name='Port', description='port'),
  connectionStringType?: string(name='ConnectionStringType', description='connectionStringType'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model SwitchDBInstanceNetTypeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function switchDBInstanceNetTypeWithOptions(request: SwitchDBInstanceNetTypeRequest, runtime: Util.RuntimeOptions): SwitchDBInstanceNetTypeResponse {
  Util.validateModel(request);
  return doRequest('SwitchDBInstanceNetType', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function switchDBInstanceNetType(request: SwitchDBInstanceNetTypeRequest): SwitchDBInstanceNetTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchDBInstanceNetTypeWithOptions(request, runtime);
}

model ReleaseInstancePublicConnectionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  currentConnectionString: string(name='CurrentConnectionString', description='connectionString'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ReleaseInstancePublicConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function releaseInstancePublicConnectionWithOptions(request: ReleaseInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseInstancePublicConnectionResponse {
  Util.validateModel(request);
  return doRequest('ReleaseInstancePublicConnection', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function releaseInstancePublicConnection(request: ReleaseInstancePublicConnectionRequest): ReleaseInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstancePublicConnectionWithOptions(request, runtime);
}

model ModifyDBInstanceNetworkTypeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  retainClassic?: string(name='RetainClassic', description='retainClassic'),
  classicExpiredDays?: string(name='ClassicExpiredDays', description='classicExpiredDays'),
  instanceNetworkType: string(name='InstanceNetworkType', description='instanceNetworkType'),
  readWriteSplittingClassicExpiredDays?: integer(name='ReadWriteSplittingClassicExpiredDays', description='rwSplitClassicExpiredDays'),
  VPCId?: string(name='VPCId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='cloudInstanceIp'),
  readWriteSplittingPrivateIpAddress?: string(name='ReadWriteSplittingPrivateIpAddress', description='ReadWriteSplittingPrivateIpAddress'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDBInstanceNetworkTypeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='taskId'),
}

async function modifyDBInstanceNetworkTypeWithOptions(request: ModifyDBInstanceNetworkTypeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceNetworkTypeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceNetworkType', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceNetworkType(request: ModifyDBInstanceNetworkTypeRequest): ModifyDBInstanceNetworkTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceNetworkTypeWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionStringRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  currentConnectionString: string(name='CurrentConnectionString', description='currentConnectionString'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='connectionStringPrefix'),
  port: string(name='Port', description='port'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDBInstanceConnectionStringResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceConnectionStringWithOptions(request: ModifyDBInstanceConnectionStringRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionStringResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceConnectionString', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceConnectionString(request: ModifyDBInstanceConnectionStringRequest): ModifyDBInstanceConnectionStringResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionStringWithOptions(request, runtime);
}

model ModifyDBInstanceConnectionModeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  connectionMode: string(name='ConnectionMode', description='connectionMode'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model ModifyDBInstanceConnectionModeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBInstanceConnectionModeWithOptions(request: ModifyDBInstanceConnectionModeRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceConnectionModeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBInstanceConnectionMode', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function modifyDBInstanceConnectionMode(request: ModifyDBInstanceConnectionModeRequest): ModifyDBInstanceConnectionModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceConnectionModeWithOptions(request, runtime);
}

model DescribeDBInstanceNetInfoRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  flag?: string(name='Flag', description='flag'),
  DBInstanceNetRWSplitType?: string(name='DBInstanceNetRWSplitType', description='dbInstanceNetRwSplitType'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeDBInstanceNetInfoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceNetworkType: string(name='InstanceNetworkType', description='data.instanceNetworkType'),
  securityIPMode: string(name='SecurityIPMode', description='data.securityIPMode'),
  DBInstanceNetInfos: {
    DBInstanceNetInfo: [
      {
        upgradeable: string(name='Upgradeable', description='upgradeable'),
        expiredTime: string(name='ExpiredTime', description='expiredTime'),
        connectionString: string(name='ConnectionString', description='connectionString'),
        IPAddress: string(name='IPAddress', description='ipAddress'),
        IPType: string(name='IPType', description='ipType'),
        port: string(name='Port', description='port'),
        VPCId: string(name='VPCId', description='vpcId'),
        VSwitchId: string(name='VSwitchId', description='vSwitchId'),
        connectionStringType: string(name='ConnectionStringType', description='dbInstanceNetRwSplitType'),
        maxDelayTime: string(name='MaxDelayTime', description='maxDelayTime'),
        distributionType: string(name='DistributionType', description='distributionType'),
        securityIPGroups: {
          securityIPGroup: [
            {
              securityIPGroupName: string(name='SecurityIPGroupName', description='securityIPGroupName'),
              securityIPs: string(name='SecurityIPs', description='securityIps'),
            }
          ](name='securityIPGroup', description='securityIPGroup'),
        }(name='SecurityIPGroups', description='securityIPGroups'),
        DBInstanceWeights: {
          DBInstanceWeight: [
            {
              DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
              DBInstanceType: string(name='DBInstanceType', description='dbInstanceType'),
              availability: string(name='Availability', description='availability'),
              weight: string(name='Weight', description='weight'),
            }
          ](name='DBInstanceWeight', description='DBInstanceWeight'),
        }(name='DBInstanceWeights', description='dbInstanceWeightList'),
      }
    ](name='DBInstanceNetInfo', description='DBInstanceNetInfo'),
  }(name='DBInstanceNetInfos', description='data.netInfoItems'),
}

async function describeDBInstanceNetInfoWithOptions(request: DescribeDBInstanceNetInfoRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceNetInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceNetInfo', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstanceNetInfo(request: DescribeDBInstanceNetInfoRequest): DescribeDBInstanceNetInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceNetInfoWithOptions(request, runtime);
}

model CreateReadOnlyDBInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  regionId: string(name='RegionId', description='regionId'),
  zoneId: string(name='ZoneId', description='zoneId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  DBInstanceClass: string(name='DBInstanceClass', description='dbInstanceClass'),
  DBInstanceStorage: integer(name='DBInstanceStorage', description='dbInstanceStorage'),
  engineVersion: string(name='EngineVersion', description='engineVersion'),
  payType: string(name='PayType', description='payType'),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='dbInstanceDescription'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='instanceNetworkType'),
  VPCId?: string(name='VPCId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='cloudInstanceIp'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  category?: string(name='Category', description='category'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='dbInstanceStorageType'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster', description='targetDedicatedHostIdForMaster'),
}

model CreateReadOnlyDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBInstanceId: string(name='DBInstanceId', description='data.dbInstanceId'),
  orderId: string(name='OrderId', description='data.orderId'),
  connectionString: string(name='ConnectionString', description='data.connectionString'),
  port: string(name='Port', description='data.port'),
}

async function createReadOnlyDBInstanceWithOptions(request: CreateReadOnlyDBInstanceRequest, runtime: Util.RuntimeOptions): CreateReadOnlyDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateReadOnlyDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function createReadOnlyDBInstance(request: CreateReadOnlyDBInstanceRequest): CreateReadOnlyDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createReadOnlyDBInstanceWithOptions(request, runtime);
}

model CreateDBInstanceRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看可用的地域ID。; '),
  engine: string(name='Engine', description='description: 数据库类型，取值：* **MySQL**；* **SQLServer**；* **PostgreSQL**；* **PPAS**；* **MariaDB**。; '),
  engineVersion: string(name='EngineVersion', description='description: 数据库版本，取值：* MySQL：**5.5/5.6/5.7/8.0**；* SQL Server：**2008r2/2012/2012_ent_ha/2012_std_ha/2012_web/2016_ent_ha/2016_std_ha/2016_web/2017_ent**；* PostgreSQL：**9.4/10.0**；* PPAS：**9.3/10.0**；* MariaDB：**10.3**。; '),
  DBInstanceClass: string(name='DBInstanceClass', description='description: 实例规格，详见[实例规格表](~~26312~~)。; '),
  DBInstanceStorage: integer(name='DBInstanceStorage', description='description: 实例存储空间，单位：GB。每5GB进行递增，详见[实例规格表](~~26312~~)。; '),
  systemDBCharset?: string(name='SystemDBCharset', description='description: 字符集，取值：* MySQL/MariaDB实例：**utf8、gbk、latin1、utf8mb4**；* SQL Server实例：**Chinese_PRC_CI_AS、Chinese_PRC_CS_AS、SQL_Latin1_General_CP1_CI_AS、SQL_Latin1_General_CP1_CS_AS、Chinese_PRC_BIN**。; '),
  DBInstanceNetType: string(name='DBInstanceNetType', description='description: 实例的网络连接类型，取值：* **Internet**：公网连接；* **Intranet**：内网连接。; '),
  DBInstanceDescription?: string(name='DBInstanceDescription', description='description: 实例名称，长度为2~256个字符。以中文、英文字母开头，可以包含数字、中文、英文、下划线（_）、短横线（-）。>不能以 http:// 和 https:// 开头。; '),
  securityIPList: string(name='SecurityIPList', description='description: 该实例的[IP白名单](~~43185~~)，多个IP地址请以英文逗号（,）隔开，不可重复，最多1000个。支持如下两种格式：* IP地址形式，例如：10.23.12.24；* CIDR形式，例如：10.23.12.24/24（无类域间路由，24表示了地址中前缀的长度，范围为1~32）。; '),
  clientToken?: string(name='ClientToken', description='description: 用于保证请求的幂等性，防止重复提交请求。由客户端生成该参数值，要保证在不同请求间唯一，最大值不超过64个ASCII字符，且该参数值中不能包含非ASCII字符。; '),
  payType: string(name='PayType', description='description: 实例的付费类型，取值：* **Postpaid**：后付费（按量付费）；* **Prepaid**：预付费（包年包月）。; '),
  zoneId?: string(name='ZoneId', description='description: 可用区ID。多可用区用英文冒号（:）分隔。> 指定了VPC和交换机时，为匹配交换机对应的可用区，该参数必填。; '),
  instanceNetworkType?: string(name='InstanceNetworkType', description='description: 实例的网络类型，取值：* **VPC**：VPC网络；* **Classic**：经典网络。默认创建经典网络类型的实例。> * SQL Server2017集群版只支持VPC网络；* 如果数据库类型为MariaDB，该参数必填。; '),
  connectionMode?: string(name='ConnectionMode', description='description: 实例的访问模式，取值：* **Standard**：标准访问模式；* **Safe**：数据库代理模式。默认为RDS系统分配。> SQL Server 2012/2016/2017只支持标准访问模式。; '),
  VPCId?: string(name='VPCId', description='description: VPC ID。>如果数据库类型为MariaDB，该参数必填。; '),
  VSwitchId?: string(name='VSwitchId', description='description: VSwitch ID，多个值用英文逗号（,）隔开。>如果数据库类型为MariaDB，该参数必填。; '),
  privateIpAddress?: string(name='PrivateIpAddress', description='description: 设置实例的内网IP，需要在指定交换机的IP地址范围内。系统默认通过**VPCId**和**VSwitchId**自动分配。; '),
  usedTime?: string(name='UsedTime', description='description: 指定购买时长，取值：* 当参数**Period**为**Year**时，UsedTime取值为**1~3**；* 当参数**Period**为**Month**时，UsedTime取值为**1~9**。> 若付费类型为**Prepaid**则该参数必须传入。; '),
  period?: string(name='Period', description='description: 指定预付费实例为包年或者包月类型，取值：* **Year**：包年；* **Month**：包月。> 若付费类型为**Prepaid**则该参数必须传入。; '),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  DBInstanceStorageType?: string(name='DBInstanceStorageType', description='description: 实例存储类型，取值：* **local_ssd**/**ephemeral_ssd**：本地SSD盘（推荐）；* **cloud_ssd**：SSD云盘；* **cloud_essd**：ESSD云盘。; '),
  businessInfo?: string(name='BusinessInfo', description='description: 业务扩展参数。; '),
  encryptionKey?: string(name='EncryptionKey', description='encryptionKey'),
  roleARN?: string(name='RoleARN', description='roleARN'),
  autoRenew?: string(name='AutoRenew', description='description: 实例是否自动续费，取值：**true | false**>* 按月购买，则自动续费周期为1个月；* 按年购买，则自动续费周期为1年。; '),
  category?: string(name='Category', description='nodeType'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  targetDedicatedHostIdForMaster?: string(name='TargetDedicatedHostIdForMaster', description='targetDedicatedHostIdForMaster'),
  targetDedicatedHostIdForSlave?: string(name='TargetDedicatedHostIdForSlave', description='targetDedicatedHostIdForSlave'),
  targetDedicatedHostIdForLog?: string(name='TargetDedicatedHostIdForLog', description='targetDedicatedHostIdForLog'),
  DBParamGroupId?: string(name='DBParamGroupId', description='dbParamGroupId'),
  DBTimeZone?: string(name='DBTimeZone', description='dbTimeZone'),
  DBIsIgnoreCase?: string(name='DBIsIgnoreCase', description='dbIsIgnoreCase'),
}

model CreateDBInstanceResponse = {
  requestId: string(name='RequestId', description='description: 请求ID。; '),
  DBInstanceId: string(name='DBInstanceId', description='description: 实例ID。; '),
  orderId: string(name='OrderId', description='description: 订单ID。; '),
  connectionString: string(name='ConnectionString', description='description: 数据库连接地址。>参数**DBInstanceNetType**决定该地址为内网或外网。; '),
  port: string(name='Port', description='description: 数据库连接端口。>参数**DBInstanceNetType**决定该端口为内网或外网。; '),
}

/**
 * CreateDBInstance 调用CreateDBInstance接口创建一个RDS实例。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=CreateDBInstance
  * &RegionId=cn-hangzhou
  * &Engine=MySQL
  * &EngineVersion=5.6
  * &DBInstanceClass=rds.mysql.s1.small
  * &DBInstanceStorage=20
  * &DBInstanceNetType=Internet
  * &PayType=Postpaid
  * &SecurityIPList=10.23.12.27/24
  * &<公共请求参数>
  * ```
  * description:   * **请确保在使用该接口前，已充分了解RDS产品的收费方式和<xref href="https://www.alibabacloud.com/product/apsaradb-for-rds#pricing" format="html" scope="external" props="intl">价格</xref><xref href="https://www.aliyun.com/price/product#/rds/detail" format="html" scope="external" props="china">价格</xref>。**
  * 关于RDS实例的规格，请参见[实例规格表](~~26312~~)。

 */
async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateDBInstance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

/**
 * CreateDBInstance 调用CreateDBInstance接口创建一个RDS实例。
  * request demo:   * ```
  * http(s)://rds.aliyuncs.com/?Action=CreateDBInstance
  * &RegionId=cn-hangzhou
  * &Engine=MySQL
  * &EngineVersion=5.6
  * &DBInstanceClass=rds.mysql.s1.small
  * &DBInstanceStorage=20
  * &DBInstanceNetType=Internet
  * &PayType=Postpaid
  * &SecurityIPList=10.23.12.27/24
  * &<公共请求参数>
  * ```
  * description:   * **请确保在使用该接口前，已充分了解RDS产品的收费方式和<xref href="https://www.alibabacloud.com/product/apsaradb-for-rds#pricing" format="html" scope="external" props="intl">价格</xref><xref href="https://www.aliyun.com/price/product#/rds/detail" format="html" scope="external" props="china">价格</xref>。**
  * 关于RDS实例的规格，请参见[实例规格表](~~26312~~)。

 */
async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model AllocateInstancePublicConnectionRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  connectionStringPrefix: string(name='ConnectionStringPrefix', description='connectionStringPrefix'),
  port: string(name='Port', description='port'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model AllocateInstancePublicConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function allocateInstancePublicConnectionWithOptions(request: AllocateInstancePublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateInstancePublicConnectionResponse {
  Util.validateModel(request);
  return doRequest('AllocateInstancePublicConnection', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function allocateInstancePublicConnection(request: AllocateInstancePublicConnectionRequest): AllocateInstancePublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateInstancePublicConnectionWithOptions(request, runtime);
}

model DescribeDBInstancesByPerformanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  proxyId?: string(name='proxyId', description='proxyId'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='page'),
  sortMethod?: string(name='SortMethod', description='sortMethod'),
  sortKey?: string(name='SortKey', description='sortKey'),
  tags?: string(name='Tags', description='tags'),
  tag: [
    {
      key?: string(name='key', description='tagKey1'),
      value?: string(name='value', description='tagValue1'),
    }
  ](name='Tag', description='Tag'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  regionId?: string(name='RegionId', description='regionId'),
}

model DescribeDBInstancesByPerformanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageRecordCount: integer(name='PageRecordCount', description='data.performanceCount'),
  items: {
    DBInstancePerformance: [
      {
        CPUUsage: string(name='CPUUsage', description='cpuUsage'),
        IOPSUsage: string(name='IOPSUsage', description='iopsUsage'),
        diskUsage: string(name='DiskUsage', description='diskUsage'),
        sessionUsage: string(name='SessionUsage', description='sessionUsage'),
        DBInstanceId: string(name='DBInstanceId', description='dbInstanceName'),
        DBInstanceDescription: string(name='DBInstanceDescription', description='dbInstanceDescription'),
      }
    ](name='DBInstancePerformance', description='DBInstancePerformance'),
  }(name='Items', description='data.performanceList'),
}

async function describeDBInstancesByPerformanceWithOptions(request: DescribeDBInstancesByPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesByPerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstancesByPerformance', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstancesByPerformance(request: DescribeDBInstancesByPerformanceRequest): DescribeDBInstancesByPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesByPerformanceWithOptions(request, runtime);
}

model DescribeDBInstancesByExpireTimeRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId?: string(name='RegionId', description='region'),
  proxyId?: string(name='proxyId', description='proxyId'),
  expirePeriod?: integer(name='ExpirePeriod', description='availableDays'),
  expired?: boolean(name='Expired', description='hasExpiredRes'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='currPage'),
  tags?: string(name='Tags', description='tags'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
}

model DescribeDBInstancesByExpireTimeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecordCount'),
  pageRecordCount: integer(name='PageRecordCount', description='data.count'),
  items: {
    DBInstanceExpireTime: [
      {
        DBInstanceId: string(name='DBInstanceId', description='instanceName'),
        DBInstanceDescription: string(name='DBInstanceDescription', description='instanceDescription'),
        expireTime: string(name='ExpireTime', description='endTimeStr'),
        DBInstanceStatus: string(name='DBInstanceStatus', description='dbInstanceStatusDesc'),
        lockMode: string(name='LockMode', description='lockMode'),
      }
    ](name='DBInstanceExpireTime', description='DBInstanceExpireTime'),
  }(name='Items', description='data.data'),
}

async function describeDBInstancesByExpireTimeWithOptions(request: DescribeDBInstancesByExpireTimeRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesByExpireTimeResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstancesByExpireTime', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstancesByExpireTime(request: DescribeDBInstancesByExpireTimeRequest): DescribeDBInstancesByExpireTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesByExpireTimeWithOptions(request, runtime);
}

model DescribeDBInstancesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='stsAccessKeyId'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  clientToken?: string(name='ClientToken', description='token'),
  proxyId?: string(name='proxyId', description='proxyId'),
  engine?: string(name='Engine', description='dbType'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  DBInstanceStatus?: string(name='DBInstanceStatus', description='dbInstanceStatusDesc'),
  expired?: string(name='Expired', description='expired'),
  searchKey?: string(name='SearchKey', description='description'),
  DBInstanceId?: string(name='DBInstanceId', description='dbInstanceId'),
  DBInstanceType?: string(name='DBInstanceType', description='instanceUsedType'),
  regionId: string(name='RegionId', description='region'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='page'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='instanceNetworkType'),
  vpcId?: string(name='VpcId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  DBInstanceClass?: string(name='DBInstanceClass', description='dbInstanceClass'),
  engineVersion?: string(name='EngineVersion', description='engineVersion'),
  payType?: string(name='PayType', description='chargeType'),
  connectionMode?: string(name='ConnectionMode', description='connectionMode'),
  tags?: string(name='Tags', description='tags'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
  dedicatedHostId?: string(name='DedicatedHostId', description='dedicatedHostId'),
  instanceLevel?: integer(name='InstanceLevel', description='instanceLevel'),
}

model DescribeDBInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecordCount'),
  pageRecordCount: integer(name='PageRecordCount', description='data.count'),
  items: {
    DBInstance: [
      {
        insId: integer(name='InsId', description='model.dbInstanceId'),
        DBInstanceId: string(name='DBInstanceId', description='model.dbInstanceName'),
        DBInstanceDescription: string(name='DBInstanceDescription', description='model.dbInstanceDescription'),
        payType: string(name='PayType', description='model.dbInstancePayType'),
        DBInstanceType: string(name='DBInstanceType', description='model.dbInstanceUsedType'),
        regionId: string(name='RegionId', description='model.region'),
        expireTime: string(name='ExpireTime', description='model.dbInstanceExpireTime'),
        destroyTime: string(name='DestroyTime', description='model.destroyTime'),
        DBInstanceStatus: string(name='DBInstanceStatus', description='model.dbInstanceStatusDesc'),
        engine: string(name='Engine', description='model.engine'),
        DBInstanceNetType: string(name='DBInstanceNetType', description='model.dbInstanceNetType'),
        connectionMode: string(name='ConnectionMode', description='model.connectionMode'),
        lockMode: string(name='LockMode', description='model.lockMode'),
        category: string(name='Category', description='model.category'),
        DBInstanceStorageType: string(name='DBInstanceStorageType', description='model.dbInstanceStorageType'),
        DBInstanceClass: string(name='DBInstanceClass', description='model.dbInstanceClass'),
        instanceNetworkType: string(name='InstanceNetworkType', description='model.instanceNetworkType'),
        vpcCloudInstanceId: string(name='VpcCloudInstanceId', description='model.vpcCloudInstanceId'),
        lockReason: string(name='LockReason', description='model.lockReason'),
        zoneId: string(name='ZoneId', description='model.availableArea'),
        mutriORsignle: boolean(name='MutriORsignle', description='mutriORsignle'),
        createTime: string(name='CreateTime', description='createTime'),
        engineVersion: string(name='EngineVersion', description='model.engineVersion'),
        guardDBInstanceId: string(name='GuardDBInstanceId', description='model.guardDBInstanceName'),
        tempDBInstanceId: string(name='TempDBInstanceId', description='model.childDBInstanceName'),
        masterInstanceId: string(name='MasterInstanceId', description='model.masterDBInstanceName'),
        vpcId: string(name='VpcId', description='model.vpcId'),
        VSwitchId: string(name='VSwitchId', description='model.vSwitchId'),
        replicateId: string(name='ReplicateId', description='model.replacateId'),
        resourceGroupId: string(name='ResourceGroupId', description='model.resourceGroupId'),
        autoUpgradeMinorVersion: string(name='AutoUpgradeMinorVersion', description='model.autoUpgradeMinorVersion'),
        dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='dedicatedHostGroupId'),
        dedicatedHostIdForMaster: string(name='DedicatedHostIdForMaster', description='dedicatedHostIdForMaster'),
        dedicatedHostIdForSlave: string(name='DedicatedHostIdForSlave', description='dedicatedHostIdForSlave'),
        dedicatedHostIdForLog: string(name='DedicatedHostIdForLog', description='dedicatedHostIdForLog'),
        dedicatedHostNameForMaster: string(name='DedicatedHostNameForMaster', description='dedicatedHostNameForMaster'),
        dedicatedHostNameForSlave: string(name='DedicatedHostNameForSlave', description='dedicatedHostNameForSlave'),
        dedicatedHostNameForLog: string(name='DedicatedHostNameForLog', description='dedicatedHostNameForLog'),
        dedicatedHostZoneIdForMaster: string(name='DedicatedHostZoneIdForMaster', description='dedicatedHostZoneIdForMaster'),
        dedicatedHostZoneIdForSlave: string(name='DedicatedHostZoneIdForSlave', description='dedicatedHostZoneIdForSlave'),
        dedicatedHostZoneIdForLog: string(name='DedicatedHostZoneIdForLog', description='dedicatedHostZoneIdForLog'),
        readOnlyDBInstanceIds: {
          readOnlyDBInstanceId: [
            {
              DBInstanceId: string(name='DBInstanceId', description='readOnlyDBInstanceId'),
            }
          ](name='ReadOnlyDBInstanceId', description='ReadOnlyDBInstanceId'),
        }(name='ReadOnlyDBInstanceIds', description='readOnlyDBInstanceNameList'),
      }
    ](name='DBInstance', description='DBInstance'),
  }(name='Items', description='data.data'),
}

async function describeDBInstancesWithOptions(request: DescribeDBInstancesRequest, runtime: Util.RuntimeOptions): DescribeDBInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstances', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstances(request: DescribeDBInstancesRequest): DescribeDBInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstancesWithOptions(request, runtime);
}

model DescribeDBInstanceAttributeRequest = {
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  DBInstanceId: string(name='DBInstanceId', description='dbInstanceId'),
  expired?: string(name='Expired', description='expired'),
}

model DescribeDBInstanceAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: {
    DBInstanceAttribute: [
      {
        IPType: string(name='IPType', description='model.ipVersion'),
        DBInstanceDiskUsed: string(name='DBInstanceDiskUsed', description='model.dbInstanceDiskUsed'),
        guardDBInstanceName: string(name='GuardDBInstanceName', description='model.guardDBInstanceName'),
        canTempUpgrade: boolean(name='CanTempUpgrade', description='model.canTempUpgrade'),
        tempUpgradeTimeStart: string(name='TempUpgradeTimeStart', description='model.tempUpgradeTimeStart'),
        tempUpgradeTimeEnd: string(name='TempUpgradeTimeEnd', description='model.tempUpgradeTimeEnd'),
        tempUpgradeRecoveryTime: string(name='TempUpgradeRecoveryTime', description='model.tempUpgradeRecoveryTime'),
        tempUpgradeRecoveryClass: string(name='TempUpgradeRecoveryClass', description='model.tempUpgradeRecoveryClass'),
        tempUpgradeRecoveryCpu: integer(name='TempUpgradeRecoveryCpu', description='model.tempUpgradeRecoveryCpu'),
        tempUpgradeRecoveryMemory: integer(name='TempUpgradeRecoveryMemory', description='model.tempUpgradeRecoveryMemroy'),
        tempUpgradeRecoveryMaxIOPS: string(name='TempUpgradeRecoveryMaxIOPS', description='model.tempUpgradeRecoveryMaxIOPS'),
        tempUpgradeRecoveryMaxConnections: string(name='TempUpgradeRecoveryMaxConnections', description='model.tempUpgradeRecoveryMaxConnections'),
        insId: integer(name='InsId', description='model.dbInstanceId'),
        DBInstanceId: string(name='DBInstanceId', description='model.dbInstanceName'),
        payType: string(name='PayType', description='model.dbInstancePayType'),
        DBInstanceClassType: string(name='DBInstanceClassType', description='model.dbInstanceType'),
        DBInstanceType: string(name='DBInstanceType', description='model.dbInstanceUsedType'),
        regionId: string(name='RegionId', description='model.region'),
        connectionString: string(name='ConnectionString', description='model.connectionString'),
        port: string(name='Port', description='model.port'),
        engine: string(name='Engine', description='model.engine'),
        engineVersion: string(name='EngineVersion', description='model.engineVersion'),
        DBInstanceClass: string(name='DBInstanceClass', description='model.dbInstanceClass'),
        DBInstanceMemory: long(name='DBInstanceMemory', description='model.dbInstanceMemory'),
        DBInstanceStorage: integer(name='DBInstanceStorage', description='model.dbInstanceStorage'),
        vpcCloudInstanceId: string(name='VpcCloudInstanceId', description='model.vpcCloudInstanceId'),
        DBInstanceNetType: string(name='DBInstanceNetType', description='model.dbInstanceNetType'),
        DBInstanceStatus: string(name='DBInstanceStatus', description='model.dbInstanceStatusDesc'),
        DBInstanceDescription: string(name='DBInstanceDescription', description='model.dbInstanceDescription'),
        lockMode: string(name='LockMode', description='model.lockMode'),
        lockReason: string(name='LockReason', description='model.lockReason'),
        readDelayTime: string(name='ReadDelayTime', description='model.readDelayTime'),
        DBMaxQuantity: integer(name='DBMaxQuantity', description='model.dbMaxQty'),
        accountMaxQuantity: integer(name='AccountMaxQuantity', description='model.accountMaxQty'),
        creationTime: string(name='CreationTime', description='creationTime'),
        expireTime: string(name='ExpireTime', description='model.dbInstanceExpireTime'),
        maintainTime: string(name='MaintainTime', description='maintainTime'),
        availabilityValue: string(name='AvailabilityValue', description='model.availabilityValue'),
        maxIOPS: integer(name='MaxIOPS', description='model.maxIOPS'),
        maxConnections: integer(name='MaxConnections', description='model.maxConnections'),
        masterInstanceId: string(name='MasterInstanceId', description='model.masterDBInstanceName'),
        DBInstanceCPU: string(name='DBInstanceCPU', description='model.dbInstanceCpuCores'),
        incrementSourceDBInstanceId: string(name='IncrementSourceDBInstanceId', description='model.datacomefromInstanceName'),
        guardDBInstanceId: string(name='GuardDBInstanceId', description='model.guardDBInstanceName'),
        replicateId: string(name='ReplicateId', description='model.replacateId'),
        tempDBInstanceId: string(name='TempDBInstanceId', description='model.childDBInstanceName'),
        securityIPList: string(name='SecurityIPList', description='securityIPs'),
        zoneId: string(name='ZoneId', description='model.availableArea'),
        instanceNetworkType: string(name='InstanceNetworkType', description='model.instanceNetworkType'),
        DBInstanceStorageType: string(name='DBInstanceStorageType', description='model.dbInstanceStorageType'),
        advancedFeatures: string(name='AdvancedFeatures', description='model.isUserVpc'),
        category: string(name='Category', description='model.category'),
        accountType: string(name='AccountType', description='model.accountType'),
        supportUpgradeAccountType: string(name='SupportUpgradeAccountType', description='model.supportUpgradeAccountType'),
        supportCreateSuperAccount: string(name='SupportCreateSuperAccount', description='model.supportCreateSuperAccount'),
        vpcId: string(name='VpcId', description='model.vpcId'),
        VSwitchId: string(name='VSwitchId', description='model.vSwitchId'),
        connectionMode: string(name='ConnectionMode', description='model.connectionMode'),
        currentKernelVersion: string(name='CurrentKernelVersion', description='model.currentMinorVersion'),
        latestKernelVersion: string(name='LatestKernelVersion', description='model.latestMinorVersion'),
        resourceGroupId: string(name='ResourceGroupId', description='model.resourceGroupId'),
        readonlyInstanceSQLDelayedTime: string(name='ReadonlyInstanceSQLDelayedTime', description='model.readSQLDelayTime'),
        securityIPMode: string(name='SecurityIPMode', description='model.securityIPMode'),
        timeZone: string(name='TimeZone', description='model.timeZone'),
        collation: string(name='Collation', description='model.collation'),
        dispenseMode: string(name='DispenseMode', description='model.dispenseMode'),
        masterZone: string(name='MasterZone', description='model.masterRegion'),
        autoUpgradeMinorVersion: string(name='AutoUpgradeMinorVersion', description='model.autoUpgradeMinorVersion'),
        proxyType: integer(name='ProxyType', description='model.proxyType'),
        consoleVersion: string(name='ConsoleVersion', description='model.consoleVersion'),
        multipleTempUpgrade: boolean(name='MultipleTempUpgrade', description='model.mulTempUpgrade'),
        originConfiguration: string(name='OriginConfiguration', description='model.originConfig'),
        dedicatedHostGroupId: string(name='DedicatedHostGroupId', description='model.dedicatedHostGroupId'),
        slaveZones: {
          slaveZone: [
            {
              zoneId: string(name='ZoneId', description='regionId'),
            }
          ](name='SlaveZone', description='SlaveZone'),
        }(name='SlaveZones', description='slaveRegionList'),
        readOnlyDBInstanceIds: {
          readOnlyDBInstanceId: [
            {
              DBInstanceId: string(name='DBInstanceId', description='readOnlyDBInstanceId'),
            }
          ](name='ReadOnlyDBInstanceId', description='ReadOnlyDBInstanceId'),
        }(name='ReadOnlyDBInstanceIds', description='readOnlyDBInstanceNameList'),
        extra: {
          replicaGroupID: string(name='ReplicaGroupID', description='replicaGroupID'),
          replicaGroupStatus: string(name='ReplicaGroupStatus', description='replicaGroupStatus'),
          activeReplicaDBInstanceID: string(name='ActiveReplicaDBInstanceID', description='activeReplicaDBInstanceID'),
          DBInstanceId: {
            DBInstanceId: [ string ](name='DBInstanceId', description='DBInstanceId'),
          }(name='DBInstanceId', description='xRegionReplicas'),
        }(name='Extra', description='model.extra'),
      }
    ](name='DBInstanceAttribute', description='DBInstanceAttribute'),
  }(name='Items', description='data.data'),
}

async function describeDBInstanceAttributeWithOptions(request: DescribeDBInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBInstanceAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBInstanceAttribute', 'HTTPS', 'POST', '2014-08-15', 'AK', null, request, runtime);
}

async function describeDBInstanceAttribute(request: DescribeDBInstanceAttributeRequest): DescribeDBInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBInstanceAttributeWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
