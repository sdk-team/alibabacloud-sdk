"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
const tea_util_1 = __importDefault(require("@alicloud/tea-util"));
const rpc_client_1 = __importDefault(require("@alicloud/rpc-client"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AuthorizeFileUploadRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            product: 'Product',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            product: 'string',
            regionId: 'string',
        };
    }
}
exports.AuthorizeFileUploadRequest = AuthorizeFileUploadRequest;
class AuthorizeFileUploadResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'AccessKeyId',
            bucket: 'Bucket',
            encodedPolicy: 'EncodedPolicy',
            endpoint: 'Endpoint',
            objectKey: 'ObjectKey',
            requestId: 'RequestId',
            signature: 'Signature',
            useAccelerate: 'UseAccelerate',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            bucket: 'string',
            encodedPolicy: 'string',
            endpoint: 'string',
            objectKey: 'string',
            requestId: 'string',
            signature: 'string',
            useAccelerate: 'boolean',
        };
    }
}
exports.AuthorizeFileUploadResponse = AuthorizeFileUploadResponse;
class Client extends rpc_client_1.default {
    constructor(config) {
        super(config);
        this._endpointRule = "";
        this.checkConfig(config);
        this._endpoint = this.getEndpoint(this._productId, this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    authorizeFileUpload(request, runtime) {
        return __awaiter(this, void 0, void 0, function* () {
            tea_util_1.default.validateModel(request);
            return $tea.cast(yield this.doRequest("AuthorizeFileUpload", "HTTPS", "GET", "2019-12-19", "AK", $tea.toMap(request), null, runtime), new AuthorizeFileUploadResponse({}));
        });
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map