"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
const $tea = __importStar(require("@alicloud/tea-typescript"));
const stream_1 = require("stream");
class FileField extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            filename: 'filename',
            contentType: 'contentType',
            content: 'content',
        };
    }
    static types() {
        return {
            filename: 'string',
            contentType: 'string',
            content: 'Readable',
        };
    }
}
exports.FileField = FileField;
class FileFormStream extends stream_1.Readable {
    constructor(form, boundary) {
        super();
        this.form = form;
        this.keys = Object.keys(form);
        this.index = 0;
        this.boundary = boundary;
        this.streaming = false;
    }
    _read() {
        if (this.streaming) {
            return;
        }
        const separator = this.boundary;
        if (this.index < this.keys.length) {
            const name = this.keys[this.index];
            const fieldValue = this.form[name];
            if (fieldValue.filename &&
                fieldValue.contentType &&
                fieldValue.content instanceof stream_1.Readable) {
                let body = `--${separator}\r\n` +
                    `Content-Disposition: form-data; name="${name}"; filename=${fieldValue.filename}\r\n` +
                    `Content-Type: ${fieldValue.contentType}\r\n\r\n`;
                this.push(Buffer.from(body));
                this.streaming = true;
                fieldValue.content.on('data', (chunk) => {
                    this.push(chunk);
                });
                fieldValue.content.on('end', () => {
                    this.index++;
                    this.streaming = false;
                    this.push('');
                });
            }
            else {
                this.push(Buffer.from(`--${separator}\r\n` +
                    `Content-Disposition: form-data; name="${name}"\r\n\r\n` +
                    `${encodeURIComponent(fieldValue)}\r\n`));
                this.index++;
            }
        }
        else {
            this.push(Buffer.from(`\r\n--${separator}--\r\n`));
            this.push(null);
        }
    }
}
class Client {
    static getBoundary() {
        return 'boundary' + Math.random().toString(16).slice(-12);
    }
    static toFileForm(form, boundary) {
        return new FileFormStream(form, boundary);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map