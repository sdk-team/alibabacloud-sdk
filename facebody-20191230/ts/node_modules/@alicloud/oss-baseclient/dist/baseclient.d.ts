/// <reference types="node" />
import * as $tea from '@alicloud/tea-typescript';
import Creadential from '@alicloud/credentials';
import { Readable } from 'stream';
export default class BaseClient {
    _endpoint: string;
    _regionId: string;
    _autoretry: boolean;
    _protocol: string;
    _userAgent: string;
    _readTimeout: number;
    _connectTimeout: number;
    _localAddr: string;
    _httpProxy: string;
    _httpsProxy: string;
    _hostModel: string;
    _noProxy: string;
    _socks5Proxy: string;
    _socks5NetWork: string;
    _isEnableMD5: boolean;
    _isEnableCrc: boolean;
    _signatureVersion: string;
    _addtionalHeaders: string[];
    _maxIdleConns: number;
    _logger: any;
    _creadentials: Creadential;
    _contentMd5: string;
    _contentLength: number;
    constructor(config: {
        [key: string]: any;
    });
    _addAddtionalHeaders(header: string): void;
    _setAddtionalHeaders(headers: string[]): void;
    _getAddtionalHeaders(): string[];
    _setSignatureVersion(version: string): void;
    _setHostModel(model: string): void;
    _setRegionId(regionId: string): void;
    _getDate(): string;
    _xmlCast<T>(obj: any, clazz: T): {
        [key: string]: any;
    };
    _readAsString(response: $tea.Response): Promise<string>;
    _parseXml<T>(body: string, clazz: T): {
        [key: string]: any;
    };
    _equal(a: string, b: string): boolean;
    _empty(input: string): boolean;
    _ifListEmpty(list: string[]): boolean;
    _listToString(list: string[], separator: string): string;
    _getSignatureV1(request: $tea.Request, bucketName: string, accessKeySecret: string): string;
    _getSignatureV2(request: $tea.Request, bucketName: string, accessKeySecret: string, addtionalHeaders: string[]): string;
    _default(value: string, defaultVal: string): string;
    _defaultNumber(number: number, defaultNum: number): number;
    _isFail(response: {
        [key: string]: any;
    }): boolean;
    _toQuery(query: {
        [key: string]: any;
    }): {
        [key: string]: string;
    };
    _toMeta(meta: {
        [key: string]: any;
    }, prefix: string): {
        [key: string]: string;
    };
    _parseMeta(meta: {
        [key: string]: any;
    }, prefix: string): {
        [key: string]: string;
    };
    _getContentMD5(body: string): string;
    _getContentType(name: string): string;
    _isNotCrcMatched(calCrc: Buffer, respCrc: string): boolean;
    _encode(value: string, type: string): string;
    _base64Decode(value: string): string;
    _getCrc(a: $tea.Request, b: string, c: any, d: any): Buffer;
    _getRespCrc(response: $tea.Response, b: boolean, c: any, d: any): Buffer;
    _getUserAgent(userAgent?: string): string;
    _isUploadSpeedLimit(body: Readable, limit: number): Readable;
    _ifRange(header: any): boolean;
    _headerCast<T>(obj: any, clazz: T): {
        [key: string]: string;
    };
    _toHeader(header: any): {
        [key: string]: string;
    };
    _readAsStream(response: $tea.Response): Readable;
    _getTracker(): any;
    _getAccessKeyID(): Promise<string>;
    _getAccessKeySecret(): Promise<string>;
    _getSecurityToken(): Promise<string>;
    _getErrMessage(xml: string): {
        [key: string]: any;
    };
    _toXML(body: any): string;
    _notNull(obj: {
        [key: string]: any;
    }): boolean;
    _inject(readable: Readable, ref: {
        [key: string]: string;
    }): Readable;
}
