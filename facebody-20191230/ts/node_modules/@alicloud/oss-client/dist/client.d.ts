/// <reference types="node" />
import * as $OSSUtil from '@alicloud/oss-util';
import * as $FileForm from '@alicloud/tea-fileform';
import Credential from '@alicloud/credentials';
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';
export declare class Config extends $tea.Model {
    type?: string;
    securityToken?: string;
    accessKeyId: string;
    accessKeySecret: string;
    endpoint?: string;
    protocol?: string;
    regionId?: string;
    userAgent?: string;
    hostModel?: string;
    signatureVersion?: string;
    isEnableMD5?: boolean;
    isEnableCrc?: boolean;
    readTimeout?: number;
    connectTimeout?: number;
    localAddr?: string;
    httpProxy?: string;
    httpsProxy?: string;
    noProxy?: string;
    socks5Proxy?: string;
    socks5NetWork?: string;
    maxIdleConns?: number;
    addtionalHeaders?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLifecycleRequest extends $tea.Model {
    bucketName: string;
    body?: PutBucketLifecycleRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLifecycleResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMultipleObjectsRequest extends $tea.Model {
    bucketName: string;
    body?: DeleteMultipleObjectsRequestBody;
    header: DeleteMultipleObjectsRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMultipleObjectsResponse extends $tea.Model {
    requestId: string;
    deleteResult: DeleteMultipleObjectsResponseDeleteResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRefererRequest extends $tea.Model {
    bucketName: string;
    body?: PutBucketRefererRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRefererResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequest extends $tea.Model {
    bucketName: string;
    body?: PutBucketWebsiteRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CompleteMultipartUploadRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    filter: CompleteMultipartUploadRequestFilter;
    body?: CompleteMultipartUploadRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CompleteMultipartUploadResponse extends $tea.Model {
    requestId: string;
    completeMultipartUploadResult: CompleteMultipartUploadResponseCompleteMultipartUploadResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLoggingRequest extends $tea.Model {
    bucketName: string;
    body?: PutBucketLoggingRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLoggingResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRequestPaymentRequest extends $tea.Model {
    bucketName: string;
    body?: PutBucketRequestPaymentRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRequestPaymentResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketEncryptionRequest extends $tea.Model {
    bucketName: string;
    body?: PutBucketEncryptionRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketEncryptionResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelRequest extends $tea.Model {
    bucketName: string;
    channelName: string;
    body?: PutLiveChannelRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelResponse extends $tea.Model {
    requestId: string;
    createLiveChannelResult: PutLiveChannelResponseCreateLiveChannelResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketTagsRequest extends $tea.Model {
    bucketName: string;
    body?: PutBucketTagsRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketTagsResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectTaggingRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    body?: PutObjectTaggingRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectTaggingResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    filter: SelectObjectRequestFilter;
    body?: SelectObjectRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketCORSRequest extends $tea.Model {
    bucketName: string;
    body?: PutBucketCORSRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketCORSResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRequest extends $tea.Model {
    bucketName: string;
    body?: PutBucketRequestBody;
    header?: PutBucketRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMultipartUploadsRequest extends $tea.Model {
    bucketName: string;
    filter?: ListMultipartUploadsRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMultipartUploadsResponse extends $tea.Model {
    requestId: string;
    listMultipartUploadsResult: ListMultipartUploadsResponseListMultipartUploadsResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketRequestPaymentRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketRequestPaymentResponse extends $tea.Model {
    requestId: string;
    requestPaymentConfiguration: GetBucketRequestPaymentResponseRequestPaymentConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketEncryptionRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketEncryptionResponse extends $tea.Model {
    requestId: string;
    serverSideEncryptionRule: GetBucketEncryptionResponseServerSideEncryptionRule;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketTagsRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketTagsResponse extends $tea.Model {
    requestId: string;
    tagging: GetBucketTagsResponseTagging;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetServiceRequest extends $tea.Model {
    filter?: GetServiceRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetServiceResponse extends $tea.Model {
    requestId: string;
    listAllMyBucketsResult: GetServiceResponseListAllMyBucketsResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketEncryptionRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketEncryptionResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketTagsRequest extends $tea.Model {
    bucketName: string;
    filter: DeleteBucketTagsRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketTagsResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponse extends $tea.Model {
    requestId: string;
    websiteConfiguration: GetBucketWebsiteResponseWebsiteConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveChannelRequest extends $tea.Model {
    bucketName: string;
    channelName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveChannelResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLocationRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLocationResponse extends $tea.Model {
    requestId: string;
    locationConstraint: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListLiveChannelRequest extends $tea.Model {
    bucketName: string;
    filter?: ListLiveChannelRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListLiveChannelResponse extends $tea.Model {
    requestId: string;
    listLiveChannelResult: ListLiveChannelResponseListLiveChannelResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectMetaRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectMetaResponse extends $tea.Model {
    requestId: string;
    eTag: string;
    contentLength: string;
    lastModified: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketAclRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketAclResponse extends $tea.Model {
    requestId: string;
    accessControlPolicy: GetBucketAclResponseAccessControlPolicy;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartsRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    filter: ListPartsRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartsResponse extends $tea.Model {
    requestId: string;
    listPartsResult: ListPartsResponseListPartsResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelHistoryRequest extends $tea.Model {
    bucketName: string;
    channelName: string;
    filter?: GetLiveChannelHistoryRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelHistoryResponse extends $tea.Model {
    requestId: string;
    liveChannelHistory: GetLiveChannelHistoryResponseLiveChannelHistory;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketRequest extends $tea.Model {
    bucketName: string;
    filter?: GetBucketRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketResponse extends $tea.Model {
    requestId: string;
    listBucketResult: GetBucketResponseListBucketResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelInfoRequest extends $tea.Model {
    bucketName: string;
    channelName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelInfoResponse extends $tea.Model {
    requestId: string;
    liveChannelConfiguration: GetLiveChannelInfoResponseLiveChannelConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelStatRequest extends $tea.Model {
    bucketName: string;
    channelName: string;
    filter?: GetLiveChannelStatRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelStatResponse extends $tea.Model {
    requestId: string;
    liveChannelStat: GetLiveChannelStatResponseLiveChannelStat;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteObjectRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteObjectResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AbortMultipartUploadRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    filter: AbortMultipartUploadRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AbortMultipartUploadResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendObjectRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    userMeta?: {
        [key: string]: string;
    };
    body?: Readable;
    filter: AppendObjectRequestFilter;
    header?: AppendObjectRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendObjectResponse extends $tea.Model {
    requestId: string;
    nextAppendPosition: string;
    hashCrc64ecma: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadPartCopyRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    filter: UploadPartCopyRequestFilter;
    header: UploadPartCopyRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadPartCopyResponse extends $tea.Model {
    requestId: string;
    copyPartResult: UploadPartCopyResponseCopyPartResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetVodPlaylistRequest extends $tea.Model {
    bucketName: string;
    channelName: string;
    filter: GetVodPlaylistRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetVodPlaylistResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketCORSRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketCORSResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    header?: GetObjectRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectResponse extends $tea.Model {
    requestId: string;
    objectType: string;
    serverSideEncryption: string;
    taggingCount: string;
    restore: string;
    body: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadPartRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    body?: Readable;
    filter: UploadPartRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadPartResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketCORSRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketCORSResponse extends $tea.Model {
    requestId: string;
    cORSConfiguration: GetBucketCORSResponseCORSConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyObjectRequest extends $tea.Model {
    bucketName: string;
    destObjectName: string;
    header: CopyObjectRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyObjectResponse extends $tea.Model {
    requestId: string;
    copyObjectResult: CopyObjectResponseCopyObjectResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectTaggingRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectTaggingResponse extends $tea.Model {
    requestId: string;
    tagging: GetObjectTaggingResponseTagging;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketLifecycleRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketLifecycleResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketLoggingRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketLoggingResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketWebsiteRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketWebsiteResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSymlinkRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSymlinkResponse extends $tea.Model {
    requestId: string;
    symlinkTarget: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLifecycleRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLifecycleResponse extends $tea.Model {
    requestId: string;
    lifecycleConfiguration: GetBucketLifecycleResponseLifecycleConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutSymlinkRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    header: PutSymlinkRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutSymlinkResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketRefererRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketRefererResponse extends $tea.Model {
    requestId: string;
    refererConfiguration: GetBucketRefererResponseRefererConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CallbackRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CallbackResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLoggingRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLoggingResponse extends $tea.Model {
    requestId: string;
    bucketLoggingStatus: GetBucketLoggingResponseBucketLoggingStatus;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectAclRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    header: PutObjectAclRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectAclResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketInfoRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketInfoResponse extends $tea.Model {
    requestId: string;
    bucketInfo: GetBucketInfoResponseBucketInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelStatusRequest extends $tea.Model {
    bucketName: string;
    channelName: string;
    filter: PutLiveChannelStatusRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelStatusResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitiateMultipartUploadRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    filter?: InitiateMultipartUploadRequestFilter;
    header?: InitiateMultipartUploadRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitiateMultipartUploadResponse extends $tea.Model {
    requestId: string;
    initiateMultipartUploadResult: InitiateMultipartUploadResponseInitiateMultipartUploadResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OptionObjectRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    header: OptionObjectRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OptionObjectResponse extends $tea.Model {
    requestId: string;
    accessControlAllowOrigin: string;
    accessControlAllowMethods: string;
    accessControlAllowHeaders: string;
    accessControlExposeHeaders: string;
    accessControlMaxAge: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostVodPlaylistRequest extends $tea.Model {
    bucketName: string;
    channelName: string;
    playlistName: string;
    filter: PostVodPlaylistRequestFilter;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostVodPlaylistResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostObjectRequest extends $tea.Model {
    bucketName: string;
    header: PostObjectRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostObjectResponse extends $tea.Model {
    postResponse: PostObjectResponsePostResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HeadObjectRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    header?: HeadObjectRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HeadObjectResponse extends $tea.Model {
    requestId: string;
    userMeta: {
        [key: string]: string;
    };
    serverSideEncryption: string;
    serverSideEncryptionKeyId: string;
    storageClass: string;
    objectType: string;
    nextAppendPosition: string;
    hashCrc64ecma: string;
    expiration: string;
    restore: string;
    processStatus: string;
    requestCharged: string;
    contentMd5: string;
    lastModified: string;
    accessControlAllowOrigin: string;
    accessControlAllowMethods: string;
    accessControlMaxAge: string;
    accessControlAllowHeaders: string;
    accessControlExposeHeaders: string;
    taggingCount: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteObjectTaggingRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteObjectTaggingResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreObjectRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RestoreObjectResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectAclRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectAclResponse extends $tea.Model {
    requestId: string;
    accessControlPolicy: GetObjectAclResponseAccessControlPolicy;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketAclRequest extends $tea.Model {
    bucketName: string;
    header: PutBucketAclRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketAclResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketRequest extends $tea.Model {
    bucketName: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketResponse extends $tea.Model {
    requestId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectRequest extends $tea.Model {
    bucketName: string;
    objectName: string;
    userMeta?: {
        [key: string]: string;
    };
    body?: Readable;
    header?: PutObjectRequestHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectResponse extends $tea.Model {
    requestId: string;
    hashCrc64ecma: string;
    serverTime: string;
    bucketVersion: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLifecycleRequestBodyLifecycleConfigurationRuleExpiration extends $tea.Model {
    days?: number;
    createdBeforeDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLifecycleRequestBodyLifecycleConfigurationRuleTransition extends $tea.Model {
    days?: number;
    storageClass?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLifecycleRequestBodyLifecycleConfigurationRuleAbortMultipartUpload extends $tea.Model {
    days?: number;
    createdBeforeDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLifecycleRequestBodyLifecycleConfigurationRuleTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLifecycleRequestBodyLifecycleConfigurationRule extends $tea.Model {
    expiration?: PutBucketLifecycleRequestBodyLifecycleConfigurationRuleExpiration;
    transition?: PutBucketLifecycleRequestBodyLifecycleConfigurationRuleTransition;
    abortMultipartUpload?: PutBucketLifecycleRequestBodyLifecycleConfigurationRuleAbortMultipartUpload;
    tag?: PutBucketLifecycleRequestBodyLifecycleConfigurationRuleTag;
    iD?: string;
    prefix?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLifecycleRequestBodyLifecycleConfiguration extends $tea.Model {
    rule?: PutBucketLifecycleRequestBodyLifecycleConfigurationRule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLifecycleRequestBody extends $tea.Model {
    lifecycleConfiguration: PutBucketLifecycleRequestBodyLifecycleConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMultipleObjectsRequestBodyDeleteObject extends $tea.Model {
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMultipleObjectsRequestBodyDelete extends $tea.Model {
    object?: DeleteMultipleObjectsRequestBodyDeleteObject[];
    quiet?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMultipleObjectsRequestBody extends $tea.Model {
    delete: DeleteMultipleObjectsRequestBodyDelete;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMultipleObjectsRequestHeader extends $tea.Model {
    encodingType?: string;
    contentLength: string;
    contentMD5: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMultipleObjectsResponseDeleteResultDeleted extends $tea.Model {
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMultipleObjectsResponseDeleteResult extends $tea.Model {
    quiet?: string;
    encodingType?: string;
    deleted?: DeleteMultipleObjectsResponseDeleteResultDeleted[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRefererRequestBodyRefererConfigurationRefererList extends $tea.Model {
    referer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRefererRequestBodyRefererConfiguration extends $tea.Model {
    refererList?: PutBucketRefererRequestBodyRefererConfigurationRefererList;
    allowEmptyReferer?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRefererRequestBody extends $tea.Model {
    refererConfiguration: PutBucketRefererRequestBodyRefererConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfigurationIndexDocument extends $tea.Model {
    suffix?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfigurationErrorDocument extends $tea.Model {
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleConditionIncludeHeader extends $tea.Model {
    key?: string;
    equals?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleCondition extends $tea.Model {
    includeHeader?: PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleConditionIncludeHeader;
    keyPrefixEquals?: string;
    httpErrorCodeReturnedEquals?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleRedirectMirrorHeadersSet extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleRedirectMirrorHeaders extends $tea.Model {
    set?: PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleRedirectMirrorHeadersSet;
    passAll?: boolean;
    pass?: string;
    remove?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleRedirect extends $tea.Model {
    mirrorHeaders?: PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleRedirectMirrorHeaders;
    redirectType?: string;
    passQueryString?: boolean;
    mirrorURL?: string;
    mirrorPassQueryString?: boolean;
    mirrorFollowRedirect?: boolean;
    mirrorCheckMd5?: boolean;
    protocol?: string;
    hostName?: string;
    httpRedirectCode?: string;
    replaceKeyPrefixWith?: string;
    replaceKeyWith?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRule extends $tea.Model {
    condition?: PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleCondition;
    redirect?: PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRuleRedirect;
    ruleNumber?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRules extends $tea.Model {
    routingRule?: PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRulesRoutingRule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBodyWebsiteConfiguration extends $tea.Model {
    indexDocument?: PutBucketWebsiteRequestBodyWebsiteConfigurationIndexDocument;
    errorDocument?: PutBucketWebsiteRequestBodyWebsiteConfigurationErrorDocument;
    routingRules?: PutBucketWebsiteRequestBodyWebsiteConfigurationRoutingRules;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketWebsiteRequestBody extends $tea.Model {
    websiteConfiguration: PutBucketWebsiteRequestBodyWebsiteConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CompleteMultipartUploadRequestFilter extends $tea.Model {
    uploadId: string;
    encodingType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CompleteMultipartUploadRequestBodyCompleteMultipartUploadPart extends $tea.Model {
    partNumber?: string;
    eTag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CompleteMultipartUploadRequestBodyCompleteMultipartUpload extends $tea.Model {
    part?: CompleteMultipartUploadRequestBodyCompleteMultipartUploadPart[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CompleteMultipartUploadRequestBody extends $tea.Model {
    completeMultipartUpload: CompleteMultipartUploadRequestBodyCompleteMultipartUpload;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CompleteMultipartUploadResponseCompleteMultipartUploadResult extends $tea.Model {
    bucket?: string;
    eTag?: string;
    location?: string;
    key?: string;
    encodingType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLoggingRequestBodyBucketLoggingStatusLoggingEnabled extends $tea.Model {
    targetBucket?: string;
    targetPrefix?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLoggingRequestBodyBucketLoggingStatus extends $tea.Model {
    loggingEnabled?: PutBucketLoggingRequestBodyBucketLoggingStatusLoggingEnabled;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketLoggingRequestBody extends $tea.Model {
    bucketLoggingStatus: PutBucketLoggingRequestBodyBucketLoggingStatus;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRequestPaymentRequestBodyRequestPaymentConfiguration extends $tea.Model {
    payer?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRequestPaymentRequestBody extends $tea.Model {
    requestPaymentConfiguration: PutBucketRequestPaymentRequestBodyRequestPaymentConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketEncryptionRequestBodyServerSideEncryptionRuleApplyServerSideEncryptionByDefault extends $tea.Model {
    sSEAlgorithm?: string;
    kMSMasterKeyID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketEncryptionRequestBodyServerSideEncryptionRule extends $tea.Model {
    applyServerSideEncryptionByDefault?: PutBucketEncryptionRequestBodyServerSideEncryptionRuleApplyServerSideEncryptionByDefault;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketEncryptionRequestBody extends $tea.Model {
    serverSideEncryptionRule: PutBucketEncryptionRequestBodyServerSideEncryptionRule;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelRequestBodyLiveChannelConfigurationTarget extends $tea.Model {
    type?: string;
    fragDuration?: string;
    fragCount?: string;
    playlistName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelRequestBodyLiveChannelConfigurationSnapshot extends $tea.Model {
    roleName?: string;
    destBucket?: string;
    notifyTopic?: string;
    interval?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelRequestBodyLiveChannelConfiguration extends $tea.Model {
    target?: PutLiveChannelRequestBodyLiveChannelConfigurationTarget;
    snapshot?: PutLiveChannelRequestBodyLiveChannelConfigurationSnapshot;
    description?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelRequestBody extends $tea.Model {
    liveChannelConfiguration: PutLiveChannelRequestBodyLiveChannelConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelResponseCreateLiveChannelResultPublishUrls extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelResponseCreateLiveChannelResultPlayUrls extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelResponseCreateLiveChannelResult extends $tea.Model {
    publishUrls: PutLiveChannelResponseCreateLiveChannelResultPublishUrls;
    playUrls: PutLiveChannelResponseCreateLiveChannelResultPlayUrls;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketTagsRequestBodyTaggingTagSetTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketTagsRequestBodyTaggingTagSet extends $tea.Model {
    tag?: PutBucketTagsRequestBodyTaggingTagSetTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketTagsRequestBodyTagging extends $tea.Model {
    tagSet?: PutBucketTagsRequestBodyTaggingTagSet;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketTagsRequestBody extends $tea.Model {
    tagging: PutBucketTagsRequestBodyTagging;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectTaggingRequestBodyTaggingTagSetTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectTaggingRequestBodyTaggingTagSet extends $tea.Model {
    tag?: PutObjectTaggingRequestBodyTaggingTagSetTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectTaggingRequestBodyTagging extends $tea.Model {
    tagSet?: PutObjectTaggingRequestBodyTaggingTagSet;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectTaggingRequestBody extends $tea.Model {
    tagging: PutObjectTaggingRequestBodyTagging;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectRequestFilter extends $tea.Model {
    porcess: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectRequestBodySelectRequestInputSerializationCSV extends $tea.Model {
    fileHeaderInfo?: string;
    recordDelimiter?: string;
    fieldDelimiter?: string;
    quoteCharacter?: string;
    commentCharacter?: string;
    range?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectRequestBodySelectRequestInputSerialization extends $tea.Model {
    cSV?: SelectObjectRequestBodySelectRequestInputSerializationCSV;
    compressionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectRequestBodySelectRequestOutputSerializationCSV extends $tea.Model {
    recordDelimiter?: string;
    fieldDelimiter?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectRequestBodySelectRequestOutputSerialization extends $tea.Model {
    cSV?: SelectObjectRequestBodySelectRequestOutputSerializationCSV;
    keepAllColumns?: string;
    outputRawData?: string;
    enablePayloadCrc?: string;
    outputHeader?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectRequestBodySelectRequestOptions extends $tea.Model {
    skipPartialDataRecord?: string;
    maxSkippedRecordsAllowed?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectRequestBodySelectRequest extends $tea.Model {
    inputSerialization?: SelectObjectRequestBodySelectRequestInputSerialization;
    outputSerialization?: SelectObjectRequestBodySelectRequestOutputSerialization;
    options?: SelectObjectRequestBodySelectRequestOptions;
    expression?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SelectObjectRequestBody extends $tea.Model {
    selectRequest: SelectObjectRequestBodySelectRequest;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketCORSRequestBodyCORSConfigurationCORSRule extends $tea.Model {
    allowedOrigin?: string[];
    allowedMethod?: string[];
    allowedHeader?: string[];
    exposeHeader?: string[];
    maxAgeSeconds?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketCORSRequestBodyCORSConfiguration extends $tea.Model {
    cORSRule?: PutBucketCORSRequestBodyCORSConfigurationCORSRule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketCORSRequestBody extends $tea.Model {
    cORSConfiguration: PutBucketCORSRequestBodyCORSConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRequestBodyCreateBucketConfiguration extends $tea.Model {
    storageClass?: string;
    dataRedundancyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRequestBody extends $tea.Model {
    createBucketConfiguration: PutBucketRequestBodyCreateBucketConfiguration;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketRequestHeader extends $tea.Model {
    acl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMultipartUploadsRequestFilter extends $tea.Model {
    delimiter?: string;
    maxUploads?: string;
    keyMarker?: string;
    prefix?: string;
    uploadIdMarker?: string;
    encodingType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMultipartUploadsResponseListMultipartUploadsResultUpload extends $tea.Model {
    key?: string;
    uploadId?: string;
    initiated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListMultipartUploadsResponseListMultipartUploadsResult extends $tea.Model {
    bucket?: string;
    encodingType?: string;
    keyMarker?: string;
    uploadIdMarker?: string;
    nextKeyMarker?: string;
    nextUploadIdMarker?: string;
    delimiter?: string;
    maxUploads?: string;
    isTruncated?: string;
    upload?: ListMultipartUploadsResponseListMultipartUploadsResultUpload[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketRequestPaymentResponseRequestPaymentConfiguration extends $tea.Model {
    payer?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketEncryptionResponseServerSideEncryptionRuleApplyServerSideEncryptionByDefault extends $tea.Model {
    sSEAlgorithm?: string;
    kMSMasterKeyID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketEncryptionResponseServerSideEncryptionRule extends $tea.Model {
    applyServerSideEncryptionByDefault: GetBucketEncryptionResponseServerSideEncryptionRuleApplyServerSideEncryptionByDefault;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketTagsResponseTaggingTagSetTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketTagsResponseTaggingTagSet extends $tea.Model {
    tag?: GetBucketTagsResponseTaggingTagSetTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketTagsResponseTagging extends $tea.Model {
    tagSet: GetBucketTagsResponseTaggingTagSet;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetServiceRequestFilter extends $tea.Model {
    prefix?: string;
    marker?: string;
    maxKeys?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetServiceResponseListAllMyBucketsResultOwner extends $tea.Model {
    iD?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetServiceResponseListAllMyBucketsResultBucketsBucket extends $tea.Model {
    name?: string;
    createDate?: string;
    location?: string;
    extranetEndpoint?: string;
    intranetEndpoint?: string;
    storageClass?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetServiceResponseListAllMyBucketsResultBuckets extends $tea.Model {
    bucket?: GetServiceResponseListAllMyBucketsResultBucketsBucket[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetServiceResponseListAllMyBucketsResult extends $tea.Model {
    prefix?: string;
    marker?: string;
    maxKeys?: string;
    isTruncated?: string;
    nextMarker?: string;
    owner: GetServiceResponseListAllMyBucketsResultOwner;
    buckets: GetServiceResponseListAllMyBucketsResultBuckets;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBucketTagsRequestFilter extends $tea.Model {
    tagging: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfigurationIndexDocument extends $tea.Model {
    suffix?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfigurationErrorDocument extends $tea.Model {
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleConditionIncludeHeader extends $tea.Model {
    key?: string;
    equals?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleCondition extends $tea.Model {
    keyPrefixEquals?: string;
    httpErrorCodeReturnedEquals?: string;
    includeHeader: GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleConditionIncludeHeader;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleRedirectMirrorHeadersSet extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleRedirectMirrorHeaders extends $tea.Model {
    passAll?: boolean;
    pass?: string;
    remove?: string;
    set: GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleRedirectMirrorHeadersSet;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleRedirect extends $tea.Model {
    redirectType?: string;
    passQueryString?: boolean;
    mirrorURL?: string;
    mirrorPassQueryString?: boolean;
    mirrorFollowRedirect?: boolean;
    mirrorCheckMd5?: boolean;
    protocol?: string;
    hostName?: string;
    httpRedirectCode?: string;
    replaceKeyPrefixWith?: string;
    replaceKeyWith?: string;
    mirrorHeaders: GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleRedirectMirrorHeaders;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRule extends $tea.Model {
    ruleNumber?: number;
    condition: GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleCondition;
    redirect: GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRuleRedirect;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfigurationRoutingRules extends $tea.Model {
    routingRule?: GetBucketWebsiteResponseWebsiteConfigurationRoutingRulesRoutingRule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketWebsiteResponseWebsiteConfiguration extends $tea.Model {
    indexDocument: GetBucketWebsiteResponseWebsiteConfigurationIndexDocument;
    errorDocument: GetBucketWebsiteResponseWebsiteConfigurationErrorDocument;
    routingRules: GetBucketWebsiteResponseWebsiteConfigurationRoutingRules;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListLiveChannelRequestFilter extends $tea.Model {
    marker?: string;
    maxKeys?: string;
    prefix?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListLiveChannelResponseListLiveChannelResultLiveChannelPublishUrls extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListLiveChannelResponseListLiveChannelResultLiveChannelPlayUrls extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListLiveChannelResponseListLiveChannelResultLiveChannel extends $tea.Model {
    name?: string;
    description?: string;
    status?: string;
    lastModified?: string;
    publishUrls: ListLiveChannelResponseListLiveChannelResultLiveChannelPublishUrls;
    playUrls: ListLiveChannelResponseListLiveChannelResultLiveChannelPlayUrls;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListLiveChannelResponseListLiveChannelResult extends $tea.Model {
    prefix?: string;
    marker?: string;
    maxKeys?: string;
    isTruncated?: string;
    nextMarker?: string;
    liveChannel: ListLiveChannelResponseListLiveChannelResultLiveChannel;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketAclResponseAccessControlPolicyOwner extends $tea.Model {
    iD?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketAclResponseAccessControlPolicyAccessControlList extends $tea.Model {
    grant?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketAclResponseAccessControlPolicy extends $tea.Model {
    owner: GetBucketAclResponseAccessControlPolicyOwner;
    accessControlList: GetBucketAclResponseAccessControlPolicyAccessControlList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartsRequestFilter extends $tea.Model {
    uploadId: string;
    maxParts?: number;
    partNumberMarker?: number;
    encodingType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartsResponseListPartsResultPart extends $tea.Model {
    partNumber?: string;
    lastModified?: string;
    eTag?: string;
    size?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPartsResponseListPartsResult extends $tea.Model {
    bucket?: string;
    encodingType?: string;
    key?: string;
    uploadId?: string;
    partNumberMarker?: string;
    nextPartNumberMarker?: string;
    maxParts?: string;
    isTruncated?: string;
    part?: ListPartsResponseListPartsResultPart[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelHistoryRequestFilter extends $tea.Model {
    comp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelHistoryResponseLiveChannelHistoryLiveRecord extends $tea.Model {
    startTime?: string;
    endTime?: string;
    remoteAddr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelHistoryResponseLiveChannelHistory extends $tea.Model {
    liveRecord?: GetLiveChannelHistoryResponseLiveChannelHistoryLiveRecord[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketRequestFilter extends $tea.Model {
    delimiter?: string;
    marker?: string;
    maxKeys?: string;
    prefix?: string;
    encodingType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketResponseListBucketResultContentsOwner extends $tea.Model {
    iD?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketResponseListBucketResultContents extends $tea.Model {
    key?: string;
    eTag?: string;
    lastModified?: string;
    size?: string;
    storageClass?: string;
    owner: GetBucketResponseListBucketResultContentsOwner;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketResponseListBucketResult extends $tea.Model {
    name?: string;
    prefix?: string;
    marker?: string;
    maxKeys?: string;
    delimiter?: string;
    isTruncated?: string;
    encodingType?: string;
    commonPrefixes?: string;
    contents?: GetBucketResponseListBucketResultContents[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelInfoResponseLiveChannelConfigurationTarget extends $tea.Model {
    type?: string;
    fragDuration?: string;
    fragCount?: string;
    playlistName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelInfoResponseLiveChannelConfiguration extends $tea.Model {
    description?: string;
    status?: string;
    target: GetLiveChannelInfoResponseLiveChannelConfigurationTarget;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelStatRequestFilter extends $tea.Model {
    comp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelStatResponseLiveChannelStatVideo extends $tea.Model {
    width?: string;
    height?: string;
    frameRate?: string;
    bandwidth?: string;
    codec?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelStatResponseLiveChannelStatAudio extends $tea.Model {
    bandwidth?: string;
    sampleRate?: string;
    codec?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveChannelStatResponseLiveChannelStat extends $tea.Model {
    status?: string;
    connectedTime?: string;
    remoteAddr?: string;
    video: GetLiveChannelStatResponseLiveChannelStatVideo;
    audio: GetLiveChannelStatResponseLiveChannelStatAudio;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AbortMultipartUploadRequestFilter extends $tea.Model {
    uploadId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendObjectRequestFilter extends $tea.Model {
    position: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendObjectRequestHeader extends $tea.Model {
    cacheControl?: string;
    contentDisposition?: string;
    contentEncoding?: string;
    contentMD5?: string;
    expires?: string;
    serverSideEncryption?: string;
    objectAcl?: string;
    storageClass?: string;
    contentType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadPartCopyRequestFilter extends $tea.Model {
    partNumber: string;
    uploadId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadPartCopyRequestHeader extends $tea.Model {
    copySource: string;
    copySourceRange: string;
    copySourceIfMatch?: string;
    copySourceIfNoneMatch?: string;
    copySourceIfUnmodifiedSince?: string;
    copySourceIfModifiedSince?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadPartCopyResponseCopyPartResult extends $tea.Model {
    lastModified?: string;
    eTag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetVodPlaylistRequestFilter extends $tea.Model {
    endTime: string;
    startTime: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectRequestHeader extends $tea.Model {
    responseContentType?: string;
    responseContentLanguage?: string;
    responseExpires?: string;
    responseCacheControl?: string;
    responseContentDisposition?: string;
    responseContentEncoding?: string;
    range?: string;
    ifModifiedSince?: string;
    ifUnmodifiedSince?: string;
    ifMatch?: string;
    ifNoneMatch?: string;
    acceptEncoding?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadPartRequestFilter extends $tea.Model {
    partNumber: string;
    uploadId: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketCORSResponseCORSConfigurationCORSRule extends $tea.Model {
    maxAgeSeconds?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketCORSResponseCORSConfiguration extends $tea.Model {
    cORSRule?: GetBucketCORSResponseCORSConfigurationCORSRule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyObjectRequestHeader extends $tea.Model {
    copySource: string;
    copySourceIfMatch?: string;
    copySourceIfNoneMatch?: string;
    copySourceIfUnmodifiedSince?: string;
    copySourceIfModifiedSince?: string;
    metadataDirective?: string;
    serverSideEncryption?: string;
    serverSideEncryptionKeyId?: string;
    objectAcl?: string;
    storageClass?: string;
    tagging?: string;
    taggingDirective?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyObjectResponseCopyObjectResult extends $tea.Model {
    lastModified?: string;
    eTag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectTaggingResponseTaggingTagSetTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectTaggingResponseTaggingTagSet extends $tea.Model {
    tag?: GetObjectTaggingResponseTaggingTagSetTag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectTaggingResponseTagging extends $tea.Model {
    tagSet: GetObjectTaggingResponseTaggingTagSet;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLifecycleResponseLifecycleConfigurationRuleExpiration extends $tea.Model {
    days?: number;
    createdBeforeDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLifecycleResponseLifecycleConfigurationRuleTransition extends $tea.Model {
    days?: number;
    storageClass?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLifecycleResponseLifecycleConfigurationRuleAbortMultipartUpload extends $tea.Model {
    days?: number;
    createdBeforeDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLifecycleResponseLifecycleConfigurationRuleTag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLifecycleResponseLifecycleConfigurationRule extends $tea.Model {
    iD?: string;
    prefix?: string;
    status?: string;
    expiration: GetBucketLifecycleResponseLifecycleConfigurationRuleExpiration;
    transition: GetBucketLifecycleResponseLifecycleConfigurationRuleTransition;
    abortMultipartUpload: GetBucketLifecycleResponseLifecycleConfigurationRuleAbortMultipartUpload;
    tag: GetBucketLifecycleResponseLifecycleConfigurationRuleTag;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLifecycleResponseLifecycleConfiguration extends $tea.Model {
    rule?: GetBucketLifecycleResponseLifecycleConfigurationRule[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutSymlinkRequestHeader extends $tea.Model {
    symlinkTarget: string;
    storageClass?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketRefererResponseRefererConfigurationRefererList extends $tea.Model {
    referer?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketRefererResponseRefererConfiguration extends $tea.Model {
    allowEmptyReferer?: boolean;
    refererList: GetBucketRefererResponseRefererConfigurationRefererList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLoggingResponseBucketLoggingStatusLoggingEnabled extends $tea.Model {
    targetBucket?: string;
    targetPrefix?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketLoggingResponseBucketLoggingStatus extends $tea.Model {
    loggingEnabled: GetBucketLoggingResponseBucketLoggingStatusLoggingEnabled;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectAclRequestHeader extends $tea.Model {
    objectAcl: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketInfoResponseBucketInfoBucketOwner extends $tea.Model {
    iD?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketInfoResponseBucketInfoBucketAccessControlList extends $tea.Model {
    grant?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketInfoResponseBucketInfoBucket extends $tea.Model {
    creationDate?: string;
    extranetEndpoint?: string;
    intranetEndpoint?: string;
    location?: string;
    name?: string;
    dataRedundancyType?: string;
    storageClass?: string;
    comment?: string;
    owner: GetBucketInfoResponseBucketInfoBucketOwner;
    accessControlList: GetBucketInfoResponseBucketInfoBucketAccessControlList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBucketInfoResponseBucketInfo extends $tea.Model {
    bucket: GetBucketInfoResponseBucketInfoBucket;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutLiveChannelStatusRequestFilter extends $tea.Model {
    status: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitiateMultipartUploadRequestFilter extends $tea.Model {
    encodingType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitiateMultipartUploadRequestHeader extends $tea.Model {
    cacheControl?: string;
    contentDisposition?: string;
    contentEncoding?: string;
    expires?: string;
    serverSideEncryption?: string;
    serverSideEncryptionKeyId?: string;
    storageClass?: string;
    tagging?: string;
    contentType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitiateMultipartUploadResponseInitiateMultipartUploadResult extends $tea.Model {
    bucket?: string;
    key?: string;
    uploadId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OptionObjectRequestHeader extends $tea.Model {
    origin: string;
    accessControlRequestMethod: string;
    accessControlRequestHeaders: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostVodPlaylistRequestFilter extends $tea.Model {
    endTime: string;
    startTime: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostObjectRequestHeader extends $tea.Model {
    accessKeyId: string;
    policy: string;
    signature: string;
    successActionStatus?: string;
    file: $FileForm.FileField;
    key: string;
    userMeta?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostObjectResponsePostResponse extends $tea.Model {
    bucket: string;
    eTag: string;
    location: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HeadObjectRequestHeader extends $tea.Model {
    ifModifiedSince?: string;
    ifUnmodifiedSince?: string;
    ifMatch?: string;
    ifNoneMatch?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectAclResponseAccessControlPolicyOwner extends $tea.Model {
    iD?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectAclResponseAccessControlPolicyAccessControlList extends $tea.Model {
    grant?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectAclResponseAccessControlPolicy extends $tea.Model {
    owner: GetObjectAclResponseAccessControlPolicyOwner;
    accessControlList: GetObjectAclResponseAccessControlPolicyAccessControlList;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutBucketAclRequestHeader extends $tea.Model {
    acl: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PutObjectRequestHeader extends $tea.Model {
    authorization?: string;
    cacheControl?: string;
    contentDisposition?: string;
    contentEncoding?: string;
    contentMD5?: string;
    contentLength?: string;
    eTag?: string;
    expires?: string;
    serverSideEncryption?: string;
    serverSideEncryptionKeyId?: string;
    objectAcl?: string;
    storageClass?: string;
    tagging?: string;
    contentType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client {
    _endpoint: string;
    _regionId: string;
    _hostModel: string;
    _protocol: string;
    _readTimeout: number;
    _connectTimeout: number;
    _signatureVersion: string;
    _addtionalHeaders: string[];
    _localAddr: string;
    _httpProxy: string;
    _httpsProxy: string;
    _noProxy: string;
    _userAgent: string;
    _socks5Proxy: string;
    _isEnableCrc: boolean;
    _isEnableMD5: boolean;
    _socks5NetWork: string;
    _maxIdleConns: number;
    _credential: Credential;
    constructor(config: Config);
    putBucketLifecycle(request: PutBucketLifecycleRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketLifecycleResponse>;
    deleteMultipleObjects(request: DeleteMultipleObjectsRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteMultipleObjectsResponse>;
    putBucketReferer(request: PutBucketRefererRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketRefererResponse>;
    putBucketWebsite(request: PutBucketWebsiteRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketWebsiteResponse>;
    completeMultipartUpload(request: CompleteMultipartUploadRequest, runtime: $OSSUtil.RuntimeOptions): Promise<CompleteMultipartUploadResponse>;
    putBucketLogging(request: PutBucketLoggingRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketLoggingResponse>;
    putBucketRequestPayment(request: PutBucketRequestPaymentRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketRequestPaymentResponse>;
    putBucketEncryption(request: PutBucketEncryptionRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketEncryptionResponse>;
    putLiveChannel(request: PutLiveChannelRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutLiveChannelResponse>;
    putBucketTags(request: PutBucketTagsRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketTagsResponse>;
    putObjectTagging(request: PutObjectTaggingRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutObjectTaggingResponse>;
    selectObject(request: SelectObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<SelectObjectResponse>;
    putBucketCORS(request: PutBucketCORSRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketCORSResponse>;
    putBucket(request: PutBucketRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketResponse>;
    listMultipartUploads(request: ListMultipartUploadsRequest, runtime: $OSSUtil.RuntimeOptions): Promise<ListMultipartUploadsResponse>;
    getBucketRequestPayment(request: GetBucketRequestPaymentRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketRequestPaymentResponse>;
    getBucketEncryption(request: GetBucketEncryptionRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketEncryptionResponse>;
    getBucketTags(request: GetBucketTagsRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketTagsResponse>;
    getService(request: GetServiceRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetServiceResponse>;
    deleteBucketEncryption(request: DeleteBucketEncryptionRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteBucketEncryptionResponse>;
    deleteBucketTags(request: DeleteBucketTagsRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteBucketTagsResponse>;
    getBucketWebsite(request: GetBucketWebsiteRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketWebsiteResponse>;
    deleteLiveChannel(request: DeleteLiveChannelRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteLiveChannelResponse>;
    getBucketLocation(request: GetBucketLocationRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketLocationResponse>;
    listLiveChannel(request: ListLiveChannelRequest, runtime: $OSSUtil.RuntimeOptions): Promise<ListLiveChannelResponse>;
    getObjectMeta(request: GetObjectMetaRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetObjectMetaResponse>;
    getBucketAcl(request: GetBucketAclRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketAclResponse>;
    listParts(request: ListPartsRequest, runtime: $OSSUtil.RuntimeOptions): Promise<ListPartsResponse>;
    getLiveChannelHistory(request: GetLiveChannelHistoryRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetLiveChannelHistoryResponse>;
    getBucket(request: GetBucketRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketResponse>;
    getLiveChannelInfo(request: GetLiveChannelInfoRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetLiveChannelInfoResponse>;
    getLiveChannelStat(request: GetLiveChannelStatRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetLiveChannelStatResponse>;
    deleteObject(request: DeleteObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteObjectResponse>;
    abortMultipartUpload(request: AbortMultipartUploadRequest, runtime: $OSSUtil.RuntimeOptions): Promise<AbortMultipartUploadResponse>;
    appendObject(request: AppendObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<AppendObjectResponse>;
    uploadPartCopy(request: UploadPartCopyRequest, runtime: $OSSUtil.RuntimeOptions): Promise<UploadPartCopyResponse>;
    getVodPlaylist(request: GetVodPlaylistRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetVodPlaylistResponse>;
    deleteBucketCORS(request: DeleteBucketCORSRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteBucketCORSResponse>;
    getObject(request: GetObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetObjectResponse>;
    uploadPart(request: UploadPartRequest, runtime: $OSSUtil.RuntimeOptions): Promise<UploadPartResponse>;
    getBucketCORS(request: GetBucketCORSRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketCORSResponse>;
    copyObject(request: CopyObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<CopyObjectResponse>;
    getObjectTagging(request: GetObjectTaggingRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetObjectTaggingResponse>;
    deleteBucketLifecycle(request: DeleteBucketLifecycleRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteBucketLifecycleResponse>;
    deleteBucketLogging(request: DeleteBucketLoggingRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteBucketLoggingResponse>;
    deleteBucketWebsite(request: DeleteBucketWebsiteRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteBucketWebsiteResponse>;
    getSymlink(request: GetSymlinkRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetSymlinkResponse>;
    getBucketLifecycle(request: GetBucketLifecycleRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketLifecycleResponse>;
    putSymlink(request: PutSymlinkRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutSymlinkResponse>;
    getBucketReferer(request: GetBucketRefererRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketRefererResponse>;
    callback(request: CallbackRequest, runtime: $OSSUtil.RuntimeOptions): Promise<CallbackResponse>;
    getBucketLogging(request: GetBucketLoggingRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketLoggingResponse>;
    putObjectAcl(request: PutObjectAclRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutObjectAclResponse>;
    getBucketInfo(request: GetBucketInfoRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetBucketInfoResponse>;
    putLiveChannelStatus(request: PutLiveChannelStatusRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutLiveChannelStatusResponse>;
    initiateMultipartUpload(request: InitiateMultipartUploadRequest, runtime: $OSSUtil.RuntimeOptions): Promise<InitiateMultipartUploadResponse>;
    optionObject(request: OptionObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<OptionObjectResponse>;
    postVodPlaylist(request: PostVodPlaylistRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PostVodPlaylistResponse>;
    postObject(request: PostObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PostObjectResponse>;
    headObject(request: HeadObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<HeadObjectResponse>;
    deleteObjectTagging(request: DeleteObjectTaggingRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteObjectTaggingResponse>;
    restoreObject(request: RestoreObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<RestoreObjectResponse>;
    getObjectAcl(request: GetObjectAclRequest, runtime: $OSSUtil.RuntimeOptions): Promise<GetObjectAclResponse>;
    putBucketAcl(request: PutBucketAclRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutBucketAclResponse>;
    deleteBucket(request: DeleteBucketRequest, runtime: $OSSUtil.RuntimeOptions): Promise<DeleteBucketResponse>;
    putObject(request: PutObjectRequest, runtime: $OSSUtil.RuntimeOptions): Promise<PutObjectResponse>;
    setUserAgent(userAgent: string): void;
    appendUserAgent(userAgent: string): void;
    getUserAgent(): string;
    getAccessKeyId(): Promise<string>;
    getAccessKeySecret(): Promise<string>;
}
