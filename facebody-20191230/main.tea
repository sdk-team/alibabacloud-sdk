import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('facebody', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model BlurFaceRequest = {
  imageURL: string(name='ImageURL'),
}

model BlurFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function blurFace(request: BlurFaceRequest, runtime: Util.RuntimeOptions): BlurFaceResponse {
  Util.validateModel(request);
  return doRequest('BlurFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model BlurFaceAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function blurFaceAdvance(request: BlurFaceAdvanceRequest, runtime: Util.RuntimeOptions): BlurFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var blurFacereq = new BlurFaceRequest{};
  RPCUtil.convert(request, blurFacereq);
  blurFacereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var blurFaceResp = blurFace(blurFacereq, runtime);
  return blurFaceResp;
}

model ExtractPedestrianFeatureAttributeRequest = {
  imageURL: string(name='ImageURL'),
}

model ExtractPedestrianFeatureAttributeResponse = {
  requestId: string(name='RequestId'),
  data: {
    objType: string(name='ObjType'),
    objTypeScore: float(name='ObjTypeScore'),
    feature: string(name='Feature'),
    qualityScore: float(name='QualityScore'),
    upperColor: string(name='UpperColor'),
    upperColorScore: float(name='UpperColorScore'),
    upperType: string(name='UpperType'),
    upperTypeScore: float(name='UpperTypeScore'),
    lowerColor: string(name='LowerColor'),
    lowerColorScore: float(name='LowerColorScore'),
    lowerType: string(name='LowerType'),
    lowerTypeScore: float(name='LowerTypeScore'),
    gender: string(name='Gender'),
    genderScore: float(name='GenderScore'),
    hair: string(name='Hair'),
    hairScore: float(name='HairScore'),
    age: string(name='Age'),
    ageScore: float(name='AgeScore'),
  }(name='Data'),
}

async function extractPedestrianFeatureAttribute(request: ExtractPedestrianFeatureAttributeRequest, runtime: Util.RuntimeOptions): ExtractPedestrianFeatureAttributeResponse {
  Util.validateModel(request);
  return doRequest('ExtractPedestrianFeatureAttribute', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model ExtractPedestrianFeatureAttributeAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function extractPedestrianFeatureAttributeAdvance(request: ExtractPedestrianFeatureAttributeAdvanceRequest, runtime: Util.RuntimeOptions): ExtractPedestrianFeatureAttributeResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var extractPedestrianFeatureAttributereq = new ExtractPedestrianFeatureAttributeRequest{};
  RPCUtil.convert(request, extractPedestrianFeatureAttributereq);
  extractPedestrianFeatureAttributereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var extractPedestrianFeatureAttributeResp = extractPedestrianFeatureAttribute(extractPedestrianFeatureAttributereq, runtime);
  return extractPedestrianFeatureAttributeResp;
}

model DetectCelebrityRequest = {
  imageURL: string(name='ImageURL'),
}

model DetectCelebrityResponse = {
  requestId: string(name='RequestId'),
  data: {
    width: integer(name='Width'),
    height: integer(name='Height'),
    faceRecognizeResults: [
      {
        name: string(name='Name'),
        faceBoxes: [ float ](name='FaceBoxes'),
      }
    ](name='FaceRecognizeResults'),
  }(name='Data'),
}

async function detectCelebrity(request: DetectCelebrityRequest, runtime: Util.RuntimeOptions): DetectCelebrityResponse {
  Util.validateModel(request);
  return doRequest('DetectCelebrity', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectCelebrityAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function detectCelebrityAdvance(request: DetectCelebrityAdvanceRequest, runtime: Util.RuntimeOptions): DetectCelebrityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectCelebrityreq = new DetectCelebrityRequest{};
  RPCUtil.convert(request, detectCelebrityreq);
  detectCelebrityreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectCelebrityResp = detectCelebrity(detectCelebrityreq, runtime);
  return detectCelebrityResp;
}

model RecognizeGestureRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeGestureResponse = {
  requestId: string(name='RequestId'),
  data: {
    numHand: integer(name='NumHand'),
    elements: [
      {
        classId: integer(name='ClassId'),
        classScore: float(name='ClassScore'),
        detectScore: float(name='DetectScore'),
        handGestureName: string(name='HandGestureName'),
        rectangles: [ integer ](name='Rectangles'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function recognizeGesture(request: RecognizeGestureRequest, runtime: Util.RuntimeOptions): RecognizeGestureResponse {
  Util.validateModel(request);
  return doRequest('RecognizeGesture', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeGestureAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeGestureAdvance(request: RecognizeGestureAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeGestureResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeGesturereq = new RecognizeGestureRequest{};
  RPCUtil.convert(request, recognizeGesturereq);
  recognizeGesturereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeGestureResp = recognizeGesture(recognizeGesturereq, runtime);
  return recognizeGestureResp;
}

model RecognizeActionRequest = {
  URLList?: [
    {
      URL?: string(name='URL'),
    }
  ](name='URLList'),
  type: integer(name='Type'),
  videoUrl?: string(name='VideoUrl'),
}

model RecognizeActionResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        timestamp: integer(name='Timestamp'),
        boxes: [
          {
            box: [ integer ](name='Box'),
          }
        ](name='Boxes'),
        scores: [ float ](name='Scores'),
        labels: [ string ](name='Labels'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function recognizeAction(request: RecognizeActionRequest, runtime: Util.RuntimeOptions): RecognizeActionResponse {
  Util.validateModel(request);
  return doRequest('RecognizeAction', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model VerifyFaceMaskRequest = {
  imageURL: string(name='ImageURL'),
  refUrl: string(name='RefUrl'),
}

model VerifyFaceMaskResponse = {
  requestId: string(name='RequestId'),
  data: {
    confidence: float(name='Confidence'),
    mask: integer(name='Mask'),
    maskRef: integer(name='MaskRef'),
    rectangle: [ integer ](name='Rectangle'),
    rectangleRef: [ integer ](name='RectangleRef'),
    thresholds: [ float ](name='Thresholds'),
  }(name='Data'),
}

async function verifyFaceMask(request: VerifyFaceMaskRequest, runtime: Util.RuntimeOptions): VerifyFaceMaskResponse {
  Util.validateModel(request);
  return doRequest('VerifyFaceMask', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model VerifyFaceMaskAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  refUrl: string(name='RefUrl'),
}

async function verifyFaceMaskAdvance(request: VerifyFaceMaskAdvanceRequest, runtime: Util.RuntimeOptions): VerifyFaceMaskResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var verifyFaceMaskreq = new VerifyFaceMaskRequest{};
  RPCUtil.convert(request, verifyFaceMaskreq);
  verifyFaceMaskreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var verifyFaceMaskResp = verifyFaceMask(verifyFaceMaskreq, runtime);
  return verifyFaceMaskResp;
}

model DetectVideoLivingFaceRequest = {
  videoUrl: string(name='VideoUrl'),
}

model DetectVideoLivingFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        liveConfidence: float(name='LiveConfidence'),
        faceConfidence: float(name='FaceConfidence'),
        rect: [ integer ](name='Rect'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function detectVideoLivingFace(request: DetectVideoLivingFaceRequest, runtime: Util.RuntimeOptions): DetectVideoLivingFaceResponse {
  Util.validateModel(request);
  return doRequest('DetectVideoLivingFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectVideoLivingFaceAdvanceRequest = {
  videoUrlObject: readable(name='VideoUrlObject'),
}

async function detectVideoLivingFaceAdvance(request: DetectVideoLivingFaceAdvanceRequest, runtime: Util.RuntimeOptions): DetectVideoLivingFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.videoUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectVideoLivingFacereq = new DetectVideoLivingFaceRequest{};
  RPCUtil.convert(request, detectVideoLivingFacereq);
  detectVideoLivingFacereq.videoUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectVideoLivingFaceResp = detectVideoLivingFace(detectVideoLivingFacereq, runtime);
  return detectVideoLivingFaceResp;
}

model SwapFacialFeaturesRequest = {
  sourceImageURL: string(name='SourceImageURL'),
  editPart: string(name='EditPart'),
  targetImageURL: string(name='TargetImageURL'),
}

model SwapFacialFeaturesResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function swapFacialFeatures(request: SwapFacialFeaturesRequest, runtime: Util.RuntimeOptions): SwapFacialFeaturesResponse {
  Util.validateModel(request);
  return doRequest('SwapFacialFeatures', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SwapFacialFeaturesAdvanceRequest = {
  sourceImageURLObject: readable(name='SourceImageURLObject'),
  editPart: string(name='EditPart'),
  targetImageURL: string(name='TargetImageURL'),
}

async function swapFacialFeaturesAdvance(request: SwapFacialFeaturesAdvanceRequest, runtime: Util.RuntimeOptions): SwapFacialFeaturesResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.sourceImageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var swapFacialFeaturesreq = new SwapFacialFeaturesRequest{};
  RPCUtil.convert(request, swapFacialFeaturesreq);
  swapFacialFeaturesreq.sourceImageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var swapFacialFeaturesResp = swapFacialFeatures(swapFacialFeaturesreq, runtime);
  return swapFacialFeaturesResp;
}

model ListFaceEntitiesRequest = {
  dbName: string(name='DbName'),
  offset?: integer(name='Offset'),
  limit?: integer(name='Limit'),
  token?: string(name='Token'),
  labels?: string(name='Labels'),
  entityIdPrefix?: string(name='EntityIdPrefix'),
  order?: string(name='Order'),
}

model ListFaceEntitiesResponse = {
  requestId: string(name='RequestId'),
  data: {
    token: string(name='Token'),
    totalCount: integer(name='TotalCount'),
    entities: [
      {
        dbName: string(name='DbName'),
        entityId: string(name='EntityId'),
        faceCount: integer(name='FaceCount'),
        labels: string(name='Labels'),
        createdAt: long(name='CreatedAt'),
        updatedAt: long(name='UpdatedAt'),
      }
    ](name='Entities'),
  }(name='Data'),
}

async function listFaceEntities(request: ListFaceEntitiesRequest, runtime: Util.RuntimeOptions): ListFaceEntitiesResponse {
  Util.validateModel(request);
  return doRequest('ListFaceEntities', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model UpdateFaceEntityRequest = {
  dbName: string(name='DbName'),
  entityId: string(name='EntityId'),
  labels?: string(name='Labels'),
}

model UpdateFaceEntityResponse = {
  requestId: string(name='RequestId'),
}

async function updateFaceEntity(request: UpdateFaceEntityRequest, runtime: Util.RuntimeOptions): UpdateFaceEntityResponse {
  Util.validateModel(request);
  return doRequest('UpdateFaceEntity', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model AddFaceEntityRequest = {
  dbName: string(name='DbName'),
  entityId: string(name='EntityId'),
  labels?: string(name='Labels'),
}

model AddFaceEntityResponse = {
  requestId: string(name='RequestId'),
}

async function addFaceEntity(request: AddFaceEntityRequest, runtime: Util.RuntimeOptions): AddFaceEntityResponse {
  Util.validateModel(request);
  return doRequest('AddFaceEntity', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model GetFaceEntityRequest = {
  dbName: string(name='DbName'),
  entityId: string(name='EntityId'),
}

model GetFaceEntityResponse = {
  requestId: string(name='RequestId'),
  data: {
    dbName: string(name='DbName'),
    entityId: string(name='EntityId'),
    labels: string(name='Labels'),
    faces: [
      {
        faceId: string(name='FaceId'),
      }
    ](name='Faces'),
  }(name='Data'),
}

async function getFaceEntity(request: GetFaceEntityRequest, runtime: Util.RuntimeOptions): GetFaceEntityResponse {
  Util.validateModel(request);
  return doRequest('GetFaceEntity', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DeleteFaceEntityRequest = {
  dbName: string(name='DbName'),
  entityId: string(name='EntityId'),
}

model DeleteFaceEntityResponse = {
  requestId: string(name='RequestId'),
}

async function deleteFaceEntity(request: DeleteFaceEntityRequest, runtime: Util.RuntimeOptions): DeleteFaceEntityResponse {
  Util.validateModel(request);
  return doRequest('DeleteFaceEntity', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model ListFaceDbsRequest = {
}

model ListFaceDbsResponse = {
  requestId: string(name='RequestId'),
  data: {
    dbList: [
      {
        name: string(name='Name'),
      }
    ](name='DbList'),
  }(name='Data'),
}

async function listFaceDbs(request: ListFaceDbsRequest, runtime: Util.RuntimeOptions): ListFaceDbsResponse {
  Util.validateModel(request);
  return doRequest('ListFaceDbs', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectPedestrianRequest = {
  imageURL: string(name='ImageURL'),
}

model DetectPedestrianResponse = {
  requestId: string(name='RequestId'),
  data: {
    width: integer(name='Width'),
    height: integer(name='Height'),
    elements: [
      {
        score: float(name='Score'),
        type: string(name='Type'),
        boxes: [ integer ](name='Boxes'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function detectPedestrian(request: DetectPedestrianRequest, runtime: Util.RuntimeOptions): DetectPedestrianResponse {
  Util.validateModel(request);
  return doRequest('DetectPedestrian', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectPedestrianAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function detectPedestrianAdvance(request: DetectPedestrianAdvanceRequest, runtime: Util.RuntimeOptions): DetectPedestrianResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectPedestrianreq = new DetectPedestrianRequest{};
  RPCUtil.convert(request, detectPedestrianreq);
  detectPedestrianreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectPedestrianResp = detectPedestrian(detectPedestrianreq, runtime);
  return detectPedestrianResp;
}

model FaceFilterRequest = {
  imageURL: string(name='ImageURL'),
  resourceType: string(name='ResourceType'),
  strength: float(name='Strength'),
}

model FaceFilterResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function faceFilter(request: FaceFilterRequest, runtime: Util.RuntimeOptions): FaceFilterResponse {
  Util.validateModel(request);
  return doRequest('FaceFilter', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model FaceFilterAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  resourceType: string(name='ResourceType'),
  strength: float(name='Strength'),
}

async function faceFilterAdvance(request: FaceFilterAdvanceRequest, runtime: Util.RuntimeOptions): FaceFilterResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var faceFilterreq = new FaceFilterRequest{};
  RPCUtil.convert(request, faceFilterreq);
  faceFilterreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var faceFilterResp = faceFilter(faceFilterreq, runtime);
  return faceFilterResp;
}

model EnhanceFaceRequest = {
  imageURL: string(name='ImageURL'),
}

model EnhanceFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function enhanceFace(request: EnhanceFaceRequest, runtime: Util.RuntimeOptions): EnhanceFaceResponse {
  Util.validateModel(request);
  return doRequest('EnhanceFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model EnhanceFaceAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function enhanceFaceAdvance(request: EnhanceFaceAdvanceRequest, runtime: Util.RuntimeOptions): EnhanceFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var enhanceFacereq = new EnhanceFaceRequest{};
  RPCUtil.convert(request, enhanceFacereq);
  enhanceFacereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var enhanceFaceResp = enhanceFace(enhanceFacereq, runtime);
  return enhanceFaceResp;
}

model FaceTidyupRequest = {
  imageURL: string(name='ImageURL'),
  shapeType: integer(name='ShapeType'),
  strength: float(name='Strength'),
}

model FaceTidyupResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function faceTidyup(request: FaceTidyupRequest, runtime: Util.RuntimeOptions): FaceTidyupResponse {
  Util.validateModel(request);
  return doRequest('FaceTidyup', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model FaceTidyupAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  shapeType: integer(name='ShapeType'),
  strength: float(name='Strength'),
}

async function faceTidyupAdvance(request: FaceTidyupAdvanceRequest, runtime: Util.RuntimeOptions): FaceTidyupResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var faceTidyupreq = new FaceTidyupRequest{};
  RPCUtil.convert(request, faceTidyupreq);
  faceTidyupreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var faceTidyupResp = faceTidyup(faceTidyupreq, runtime);
  return faceTidyupResp;
}

model DeleteFaceRequest = {
  dbName: string(name='DbName'),
  faceId: string(name='FaceId'),
}

model DeleteFaceResponse = {
  requestId: string(name='RequestId'),
}

async function deleteFace(request: DeleteFaceRequest, runtime: Util.RuntimeOptions): DeleteFaceResponse {
  Util.validateModel(request);
  return doRequest('DeleteFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SearchFaceRequest = {
  dbName: string(name='DbName'),
  imageUrl: string(name='ImageUrl'),
  limit: integer(name='Limit'),
}

model SearchFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    matchList: [
      {
        faceItems: [
          {
            faceId: string(name='FaceId'),
            score: float(name='Score'),
            extraData: string(name='ExtraData'),
            entityId: string(name='EntityId'),
          }
        ](name='FaceItems'),
        location: {
          x: integer(name='X'),
          y: integer(name='Y'),
          width: integer(name='Width'),
          height: integer(name='Height'),
        }(name='Location'),
      }
    ](name='MatchList'),
  }(name='Data'),
}

async function searchFace(request: SearchFaceRequest, runtime: Util.RuntimeOptions): SearchFaceResponse {
  Util.validateModel(request);
  return doRequest('SearchFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SearchFaceAdvanceRequest = {
  imageUrlObject: readable(name='ImageUrlObject'),
  dbName: string(name='DbName'),
  limit: integer(name='Limit'),
}

async function searchFaceAdvance(request: SearchFaceAdvanceRequest, runtime: Util.RuntimeOptions): SearchFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var searchFacereq = new SearchFaceRequest{};
  RPCUtil.convert(request, searchFacereq);
  searchFacereq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var searchFaceResp = searchFace(searchFacereq, runtime);
  return searchFaceResp;
}

model AddFaceRequest = {
  dbName: string(name='DbName'),
  imageUrl: string(name='ImageUrl'),
  entityId: string(name='EntityId'),
  extraData?: string(name='ExtraData'),
}

model AddFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    faceId: string(name='FaceId'),
  }(name='Data'),
}

async function addFace(request: AddFaceRequest, runtime: Util.RuntimeOptions): AddFaceResponse {
  Util.validateModel(request);
  return doRequest('AddFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model AddFaceAdvanceRequest = {
  imageUrlObject: readable(name='ImageUrlObject'),
  dbName: string(name='DbName'),
  entityId: string(name='EntityId'),
  extraData?: string(name='ExtraData'),
}

async function addFaceAdvance(request: AddFaceAdvanceRequest, runtime: Util.RuntimeOptions): AddFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageUrlObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var addFacereq = new AddFaceRequest{};
  RPCUtil.convert(request, addFacereq);
  addFacereq.imageUrl = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var addFaceResp = addFace(addFacereq, runtime);
  return addFaceResp;
}

model DeleteFaceDbRequest = {
  name: string(name='Name'),
}

model DeleteFaceDbResponse = {
  requestId: string(name='RequestId'),
}

async function deleteFaceDb(request: DeleteFaceDbRequest, runtime: Util.RuntimeOptions): DeleteFaceDbResponse {
  Util.validateModel(request);
  return doRequest('DeleteFaceDb', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model CreateFaceDbRequest = {
  name: string(name='Name'),
}

model CreateFaceDbResponse = {
  requestId: string(name='RequestId'),
}

async function createFaceDb(request: CreateFaceDbRequest, runtime: Util.RuntimeOptions): CreateFaceDbResponse {
  Util.validateModel(request);
  return doRequest('CreateFaceDb', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model FaceMakeupRequest = {
  imageURL: string(name='ImageURL'),
  makeupType: string(name='MakeupType'),
  resourceType: string(name='ResourceType'),
  strength: float(name='Strength'),
}

model FaceMakeupResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function faceMakeup(request: FaceMakeupRequest, runtime: Util.RuntimeOptions): FaceMakeupResponse {
  Util.validateModel(request);
  return doRequest('FaceMakeup', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model FaceMakeupAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  makeupType: string(name='MakeupType'),
  resourceType: string(name='ResourceType'),
  strength: float(name='Strength'),
}

async function faceMakeupAdvance(request: FaceMakeupAdvanceRequest, runtime: Util.RuntimeOptions): FaceMakeupResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var faceMakeupreq = new FaceMakeupRequest{};
  RPCUtil.convert(request, faceMakeupreq);
  faceMakeupreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var faceMakeupResp = faceMakeup(faceMakeupreq, runtime);
  return faceMakeupResp;
}

model FaceBeautyRequest = {
  imageURL: string(name='ImageURL'),
  sharp: float(name='Sharp'),
  smooth: float(name='Smooth'),
  white: float(name='White'),
}

model FaceBeautyResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function faceBeauty(request: FaceBeautyRequest, runtime: Util.RuntimeOptions): FaceBeautyResponse {
  Util.validateModel(request);
  return doRequest('FaceBeauty', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model FaceBeautyAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  sharp: float(name='Sharp'),
  smooth: float(name='Smooth'),
  white: float(name='White'),
}

async function faceBeautyAdvance(request: FaceBeautyAdvanceRequest, runtime: Util.RuntimeOptions): FaceBeautyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var faceBeautyreq = new FaceBeautyRequest{};
  RPCUtil.convert(request, faceBeautyreq);
  faceBeautyreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var faceBeautyResp = faceBeauty(faceBeautyreq, runtime);
  return faceBeautyResp;
}

model HandPostureRequest = {
  imageURL: string(name='ImageURL'),
}

model HandPostureResponse = {
  requestId: string(name='RequestId'),
  data: {
    outputs: [
      {
        handCount: integer(name='HandCount'),
        results: [
          {
            box: {
              confident: float(name='Confident'),
              positions: [
                {
                  points: [ float ](name='Points'),
                }
              ](name='Positions'),
            }(name='Box'),
            hands: {
              confident: float(name='Confident'),
              keyPoints: [
                {
                  label: string(name='Label'),
                  positions: [
                    {
                      points: [ float ](name='Points'),
                    }
                  ](name='Positions'),
                }
              ](name='KeyPoints'),
            }(name='Hands'),
          }
        ](name='Results'),
      }
    ](name='Outputs'),
    metaObject: {
      height: integer(name='Height'),
      width: integer(name='Width'),
    }(name='MetaObject'),
  }(name='Data'),
}

async function handPosture(request: HandPostureRequest, runtime: Util.RuntimeOptions): HandPostureResponse {
  Util.validateModel(request);
  return doRequest('HandPosture', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model HandPostureAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function handPostureAdvance(request: HandPostureAdvanceRequest, runtime: Util.RuntimeOptions): HandPostureResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var handPosturereq = new HandPostureRequest{};
  RPCUtil.convert(request, handPosturereq);
  handPosturereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var handPostureResp = handPosture(handPosturereq, runtime);
  return handPostureResp;
}

model BodyPostureRequest = {
  imageURL: string(name='ImageURL'),
}

model BodyPostureResponse = {
  requestId: string(name='RequestId'),
  data: {
    outputs: [
      {
        humanCount: integer(name='HumanCount'),
        results: [
          {
            bodies: [
              {
                confident: float(name='Confident'),
                label: string(name='Label'),
                positions: [
                  {
                    points: [ float ](name='Points'),
                  }
                ](name='Positions'),
              }
            ](name='Bodies'),
          }
        ](name='Results'),
      }
    ](name='Outputs'),
    metaObject: {
      height: integer(name='Height'),
      width: integer(name='Width'),
    }(name='MetaObject'),
  }(name='Data'),
}

async function bodyPosture(request: BodyPostureRequest, runtime: Util.RuntimeOptions): BodyPostureResponse {
  Util.validateModel(request);
  return doRequest('BodyPosture', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model BodyPostureAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function bodyPostureAdvance(request: BodyPostureAdvanceRequest, runtime: Util.RuntimeOptions): BodyPostureResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var bodyPosturereq = new BodyPostureRequest{};
  RPCUtil.convert(request, bodyPosturereq);
  bodyPosturereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var bodyPostureResp = bodyPosture(bodyPosturereq, runtime);
  return bodyPostureResp;
}

model TestRequest = {
  imageURL: string(name='ImageURL'),
}

model TestResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        expression: string(name='Expression'),
        faceProbability: float(name='FaceProbability'),
        faceRectangle: {
          height: integer(name='Height'),
          left: integer(name='Left'),
          top: integer(name='Top'),
          width: integer(name='Width'),
        }(name='FaceRectangle'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function test(request: TestRequest, runtime: Util.RuntimeOptions): TestResponse {
  Util.validateModel(request);
  return doRequest('Test', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model TestAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function testAdvance(request: TestAdvanceRequest, runtime: Util.RuntimeOptions): TestResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var testreq = new TestRequest{};
  RPCUtil.convert(request, testreq);
  testreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var testResp = test(testreq, runtime);
  return testResp;
}

model RecognizeExpressionRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeExpressionResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        expression: string(name='Expression'),
        faceProbability: float(name='FaceProbability'),
        faceRectangle: {
          height: integer(name='Height'),
          left: integer(name='Left'),
          top: integer(name='Top'),
          width: integer(name='Width'),
        }(name='FaceRectangle'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function recognizeExpression(request: RecognizeExpressionRequest, runtime: Util.RuntimeOptions): RecognizeExpressionResponse {
  Util.validateModel(request);
  return doRequest('RecognizeExpression', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeExpressionAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeExpressionAdvance(request: RecognizeExpressionAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeExpressionResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeExpressionreq = new RecognizeExpressionRequest{};
  RPCUtil.convert(request, recognizeExpressionreq);
  recognizeExpressionreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeExpressionResp = recognizeExpression(recognizeExpressionreq, runtime);
  return recognizeExpressionResp;
}

model RecognizePublicFaceRequest = {
  task: [
    {
      imageURL: string(name='ImageURL'),
    }
  ](name='Task'),
}

model RecognizePublicFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        taskId: string(name='TaskId'),
        imageURL: string(name='ImageURL'),
        results: [
          {
            label: string(name='Label'),
            suggestion: string(name='Suggestion'),
            rate: float(name='Rate'),
            subResults: [
              {
                h: float(name='H'),
                w: float(name='W'),
                x: float(name='X'),
                y: float(name='Y'),
                faces: [
                  {
                    id: string(name='Id'),
                    name: string(name='Name'),
                    rate: float(name='Rate'),
                  }
                ](name='Faces'),
              }
            ](name='SubResults'),
          }
        ](name='Results'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function recognizePublicFace(request: RecognizePublicFaceRequest, runtime: Util.RuntimeOptions): RecognizePublicFaceResponse {
  Util.validateModel(request);
  return doRequest('RecognizePublicFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectLivingFaceRequest = {
  tasks: [
    {
      imageURL: string(name='ImageURL'),
    }
  ](name='Tasks'),
}

model DetectLivingFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        taskId: string(name='TaskId'),
        imageURL: string(name='ImageURL'),
        results: [
          {
            label: string(name='Label'),
            suggestion: string(name='Suggestion'),
            rate: float(name='Rate'),
            frames: [
              {
                rate: float(name='Rate'),
                url: string(name='Url'),
              }
            ](name='Frames'),
          }
        ](name='Results'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function detectLivingFace(request: DetectLivingFaceRequest, runtime: Util.RuntimeOptions): DetectLivingFaceResponse {
  Util.validateModel(request);
  return doRequest('DetectLivingFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectBodyCountRequest = {
  imageURL: string(name='ImageURL'),
}

model DetectBodyCountResponse = {
  requestId: string(name='RequestId'),
  data: {
    personNumber: integer(name='PersonNumber'),
  }(name='Data'),
}

async function detectBodyCount(request: DetectBodyCountRequest, runtime: Util.RuntimeOptions): DetectBodyCountResponse {
  Util.validateModel(request);
  return doRequest('DetectBodyCount', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectBodyCountAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function detectBodyCountAdvance(request: DetectBodyCountAdvanceRequest, runtime: Util.RuntimeOptions): DetectBodyCountResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectBodyCountreq = new DetectBodyCountRequest{};
  RPCUtil.convert(request, detectBodyCountreq);
  detectBodyCountreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectBodyCountResp = detectBodyCount(detectBodyCountreq, runtime);
  return detectBodyCountResp;
}

model ReplaceObjectDetVirtualfromObjectDetVirtualRequest = {
  imageURL: string(name='ImageURL'),
}

model ReplaceObjectDetVirtualfromObjectDetVirtualResponse = {
  requestId: string(name='RequestId'),
  data: {
    confidence: float(name='Confidence'),
    thresholds: [ float ](name='Thresholds'),
    rectAList: [ integer ](name='RectAList'),
    rectBList: [ integer ](name='RectBList'),
  }(name='Data'),
}

async function replaceObjectDetVirtualfromObjectDetVirtual(request: ReplaceObjectDetVirtualfromObjectDetVirtualRequest, runtime: Util.RuntimeOptions): ReplaceObjectDetVirtualfromObjectDetVirtualResponse {
  Util.validateModel(request);
  return doRequest('ReplaceObjectDetVirtualfromObjectDetVirtual', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectMaskRequest = {
  imageURL: string(name='ImageURL'),
}

model DetectMaskResponse = {
  requestId: string(name='RequestId'),
  data: {
    mask: integer(name='Mask'),
    faceProbability: float(name='FaceProbability'),
  }(name='Data'),
}

async function detectMask(request: DetectMaskRequest, runtime: Util.RuntimeOptions): DetectMaskResponse {
  Util.validateModel(request);
  return doRequest('DetectMask', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectMaskAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function detectMaskAdvance(request: DetectMaskAdvanceRequest, runtime: Util.RuntimeOptions): DetectMaskResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectMaskreq = new DetectMaskRequest{};
  RPCUtil.convert(request, detectMaskreq);
  detectMaskreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectMaskResp = detectMask(detectMaskreq, runtime);
  return detectMaskResp;
}

model RecognizeFaceRequest = {
  imageURL: string(name='ImageURL'),
}

model RecognizeFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    faceCount: integer(name='FaceCount'),
    landmarkCount: integer(name='LandmarkCount'),
    denseFeatureLength: integer(name='DenseFeatureLength'),
    faceRectangles: [ integer ](name='FaceRectangles'),
    faceProbabilityList: [ float ](name='FaceProbabilityList'),
    poseList: [ float ](name='PoseList'),
    landmarks: [ float ](name='Landmarks'),
    pupils: [ float ](name='Pupils'),
    genderList: [ integer ](name='GenderList'),
    ageList: [ integer ](name='AgeList'),
    expressions: [ integer ](name='Expressions'),
    glasses: [ integer ](name='Glasses'),
    denseFeatures: [ string ](name='DenseFeatures'),
  }(name='Data'),
}

async function recognizeFace(request: RecognizeFaceRequest, runtime: Util.RuntimeOptions): RecognizeFaceResponse {
  Util.validateModel(request);
  return doRequest('RecognizeFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RecognizeFaceAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function recognizeFaceAdvance(request: RecognizeFaceAdvanceRequest, runtime: Util.RuntimeOptions): RecognizeFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var recognizeFacereq = new RecognizeFaceRequest{};
  RPCUtil.convert(request, recognizeFacereq);
  recognizeFacereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var recognizeFaceResp = recognizeFace(recognizeFacereq, runtime);
  return recognizeFaceResp;
}

model DetectFaceRequest = {
  imageURL: string(name='ImageURL'),
}

model DetectFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    faceCount: integer(name='FaceCount'),
    landmarkCount: integer(name='LandmarkCount'),
    faceRectangles: [ integer ](name='FaceRectangles'),
    faceProbabilityList: [ float ](name='FaceProbabilityList'),
    poseList: [ float ](name='PoseList'),
    landmarks: [ float ](name='Landmarks'),
    pupils: [ float ](name='Pupils'),
  }(name='Data'),
}

async function detectFace(request: DetectFaceRequest, runtime: Util.RuntimeOptions): DetectFaceResponse {
  Util.validateModel(request);
  return doRequest('DetectFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model DetectFaceAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function detectFaceAdvance(request: DetectFaceAdvanceRequest, runtime: Util.RuntimeOptions): DetectFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'facebody',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var detectFacereq = new DetectFaceRequest{};
  RPCUtil.convert(request, detectFacereq);
  detectFacereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var detectFaceResp = detectFace(detectFacereq, runtime);
  return detectFaceResp;
}

model CompareFaceRequest = {
  imageURLA: string(name='ImageURLA'),
  imageURLB: string(name='ImageURLB'),
}

model CompareFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    confidence: float(name='Confidence'),
    thresholds: [ float ](name='Thresholds'),
    rectAList: [ integer ](name='RectAList'),
    rectBList: [ integer ](name='RectBList'),
  }(name='Data'),
}

async function compareFace(request: CompareFaceRequest, runtime: Util.RuntimeOptions): CompareFaceResponse {
  Util.validateModel(request);
  return doRequest('CompareFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
