import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model AsdwqwRequest = {
  groupTest?: string(name='GroupTest', description='GroupTest'),
  groupTestA?: string(name='GroupTestA', description='GroupTestA'),
}

model AsdwqwResponse = {
  add: string(name='Add', description='aa'),
  dda: float(name='Dda', description='cccc'),
  ABC: [
    {
      DDsssfcao: long(name='DDsssfcao', description='wwwwww'),
      aasdsdfs11: [
        {
          ADasdafsgs: map[string]any(name='ADasdafsgs', description='asdsdfs'),
          KKasdasd: boolean(name='KKasdasd', description='F'),
        }
      ](name='Aasdsdfs11', description='asdasdasd'),
      asdqd: {
        ssdas: boolean(name='Ssdas', description='ASdasf'),
      }(name='Asdqd', description='wwd'),
      SDfsdw: [ string ](name='SDfsdw', description='Ffsdf'),
    }
  ](name='ABC', description='vv'),
  dds: [ map[string]any ] (name='Dds', description='dd'),
  ko: [ string ] (name='Ko', description='Ko'),
}

async function asdwqwEx(request: AsdwqwRequest, runtime: Util.RuntimeOptions): AsdwqwResponse {
  Util.validateModel(request);
  return doRequest('Asdwqw', 'HTTPS', 'PUT', '2019-06-20', 'AK,APP', request, null, runtime);
}

async function asdwqw(request: AsdwqwRequest): AsdwqwResponse {
  var runtime = new Util.RuntimeOptions{};
  return asdwqwEx(request, runtime);
}

model HsfMockRequest = {
  request?: string(name='Request', description='request'),
  response?: string(name='Response', description='response'),
  RT?: long(name='RT', description='rt'),
  responseSize?: integer(name='ResponseSize', description='responseSize'),
}

model HsfMockResponse = {
  requestId: string(name='RequestId', description='requestId'),
  value: string(name='Value', description='value'),
  size: string(name='Size', description='size'),
}

async function hsfMockEx(request: HsfMockRequest, runtime: Util.RuntimeOptions): HsfMockResponse {
  Util.validateModel(request);
  return doRequest('HsfMock', 'HTTPS', 'POST', '2019-06-20', 'AK', null, request, runtime);
}

async function hsfMock(request: HsfMockRequest): HsfMockResponse {
  var runtime = new Util.RuntimeOptions{};
  return hsfMockEx(request, runtime);
}

model DeleteEcsDemoIncRequest = {
}

model DeleteEcsDemoIncResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function deleteEcsDemoIncEx(request: DeleteEcsDemoIncRequest, runtime: Util.RuntimeOptions): DeleteEcsDemoIncResponse {
  Util.validateModel(request);
  return doRequest('DeleteEcsDemoInc', 'HTTPS', 'GET', '2019-06-20', 'Anonymous', null, request, runtime);
}

async function deleteEcsDemoInc(request: DeleteEcsDemoIncRequest): DeleteEcsDemoIncResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEcsDemoIncEx(request, runtime);
}

model DescribeInstancesRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionNo'),
  vpcId?: string(name='VpcId', description='vpcInstanceId'),
  VSwitchId?: string(name='VSwitchId', description='vswInstanceId'),
  zoneId?: string(name='ZoneId', description='izNo'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='ecsNetworkType'),
  securityGroupId?: string(name='SecurityGroupId', description='groupNo'),
  instanceIds?: string(name='InstanceIds', description='ecsInstanceIds'),
  pageNumber?: integer(name='PageNumber', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  innerIpAddresses?: string(name='InnerIpAddresses', description='ecsInnerIps'),
  privateIpAddresses?: string(name='PrivateIpAddresses', description='ecsPrivateIps'),
  publicIpAddresses?: string(name='PublicIpAddresses', description='ecsPublicIps'),
  eipAddresses?: string(name='EipAddresses', description='eipAddresses'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  internetChargeType?: string(name='InternetChargeType', description='internetChargeType'),
  instanceName?: string(name='InstanceName', description='instanceName'),
  imageId?: string(name='ImageId', description='imageId'),
  status?: string(name='Status', description='status'),
  lockReason?: string(name='LockReason', description='lockReason'),
  filter: [
    {
      key?: string(name='Key', description='filter1Key'),
      value?: string(name='Value', description='creationStartTime'),
    }
  ](name='Filter', description='Filter'),
  deviceAvailable?: boolean(name='DeviceAvailable', description='deviceAvailable'),
  ioOptimized?: boolean(name='IoOptimized', description='ioOptimized'),
  needSaleCycle?: boolean(name='NeedSaleCycle', description='needSaleCycle'),
  tag?: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  instanceType?: string(name='InstanceType', description='instanceType'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId', description='hpcClusterId'),
  rdmaIpAddresses?: string(name='RdmaIpAddresses', description='ecsRdmaIps'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model DescribeInstancesResponse = {
  pageNumber: integer(name='PageNumber', description='data.pageNo'),
  pageSize: integer(name='PageSize', description='data.pageSize'),
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='data.total'),
  instances: {
    instance: [
      {
        autoReleaseTime: string(name='AutoReleaseTime', description='autoReleaseTime'),
        clusterId: string(name='ClusterId', description='zoneNo'),
        cpu: integer(name='Cpu', description='cores'),
        creationTime: string(name='CreationTime', description='creationTime'),
        creditSpecification: string(name='CreditSpecification', description='creditSpecification'),
        deletionProtection: boolean(name='DeletionProtection', description='deletionProtection'),
        deploymentSetId: string(name='DeploymentSetId', description='deploymentSetId'),
        description: string(name='Description', description='description'),
        deviceAvailable: boolean(name='DeviceAvailable', description='deviceAvailable'),
        expiredTime: string(name='ExpiredTime', description='expiredTime'),
        GPUAmount: integer(name='GPUAmount', description='gpuAmount'),
        GPUSpec: string(name='GPUSpec', description='gpuSpec'),
        hostName: string(name='HostName', description='hostName'),
        hpcClusterId: string(name='HpcClusterId', description='hpcClusterId'),
        imageId: string(name='ImageId', description='imageId'),
        instanceChargeType: string(name='InstanceChargeType', description='instanceChargeType'),
        instanceId: string(name='InstanceId', description='instanceId'),
        instanceName: string(name='InstanceName', description='instanceName'),
        instanceNetworkType: string(name='InstanceNetworkType', description='instanceNetWorkType'),
        instanceType: string(name='InstanceType', description='instanceType'),
        instanceTypeFamily: string(name='InstanceTypeFamily', description='instanceTypeFamily'),
        internetChargeType: string(name='InternetChargeType', description='internetChargeType'),
        internetMaxBandwidthIn: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
        internetMaxBandwidthOut: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
        ioOptimized: boolean(name='IoOptimized', description='ioOptimized'),
        keyPairName: string(name='KeyPairName', description='keyPairName'),
        localStorageAmount: integer(name='LocalStorageAmount', description='localStorageAmount'),
        localStorageCapacity: long(name='LocalStorageCapacity', description='localStorageCapacity'),
        memory: integer(name='Memory', description='mem'),
        OSName: string(name='OSName', description='osName'),
        OSNameEn: string(name='OSNameEn', description='osNameEn'),
        OSType: string(name='OSType', description='osType'),
        recyclable: boolean(name='Recyclable', description='recyclable'),
        regionId: string(name='RegionId', description='regionId'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        saleCycle: string(name='SaleCycle', description='saleCycle'),
        serialNumber: string(name='SerialNumber', description='serialNumber'),
        spotPriceLimit: float(name='SpotPriceLimit', description='spotPriceLimit '),
        spotStrategy: string(name='SpotStrategy', description='spotStrategy'),
        startTime: string(name='StartTime', description='startTime'),
        status: string(name='Status', description='status'),
        stoppedMode: string(name='StoppedMode', description='stopBehavior'),
        vlanId: string(name='VlanId', description='vlanId'),
        zoneId: string(name='ZoneId', description='zoneId'),
        networkInterfaces: {
          networkInterface: [
            {
              macAddress: string(name='MacAddress', description='macAddress'),
              networkInterfaceId: string(name='NetworkInterfaceId', description='eniInstanceId'),
              primaryIpAddress: string(name='PrimaryIpAddress', description='primaryIpAddress'),
            }
          ](name='NetworkInterface', description='NetworkInterface'),
        }(name='NetworkInterfaces', description='eniList'),
        operationLocks: {
          lockReason: [
            {
              lockMsg: string(name='LockMsg', description='lockMsg'),
              lockReason: string(name='LockReason', description='lockReason'),
            }
          ](name='LockReason', description='LockReason'),
        }(name='OperationLocks', description='operationLockTypes'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='tagKey'),
              tagValue: string(name='TagValue', description='tagValue'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
        cpuOptions: {
          coreCount: integer(name='CoreCount', description='cpuOptionsCore'),
          numa: string(name='Numa', description='cpuOptionsNuma'),
          threadsPerCore: integer(name='ThreadsPerCore', description='cpuOptionsHt'),
        }(name='CpuOptions', description='cpuOptions'),
        dedicatedHostAttribute: {
          dedicatedHostId: string(name='DedicatedHostId', description='dedicatedHostId'),
          dedicatedHostName: string(name='DedicatedHostName', description='dedicatedHostName'),
        }(name='DedicatedHostAttribute', description='dedicatedHostAttribute'),
        dedicatedInstanceAttribute: {
          affinity: string(name='Affinity', description='dedicatedInstanceAffinity'),
          tenancy: string(name='Tenancy', description='instanceTenancy'),
        }(name='DedicatedInstanceAttribute', description='dedicatedInstanceAttribute'),
        ecsCapacityReservationAttr: {
          capacityReservationId: string(name='CapacityReservationId', description='capacityReservationId'),
          capacityReservationPreference: string(name='CapacityReservationPreference', description='capacityReservationPreference'),
        }(name='EcsCapacityReservationAttr', description='ecsCapacityReservationAttr'),
        eipAddress: {
          allocationId: string(name='AllocationId', description='allocationId'),
          bandwidth: integer(name='Bandwidth', description='bandwidth'),
          internetChargeType: string(name='InternetChargeType', description='eipInternetChargeType'),
          ipAddress: string(name='IpAddress', description='eipAdress'),
          isSupportUnassociate: boolean(name='IsSupportUnassociate', description='eipIsPortable'),
        }(name='EipAddress', description='eipAddress'),
        vpcAttributes: {
          natIpAddress: string(name='NatIpAddress', description='natIpAddress'),
          VSwitchId: string(name='VSwitchId', description='vSwitchId'),
          vpcId: string(name='VpcId', description='vpcId'),
          privateIpAddress: {
            ipAddress: [ string ](name='IpAddress', description='IpAddress'),
          }(name='PrivateIpAddress', description='privateIpAddress'),
        }(name='VpcAttributes', description='vpcAttribute'),
        innerIpAddress: {
          ipAddress: [ string ](name='IpAddress', description='IpAddress'),
        }(name='InnerIpAddress', description='innerIpAddress'),
        publicIpAddress: {
          ipAddress: [ string ](name='IpAddress', description='IpAddress'),
        }(name='PublicIpAddress', description='publicIpAddress'),
        rdmaIpAddress: {
          ipAddress: [ string ](name='IpAddress', description='IpAddress'),
        }(name='RdmaIpAddress', description='rdmaIpAddress'),
        securityGroupIds: {
          securityGroupId: [ string ](name='SecurityGroupId', description='SecurityGroupId'),
        }(name='SecurityGroupIds', description='securityGroupIds'),
      }
    ](name='Instance', description='Instance'),
  }(name='Instances', description='data.data'),
}

async function describeInstancesEx(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstances', 'HTTPS', 'POST', '2019-06-20', 'AK', request, null, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesEx(request, runtime);
}

model CreateEcsDemoIncRequest = {
}

model CreateEcsDemoIncResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function createEcsDemoIncEx(request: CreateEcsDemoIncRequest, runtime: Util.RuntimeOptions): CreateEcsDemoIncResponse {
  Util.validateModel(request);
  return doRequest('CreateEcsDemoInc', 'HTTPS', 'POST', '2019-06-20', 'Anonymous', null, request, runtime);
}

async function createEcsDemoInc(request: CreateEcsDemoIncRequest): CreateEcsDemoIncResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEcsDemoIncEx(request, runtime);
}

model ListDisks001Request = {
  authKey: string(name='AuthKey', description='authKey'),
  requestId: string(name='RequestId', description='requestId'),
  clientIp: string(name='ClientIp', description='clientIp'),
  identityDTO: map[string]any(name='IdentityDTO', description='identityDTO'),
  extraParams: map[string]any(name='ExtraParams', description='extraParams'),
  serverClientIp: string(name='ServerClientIp', description='serverClientIp'),
  nextToken?: integer(name='NextToken', description='nextToken'),
}

model ListDisks001Response = {
  traceId: string(name='TraceId', description='traceId'),
  errorDetailMessage: string(name='ErrorDetailMessage', description='errorDetailMessage'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  errorCode: string(name='ErrorCode', description='errorCode'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  result: {
    nextToken: integer(name='NextToken', description='nextToken'),
    maxResults: integer(name='MaxResults', description='maxResults'),
  }(name='Result', description='result'),
}

async function listDisks001Ex(request: ListDisks001Request, runtime: Util.RuntimeOptions): ListDisks001Response {
  Util.validateModel(request);
  return doRequest('ListDisks001', 'HTTPS', 'POST', '2019-06-20', 'AK', request, null, runtime);
}

async function listDisks001(request: ListDisks001Request): ListDisks001Response {
  var runtime = new Util.RuntimeOptions{};
  return listDisks001Ex(request, runtime);
}

model ListDisks1233Request = {
  authKey: string(name='AuthKey', description='authKey'),
  requestId: string(name='RequestId', description='requestId'),
  clientIp: string(name='ClientIp', description='clientIp'),
  identityDTO: map[string]any(name='IdentityDTO', description='identityDTO'),
  extraParams: map[string]any(name='ExtraParams', description='extraParams'),
  serverClientIp: string(name='ServerClientIp', description='serverClientIp'),
}

model ListDisks1233Response = {
  traceId: string(name='TraceId', description='traceId'),
  errorDetailMessage: string(name='ErrorDetailMessage', description='errorDetailMessage'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  errorCode: string(name='ErrorCode', description='errorCode'),
}

async function listDisks1233Ex(request: ListDisks1233Request, runtime: Util.RuntimeOptions): ListDisks1233Response {
  Util.validateModel(request);
  return doRequest('ListDisks1233', 'HTTPS', 'POST', '2019-06-20', 'AK', request, null, runtime);
}

async function listDisks1233(request: ListDisks1233Request): ListDisks1233Response {
  var runtime = new Util.RuntimeOptions{};
  return listDisks1233Ex(request, runtime);
}

model ModifyInstanceRequest = {
}

model ModifyInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  answerList: [
    {
      answer: string(name='Answer', description='answer'),
    }
  ](name='AnswerList', description='answers'),
}

async function modifyInstanceEx(request: ModifyInstanceRequest, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  Util.validateModel(request);
  return doRequest('ModifyInstance', 'HTTPS', 'POST', '2019-06-20', 'Anonymous', null, request, runtime);
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceEx(request, runtime);
}

model HiFucker4Request = {
  env: string(name='Env', description='env'),
  acceptLanguage?: string(name='AcceptLanguage', description='acceptLanguage'),
  product: string(name='Product', description='product'),
  pageNumber?: integer(name='PageNumber', description='pageNum'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  filters?: [ string ](name='Filters', description='filters'),
  resourceTypeCodes?: [ string ](name='ResourceTypeCodes', description='resourceTypeCodes'),
  siteType?: string(name='SiteType', description='siteType'),
  fromCache?: boolean(name='FromCache', description='fromCache'),
  repeatLista?: [ string ](name='RepeatLista', description='RepeatLista'),
}

model HiFucker4Response = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: boolean(name='PageNumber', description='data.PageNumber'),
  pageSize: boolean(name='PageSize', description='data.PageSize'),
  totalCount: integer(name='TotalCount', description='data.TotalCount'),
  resourceTypes: [
    {
      product: string(name='Product', description='Product'),
      resourceTypeCode: string(name='ResourceTypeCode', description='ResourceTypeCode'),
      resourceTypeVersion: string(name='ResourceTypeVersion', description='ResourceTypeVersion'),
      title: string(name='Title', description='Title'),
      uniqueIdentifier: string(name='UniqueIdentifier', description='UniqueIdentifier'),
      description: string(name='Description', description='Description'),
      deliveryScope: string(name='DeliveryScope', description='DeliveryScope'),
      resourceIdField: boolean(name='ResourceIdField', description='ResourceIdField'),
      definitions: map[string]any(name='Definitions', description='Definitions'),
      schemaRef: string(name='SchemaRef', description='SchemaRef'),
      states: [
        {
          stateCode: string(name='StateCode', description='StateCode'),
          description: string(name='Description', description='Description'),
        }
      ](name='States', description='States'),
      operationAPI: {
        createAPIs: [
          {
            gatewayProduct: string(name='GatewayProduct', description='GatewayProduct'),
            gatewayVersion: string(name='GatewayVersion', description='APIVersion'),
            apiName: string(name='ApiName', description='APIName'),
          }
        ](name='CreateAPIs', description='CreateAPIs'),
        getAPIs: [
          {
            gatewayProduct: string(name='GatewayProduct', description='GatewayProduct'),
            gatewayVersion: string(name='GatewayVersion', description='APIVersion'),
            apiName: string(name='ApiName', description='APIName'),
          }
        ](name='GetAPIs', description='GetAPIs'),
        listAPIs: [
          {
            gatewayProduct: string(name='GatewayProduct', description='GatewayProduct'),
            gatewayVersion: string(name='GatewayVersion', description='APIVersion'),
            apiName: string(name='ApiName', description='APIName'),
          }
        ](name='ListAPIs', description='ListAPIs'),
        updateAPIs: [
          {
            gatewayProduct: string(name='GatewayProduct', description='GatewayProduct'),
            gatewayVersion: string(name='GatewayVersion', description='APIVersion'),
            apiName: string(name='ApiName', description='APIName'),
          }
        ](name='UpdateAPIs', description='UpdateAPIs'),
        deleteAPIs: [
          {
            gatewayProduct: string(name='GatewayProduct', description='GatewayProduct'),
            gatewayVersion: string(name='GatewayVersion', description='APIVersion'),
            apiName: string(name='ApiName', description='APIName'),
          }
        ](name='DeleteAPIs', description='DeleteAPIs'),
        establishRelationAPIs: [
          {
            gatewayProduct: string(name='GatewayProduct', description='GatewayProduct'),
            gatewayVersion: string(name='GatewayVersion', description='APIVersion'),
            apiName: string(name='ApiName', description='APIName'),
          }
        ](name='EstablishRelationAPIs', description='EstablishRelationAPIs'),
        destroyRelationAPIs: [
          {
            gatewayProduct: string(name='GatewayProduct', description='GatewayProduct'),
            gatewayVersion: string(name='GatewayVersion', description='APIVersion'),
            apiName: string(name='ApiName', description='APIName'),
          }
        ](name='DestroyRelationAPIs', description='DestroyRelationAPIs'),
      }(name='OperationAPI', description='OperationAPI'),
      resourceTypeAttributeMappings: {
        enableAttributeMapping: string(name='EnableAttributeMapping', description='EnableAttributeMapping'),
        optionalConfig: {
          prePaidValue: string(name='PrePaidValue', description='prePaidValue'),
        }(name='OptionalConfig', description='OptionalConfig'),
        operationGet: {
          attributeMappings: map[string]any(name='AttributeMappings', description='AttributeMappings'),
          apiInfos: [
            {
              gatewaySource: string(name='GatewaySource', description='gatewaySource'),
              gatewayProduct: string(name='GatewayProduct', description='gatewayProduct'),
              gatewayVersion: string(name='GatewayVersion', description='gatewayVersion'),
              apiName: string(name='ApiName', description='apiName'),
              supplementParameters: [
                {
                  mappingType: string(name='MappingType', description='mappingType'),
                  position: string(name='Position', description='position'),
                  in: string(name='In', description='in'),
                  path: string(name='Path', description='path'),
                  value: string(name='Value', description='value'),
                }
              ](name='SupplementParameters', description='supplementParameters'),
              paging: {
                type: string(name='Type', description='type'),
                nextTokenConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='NextTokenConfig', description='nextTokenConfig'),
                pageNumberConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='PageNumberConfig', description='pageNumberConfig'),
              }(name='Paging', description='paging'),
              requiredAttributeMappings: {
                idMappings: map[string]any(name='IdMappings', description='IdMappings'),
              }(name='RequiredAttributeMappings', description='requiredAttributeMappings'),
            }
          ](name='ApiInfos', description='ApiInfos'),
        }(name='OperationGet', description='OperationGet'),
        operationCreate: {
          attributeMappings: map[string]any(name='AttributeMappings', description='AttributeMappings'),
          apiInfos: [
            {
              gatewaySource: string(name='GatewaySource', description='gatewaySource'),
              gatewayProduct: string(name='GatewayProduct', description='gatewayProduct'),
              gatewayVersion: string(name='GatewayVersion', description='gatewayVersion'),
              apiName: string(name='ApiName', description='apiName'),
              supplementParameters: [
                {
                  mappingType: string(name='MappingType', description='mappingType'),
                  position: string(name='Position', description='position'),
                  in: string(name='In', description='in'),
                  path: string(name='Path', description='path'),
                  value: string(name='Value', description='value'),
                }
              ](name='SupplementParameters', description='supplementParameters'),
              paging: {
                type: string(name='Type', description='type'),
                nextTokenConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='NextTokenConfig', description='nextTokenConfig'),
                pageNumberConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='PageNumberConfig', description='pageNumberConfig'),
              }(name='Paging', description='paging'),
              requiredAttributeMappings: {
                idMappings: map[string]any(name='IdMappings', description='IdMappings'),
              }(name='RequiredAttributeMappings', description='requiredAttributeMappings'),
            }
          ](name='ApiInfos', description='ApiInfos'),
        }(name='OperationCreate', description='OperationCreate'),
        operationUpdate: {
          attributeMappings: map[string]any(name='AttributeMappings', description='AttributeMappings'),
          apiInfos: [
            {
              gatewaySource: string(name='GatewaySource', description='gatewaySource'),
              gatewayProduct: string(name='GatewayProduct', description='gatewayProduct'),
              gatewayVersion: string(name='GatewayVersion', description='gatewayVersion'),
              apiName: string(name='ApiName', description='apiName'),
              supplementParameters: [
                {
                  mappingType: string(name='MappingType', description='mappingType'),
                  position: string(name='Position', description='position'),
                  in: string(name='In', description='in'),
                  path: string(name='Path', description='path'),
                  value: string(name='Value', description='value'),
                }
              ](name='SupplementParameters', description='supplementParameters'),
              paging: {
                type: string(name='Type', description='type'),
                nextTokenConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='NextTokenConfig', description='nextTokenConfig'),
                pageNumberConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='PageNumberConfig', description='pageNumberConfig'),
              }(name='Paging', description='paging'),
              requiredAttributeMappings: {
                idMappings: map[string]any(name='IdMappings', description='IdMappings'),
              }(name='RequiredAttributeMappings', description='requiredAttributeMappings'),
            }
          ](name='ApiInfos', description='ApiInfos'),
        }(name='OperationUpdate', description='OperationUpdate'),
        operationDelete: {
          attributeMappings: map[string]any(name='AttributeMappings', description='AttributeMappings'),
          apiInfos: [
            {
              gatewaySource: string(name='GatewaySource', description='gatewaySource'),
              gatewayProduct: string(name='GatewayProduct', description='gatewayProduct'),
              gatewayVersion: string(name='GatewayVersion', description='gatewayVersion'),
              apiName: string(name='ApiName', description='apiName'),
              supplementParameters: [
                {
                  mappingType: string(name='MappingType', description='mappingType'),
                  position: string(name='Position', description='position'),
                  in: string(name='In', description='in'),
                  path: string(name='Path', description='path'),
                  value: string(name='Value', description='value'),
                }
              ](name='SupplementParameters', description='supplementParameters'),
              paging: {
                type: string(name='Type', description='type'),
                nextTokenConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='NextTokenConfig', description='nextTokenConfig'),
                pageNumberConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='PageNumberConfig', description='pageNumberConfig'),
              }(name='Paging', description='paging'),
              requiredAttributeMappings: {
                idMappings: map[string]any(name='IdMappings', description='IdMappings'),
              }(name='RequiredAttributeMappings', description='requiredAttributeMappings'),
            }
          ](name='ApiInfos', description='ApiInfos'),
        }(name='OperationDelete', description='OperationDelete'),
        operationList: {
          attributeMappings: map[string]any(name='AttributeMappings', description='AttributeMappings'),
          apiInfos: [
            {
              gatewaySource: string(name='GatewaySource', description='gatewaySource'),
              gatewayProduct: string(name='GatewayProduct', description='gatewayProduct'),
              gatewayVersion: string(name='GatewayVersion', description='gatewayVersion'),
              apiName: string(name='ApiName', description='apiName'),
              supplementParameters: [
                {
                  mappingType: string(name='MappingType', description='mappingType'),
                  position: string(name='Position', description='position'),
                  in: string(name='In', description='in'),
                  path: string(name='Path', description='path'),
                  value: string(name='Value', description='value'),
                }
              ](name='SupplementParameters', description='supplementParameters'),
              paging: {
                type: string(name='Type', description='type'),
                nextTokenConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='NextTokenConfig', description='nextTokenConfig'),
                pageNumberConfig: {
                  requestParameterMappings: map[string]any(name='RequestParameterMappings', description='requestParameterMappings'),
                  responseParameterMappings: map[string]any(name='ResponseParameterMappings', description='responseParameterMappings'),
                }(name='PageNumberConfig', description='pageNumberConfig'),
              }(name='Paging', description='paging'),
              requiredAttributeMappings: {
                idMappings: map[string]any(name='IdMappings', description='IdMappings'),
              }(name='RequiredAttributeMappings', description='requiredAttributeMappings'),
            }
          ](name='ApiInfos', description='ApiInfos'),
        }(name='OperationList', description='OperationList'),
      }(name='ResourceTypeAttributeMappings', description='ResourceTypeAttributeMappings'),
      commonAttributeMark: {
        billingMethod: string(name='BillingMethod', description='BillingMethod'),
        uids: [ string ](name='Uids', description='Uids'),
      }(name='CommonAttributeMark', description='CommonAttributeMark'),
    }
  ](name='ResourceTypes', description='data.ResourceTypes'),
}

async function hiFucker4Ex(request: HiFucker4Request, runtime: Util.RuntimeOptions): HiFucker4Response {
  Util.validateModel(request);
  return doRequest('HiFucker4', 'HTTPS', 'GET', '2019-06-20', 'AK', request, null, runtime);
}

async function hiFucker4(request: HiFucker4Request): HiFucker4Response {
  var runtime = new Util.RuntimeOptions{};
  return hiFucker4Ex(request, runtime);
}

model CreateTestEcsRequest = {
  authKey: string(name='AuthKey', description='authKey'),
  requestId: string(name='RequestId', description='requestId'),
  clientIp: string(name='ClientIp', description='clientIp'),
  identityDTO: map[string]any(name='IdentityDTO', description='identityDTO'),
  extraParams: map[string]any(name='ExtraParams', description='extraParams'),
  serverClientIp: string(name='ServerClientIp', description='serverClientIp'),
  gmtModified: string(name='GmtModified', description='gmtModified'),
  marketStr: string(name='MarketStr', description='marketStr'),
  projectStatusStr: string(name='ProjectStatusStr', description='projectStatusStr'),
  changeFreeStatus: string(name='ChangeFreeStatus', description='changeFreeStatus'),
  dailyTime: string(name='DailyTime', description='dailyTime'),
  relationPeople: string(name='RelationPeople', description='relationPeople'),
  closeTime: string(name='CloseTime', description='closeTime'),
  onlineTime: string(name='OnlineTime', description='onlineTime'),
  createPeopleName: string(name='CreatePeopleName', description='createPeopleName'),
  id: long(name='Id', description='id'),
  namespaceName: string(name='NamespaceName', description='namespaceName'),
  planStartTime: string(name='PlanStartTime', description='planStartTime'),
  changeFreeOrderId: string(name='ChangeFreeOrderId', description='changeFreeOrderId'),
  preTime: string(name='PreTime', description='preTime'),
  createPeopleBucId: string(name='CreatePeopleBucId', description='createPeopleBucId'),
  gmtCreate: string(name='GmtCreate', description='gmtCreate'),
  market: integer(name='Market', description='market'),
  projectStatus: long(name='ProjectStatus', description='projectStatus'),
  namespaceId: long(name='NamespaceId', description='namespaceId'),
  projectDesc: string(name='ProjectDesc', description='projectDesc'),
  planEndTime: string(name='PlanEndTime', description='planEndTime'),
  createPeopleId: string(name='CreatePeopleId', description='createPeopleId'),
  projectName: string(name='ProjectName', description='projectName'),
  properties: string(name='Properties', description='properties'),
}

model CreateTestEcsResponse = {
  traceId: string(name='TraceId', description='traceId'),
  errorDetailMessage: string(name='ErrorDetailMessage', description='errorDetailMessage'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  errorCode: string(name='ErrorCode', description='errorCode'),
}

async function createTestEcsEx(request: CreateTestEcsRequest, runtime: Util.RuntimeOptions): CreateTestEcsResponse {
  Util.validateModel(request);
  return doRequest('CreateTestEcs', 'HTTPS', 'POST', '2019-06-20', 'APP', request, null, runtime);
}

async function createTestEcs(request: CreateTestEcsRequest): CreateTestEcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTestEcsEx(request, runtime);
}

model ListDisks00Request = {
  authKey: string(name='AuthKey', description='authKey'),
  requestId: string(name='RequestId', description='requestId'),
  clientIp: string(name='ClientIp', description='clientIp'),
  identityDTO: map[string]any(name='IdentityDTO', description='identityDTO'),
  extraParams: map[string]any(name='ExtraParams', description='extraParams'),
  serverClientIp: string(name='ServerClientIp', description='serverClientIp'),
}

model ListDisks00Response = {
  traceId: string(name='TraceId', description='traceId'),
  errorDetailMessage: string(name='ErrorDetailMessage', description='errorDetailMessage'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  errorCode: string(name='ErrorCode', description='errorCode'),
}

async function listDisks00Ex(request: ListDisks00Request, runtime: Util.RuntimeOptions): ListDisks00Response {
  Util.validateModel(request);
  return doRequest('ListDisks00', 'HTTPS', 'GET', '2019-06-20', 'AK', request, null, runtime);
}

async function listDisks00(request: ListDisks00Request): ListDisks00Response {
  var runtime = new Util.RuntimeOptions{};
  return listDisks00Ex(request, runtime);
}

model GetInstance01Request = {
  authKey: string(name='AuthKey', description='authKey'),
  requestId: string(name='RequestId', description='requestId'),
  clientIp: string(name='ClientIp', description='clientIp'),
  identityDTO: map[string]any(name='IdentityDTO', description='identityDTO'),
  extraParams: map[string]any(name='ExtraParams', description='extraParams'),
  serverClientIp: string(name='ServerClientIp', description='serverClientIp'),
}

model GetInstance01Response = {
  traceId: string(name='TraceId', description='traceId'),
  errorDetailMessage: string(name='ErrorDetailMessage', description='errorDetailMessage'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  errorCode: string(name='ErrorCode', description='errorCode'),
  result: {
    id: long(name='Id', description='id'),
    projectName: string(name='ProjectName', description='projectName'),
  }(name='Result', description='result'),
}

async function getInstance01Ex(request: GetInstance01Request, runtime: Util.RuntimeOptions): GetInstance01Response {
  Util.validateModel(request);
  return doRequest('GetInstance01', 'HTTPS', 'POST', '2019-06-20', 'AK', request, null, runtime);
}

async function getInstance01(request: GetInstance01Request): GetInstance01Response {
  var runtime = new Util.RuntimeOptions{};
  return getInstance01Ex(request, runtime);
}

model DisableDiskRequest = {
  typeCode: string(name='TypeCode', description='typeCode'),
}

model DisableDiskResponse = {
  success: boolean(name='Success', description='isSuccess'),
  data: {
    code: string(name='Code', description='code'),
    name: string(name='Name', description='name'),
    option: integer(name='Option', description='options'),
  }(name='Data', description='defaultModel'),
}

async function disableDiskEx(request: DisableDiskRequest, runtime: Util.RuntimeOptions): DisableDiskResponse {
  Util.validateModel(request);
  return doRequest('DisableDisk', 'HTTPS', 'POST', '2019-06-20', 'AK', request, null, runtime);
}

async function disableDisk(request: DisableDiskRequest): DisableDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDiskEx(request, runtime);
}

model FsRequest = {
  regionId: string(name='RegionId', description='RegionId'),
  imageId: string(name='ImageId', description='ImageId'),
  internetChargeType?: string(name='InternetChargeType', description='InternetChargeType'),
  clientToken: string(name='ClientToken', description='ClientToken'),
}

model FsResponse = {
  instanceId: string(name='InstanceId', description='InstanceId'),
  requestId: string(name='RequestId', description='RequestId'),
}

async function fsEx(request: FsRequest, runtime: Util.RuntimeOptions): FsResponse {
  Util.validateModel(request);
  return doRequest('Fs', 'HTTPS', 'POST', '2019-06-20', 'AK', null, request, runtime);
}

async function fs(request: FsRequest): FsResponse {
  var runtime = new Util.RuntimeOptions{};
  return fsEx(request, runtime);
}

model AttachDiskRequest = {
  aid?: string(name='Aid', description='Aid'),
  bid?: string(name='Bid', description='Bid'),
}

model AttachDiskResponse = {
  requestId: string(name='RequestId', description='Bid'),
}

async function attachDiskEx(request: AttachDiskRequest, runtime: Util.RuntimeOptions): AttachDiskResponse {
  Util.validateModel(request);
  return doRequest('AttachDisk', 'HTTPS', 'POST', '2019-06-20', 'AK', request, null, runtime);
}

async function attachDisk(request: AttachDiskRequest): AttachDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDiskEx(request, runtime);
}

model DeleteInstanceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  force?: boolean(name='Force', description='force'),
  terminateSubscription?: boolean(name='TerminateSubscription', description='terminateSubscription'),
}

model DeleteInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteInstanceEx(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  return doRequest('DeleteInstance', 'HTTPS', 'POST', '2019-06-20', 'AK', request, null, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceEx(request, runtime);
}

model CreateInstanceRequest = {
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  regionId: string(name='RegionId', description='regionId'),
  imageId?: string(name='ImageId', description='imageId'),
  imageFamily?: string(name='ImageFamily', description='imageFamily'),
  instanceType: string(name='InstanceType', description='instanceType'),
  securityGroupId?: string(name='SecurityGroupId', description='securityGroupId'),
  instanceName?: string(name='InstanceName', description='instanceName'),
  internetChargeType?: string(name='InternetChargeType', description='internetChargeType'),
  autoRenew?: boolean(name='AutoRenew', description='autoRenew'),
  autoRenewPeriod?: integer(name='AutoRenewPeriod', description='autoRenewPeriod'),
  internetMaxBandwidthIn?: integer(name='InternetMaxBandwidthIn', description='internetMaxBandwidthIn'),
  internetMaxBandwidthOut?: integer(name='InternetMaxBandwidthOut', description='internetMaxBandwidthOut'),
  hostName?: string(name='HostName', description='hostName'),
  password?: string(name='Password', description='password'),
  passwordInherit?: boolean(name='PasswordInherit', description='passwdInherit'),
  deploymentSetId?: string(name='DeploymentSetId', description='deploymentSetId'),
  zoneId?: string(name='ZoneId', description='izNo'),
  clusterId?: string(name='ClusterId', description='zoneNo'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  vlanId?: string(name='VlanId', description='vlanNo'),
  innerIpAddress?: string(name='InnerIpAddress', description='innerIp'),
  systemDisk: {
    size?: integer(name='Size', description='systemDiskSize'),
    category?: string(name='Category', description='systemDiskCategory'),
    diskName?: string(name='DiskName', description='systemDiskName'),
    description?: string(name='Description', description='systemDiskDescription'),
    performanceLevel?: string(name='PerformanceLevel', description='sysPerformanceLevel'),
  }(name='SystemDisk', description='SystemDisk'),
  dataDisk?: [
    {
      size: integer(name='Size', description='size'),
      snapshotId: string(name='SnapshotId', description='snapshotId'),
      category: string(name='Category', description='category'),
      diskName: string(name='DiskName', description='diskName'),
      description: string(name='Description', description='description'),
      device: string(name='Device', description='device'),
      deleteWithInstance: boolean(name='DeleteWithInstance', description='deleteWithInstance'),
      encrypted: boolean(name='Encrypted', description='encrypted'),
      KMSKeyId: string(name='KMSKeyId', description='kmsKeyId'),
      performanceLevel: string(name='PerformanceLevel', description='performanceLevel'),
    }
  ](name='DataDisk', description='createDataDiskParams'),
  arn?: [
    {
      assumeRoleFor: long(name='AssumeRoleFor', description='assumeRoleFor'),
      rolearn: string(name='Rolearn', description='rolearn'),
      roleType: string(name='RoleType', description='roleType'),
    }
  ](name='Arn', description='arns'),
  nodeControllerId?: string(name='NodeControllerId', description='nodeControllerId'),
  description?: string(name='Description', description='description'),
  VSwitchId?: string(name='VSwitchId', description='vSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='privateIpAddress'),
  ioOptimized?: string(name='IoOptimized', description='ioOptimized'),
  ownerAccount?: string(name='OwnerAccount', description='ownerAccount'),
  useAdditionalService?: boolean(name='UseAdditionalService', description='enableVmOsConfig'),
  instanceChargeType?: string(name='InstanceChargeType', description='instanceChargeType'),
  period?: integer(name='Period', description='period'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  tag?: [
    {
      value: string(name='value', description='value'),
      key: string(name='key', description='key'),
    }
  ](name='Tag', description='tagKeyValueParams'),
  userData?: string(name='UserData', description='userData'),
  spotStrategy?: string(name='SpotStrategy', description='spotStrategy'),
  keyPairName?: string(name='KeyPairName', description='keyPairName'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='spotPriceLimit'),
  spotDuration?: integer(name='SpotDuration', description='spotDuration'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', description='spotInterruptionBehavior'),
  ramRoleName?: string(name='RamRoleName', description='ramRoleName'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='securityEnhancementStrategy'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId', description='hpcClusterId'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  dedicatedHostId?: string(name='DedicatedHostId', description='dedicatedHostId'),
  creditSpecification?: string(name='CreditSpecification', description='creditSpecification'),
  deletionProtection?: boolean(name='DeletionProtection', description='deletionProtection'),
  affinity?: string(name='Affinity', description='dedicatedInstanceAffinity'),
  tenancy?: string(name='Tenancy', description='instanceTenancy'),
  storageSetId?: string(name='StorageSetId', description='storageSetId'),
  storageSetPartitionNumber?: integer(name='StorageSetPartitionNumber', description='storageSetPartitionNumber'),
}

model CreateInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceId: string(name='InstanceId', description='data.instanceId'),
  tradePrice: float(name='TradePrice', description='data.lxOrderResult.tradeAmount'),
}

async function createInstanceEx(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateInstance', 'HTTPS', 'POST', '2019-06-20', 'AK', request, null, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceEx(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
