/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('yanhjtest', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model Asda {
  asdasd?: string(name='asdasd', description='asdasd'),
}

model ListApiRequest {
  sas?: map[string]any(name='Sas'),
}

model ListApiResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListApiResponse = {
  headers: map[string]string(name='headers'),
  body: ListApiResponseBody(name='body'),
}

async function listApiWithOptions(request: ListApiRequest, runtime: Util.RuntimeOptions): ListApiResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListApi', '2020-03-03', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listApi(request: ListApiRequest): ListApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApiWithOptions(request, runtime);
}

