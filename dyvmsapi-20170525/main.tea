import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint(@productId, @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ListRobotTaskCallsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  pageNo?: integer(name='PageNo', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  taskId?: string(name='TaskId', description='taskId'),
  durationFrom?: string(name='DurationFrom', description='durationFrom'),
  durationTo?: string(name='DurationTo', description='durationTo'),
  dialogCountFrom?: string(name='DialogCountFrom', description='dialogCountFrom'),
  dialogCountTo?: string(name='DialogCountTo', description='dialogCountTo'),
  hangupDirection?: string(name='HangupDirection', description='hangupDirection'),
  callResult?: string(name='CallResult', description='callResult'),
  called?: string(name='Called', description='called'),
}

model ListRobotTaskCallsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  pageSize: string(name='PageSize', description='pageSize'),
  pageNo: string(name='PageNo', description='currentPage'),
  totalCount: string(name='TotalCount', description='totalCount'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function listRobotTaskCallsWithOptions(request: ListRobotTaskCallsRequest, runtime: Util.RuntimeOptions): ListRobotTaskCallsResponse {
  Util.validateModel(request);
  return doRequest('ListRobotTaskCalls', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function listRobotTaskCalls(request: ListRobotTaskCallsRequest): ListRobotTaskCallsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRobotTaskCallsWithOptions(request, runtime);
}

model DoRtcNumberAuthRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  phoneNumber: string(name='PhoneNumber', description='phoneNumber'),
}

model DoRtcNumberAuthResponse = {
  requestId: string(name='RequestId', description='requestId'),
  module: string(name='Module', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function doRtcNumberAuthWithOptions(request: DoRtcNumberAuthRequest, runtime: Util.RuntimeOptions): DoRtcNumberAuthResponse {
  Util.validateModel(request);
  return doRequest('DoRtcNumberAuth', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function doRtcNumberAuth(request: DoRtcNumberAuthRequest): DoRtcNumberAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return doRtcNumberAuthWithOptions(request, runtime);
}

model UndoRtcNumberAuthRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  phoneNumber: string(name='PhoneNumber', description='phoneNumber'),
}

model UndoRtcNumberAuthResponse = {
  requestId: string(name='RequestId', description='requestId'),
  module: string(name='Module', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function undoRtcNumberAuthWithOptions(request: UndoRtcNumberAuthRequest, runtime: Util.RuntimeOptions): UndoRtcNumberAuthResponse {
  Util.validateModel(request);
  return doRequest('UndoRtcNumberAuth', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function undoRtcNumberAuth(request: UndoRtcNumberAuthRequest): UndoRtcNumberAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return undoRtcNumberAuthWithOptions(request, runtime);
}

model QueryRtcNumberAuthStatusRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  phoneNumber: string(name='PhoneNumber', description='phoneNumber'),
}

model QueryRtcNumberAuthStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
  module: string(name='Module', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryRtcNumberAuthStatusWithOptions(request: QueryRtcNumberAuthStatusRequest, runtime: Util.RuntimeOptions): QueryRtcNumberAuthStatusResponse {
  Util.validateModel(request);
  return doRequest('QueryRtcNumberAuthStatus', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryRtcNumberAuthStatus(request: QueryRtcNumberAuthStatusRequest): QueryRtcNumberAuthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRtcNumberAuthStatusWithOptions(request, runtime);
}

model ListOrderedNumbersRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  prodCode?: string(name='ProdCode', description='prodCode'),
}

model ListOrderedNumbersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  numbers: [ string ] (name='Numbers', description='data'),
}

async function listOrderedNumbersWithOptions(request: ListOrderedNumbersRequest, runtime: Util.RuntimeOptions): ListOrderedNumbersResponse {
  Util.validateModel(request);
  return doRequest('ListOrderedNumbers', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function listOrderedNumbers(request: ListOrderedNumbersRequest): ListOrderedNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrderedNumbersWithOptions(request, runtime);
}

model StartMicroOutboundRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  prodCode?: string(name='ProdCode', description='prodCode'),
  accountType?: string(name='AccountType', description='accountType'),
  accountId?: string(name='AccountId', description='accountId'),
  commandCode?: string(name='CommandCode', description='commandCode'),
  callingNumber?: string(name='CallingNumber', description='callingNumber'),
  calledNumber?: string(name='CalledNumber', description='calledNumber'),
  extInfo?: string(name='ExtInfo', description='extInfo'),
  appName?: string(name='AppName', description='appName'),
}

model StartMicroOutboundResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  customerInfo: string(name='CustomerInfo', description='data.customerInfo'),
  invokeCmdId: string(name='InvokeCmdId', description='data.invokeCmdId'),
  invokeCreateTime: string(name='InvokeCreateTime', description='data.invokeCreateTime'),
}

async function startMicroOutboundWithOptions(request: StartMicroOutboundRequest, runtime: Util.RuntimeOptions): StartMicroOutboundResponse {
  Util.validateModel(request);
  return doRequest('StartMicroOutbound', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function startMicroOutbound(request: StartMicroOutboundRequest): StartMicroOutboundResponse {
  var runtime = new Util.RuntimeOptions{};
  return startMicroOutboundWithOptions(request, runtime);
}

model ListOutboundStrategiesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  prodCode?: string(name='ProdCode', description='prodCode'),
  buId?: long(name='BuId', description='buId'),
  keyword?: string(name='Keyword', description='keyword'),
}

model ListOutboundStrategiesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  outboundStrategies: [
    {
      id: long(name='Id', description='id'),
      gmtCreateStr: string(name='GmtCreateStr', description='gmtCreateStr'),
      gmtModifiedStr: string(name='GmtModifiedStr', description='gmtModifiedStr'),
      creatorId: long(name='CreatorId', description='creatorId'),
      creatorName: string(name='CreatorName', description='creatorName'),
      modifierId: long(name='ModifierId', description='modifierId'),
      modifierName: string(name='ModifierName', description='modifierName'),
      buId: long(name='BuId', description='buId'),
      departmentId: long(name='DepartmentId', description='departmentId'),
      name: string(name='name', description='name'),
      numType: integer(name='NumType', description='numType'),
      outboundNum: string(name='OutboundNum', description='outboundNum'),
      robotType: integer(name='RobotType', description='robotType'),
      robotId: string(name='RobotId', description='robotId'),
      robotName: string(name='RobotName', description='robotName'),
      resourceAllocation: integer(name='ResourceAllocation', description='resourceAllocation'),
      sceneName: string(name='SceneName', description='sceneName'),
      ruleCode: long(name='RuleCode', description='ruleCode'),
      status: integer(name='Status', description='status'),
      extAttr: string(name='ExtAttr', description='extAttr'),
      process: integer(name='Process', description='process'),
      successRate: integer(name='SuccessRate', description='successRate'),
    }
  ](name='OutboundStrategies', description='data'),
}

async function listOutboundStrategiesWithOptions(request: ListOutboundStrategiesRequest, runtime: Util.RuntimeOptions): ListOutboundStrategiesResponse {
  Util.validateModel(request);
  return doRequest('ListOutboundStrategies', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function listOutboundStrategies(request: ListOutboundStrategiesRequest): ListOutboundStrategiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOutboundStrategiesWithOptions(request, runtime);
}

model DescribeRecordDataRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  prodCode?: string(name='ProdCode', description='prodCode'),
  accountType?: string(name='AccountType', description='accountType'),
  accountId?: string(name='AccountId', description='accountId'),
  acid?: string(name='Acid', description='acid'),
  secLevel?: integer(name='SecLevel', description='secLevel'),
}

model DescribeRecordDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
  ossLink: string(name='OssLink', description='data.ossLink'),
  acid: string(name='Acid', description='data.acid'),
  agentId: string(name='AgentId', description='data.agentId'),
}

async function describeRecordDataWithOptions(request: DescribeRecordDataRequest, runtime: Util.RuntimeOptions): DescribeRecordDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeRecordData', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function describeRecordData(request: DescribeRecordDataRequest): DescribeRecordDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordDataWithOptions(request, runtime);
}

model QueryVoipNumberBindInfosRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='phoneNumber'),
  voipId?: string(name='VoipId', description='voipId'),
}

model QueryVoipNumberBindInfosResponse = {
  requestId: string(name='RequestId', description='requestId'),
  module: string(name='Module', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryVoipNumberBindInfosWithOptions(request: QueryVoipNumberBindInfosRequest, runtime: Util.RuntimeOptions): QueryVoipNumberBindInfosResponse {
  Util.validateModel(request);
  return doRequest('QueryVoipNumberBindInfos', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryVoipNumberBindInfos(request: QueryVoipNumberBindInfosRequest): QueryVoipNumberBindInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVoipNumberBindInfosWithOptions(request, runtime);
}

model ReportVoipProblemsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  channelId?: string(name='ChannelId', description='channelId'),
  voipId: string(name='VoipId', description='voipId'),
  title: string(name='Title', description='title'),
  desc: string(name='Desc', description='desc'),
}

model ReportVoipProblemsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  module: string(name='Module', description='module'),
  message: string(name='Message', description='message'),
}

async function reportVoipProblemsWithOptions(request: ReportVoipProblemsRequest, runtime: Util.RuntimeOptions): ReportVoipProblemsResponse {
  Util.validateModel(request);
  return doRequest('ReportVoipProblems', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function reportVoipProblems(request: ReportVoipProblemsRequest): ReportVoipProblemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportVoipProblemsWithOptions(request, runtime);
}

model UnbindNumberAndVoipIdRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  phoneNumber: string(name='PhoneNumber', description='phoneNumber'),
  voipId: string(name='VoipId', description='voipId'),
}

model UnbindNumberAndVoipIdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  module: string(name='Module', description='module'),
  message: string(name='Message', description='message'),
}

async function unbindNumberAndVoipIdWithOptions(request: UnbindNumberAndVoipIdRequest, runtime: Util.RuntimeOptions): UnbindNumberAndVoipIdResponse {
  Util.validateModel(request);
  return doRequest('UnbindNumberAndVoipId', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function unbindNumberAndVoipId(request: UnbindNumberAndVoipIdRequest): UnbindNumberAndVoipIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindNumberAndVoipIdWithOptions(request, runtime);
}

model BindNumberAndVoipIdRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  phoneNumber: string(name='PhoneNumber', description='phoneNumber'),
  voipId: string(name='VoipId', description='voipId'),
}

model BindNumberAndVoipIdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  module: string(name='Module', description='module'),
  message: string(name='Message', description='message'),
}

async function bindNumberAndVoipIdWithOptions(request: BindNumberAndVoipIdRequest, runtime: Util.RuntimeOptions): BindNumberAndVoipIdResponse {
  Util.validateModel(request);
  return doRequest('BindNumberAndVoipId', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function bindNumberAndVoipId(request: BindNumberAndVoipIdRequest): BindNumberAndVoipIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindNumberAndVoipIdWithOptions(request, runtime);
}

model CancelRobotTaskRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  taskId?: long(name='TaskId', description='taskId'),
}

model CancelRobotTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function cancelRobotTaskWithOptions(request: CancelRobotTaskRequest, runtime: Util.RuntimeOptions): CancelRobotTaskResponse {
  Util.validateModel(request);
  return doRequest('CancelRobotTask', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function cancelRobotTask(request: CancelRobotTaskRequest): CancelRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelRobotTaskWithOptions(request, runtime);
}

model UploadRobotTaskCalledFileRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  id: long(name='Id', description='id'),
  calledNumber: string(name='CalledNumber', description='calledNumber'),
  ttsParam?: string(name='TtsParam', description='ttsParam'),
  ttsParamHead?: string(name='TtsParamHead', description='ttsParamHead'),
}

model UploadRobotTaskCalledFileResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function uploadRobotTaskCalledFileWithOptions(request: UploadRobotTaskCalledFileRequest, runtime: Util.RuntimeOptions): UploadRobotTaskCalledFileResponse {
  Util.validateModel(request);
  return doRequest('UploadRobotTaskCalledFile', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function uploadRobotTaskCalledFile(request: UploadRobotTaskCalledFileRequest): UploadRobotTaskCalledFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadRobotTaskCalledFileWithOptions(request, runtime);
}

model DeleteRobotTaskRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  taskId: long(name='TaskId', description='taskId'),
}

model DeleteRobotTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function deleteRobotTaskWithOptions(request: DeleteRobotTaskRequest, runtime: Util.RuntimeOptions): DeleteRobotTaskResponse {
  Util.validateModel(request);
  return doRequest('DeleteRobotTask', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function deleteRobotTask(request: DeleteRobotTaskRequest): DeleteRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRobotTaskWithOptions(request, runtime);
}

model StopRobotTaskRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  taskId: long(name='TaskId', description='taskId'),
}

model StopRobotTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function stopRobotTaskWithOptions(request: StopRobotTaskRequest, runtime: Util.RuntimeOptions): StopRobotTaskResponse {
  Util.validateModel(request);
  return doRequest('StopRobotTask', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function stopRobotTask(request: StopRobotTaskRequest): StopRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRobotTaskWithOptions(request, runtime);
}

model QueryRobotTaskCallDetailRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  taskId: long(name='TaskId', description='taskId'),
  callee: string(name='Callee', description='callee'),
  queryDate: long(name='QueryDate', description='queryDate'),
}

model QueryRobotTaskCallDetailResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryRobotTaskCallDetailWithOptions(request: QueryRobotTaskCallDetailRequest, runtime: Util.RuntimeOptions): QueryRobotTaskCallDetailResponse {
  Util.validateModel(request);
  return doRequest('QueryRobotTaskCallDetail', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryRobotTaskCallDetail(request: QueryRobotTaskCallDetailRequest): QueryRobotTaskCallDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskCallDetailWithOptions(request, runtime);
}

model QueryRobotv2AllListRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
}

model QueryRobotv2AllListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryRobotv2AllListWithOptions(request: QueryRobotv2AllListRequest, runtime: Util.RuntimeOptions): QueryRobotv2AllListResponse {
  Util.validateModel(request);
  return doRequest('QueryRobotv2AllList', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryRobotv2AllList(request: QueryRobotv2AllListRequest): QueryRobotv2AllListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotv2AllListWithOptions(request, runtime);
}

model QueryRobotTaskDetailRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  id: long(name='Id', description='id'),
}

model QueryRobotTaskDetailResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryRobotTaskDetailWithOptions(request: QueryRobotTaskDetailRequest, runtime: Util.RuntimeOptions): QueryRobotTaskDetailResponse {
  Util.validateModel(request);
  return doRequest('QueryRobotTaskDetail', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryRobotTaskDetail(request: QueryRobotTaskDetailRequest): QueryRobotTaskDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskDetailWithOptions(request, runtime);
}

model QueryRobotTaskCallListRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  pageNo?: integer(name='PageNo', description='pageNo'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  taskId: string(name='TaskId', description='taskId'),
  durationFrom?: string(name='DurationFrom', description='durationFrom'),
  durationTo?: string(name='DurationTo', description='durationTo'),
  dialogCountFrom?: string(name='DialogCountFrom', description='dialogCountFrom'),
  dialogCountTo?: string(name='DialogCountTo', description='dialogCountTo'),
  hangupDirection?: string(name='HangupDirection', description='hangupDirection'),
  callResult?: string(name='CallResult', description='callResult'),
  called?: string(name='Called', description='called'),
}

model QueryRobotTaskCallListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryRobotTaskCallListWithOptions(request: QueryRobotTaskCallListRequest, runtime: Util.RuntimeOptions): QueryRobotTaskCallListResponse {
  Util.validateModel(request);
  return doRequest('QueryRobotTaskCallList', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryRobotTaskCallList(request: QueryRobotTaskCallListRequest): QueryRobotTaskCallListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskCallListWithOptions(request, runtime);
}

model StartRobotTaskRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  taskId: long(name='TaskId', description='taskId'),
  scheduleTime?: string(name='ScheduleTime', description='scheduleTime'),
}

model StartRobotTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function startRobotTaskWithOptions(request: StartRobotTaskRequest, runtime: Util.RuntimeOptions): StartRobotTaskResponse {
  Util.validateModel(request);
  return doRequest('StartRobotTask', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function startRobotTask(request: StartRobotTaskRequest): StartRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRobotTaskWithOptions(request, runtime);
}

model QueryRobotTaskListRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  taskName?: string(name='TaskName', description='taskName'),
  status?: string(name='Status', description='status'),
  time?: string(name='Time', description='time'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNo?: integer(name='PageNo', description='pageNo'),
}

model QueryRobotTaskListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  pageSize: string(name='PageSize', description='pageSize'),
  pageNo: string(name='PageNo', description='currentPage'),
  totalCount: string(name='TotalCount', description='totalCount'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryRobotTaskListWithOptions(request: QueryRobotTaskListRequest, runtime: Util.RuntimeOptions): QueryRobotTaskListResponse {
  Util.validateModel(request);
  return doRequest('QueryRobotTaskList', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryRobotTaskList(request: QueryRobotTaskListRequest): QueryRobotTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotTaskListWithOptions(request, runtime);
}

model CreateRobotTaskRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  taskName: string(name='TaskName', description='taskName'),
  dialogId: long(name='DialogId', description='dialogId'),
  corpName?: string(name='CorpName', description='corpName'),
  caller: string(name='Caller', description='caller'),
  numberStatusIdent: boolean(name='NumberStatusIdent', description='numberStatusIdent'),
  retryType: integer(name='RetryType', description='retryType'),
  recallStateCodes?: string(name='RecallStateCodes', description='recallStateCodes'),
  recallTimes?: integer(name='RecallTimes', description='recallTimes'),
  recallInterval?: integer(name='RecallInterval', description='recallInterval'),
  isSelfLine?: boolean(name='IsSelfLine', description='isSelfLine'),
}

model CreateRobotTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function createRobotTaskWithOptions(request: CreateRobotTaskRequest, runtime: Util.RuntimeOptions): CreateRobotTaskResponse {
  Util.validateModel(request);
  return doRequest('CreateRobotTask', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function createRobotTask(request: CreateRobotTaskRequest): CreateRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRobotTaskWithOptions(request, runtime);
}

model CancelOrderRobotTaskRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  taskId: long(name='TaskId', description='taskId'),
}

model CancelOrderRobotTaskResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function cancelOrderRobotTaskWithOptions(request: CancelOrderRobotTaskRequest, runtime: Util.RuntimeOptions): CancelOrderRobotTaskResponse {
  Util.validateModel(request);
  return doRequest('CancelOrderRobotTask', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function cancelOrderRobotTask(request: CancelOrderRobotTaskRequest): CancelOrderRobotTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOrderRobotTaskWithOptions(request, runtime);
}

model SmartCallOperateRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  callId: string(name='CallId', description='callId'),
  command: string(name='Command', description='command'),
  param?: string(name='Param', description='param'),
}

model SmartCallOperateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  status: boolean(name='Status', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function smartCallOperateWithOptions(request: SmartCallOperateRequest, runtime: Util.RuntimeOptions): SmartCallOperateResponse {
  Util.validateModel(request);
  return doRequest('SmartCallOperate', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function smartCallOperate(request: SmartCallOperateRequest): SmartCallOperateResponse {
  var runtime = new Util.RuntimeOptions{};
  return smartCallOperateWithOptions(request, runtime);
}

model QueryRobotInfoListRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  auditStatus?: string(name='AuditStatus', description='auditStatus'),
}

model QueryRobotInfoListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryRobotInfoListWithOptions(request: QueryRobotInfoListRequest, runtime: Util.RuntimeOptions): QueryRobotInfoListResponse {
  Util.validateModel(request);
  return doRequest('QueryRobotInfoList', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryRobotInfoList(request: QueryRobotInfoListRequest): QueryRobotInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRobotInfoListWithOptions(request, runtime);
}

model BatchRobotSmartCallRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  calledShowNumber: string(name='CalledShowNumber', description='calledShowNumber'),
  corpName?: string(name='CorpName', description='corpName'),
  calledNumber: string(name='CalledNumber', description='calledNumber'),
  dialogId: string(name='DialogId', description='dialogId'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr', description='earlyMediaAsr'),
  taskName: string(name='TaskName', description='taskName'),
  scheduleTime?: long(name='ScheduleTime', description='scheduleTime'),
  scheduleCall?: boolean(name='ScheduleCall', description='scheduleCall'),
  ttsParam?: string(name='TtsParam', description='ttsParam'),
  ttsParamHead?: string(name='TtsParamHead', description='ttsParamHead'),
  isSelfLine?: boolean(name='IsSelfLine', description='isSelfLine'),
}

model BatchRobotSmartCallResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: string(name='TaskId', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function batchRobotSmartCallWithOptions(request: BatchRobotSmartCallRequest, runtime: Util.RuntimeOptions): BatchRobotSmartCallResponse {
  Util.validateModel(request);
  return doRequest('BatchRobotSmartCall', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function batchRobotSmartCall(request: BatchRobotSmartCallRequest): BatchRobotSmartCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRobotSmartCallWithOptions(request, runtime);
}

model QueryCallDetailByTaskIdRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  taskId: string(name='TaskId', description='taskId'),
  queryDate: long(name='QueryDate', description='queryDate'),
  callee: string(name='Callee', description='callee'),
}

model QueryCallDetailByTaskIdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryCallDetailByTaskIdWithOptions(request: QueryCallDetailByTaskIdRequest, runtime: Util.RuntimeOptions): QueryCallDetailByTaskIdResponse {
  Util.validateModel(request);
  return doRequest('QueryCallDetailByTaskId', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryCallDetailByTaskId(request: QueryCallDetailByTaskIdRequest): QueryCallDetailByTaskIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallDetailByTaskIdWithOptions(request, runtime);
}

model GetRtcTokenRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  userId: string(name='UserId', description='voipId'),
  deviceId: string(name='DeviceId', description='deviceId'),
  isCustomAccount?: boolean(name='IsCustomAccount', description='isCustomAccount'),
}

model GetRtcTokenResponse = {
  requestId: string(name='RequestId', description='requestId'),
  module: string(name='Module', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function getRtcTokenWithOptions(request: GetRtcTokenRequest, runtime: Util.RuntimeOptions): GetRtcTokenResponse {
  Util.validateModel(request);
  return doRequest('GetRtcToken', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function getRtcToken(request: GetRtcTokenRequest): GetRtcTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRtcTokenWithOptions(request, runtime);
}

model AddRtcAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  deviceId?: string(name='DeviceId', description='deviceId'),
}

model AddRtcAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
  module: string(name='Module', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function addRtcAccountWithOptions(request: AddRtcAccountRequest, runtime: Util.RuntimeOptions): AddRtcAccountResponse {
  Util.validateModel(request);
  return doRequest('AddRtcAccount', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function addRtcAccount(request: AddRtcAccountRequest): AddRtcAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRtcAccountWithOptions(request, runtime);
}

model VoipAddAccountRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  deviceId: string(name='DeviceId', description='deviceId'),
}

model VoipAddAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
  module: string(name='Module', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function voipAddAccountWithOptions(request: VoipAddAccountRequest, runtime: Util.RuntimeOptions): VoipAddAccountResponse {
  Util.validateModel(request);
  return doRequest('VoipAddAccount', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function voipAddAccount(request: VoipAddAccountRequest): VoipAddAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return voipAddAccountWithOptions(request, runtime);
}

model VoipGetTokenRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  voipId: string(name='VoipId', description='voipId'),
  deviceId: string(name='DeviceId', description='deviceId'),
  isCustomAccount?: boolean(name='IsCustomAccount', description='isCustomAccount'),
}

model VoipGetTokenResponse = {
  requestId: string(name='RequestId', description='requestId'),
  module: string(name='Module', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function voipGetTokenWithOptions(request: VoipGetTokenRequest, runtime: Util.RuntimeOptions): VoipGetTokenResponse {
  Util.validateModel(request);
  return doRequest('VoipGetToken', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function voipGetToken(request: VoipGetTokenRequest): VoipGetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return voipGetTokenWithOptions(request, runtime);
}

model SmartCallRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  calledShowNumber: string(name='CalledShowNumber', description='calledShowNumber'),
  calledNumber: string(name='CalledNumber', description='calledNumber'),
  voiceCode: string(name='VoiceCode', description='voiceCode'),
  recordFlag?: boolean(name='RecordFlag', description='recordFlag'),
  volume?: integer(name='Volume', description='volume'),
  speed?: integer(name='Speed', description='speed'),
  asrModelId?: string(name='AsrModelId', description='asrModelId'),
  pauseTime?: integer(name='PauseTime', description='pauseTime'),
  muteTime?: integer(name='MuteTime', description='muteTime'),
  actionCodeBreak?: boolean(name='ActionCodeBreak', description='actionCodeBreak'),
  outId?: string(name='OutId', description='outId'),
  dynamicId?: string(name='DynamicId', description='dynamicId'),
  earlyMediaAsr?: boolean(name='EarlyMediaAsr', description='earlyMediaAsr'),
  voiceCodeParam?: string(name='VoiceCodeParam', description='voiceCodeParam'),
  sessionTimeout?: integer(name='SessionTimeout', description='sessionTimeout'),
  actionCodeTimeBreak?: integer(name='ActionCodeTimeBreak', description='actionCodeTimeBreak'),
  ttsStyle?: string(name='TtsStyle', description='ttsStyle'),
  ttsVolume?: integer(name='TtsVolume', description='ttsVolume'),
  ttsSpeed?: integer(name='TtsSpeed', description='ttsSpeed'),
  ttsConf?: boolean(name='TtsConf', description='ttsConf'),
  asrBaseId?: string(name='AsrBaseId', description='asrBaseId'),
}

model SmartCallResponse = {
  requestId: string(name='RequestId', description='requestId'),
  callId: string(name='CallId', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function smartCallWithOptions(request: SmartCallRequest, runtime: Util.RuntimeOptions): SmartCallResponse {
  Util.validateModel(request);
  return doRequest('SmartCall', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function smartCall(request: SmartCallRequest): SmartCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return smartCallWithOptions(request, runtime);
}

model QueryCallDetailByCallIdRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  callId: string(name='CallId', description='callId'),
  prodId: long(name='ProdId', description='prodId'),
  queryDate: long(name='QueryDate', description='queryDate'),
}

model QueryCallDetailByCallIdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: string(name='Data', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function queryCallDetailByCallIdWithOptions(request: QueryCallDetailByCallIdRequest, runtime: Util.RuntimeOptions): QueryCallDetailByCallIdResponse {
  Util.validateModel(request);
  return doRequest('QueryCallDetailByCallId', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function queryCallDetailByCallId(request: QueryCallDetailByCallIdRequest): QueryCallDetailByCallIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCallDetailByCallIdWithOptions(request, runtime);
}

model CancelCallRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  callId: string(name='CallId', description='callId'),
}

model CancelCallResponse = {
  requestId: string(name='RequestId', description='requestId'),
  status: boolean(name='Status', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function cancelCallWithOptions(request: CancelCallRequest, runtime: Util.RuntimeOptions): CancelCallResponse {
  Util.validateModel(request);
  return doRequest('CancelCall', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function cancelCall(request: CancelCallRequest): CancelCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCallWithOptions(request, runtime);
}

model ClickToDialRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  callerShowNumber: string(name='CallerShowNumber', description='callerShowNumber'),
  callerNumber: string(name='CallerNumber', description='callerNumber'),
  calledShowNumber: string(name='CalledShowNumber', description='calledShowNumber'),
  calledNumber: string(name='CalledNumber', description='calledNumber'),
  recordFlag?: boolean(name='RecordFlag', description='recordFlag'),
  asrFlag?: boolean(name='AsrFlag', description='asrFlag'),
  sessionTimeout?: integer(name='SessionTimeout', description='sessionTimeout'),
  asrModelId?: string(name='AsrModelId', description='asrModelId'),
  outId?: string(name='OutId', description='outId'),
}

model ClickToDialResponse = {
  requestId: string(name='RequestId', description='requestId'),
  callId: string(name='CallId', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function clickToDialWithOptions(request: ClickToDialRequest, runtime: Util.RuntimeOptions): ClickToDialResponse {
  Util.validateModel(request);
  return doRequest('ClickToDial', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function clickToDial(request: ClickToDialRequest): ClickToDialResponse {
  var runtime = new Util.RuntimeOptions{};
  return clickToDialWithOptions(request, runtime);
}

model IvrCallRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  calledShowNumber: string(name='CalledShowNumber', description='calledShowNumber'),
  calledNumber: string(name='CalledNumber', description='calledNumber'),
  startCode: string(name='StartCode', description='startCode'),
  startTtsParams?: string(name='StartTtsParams', description='startTtsParams'),
  menuKeyMap?: [
    {
      key: string(name='Key', description='key'),
      code: string(name='Code', description='code'),
      ttsParams: string(name='TtsParams', description='ttsParams'),
    }
  ](name='MenuKeyMap', description='menuKeyMapList'),
  playTimes?: long(name='PlayTimes', description='playTimes'),
  byeCode?: string(name='ByeCode', description='byeCode'),
  byeTtsParams?: string(name='ByeTtsParams', description='byeTtsParams'),
  timeout?: integer(name='Timeout', description='timeout'),
  outId?: string(name='OutId', description='outId'),
}

model IvrCallResponse = {
  requestId: string(name='RequestId', description='requestId'),
  callId: string(name='CallId', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function ivrCallWithOptions(request: IvrCallRequest, runtime: Util.RuntimeOptions): IvrCallResponse {
  Util.validateModel(request);
  return doRequest('IvrCall', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function ivrCall(request: IvrCallRequest): IvrCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return ivrCallWithOptions(request, runtime);
}

model SingleCallByVoiceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  calledShowNumber: string(name='CalledShowNumber', description='calledShowNumber'),
  calledNumber: string(name='CalledNumber', description='calledNumber'),
  voiceCode: string(name='VoiceCode', description='voiceCode'),
  playTimes?: integer(name='PlayTimes', description='playTimes'),
  volume?: integer(name='Volume', description='volume'),
  speed?: integer(name='Speed', description='speed'),
  outId?: string(name='OutId', description='outId'),
}

model SingleCallByVoiceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  callId: string(name='CallId', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function singleCallByVoiceWithOptions(request: SingleCallByVoiceRequest, runtime: Util.RuntimeOptions): SingleCallByVoiceResponse {
  Util.validateModel(request);
  return doRequest('SingleCallByVoice', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function singleCallByVoice(request: SingleCallByVoiceRequest): SingleCallByVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return singleCallByVoiceWithOptions(request, runtime);
}

model SingleCallByTtsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='appKey'),
  ownerId?: long(name='OwnerId', description='ownerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='resourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='resourceOwnerId'),
  calledShowNumber: string(name='CalledShowNumber', description='calledShowNumber'),
  calledNumber: string(name='CalledNumber', description='calledNumber'),
  ttsCode: string(name='TtsCode', description='ttsCode'),
  ttsParam?: string(name='TtsParam', description='ttsParam'),
  playTimes?: integer(name='PlayTimes', description='playTimes'),
  volume?: integer(name='Volume', description='volume'),
  speed?: integer(name='Speed', description='speed'),
  outId?: string(name='OutId', description='outId'),
}

model SingleCallByTtsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  callId: string(name='CallId', description='module'),
  code: string(name='Code', description='code'),
  message: string(name='Message', description='message'),
}

async function singleCallByTtsWithOptions(request: SingleCallByTtsRequest, runtime: Util.RuntimeOptions): SingleCallByTtsResponse {
  Util.validateModel(request);
  return doRequest('SingleCallByTts', 'HTTPS', 'POST', '2017-05-25', 'AK', null, request, runtime);
}

async function singleCallByTts(request: SingleCallByTtsRequest): SingleCallByTtsResponse {
  var runtime = new Util.RuntimeOptions{};
  return singleCallByTtsWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
