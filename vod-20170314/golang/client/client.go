// This file is auto-generated, don't edit it. Thanks.
package client

import (
  util  "github.com/alibabacloud-go/tea-utils/service"
  rpc  "github.com/alibabacloud-go/tea-rpc/client"
  endpointutil  "github.com/alibabacloud-go/endpoint-util/service"
  "github.com/alibabacloud-go/tea/tea"
)

type DescribeVodDomainISPDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainISPDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainISPDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainISPDataRequest) SetOwnerId(v int64) *DescribeVodDomainISPDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainISPDataRequest) SetDomainName(v string) *DescribeVodDomainISPDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainISPDataRequest) SetStartTime(v string) *DescribeVodDomainISPDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainISPDataRequest) SetEndTime(v string) *DescribeVodDomainISPDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainISPDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  Value *DescribeVodDomainISPDataResponseValue `json:"Value" xml:"Value" require:"true" type:"Struct"`
}

func (s DescribeVodDomainISPDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainISPDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainISPDataResponse) SetRequestId(v string) *DescribeVodDomainISPDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainISPDataResponse) SetDomainName(v string) *DescribeVodDomainISPDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainISPDataResponse) SetDataInterval(v string) *DescribeVodDomainISPDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainISPDataResponse) SetStartTime(v string) *DescribeVodDomainISPDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainISPDataResponse) SetEndTime(v string) *DescribeVodDomainISPDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainISPDataResponse) SetValue(v *DescribeVodDomainISPDataResponseValue) *DescribeVodDomainISPDataResponse {
  s.Value = v
  return s
}

type DescribeVodDomainISPDataResponseValue struct {
  ISPProportionData []*DescribeVodDomainISPDataResponseValueISPProportionData `json:"ISPProportionData" xml:"ISPProportionData" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainISPDataResponseValue) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainISPDataResponseValue) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainISPDataResponseValue) SetISPProportionData(v []*DescribeVodDomainISPDataResponseValueISPProportionData) *DescribeVodDomainISPDataResponseValue {
  s.ISPProportionData = v
  return s
}

type DescribeVodDomainISPDataResponseValueISPProportionData struct     {
  ISP *string `json:"ISP" xml:"ISP" require:"true"`
  Proportion *string `json:"Proportion" xml:"Proportion" require:"true"`
  IspEname *string `json:"IspEname" xml:"IspEname" require:"true"`
  AvgObjectSize *string `json:"AvgObjectSize" xml:"AvgObjectSize" require:"true"`
  AvgResponseTime *string `json:"AvgResponseTime" xml:"AvgResponseTime" require:"true"`
  Bps *string `json:"Bps" xml:"Bps" require:"true"`
  Qps *string `json:"Qps" xml:"Qps" require:"true"`
  AvgResponseRate *string `json:"AvgResponseRate" xml:"AvgResponseRate" require:"true"`
  ReqErrRate *string `json:"ReqErrRate" xml:"ReqErrRate" require:"true"`
  TotalBytes *string `json:"TotalBytes" xml:"TotalBytes" require:"true"`
  BytesProportion *string `json:"BytesProportion" xml:"BytesProportion" require:"true"`
  TotalQuery *string `json:"TotalQuery" xml:"TotalQuery" require:"true"`
}

func (s DescribeVodDomainISPDataResponseValueISPProportionData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainISPDataResponseValueISPProportionData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetISP(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.ISP = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetProportion(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.Proportion = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetIspEname(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.IspEname = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetAvgObjectSize(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.AvgObjectSize = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetAvgResponseTime(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.AvgResponseTime = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetBps(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.Bps = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetQps(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.Qps = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetAvgResponseRate(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.AvgResponseRate = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetReqErrRate(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.ReqErrRate = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetTotalBytes(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.TotalBytes = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetBytesProportion(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.BytesProportion = &v
  return s
}

func (s *DescribeVodDomainISPDataResponseValueISPProportionData) SetTotalQuery(v string) *DescribeVodDomainISPDataResponseValueISPProportionData {
  s.TotalQuery = &v
  return s
}

type DescribeVodDomainRegionDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainRegionDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRegionDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRegionDataRequest) SetOwnerId(v int64) *DescribeVodDomainRegionDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainRegionDataRequest) SetDomainName(v string) *DescribeVodDomainRegionDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRegionDataRequest) SetStartTime(v string) *DescribeVodDomainRegionDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRegionDataRequest) SetEndTime(v string) *DescribeVodDomainRegionDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainRegionDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  Value *DescribeVodDomainRegionDataResponseValue `json:"Value" xml:"Value" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRegionDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRegionDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRegionDataResponse) SetRequestId(v string) *DescribeVodDomainRegionDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponse) SetDomainName(v string) *DescribeVodDomainRegionDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponse) SetDataInterval(v string) *DescribeVodDomainRegionDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponse) SetStartTime(v string) *DescribeVodDomainRegionDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponse) SetEndTime(v string) *DescribeVodDomainRegionDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponse) SetValue(v *DescribeVodDomainRegionDataResponseValue) *DescribeVodDomainRegionDataResponse {
  s.Value = v
  return s
}

type DescribeVodDomainRegionDataResponseValue struct {
  RegionProportionData []*DescribeVodDomainRegionDataResponseValueRegionProportionData `json:"RegionProportionData" xml:"RegionProportionData" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRegionDataResponseValue) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRegionDataResponseValue) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRegionDataResponseValue) SetRegionProportionData(v []*DescribeVodDomainRegionDataResponseValueRegionProportionData) *DescribeVodDomainRegionDataResponseValue {
  s.RegionProportionData = v
  return s
}

type DescribeVodDomainRegionDataResponseValueRegionProportionData struct     {
  Region *string `json:"Region" xml:"Region" require:"true"`
  Proportion *string `json:"Proportion" xml:"Proportion" require:"true"`
  RegionEname *string `json:"RegionEname" xml:"RegionEname" require:"true"`
  AvgObjectSize *string `json:"AvgObjectSize" xml:"AvgObjectSize" require:"true"`
  AvgResponseTime *string `json:"AvgResponseTime" xml:"AvgResponseTime" require:"true"`
  Bps *string `json:"Bps" xml:"Bps" require:"true"`
  Qps *string `json:"Qps" xml:"Qps" require:"true"`
  AvgResponseRate *string `json:"AvgResponseRate" xml:"AvgResponseRate" require:"true"`
  ReqErrRate *string `json:"ReqErrRate" xml:"ReqErrRate" require:"true"`
  TotalBytes *string `json:"TotalBytes" xml:"TotalBytes" require:"true"`
  BytesProportion *string `json:"BytesProportion" xml:"BytesProportion" require:"true"`
  TotalQuery *string `json:"TotalQuery" xml:"TotalQuery" require:"true"`
}

func (s DescribeVodDomainRegionDataResponseValueRegionProportionData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRegionDataResponseValueRegionProportionData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetRegion(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.Region = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetProportion(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.Proportion = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetRegionEname(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.RegionEname = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetAvgObjectSize(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.AvgObjectSize = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetAvgResponseTime(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.AvgResponseTime = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetBps(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.Bps = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetQps(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.Qps = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetAvgResponseRate(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.AvgResponseRate = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetReqErrRate(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.ReqErrRate = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetTotalBytes(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.TotalBytes = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetBytesProportion(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.BytesProportion = &v
  return s
}

func (s *DescribeVodDomainRegionDataResponseValueRegionProportionData) SetTotalQuery(v string) *DescribeVodDomainRegionDataResponseValueRegionProportionData {
  s.TotalQuery = &v
  return s
}

type DescribeVodDomainTopReferVisitRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  Percent *string `json:"Percent" xml:"Percent"`
}

func (s DescribeVodDomainTopReferVisitRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopReferVisitRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopReferVisitRequest) SetOwnerId(v int64) *DescribeVodDomainTopReferVisitRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitRequest) SetDomainName(v string) *DescribeVodDomainTopReferVisitRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitRequest) SetStartTime(v string) *DescribeVodDomainTopReferVisitRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitRequest) SetSortBy(v string) *DescribeVodDomainTopReferVisitRequest {
  s.SortBy = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitRequest) SetPercent(v string) *DescribeVodDomainTopReferVisitRequest {
  s.Percent = &v
  return s
}

type DescribeVodDomainTopReferVisitResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  TopReferList *DescribeVodDomainTopReferVisitResponseTopReferList `json:"TopReferList" xml:"TopReferList" require:"true" type:"Struct"`
}

func (s DescribeVodDomainTopReferVisitResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopReferVisitResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopReferVisitResponse) SetRequestId(v string) *DescribeVodDomainTopReferVisitResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitResponse) SetDomainName(v string) *DescribeVodDomainTopReferVisitResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitResponse) SetStartTime(v string) *DescribeVodDomainTopReferVisitResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitResponse) SetTopReferList(v *DescribeVodDomainTopReferVisitResponseTopReferList) *DescribeVodDomainTopReferVisitResponse {
  s.TopReferList = v
  return s
}

type DescribeVodDomainTopReferVisitResponseTopReferList struct {
  ReferList []*DescribeVodDomainTopReferVisitResponseTopReferListReferList `json:"ReferList" xml:"ReferList" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainTopReferVisitResponseTopReferList) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopReferVisitResponseTopReferList) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopReferVisitResponseTopReferList) SetReferList(v []*DescribeVodDomainTopReferVisitResponseTopReferListReferList) *DescribeVodDomainTopReferVisitResponseTopReferList {
  s.ReferList = v
  return s
}

type DescribeVodDomainTopReferVisitResponseTopReferListReferList struct     {
  ReferDetail *string `json:"ReferDetail" xml:"ReferDetail" require:"true"`
  VisitData *string `json:"VisitData" xml:"VisitData" require:"true"`
  VisitProportion *float32 `json:"VisitProportion" xml:"VisitProportion" require:"true"`
  Flow *string `json:"Flow" xml:"Flow" require:"true"`
  FlowProportion *float32 `json:"FlowProportion" xml:"FlowProportion" require:"true"`
}

func (s DescribeVodDomainTopReferVisitResponseTopReferListReferList) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopReferVisitResponseTopReferListReferList) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopReferVisitResponseTopReferListReferList) SetReferDetail(v string) *DescribeVodDomainTopReferVisitResponseTopReferListReferList {
  s.ReferDetail = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitResponseTopReferListReferList) SetVisitData(v string) *DescribeVodDomainTopReferVisitResponseTopReferListReferList {
  s.VisitData = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitResponseTopReferListReferList) SetVisitProportion(v float32) *DescribeVodDomainTopReferVisitResponseTopReferListReferList {
  s.VisitProportion = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitResponseTopReferListReferList) SetFlow(v string) *DescribeVodDomainTopReferVisitResponseTopReferListReferList {
  s.Flow = &v
  return s
}

func (s *DescribeVodDomainTopReferVisitResponseTopReferListReferList) SetFlowProportion(v float32) *DescribeVodDomainTopReferVisitResponseTopReferListReferList {
  s.FlowProportion = &v
  return s
}

type DescribeVodDomainTopUrlVisitRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  Percent *string `json:"Percent" xml:"Percent"`
}

func (s DescribeVodDomainTopUrlVisitRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitRequest) SetOwnerId(v int64) *DescribeVodDomainTopUrlVisitRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitRequest) SetDomainName(v string) *DescribeVodDomainTopUrlVisitRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitRequest) SetStartTime(v string) *DescribeVodDomainTopUrlVisitRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitRequest) SetSortBy(v string) *DescribeVodDomainTopUrlVisitRequest {
  s.SortBy = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitRequest) SetPercent(v string) *DescribeVodDomainTopUrlVisitRequest {
  s.Percent = &v
  return s
}

type DescribeVodDomainTopUrlVisitResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  AllUrlList *DescribeVodDomainTopUrlVisitResponseAllUrlList `json:"AllUrlList" xml:"AllUrlList" require:"true" type:"Struct"`
  Url200List *DescribeVodDomainTopUrlVisitResponseUrl200List `json:"Url200List" xml:"Url200List" require:"true" type:"Struct"`
  Url300List *DescribeVodDomainTopUrlVisitResponseUrl300List `json:"Url300List" xml:"Url300List" require:"true" type:"Struct"`
  Url400List *DescribeVodDomainTopUrlVisitResponseUrl400List `json:"Url400List" xml:"Url400List" require:"true" type:"Struct"`
  Url500List *DescribeVodDomainTopUrlVisitResponseUrl500List `json:"Url500List" xml:"Url500List" require:"true" type:"Struct"`
}

func (s DescribeVodDomainTopUrlVisitResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponse) SetRequestId(v string) *DescribeVodDomainTopUrlVisitResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponse) SetDomainName(v string) *DescribeVodDomainTopUrlVisitResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponse) SetStartTime(v string) *DescribeVodDomainTopUrlVisitResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponse) SetAllUrlList(v *DescribeVodDomainTopUrlVisitResponseAllUrlList) *DescribeVodDomainTopUrlVisitResponse {
  s.AllUrlList = v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponse) SetUrl200List(v *DescribeVodDomainTopUrlVisitResponseUrl200List) *DescribeVodDomainTopUrlVisitResponse {
  s.Url200List = v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponse) SetUrl300List(v *DescribeVodDomainTopUrlVisitResponseUrl300List) *DescribeVodDomainTopUrlVisitResponse {
  s.Url300List = v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponse) SetUrl400List(v *DescribeVodDomainTopUrlVisitResponseUrl400List) *DescribeVodDomainTopUrlVisitResponse {
  s.Url400List = v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponse) SetUrl500List(v *DescribeVodDomainTopUrlVisitResponseUrl500List) *DescribeVodDomainTopUrlVisitResponse {
  s.Url500List = v
  return s
}

type DescribeVodDomainTopUrlVisitResponseAllUrlList struct {
  UrlList []*DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList `json:"UrlList" xml:"UrlList" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainTopUrlVisitResponseAllUrlList) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseAllUrlList) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseAllUrlList) SetUrlList(v []*DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList) *DescribeVodDomainTopUrlVisitResponseAllUrlList {
  s.UrlList = v
  return s
}

type DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList struct     {
  UrlDetail *string `json:"UrlDetail" xml:"UrlDetail" require:"true"`
  VisitData *string `json:"VisitData" xml:"VisitData" require:"true"`
  VisitProportion *float32 `json:"VisitProportion" xml:"VisitProportion" require:"true"`
  Flow *string `json:"Flow" xml:"Flow" require:"true"`
  FlowProportion *float32 `json:"FlowProportion" xml:"FlowProportion" require:"true"`
}

func (s DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList) SetUrlDetail(v string) *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList {
  s.UrlDetail = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList) SetVisitData(v string) *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList {
  s.VisitData = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList) SetVisitProportion(v float32) *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList {
  s.VisitProportion = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList) SetFlow(v string) *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList {
  s.Flow = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList) SetFlowProportion(v float32) *DescribeVodDomainTopUrlVisitResponseAllUrlListUrlList {
  s.FlowProportion = &v
  return s
}

type DescribeVodDomainTopUrlVisitResponseUrl200List struct {
  UrlList []*DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList `json:"UrlList" xml:"UrlList" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainTopUrlVisitResponseUrl200List) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseUrl200List) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl200List) SetUrlList(v []*DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList) *DescribeVodDomainTopUrlVisitResponseUrl200List {
  s.UrlList = v
  return s
}

type DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList struct     {
  UrlDetail *string `json:"UrlDetail" xml:"UrlDetail" require:"true"`
  VisitData *string `json:"VisitData" xml:"VisitData" require:"true"`
  VisitProportion *float32 `json:"VisitProportion" xml:"VisitProportion" require:"true"`
  Flow *string `json:"Flow" xml:"Flow" require:"true"`
  FlowProportion *float32 `json:"FlowProportion" xml:"FlowProportion" require:"true"`
}

func (s DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList) SetUrlDetail(v string) *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList {
  s.UrlDetail = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList) SetVisitData(v string) *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList {
  s.VisitData = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList) SetVisitProportion(v float32) *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList {
  s.VisitProportion = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList) SetFlow(v string) *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList {
  s.Flow = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList) SetFlowProportion(v float32) *DescribeVodDomainTopUrlVisitResponseUrl200ListUrlList {
  s.FlowProportion = &v
  return s
}

type DescribeVodDomainTopUrlVisitResponseUrl300List struct {
  UrlList []*DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList `json:"UrlList" xml:"UrlList" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainTopUrlVisitResponseUrl300List) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseUrl300List) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl300List) SetUrlList(v []*DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList) *DescribeVodDomainTopUrlVisitResponseUrl300List {
  s.UrlList = v
  return s
}

type DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList struct     {
  UrlDetail *string `json:"UrlDetail" xml:"UrlDetail" require:"true"`
  VisitData *string `json:"VisitData" xml:"VisitData" require:"true"`
  VisitProportion *float32 `json:"VisitProportion" xml:"VisitProportion" require:"true"`
  Flow *string `json:"Flow" xml:"Flow" require:"true"`
  FlowProportion *float32 `json:"FlowProportion" xml:"FlowProportion" require:"true"`
}

func (s DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList) SetUrlDetail(v string) *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList {
  s.UrlDetail = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList) SetVisitData(v string) *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList {
  s.VisitData = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList) SetVisitProportion(v float32) *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList {
  s.VisitProportion = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList) SetFlow(v string) *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList {
  s.Flow = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList) SetFlowProportion(v float32) *DescribeVodDomainTopUrlVisitResponseUrl300ListUrlList {
  s.FlowProportion = &v
  return s
}

type DescribeVodDomainTopUrlVisitResponseUrl400List struct {
  UrlList []*DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList `json:"UrlList" xml:"UrlList" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainTopUrlVisitResponseUrl400List) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseUrl400List) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl400List) SetUrlList(v []*DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList) *DescribeVodDomainTopUrlVisitResponseUrl400List {
  s.UrlList = v
  return s
}

type DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList struct     {
  UrlDetail *string `json:"UrlDetail" xml:"UrlDetail" require:"true"`
  VisitData *string `json:"VisitData" xml:"VisitData" require:"true"`
  VisitProportion *float32 `json:"VisitProportion" xml:"VisitProportion" require:"true"`
  Flow *string `json:"Flow" xml:"Flow" require:"true"`
  FlowProportion *float32 `json:"FlowProportion" xml:"FlowProportion" require:"true"`
}

func (s DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList) SetUrlDetail(v string) *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList {
  s.UrlDetail = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList) SetVisitData(v string) *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList {
  s.VisitData = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList) SetVisitProportion(v float32) *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList {
  s.VisitProportion = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList) SetFlow(v string) *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList {
  s.Flow = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList) SetFlowProportion(v float32) *DescribeVodDomainTopUrlVisitResponseUrl400ListUrlList {
  s.FlowProportion = &v
  return s
}

type DescribeVodDomainTopUrlVisitResponseUrl500List struct {
  UrlList []*DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList `json:"UrlList" xml:"UrlList" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainTopUrlVisitResponseUrl500List) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseUrl500List) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl500List) SetUrlList(v []*DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList) *DescribeVodDomainTopUrlVisitResponseUrl500List {
  s.UrlList = v
  return s
}

type DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList struct     {
  UrlDetail *string `json:"UrlDetail" xml:"UrlDetail" require:"true"`
  VisitData *string `json:"VisitData" xml:"VisitData" require:"true"`
  VisitProportion *float32 `json:"VisitProportion" xml:"VisitProportion" require:"true"`
  Flow *string `json:"Flow" xml:"Flow" require:"true"`
  FlowProportion *float32 `json:"FlowProportion" xml:"FlowProportion" require:"true"`
}

func (s DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList) SetUrlDetail(v string) *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList {
  s.UrlDetail = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList) SetVisitData(v string) *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList {
  s.VisitData = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList) SetVisitProportion(v float32) *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList {
  s.VisitProportion = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList) SetFlow(v string) *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList {
  s.Flow = &v
  return s
}

func (s *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList) SetFlowProportion(v float32) *DescribeVodDomainTopUrlVisitResponseUrl500ListUrlList {
  s.FlowProportion = &v
  return s
}

type DescribeVodTopDomainsByFlowRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  Product *string `json:"Product" xml:"Product"`
  Limit *int64 `json:"Limit" xml:"Limit"`
}

func (s DescribeVodTopDomainsByFlowRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodTopDomainsByFlowRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodTopDomainsByFlowRequest) SetOwnerId(v int64) *DescribeVodTopDomainsByFlowRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowRequest) SetStartTime(v string) *DescribeVodTopDomainsByFlowRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowRequest) SetEndTime(v string) *DescribeVodTopDomainsByFlowRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowRequest) SetProduct(v string) *DescribeVodTopDomainsByFlowRequest {
  s.Product = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowRequest) SetLimit(v int64) *DescribeVodTopDomainsByFlowRequest {
  s.Limit = &v
  return s
}

type DescribeVodTopDomainsByFlowResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DomainCount *int64 `json:"DomainCount" xml:"DomainCount" require:"true"`
  DomainOnlineCount *int64 `json:"DomainOnlineCount" xml:"DomainOnlineCount" require:"true"`
  TopDomains *DescribeVodTopDomainsByFlowResponseTopDomains `json:"TopDomains" xml:"TopDomains" require:"true" type:"Struct"`
}

func (s DescribeVodTopDomainsByFlowResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodTopDomainsByFlowResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodTopDomainsByFlowResponse) SetRequestId(v string) *DescribeVodTopDomainsByFlowResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponse) SetStartTime(v string) *DescribeVodTopDomainsByFlowResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponse) SetEndTime(v string) *DescribeVodTopDomainsByFlowResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponse) SetDomainCount(v int64) *DescribeVodTopDomainsByFlowResponse {
  s.DomainCount = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponse) SetDomainOnlineCount(v int64) *DescribeVodTopDomainsByFlowResponse {
  s.DomainOnlineCount = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponse) SetTopDomains(v *DescribeVodTopDomainsByFlowResponseTopDomains) *DescribeVodTopDomainsByFlowResponse {
  s.TopDomains = v
  return s
}

type DescribeVodTopDomainsByFlowResponseTopDomains struct {
  TopDomain []*DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain `json:"TopDomain" xml:"TopDomain" require:"true" type:"Repeated"`
}

func (s DescribeVodTopDomainsByFlowResponseTopDomains) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodTopDomainsByFlowResponseTopDomains) GoString() string {
  return s.String()
}

func (s *DescribeVodTopDomainsByFlowResponseTopDomains) SetTopDomain(v []*DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) *DescribeVodTopDomainsByFlowResponseTopDomains {
  s.TopDomain = v
  return s
}

type DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain struct     {
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  Rank *int64 `json:"Rank" xml:"Rank" require:"true"`
  TotalTraffic *string `json:"TotalTraffic" xml:"TotalTraffic" require:"true"`
  TrafficPercent *string `json:"TrafficPercent" xml:"TrafficPercent" require:"true"`
  MaxBps *int64 `json:"MaxBps" xml:"MaxBps" require:"true"`
  MaxBpsTime *string `json:"MaxBpsTime" xml:"MaxBpsTime" require:"true"`
  TotalAccess *int64 `json:"TotalAccess" xml:"TotalAccess" require:"true"`
}

func (s DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) GoString() string {
  return s.String()
}

func (s *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) SetDomainName(v string) *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain {
  s.DomainName = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) SetRank(v int64) *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain {
  s.Rank = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) SetTotalTraffic(v string) *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain {
  s.TotalTraffic = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) SetTrafficPercent(v string) *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain {
  s.TrafficPercent = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) SetMaxBps(v int64) *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain {
  s.MaxBps = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) SetMaxBpsTime(v string) *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain {
  s.MaxBpsTime = &v
  return s
}

func (s *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain) SetTotalAccess(v int64) *DescribeVodTopDomainsByFlowResponseTopDomainsTopDomain {
  s.TotalAccess = &v
  return s
}

type DescribeVodDomainPvDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainPvDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainPvDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainPvDataRequest) SetOwnerId(v int64) *DescribeVodDomainPvDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainPvDataRequest) SetDomainName(v string) *DescribeVodDomainPvDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainPvDataRequest) SetStartTime(v string) *DescribeVodDomainPvDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainPvDataRequest) SetEndTime(v string) *DescribeVodDomainPvDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainPvDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  PvDataInterval *DescribeVodDomainPvDataResponsePvDataInterval `json:"PvDataInterval" xml:"PvDataInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainPvDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainPvDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainPvDataResponse) SetRequestId(v string) *DescribeVodDomainPvDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainPvDataResponse) SetDomainName(v string) *DescribeVodDomainPvDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainPvDataResponse) SetStartTime(v string) *DescribeVodDomainPvDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainPvDataResponse) SetPvDataInterval(v *DescribeVodDomainPvDataResponsePvDataInterval) *DescribeVodDomainPvDataResponse {
  s.PvDataInterval = v
  return s
}

type DescribeVodDomainPvDataResponsePvDataInterval struct {
  PvDataInterval []*DescribeVodDomainPvDataResponsePvDataIntervalPvDataInterval `json:"PvDataInterval" xml:"PvDataInterval" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainPvDataResponsePvDataInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainPvDataResponsePvDataInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainPvDataResponsePvDataInterval) SetPvDataInterval(v []*DescribeVodDomainPvDataResponsePvDataIntervalPvDataInterval) *DescribeVodDomainPvDataResponsePvDataInterval {
  s.PvDataInterval = v
  return s
}

type DescribeVodDomainPvDataResponsePvDataIntervalPvDataInterval struct     {
  Value *string `json:"Value" xml:"Value" require:"true"`
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeVodDomainPvDataResponsePvDataIntervalPvDataInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainPvDataResponsePvDataIntervalPvDataInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainPvDataResponsePvDataIntervalPvDataInterval) SetValue(v string) *DescribeVodDomainPvDataResponsePvDataIntervalPvDataInterval {
  s.Value = &v
  return s
}

func (s *DescribeVodDomainPvDataResponsePvDataIntervalPvDataInterval) SetTimeStamp(v string) *DescribeVodDomainPvDataResponsePvDataIntervalPvDataInterval {
  s.TimeStamp = &v
  return s
}

type DescribeVodDomainUvDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainUvDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainUvDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainUvDataRequest) SetOwnerId(v int64) *DescribeVodDomainUvDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainUvDataRequest) SetDomainName(v string) *DescribeVodDomainUvDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainUvDataRequest) SetStartTime(v string) *DescribeVodDomainUvDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainUvDataRequest) SetEndTime(v string) *DescribeVodDomainUvDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainUvDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  UvDataInterval *DescribeVodDomainUvDataResponseUvDataInterval `json:"UvDataInterval" xml:"UvDataInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainUvDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainUvDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainUvDataResponse) SetRequestId(v string) *DescribeVodDomainUvDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainUvDataResponse) SetDomainName(v string) *DescribeVodDomainUvDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainUvDataResponse) SetStartTime(v string) *DescribeVodDomainUvDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainUvDataResponse) SetUvDataInterval(v *DescribeVodDomainUvDataResponseUvDataInterval) *DescribeVodDomainUvDataResponse {
  s.UvDataInterval = v
  return s
}

type DescribeVodDomainUvDataResponseUvDataInterval struct {
  UvDataInterval []*DescribeVodDomainUvDataResponseUvDataIntervalUvDataInterval `json:"UvDataInterval" xml:"UvDataInterval" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainUvDataResponseUvDataInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainUvDataResponseUvDataInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainUvDataResponseUvDataInterval) SetUvDataInterval(v []*DescribeVodDomainUvDataResponseUvDataIntervalUvDataInterval) *DescribeVodDomainUvDataResponseUvDataInterval {
  s.UvDataInterval = v
  return s
}

type DescribeVodDomainUvDataResponseUvDataIntervalUvDataInterval struct     {
  Value *string `json:"Value" xml:"Value" require:"true"`
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeVodDomainUvDataResponseUvDataIntervalUvDataInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainUvDataResponseUvDataIntervalUvDataInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainUvDataResponseUvDataIntervalUvDataInterval) SetValue(v string) *DescribeVodDomainUvDataResponseUvDataIntervalUvDataInterval {
  s.Value = &v
  return s
}

func (s *DescribeVodDomainUvDataResponseUvDataIntervalUvDataInterval) SetTimeStamp(v string) *DescribeVodDomainUvDataResponseUvDataIntervalUvDataInterval {
  s.TimeStamp = &v
  return s
}

type GetOSSFlowStatisRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  StartTime *int64 `json:"StartTime" xml:"StartTime"`
  EndTime *int64 `json:"EndTime" xml:"EndTime"`
  StartTimeUTC *string `json:"StartTimeUTC" xml:"StartTimeUTC"`
  EndTimeUTC *string `json:"EndTimeUTC" xml:"EndTimeUTC"`
  Level *string `json:"Level" xml:"Level" require:"true"`
  Division *string `json:"Division" xml:"Division"`
}

func (s GetOSSFlowStatisRequest) String() string {
  return tea.Prettify(s)
}

func (s GetOSSFlowStatisRequest) GoString() string {
  return s.String()
}

func (s *GetOSSFlowStatisRequest) SetAccessKeyId(v string) *GetOSSFlowStatisRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetOwnerId(v string) *GetOSSFlowStatisRequest {
  s.OwnerId = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetResourceOwnerId(v string) *GetOSSFlowStatisRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetResourceOwnerAccount(v string) *GetOSSFlowStatisRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetOwnerAccount(v string) *GetOSSFlowStatisRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetStartTime(v int64) *GetOSSFlowStatisRequest {
  s.StartTime = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetEndTime(v int64) *GetOSSFlowStatisRequest {
  s.EndTime = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetStartTimeUTC(v string) *GetOSSFlowStatisRequest {
  s.StartTimeUTC = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetEndTimeUTC(v string) *GetOSSFlowStatisRequest {
  s.EndTimeUTC = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetLevel(v string) *GetOSSFlowStatisRequest {
  s.Level = &v
  return s
}

func (s *GetOSSFlowStatisRequest) SetDivision(v string) *GetOSSFlowStatisRequest {
  s.Division = &v
  return s
}

type GetOSSFlowStatisResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  OSSFlowStatisList []*GetOSSFlowStatisResponseOSSFlowStatisList `json:"OSSFlowStatisList" xml:"OSSFlowStatisList" require:"true" type:"Repeated"`
}

func (s GetOSSFlowStatisResponse) String() string {
  return tea.Prettify(s)
}

func (s GetOSSFlowStatisResponse) GoString() string {
  return s.String()
}

func (s *GetOSSFlowStatisResponse) SetRequestId(v string) *GetOSSFlowStatisResponse {
  s.RequestId = &v
  return s
}

func (s *GetOSSFlowStatisResponse) SetOSSFlowStatisList(v []*GetOSSFlowStatisResponseOSSFlowStatisList) *GetOSSFlowStatisResponse {
  s.OSSFlowStatisList = v
  return s
}

type GetOSSFlowStatisResponseOSSFlowStatisList struct     {
  StatTime *string `json:"StatTime" xml:"StatTime" require:"true"`
  StatTimeUTC *string `json:"StatTimeUTC" xml:"StatTimeUTC" require:"true"`
  NetworkOut *int64 `json:"NetworkOut" xml:"NetworkOut" require:"true"`
}

func (s GetOSSFlowStatisResponseOSSFlowStatisList) String() string {
  return tea.Prettify(s)
}

func (s GetOSSFlowStatisResponseOSSFlowStatisList) GoString() string {
  return s.String()
}

func (s *GetOSSFlowStatisResponseOSSFlowStatisList) SetStatTime(v string) *GetOSSFlowStatisResponseOSSFlowStatisList {
  s.StatTime = &v
  return s
}

func (s *GetOSSFlowStatisResponseOSSFlowStatisList) SetStatTimeUTC(v string) *GetOSSFlowStatisResponseOSSFlowStatisList {
  s.StatTimeUTC = &v
  return s
}

func (s *GetOSSFlowStatisResponseOSSFlowStatisList) SetNetworkOut(v int64) *GetOSSFlowStatisResponseOSSFlowStatisList {
  s.NetworkOut = &v
  return s
}

type ListAIStatisTypeRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ListAIStatisTypeRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAIStatisTypeRequest) GoString() string {
  return s.String()
}

func (s *ListAIStatisTypeRequest) SetAccessKeyId(v string) *ListAIStatisTypeRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAIStatisTypeRequest) SetOwnerId(v string) *ListAIStatisTypeRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAIStatisTypeRequest) SetResourceOwnerId(v string) *ListAIStatisTypeRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAIStatisTypeRequest) SetResourceOwnerAccount(v string) *ListAIStatisTypeRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAIStatisTypeRequest) SetOwnerAccount(v string) *ListAIStatisTypeRequest {
  s.OwnerAccount = &v
  return s
}

type ListAIStatisTypeResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Types *string `json:"Types" xml:"Types" require:"true"`
}

func (s ListAIStatisTypeResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAIStatisTypeResponse) GoString() string {
  return s.String()
}

func (s *ListAIStatisTypeResponse) SetRequestId(v string) *ListAIStatisTypeResponse {
  s.RequestId = &v
  return s
}

func (s *ListAIStatisTypeResponse) SetTypes(v string) *ListAIStatisTypeResponse {
  s.Types = &v
  return s
}

type GetAIStatisRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  StartTime *int64 `json:"StartTime" xml:"StartTime"`
  EndTime *int64 `json:"EndTime" xml:"EndTime"`
  StartTimeUTC *string `json:"StartTimeUTC" xml:"StartTimeUTC"`
  EndTimeUTC *string `json:"EndTimeUTC" xml:"EndTimeUTC"`
  Level *string `json:"Level" xml:"Level" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Division *string `json:"Division" xml:"Division"`
}

func (s GetAIStatisRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAIStatisRequest) GoString() string {
  return s.String()
}

func (s *GetAIStatisRequest) SetAccessKeyId(v string) *GetAIStatisRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetAIStatisRequest) SetOwnerId(v string) *GetAIStatisRequest {
  s.OwnerId = &v
  return s
}

func (s *GetAIStatisRequest) SetResourceOwnerId(v string) *GetAIStatisRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetAIStatisRequest) SetResourceOwnerAccount(v string) *GetAIStatisRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetAIStatisRequest) SetOwnerAccount(v string) *GetAIStatisRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetAIStatisRequest) SetStartTime(v int64) *GetAIStatisRequest {
  s.StartTime = &v
  return s
}

func (s *GetAIStatisRequest) SetEndTime(v int64) *GetAIStatisRequest {
  s.EndTime = &v
  return s
}

func (s *GetAIStatisRequest) SetStartTimeUTC(v string) *GetAIStatisRequest {
  s.StartTimeUTC = &v
  return s
}

func (s *GetAIStatisRequest) SetEndTimeUTC(v string) *GetAIStatisRequest {
  s.EndTimeUTC = &v
  return s
}

func (s *GetAIStatisRequest) SetLevel(v string) *GetAIStatisRequest {
  s.Level = &v
  return s
}

func (s *GetAIStatisRequest) SetType(v string) *GetAIStatisRequest {
  s.Type = &v
  return s
}

func (s *GetAIStatisRequest) SetDivision(v string) *GetAIStatisRequest {
  s.Division = &v
  return s
}

type GetAIStatisResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIStatisList []*GetAIStatisResponseAIStatisList `json:"AIStatisList" xml:"AIStatisList" require:"true" type:"Repeated"`
}

func (s GetAIStatisResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAIStatisResponse) GoString() string {
  return s.String()
}

func (s *GetAIStatisResponse) SetRequestId(v string) *GetAIStatisResponse {
  s.RequestId = &v
  return s
}

func (s *GetAIStatisResponse) SetAIStatisList(v []*GetAIStatisResponseAIStatisList) *GetAIStatisResponse {
  s.AIStatisList = v
  return s
}

type GetAIStatisResponseAIStatisList struct     {
  StatTime *string `json:"StatTime" xml:"StatTime" require:"true"`
  StatTimeUTC *string `json:"StatTimeUTC" xml:"StatTimeUTC" require:"true"`
  Duration *int64 `json:"Duration" xml:"Duration" require:"true"`
}

func (s GetAIStatisResponseAIStatisList) String() string {
  return tea.Prettify(s)
}

func (s GetAIStatisResponseAIStatisList) GoString() string {
  return s.String()
}

func (s *GetAIStatisResponseAIStatisList) SetStatTime(v string) *GetAIStatisResponseAIStatisList {
  s.StatTime = &v
  return s
}

func (s *GetAIStatisResponseAIStatisList) SetStatTimeUTC(v string) *GetAIStatisResponseAIStatisList {
  s.StatTimeUTC = &v
  return s
}

func (s *GetAIStatisResponseAIStatisList) SetDuration(v int64) *GetAIStatisResponseAIStatisList {
  s.Duration = &v
  return s
}

type SetDefaultAITemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s SetDefaultAITemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultAITemplateRequest) GoString() string {
  return s.String()
}

func (s *SetDefaultAITemplateRequest) SetOwnerId(v int64) *SetDefaultAITemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *SetDefaultAITemplateRequest) SetResourceOwnerAccount(v string) *SetDefaultAITemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetDefaultAITemplateRequest) SetResourceOwnerId(v int64) *SetDefaultAITemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetDefaultAITemplateRequest) SetTemplateId(v string) *SetDefaultAITemplateRequest {
  s.TemplateId = &v
  return s
}

type SetDefaultAITemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s SetDefaultAITemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultAITemplateResponse) GoString() string {
  return s.String()
}

func (s *SetDefaultAITemplateResponse) SetRequestId(v string) *SetDefaultAITemplateResponse {
  s.RequestId = &v
  return s
}

func (s *SetDefaultAITemplateResponse) SetTemplateId(v string) *SetDefaultAITemplateResponse {
  s.TemplateId = &v
  return s
}

type GetDefaultAITemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
}

func (s GetDefaultAITemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s GetDefaultAITemplateRequest) GoString() string {
  return s.String()
}

func (s *GetDefaultAITemplateRequest) SetOwnerId(v int64) *GetDefaultAITemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *GetDefaultAITemplateRequest) SetResourceOwnerAccount(v string) *GetDefaultAITemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetDefaultAITemplateRequest) SetResourceOwnerId(v int64) *GetDefaultAITemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetDefaultAITemplateRequest) SetTemplateType(v string) *GetDefaultAITemplateRequest {
  s.TemplateType = &v
  return s
}

type GetDefaultAITemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TemplateInfo *GetDefaultAITemplateResponseTemplateInfo `json:"TemplateInfo" xml:"TemplateInfo" require:"true" type:"Struct"`
}

func (s GetDefaultAITemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s GetDefaultAITemplateResponse) GoString() string {
  return s.String()
}

func (s *GetDefaultAITemplateResponse) SetRequestId(v string) *GetDefaultAITemplateResponse {
  s.RequestId = &v
  return s
}

func (s *GetDefaultAITemplateResponse) SetTemplateInfo(v *GetDefaultAITemplateResponseTemplateInfo) *GetDefaultAITemplateResponse {
  s.TemplateInfo = v
  return s
}

type GetDefaultAITemplateResponseTemplateInfo struct {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
  TemplateName *string `json:"TemplateName" xml:"TemplateName" require:"true"`
  TemplateConfig *string `json:"TemplateConfig" xml:"TemplateConfig" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
}

func (s GetDefaultAITemplateResponseTemplateInfo) String() string {
  return tea.Prettify(s)
}

func (s GetDefaultAITemplateResponseTemplateInfo) GoString() string {
  return s.String()
}

func (s *GetDefaultAITemplateResponseTemplateInfo) SetTemplateId(v string) *GetDefaultAITemplateResponseTemplateInfo {
  s.TemplateId = &v
  return s
}

func (s *GetDefaultAITemplateResponseTemplateInfo) SetTemplateType(v string) *GetDefaultAITemplateResponseTemplateInfo {
  s.TemplateType = &v
  return s
}

func (s *GetDefaultAITemplateResponseTemplateInfo) SetTemplateName(v string) *GetDefaultAITemplateResponseTemplateInfo {
  s.TemplateName = &v
  return s
}

func (s *GetDefaultAITemplateResponseTemplateInfo) SetTemplateConfig(v string) *GetDefaultAITemplateResponseTemplateInfo {
  s.TemplateConfig = &v
  return s
}

func (s *GetDefaultAITemplateResponseTemplateInfo) SetSource(v string) *GetDefaultAITemplateResponseTemplateInfo {
  s.Source = &v
  return s
}

func (s *GetDefaultAITemplateResponseTemplateInfo) SetIsDefault(v string) *GetDefaultAITemplateResponseTemplateInfo {
  s.IsDefault = &v
  return s
}

func (s *GetDefaultAITemplateResponseTemplateInfo) SetCreationTime(v string) *GetDefaultAITemplateResponseTemplateInfo {
  s.CreationTime = &v
  return s
}

func (s *GetDefaultAITemplateResponseTemplateInfo) SetModifyTime(v string) *GetDefaultAITemplateResponseTemplateInfo {
  s.ModifyTime = &v
  return s
}

type ListAITemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
}

func (s ListAITemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAITemplateRequest) GoString() string {
  return s.String()
}

func (s *ListAITemplateRequest) SetOwnerId(v int64) *ListAITemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAITemplateRequest) SetResourceOwnerAccount(v string) *ListAITemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAITemplateRequest) SetResourceOwnerId(v int64) *ListAITemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAITemplateRequest) SetTemplateType(v string) *ListAITemplateRequest {
  s.TemplateType = &v
  return s
}

type ListAITemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TemplateInfoList []*ListAITemplateResponseTemplateInfoList `json:"TemplateInfoList" xml:"TemplateInfoList" require:"true" type:"Repeated"`
}

func (s ListAITemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAITemplateResponse) GoString() string {
  return s.String()
}

func (s *ListAITemplateResponse) SetRequestId(v string) *ListAITemplateResponse {
  s.RequestId = &v
  return s
}

func (s *ListAITemplateResponse) SetTemplateInfoList(v []*ListAITemplateResponseTemplateInfoList) *ListAITemplateResponse {
  s.TemplateInfoList = v
  return s
}

type ListAITemplateResponseTemplateInfoList struct     {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
  TemplateName *string `json:"TemplateName" xml:"TemplateName" require:"true"`
  TemplateConfig *string `json:"TemplateConfig" xml:"TemplateConfig" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
}

func (s ListAITemplateResponseTemplateInfoList) String() string {
  return tea.Prettify(s)
}

func (s ListAITemplateResponseTemplateInfoList) GoString() string {
  return s.String()
}

func (s *ListAITemplateResponseTemplateInfoList) SetTemplateId(v string) *ListAITemplateResponseTemplateInfoList {
  s.TemplateId = &v
  return s
}

func (s *ListAITemplateResponseTemplateInfoList) SetTemplateType(v string) *ListAITemplateResponseTemplateInfoList {
  s.TemplateType = &v
  return s
}

func (s *ListAITemplateResponseTemplateInfoList) SetTemplateName(v string) *ListAITemplateResponseTemplateInfoList {
  s.TemplateName = &v
  return s
}

func (s *ListAITemplateResponseTemplateInfoList) SetTemplateConfig(v string) *ListAITemplateResponseTemplateInfoList {
  s.TemplateConfig = &v
  return s
}

func (s *ListAITemplateResponseTemplateInfoList) SetSource(v string) *ListAITemplateResponseTemplateInfoList {
  s.Source = &v
  return s
}

func (s *ListAITemplateResponseTemplateInfoList) SetIsDefault(v string) *ListAITemplateResponseTemplateInfoList {
  s.IsDefault = &v
  return s
}

func (s *ListAITemplateResponseTemplateInfoList) SetCreationTime(v string) *ListAITemplateResponseTemplateInfoList {
  s.CreationTime = &v
  return s
}

func (s *ListAITemplateResponseTemplateInfoList) SetModifyTime(v string) *ListAITemplateResponseTemplateInfoList {
  s.ModifyTime = &v
  return s
}

type GetAITemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s GetAITemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAITemplateRequest) GoString() string {
  return s.String()
}

func (s *GetAITemplateRequest) SetOwnerId(v int64) *GetAITemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *GetAITemplateRequest) SetResourceOwnerAccount(v string) *GetAITemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetAITemplateRequest) SetResourceOwnerId(v int64) *GetAITemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetAITemplateRequest) SetTemplateId(v string) *GetAITemplateRequest {
  s.TemplateId = &v
  return s
}

type GetAITemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TemplateInfo *GetAITemplateResponseTemplateInfo `json:"TemplateInfo" xml:"TemplateInfo" require:"true" type:"Struct"`
}

func (s GetAITemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAITemplateResponse) GoString() string {
  return s.String()
}

func (s *GetAITemplateResponse) SetRequestId(v string) *GetAITemplateResponse {
  s.RequestId = &v
  return s
}

func (s *GetAITemplateResponse) SetTemplateInfo(v *GetAITemplateResponseTemplateInfo) *GetAITemplateResponse {
  s.TemplateInfo = v
  return s
}

type GetAITemplateResponseTemplateInfo struct {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
  TemplateName *string `json:"TemplateName" xml:"TemplateName" require:"true"`
  TemplateConfig *string `json:"TemplateConfig" xml:"TemplateConfig" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
}

func (s GetAITemplateResponseTemplateInfo) String() string {
  return tea.Prettify(s)
}

func (s GetAITemplateResponseTemplateInfo) GoString() string {
  return s.String()
}

func (s *GetAITemplateResponseTemplateInfo) SetTemplateId(v string) *GetAITemplateResponseTemplateInfo {
  s.TemplateId = &v
  return s
}

func (s *GetAITemplateResponseTemplateInfo) SetTemplateType(v string) *GetAITemplateResponseTemplateInfo {
  s.TemplateType = &v
  return s
}

func (s *GetAITemplateResponseTemplateInfo) SetTemplateName(v string) *GetAITemplateResponseTemplateInfo {
  s.TemplateName = &v
  return s
}

func (s *GetAITemplateResponseTemplateInfo) SetTemplateConfig(v string) *GetAITemplateResponseTemplateInfo {
  s.TemplateConfig = &v
  return s
}

func (s *GetAITemplateResponseTemplateInfo) SetSource(v string) *GetAITemplateResponseTemplateInfo {
  s.Source = &v
  return s
}

func (s *GetAITemplateResponseTemplateInfo) SetIsDefault(v string) *GetAITemplateResponseTemplateInfo {
  s.IsDefault = &v
  return s
}

func (s *GetAITemplateResponseTemplateInfo) SetCreationTime(v string) *GetAITemplateResponseTemplateInfo {
  s.CreationTime = &v
  return s
}

func (s *GetAITemplateResponseTemplateInfo) SetModifyTime(v string) *GetAITemplateResponseTemplateInfo {
  s.ModifyTime = &v
  return s
}

type UpdateAITemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  TemplateName *string `json:"TemplateName" xml:"TemplateName" require:"true"`
  TemplateConfig *string `json:"TemplateConfig" xml:"TemplateConfig" require:"true"`
}

func (s UpdateAITemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateAITemplateRequest) GoString() string {
  return s.String()
}

func (s *UpdateAITemplateRequest) SetOwnerId(v int64) *UpdateAITemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateAITemplateRequest) SetResourceOwnerAccount(v string) *UpdateAITemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateAITemplateRequest) SetResourceOwnerId(v int64) *UpdateAITemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateAITemplateRequest) SetTemplateId(v string) *UpdateAITemplateRequest {
  s.TemplateId = &v
  return s
}

func (s *UpdateAITemplateRequest) SetTemplateName(v string) *UpdateAITemplateRequest {
  s.TemplateName = &v
  return s
}

func (s *UpdateAITemplateRequest) SetTemplateConfig(v string) *UpdateAITemplateRequest {
  s.TemplateConfig = &v
  return s
}

type UpdateAITemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s UpdateAITemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateAITemplateResponse) GoString() string {
  return s.String()
}

func (s *UpdateAITemplateResponse) SetRequestId(v string) *UpdateAITemplateResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateAITemplateResponse) SetTemplateId(v string) *UpdateAITemplateResponse {
  s.TemplateId = &v
  return s
}

type DeleteAITemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s DeleteAITemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteAITemplateRequest) GoString() string {
  return s.String()
}

func (s *DeleteAITemplateRequest) SetOwnerId(v int64) *DeleteAITemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteAITemplateRequest) SetResourceOwnerAccount(v string) *DeleteAITemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteAITemplateRequest) SetResourceOwnerId(v int64) *DeleteAITemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteAITemplateRequest) SetTemplateId(v string) *DeleteAITemplateRequest {
  s.TemplateId = &v
  return s
}

type DeleteAITemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s DeleteAITemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteAITemplateResponse) GoString() string {
  return s.String()
}

func (s *DeleteAITemplateResponse) SetRequestId(v string) *DeleteAITemplateResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteAITemplateResponse) SetTemplateId(v string) *DeleteAITemplateResponse {
  s.TemplateId = &v
  return s
}

type AddAITemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateName *string `json:"TemplateName" xml:"TemplateName" require:"true"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
  TemplateConfig *string `json:"TemplateConfig" xml:"TemplateConfig" require:"true"`
}

func (s AddAITemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s AddAITemplateRequest) GoString() string {
  return s.String()
}

func (s *AddAITemplateRequest) SetOwnerId(v int64) *AddAITemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *AddAITemplateRequest) SetResourceOwnerAccount(v string) *AddAITemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddAITemplateRequest) SetResourceOwnerId(v int64) *AddAITemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddAITemplateRequest) SetTemplateName(v string) *AddAITemplateRequest {
  s.TemplateName = &v
  return s
}

func (s *AddAITemplateRequest) SetTemplateType(v string) *AddAITemplateRequest {
  s.TemplateType = &v
  return s
}

func (s *AddAITemplateRequest) SetTemplateConfig(v string) *AddAITemplateRequest {
  s.TemplateConfig = &v
  return s
}

type AddAITemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s AddAITemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s AddAITemplateResponse) GoString() string {
  return s.String()
}

func (s *AddAITemplateResponse) SetRequestId(v string) *AddAITemplateResponse {
  s.RequestId = &v
  return s
}

func (s *AddAITemplateResponse) SetTemplateId(v string) *AddAITemplateResponse {
  s.TemplateId = &v
  return s
}

type GetMediaAuditResultTimelineRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
}

func (s GetMediaAuditResultTimelineRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultTimelineRequest) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultTimelineRequest) SetAccessKeyId(v string) *GetMediaAuditResultTimelineRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMediaAuditResultTimelineRequest) SetOwnerId(v string) *GetMediaAuditResultTimelineRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMediaAuditResultTimelineRequest) SetResourceOwnerAccount(v string) *GetMediaAuditResultTimelineRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMediaAuditResultTimelineRequest) SetResourceOwnerId(v int64) *GetMediaAuditResultTimelineRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMediaAuditResultTimelineRequest) SetMediaId(v string) *GetMediaAuditResultTimelineRequest {
  s.MediaId = &v
  return s
}

type GetMediaAuditResultTimelineResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaAuditResultTimeline *GetMediaAuditResultTimelineResponseMediaAuditResultTimeline `json:"MediaAuditResultTimeline" xml:"MediaAuditResultTimeline" require:"true" type:"Struct"`
}

func (s GetMediaAuditResultTimelineResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultTimelineResponse) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultTimelineResponse) SetRequestId(v string) *GetMediaAuditResultTimelineResponse {
  s.RequestId = &v
  return s
}

func (s *GetMediaAuditResultTimelineResponse) SetMediaAuditResultTimeline(v *GetMediaAuditResultTimelineResponseMediaAuditResultTimeline) *GetMediaAuditResultTimelineResponse {
  s.MediaAuditResultTimeline = v
  return s
}

type GetMediaAuditResultTimelineResponseMediaAuditResultTimeline struct {
  Porn []*GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn `json:"Porn" xml:"Porn" require:"true" type:"Repeated"`
  Terrorism []*GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism `json:"Terrorism" xml:"Terrorism" require:"true" type:"Repeated"`
}

func (s GetMediaAuditResultTimelineResponseMediaAuditResultTimeline) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultTimelineResponseMediaAuditResultTimeline) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultTimelineResponseMediaAuditResultTimeline) SetPorn(v []*GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn) *GetMediaAuditResultTimelineResponseMediaAuditResultTimeline {
  s.Porn = v
  return s
}

func (s *GetMediaAuditResultTimelineResponseMediaAuditResultTimeline) SetTerrorism(v []*GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism) *GetMediaAuditResultTimelineResponseMediaAuditResultTimeline {
  s.Terrorism = v
  return s
}

type GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Timestamp *string `json:"Timestamp" xml:"Timestamp" require:"true"`
}

func (s GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn) SetLabel(v string) *GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn) SetScore(v string) *GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn {
  s.Score = &v
  return s
}

func (s *GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn) SetTimestamp(v string) *GetMediaAuditResultTimelineResponseMediaAuditResultTimelinePorn {
  s.Timestamp = &v
  return s
}

type GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Timestamp *string `json:"Timestamp" xml:"Timestamp" require:"true"`
}

func (s GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism) SetLabel(v string) *GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism) SetScore(v string) *GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism {
  s.Score = &v
  return s
}

func (s *GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism) SetTimestamp(v string) *GetMediaAuditResultTimelineResponseMediaAuditResultTimelineTerrorism {
  s.Timestamp = &v
  return s
}

type GetMediaAuditResultDetailRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  PageNo *int `json:"PageNo" xml:"PageNo" require:"true"`
}

func (s GetMediaAuditResultDetailRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultDetailRequest) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultDetailRequest) SetAccessKeyId(v string) *GetMediaAuditResultDetailRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMediaAuditResultDetailRequest) SetOwnerId(v string) *GetMediaAuditResultDetailRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMediaAuditResultDetailRequest) SetResourceOwnerAccount(v string) *GetMediaAuditResultDetailRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMediaAuditResultDetailRequest) SetResourceOwnerId(v int64) *GetMediaAuditResultDetailRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMediaAuditResultDetailRequest) SetMediaId(v string) *GetMediaAuditResultDetailRequest {
  s.MediaId = &v
  return s
}

func (s *GetMediaAuditResultDetailRequest) SetPageNo(v int) *GetMediaAuditResultDetailRequest {
  s.PageNo = &v
  return s
}

type GetMediaAuditResultDetailResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaAuditResultDetail *GetMediaAuditResultDetailResponseMediaAuditResultDetail `json:"MediaAuditResultDetail" xml:"MediaAuditResultDetail" require:"true" type:"Struct"`
}

func (s GetMediaAuditResultDetailResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultDetailResponse) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultDetailResponse) SetRequestId(v string) *GetMediaAuditResultDetailResponse {
  s.RequestId = &v
  return s
}

func (s *GetMediaAuditResultDetailResponse) SetMediaAuditResultDetail(v *GetMediaAuditResultDetailResponseMediaAuditResultDetail) *GetMediaAuditResultDetailResponse {
  s.MediaAuditResultDetail = v
  return s
}

type GetMediaAuditResultDetailResponseMediaAuditResultDetail struct {
  Total *int `json:"Total" xml:"Total" require:"true"`
  List []*GetMediaAuditResultDetailResponseMediaAuditResultDetailList `json:"List" xml:"List" require:"true" type:"Repeated"`
}

func (s GetMediaAuditResultDetailResponseMediaAuditResultDetail) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultDetailResponseMediaAuditResultDetail) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultDetailResponseMediaAuditResultDetail) SetTotal(v int) *GetMediaAuditResultDetailResponseMediaAuditResultDetail {
  s.Total = &v
  return s
}

func (s *GetMediaAuditResultDetailResponseMediaAuditResultDetail) SetList(v []*GetMediaAuditResultDetailResponseMediaAuditResultDetailList) *GetMediaAuditResultDetailResponseMediaAuditResultDetail {
  s.List = v
  return s
}

type GetMediaAuditResultDetailResponseMediaAuditResultDetailList struct     {
  PornLabel *string `json:"PornLabel" xml:"PornLabel" require:"true"`
  PornScore *string `json:"PornScore" xml:"PornScore" require:"true"`
  TerrorismLabel *string `json:"TerrorismLabel" xml:"TerrorismLabel" require:"true"`
  TerrorismScore *string `json:"TerrorismScore" xml:"TerrorismScore" require:"true"`
  Timestamp *string `json:"Timestamp" xml:"Timestamp" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
}

func (s GetMediaAuditResultDetailResponseMediaAuditResultDetailList) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultDetailResponseMediaAuditResultDetailList) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultDetailResponseMediaAuditResultDetailList) SetPornLabel(v string) *GetMediaAuditResultDetailResponseMediaAuditResultDetailList {
  s.PornLabel = &v
  return s
}

func (s *GetMediaAuditResultDetailResponseMediaAuditResultDetailList) SetPornScore(v string) *GetMediaAuditResultDetailResponseMediaAuditResultDetailList {
  s.PornScore = &v
  return s
}

func (s *GetMediaAuditResultDetailResponseMediaAuditResultDetailList) SetTerrorismLabel(v string) *GetMediaAuditResultDetailResponseMediaAuditResultDetailList {
  s.TerrorismLabel = &v
  return s
}

func (s *GetMediaAuditResultDetailResponseMediaAuditResultDetailList) SetTerrorismScore(v string) *GetMediaAuditResultDetailResponseMediaAuditResultDetailList {
  s.TerrorismScore = &v
  return s
}

func (s *GetMediaAuditResultDetailResponseMediaAuditResultDetailList) SetTimestamp(v string) *GetMediaAuditResultDetailResponseMediaAuditResultDetailList {
  s.Timestamp = &v
  return s
}

func (s *GetMediaAuditResultDetailResponseMediaAuditResultDetailList) SetUrl(v string) *GetMediaAuditResultDetailResponseMediaAuditResultDetailList {
  s.Url = &v
  return s
}

type GetMediaAuditResultRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s GetMediaAuditResultRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultRequest) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultRequest) SetAccessKeyId(v string) *GetMediaAuditResultRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMediaAuditResultRequest) SetOwnerId(v string) *GetMediaAuditResultRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMediaAuditResultRequest) SetResourceOwnerAccount(v string) *GetMediaAuditResultRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMediaAuditResultRequest) SetResourceOwnerId(v int64) *GetMediaAuditResultRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMediaAuditResultRequest) SetMediaId(v string) *GetMediaAuditResultRequest {
  s.MediaId = &v
  return s
}

func (s *GetMediaAuditResultRequest) SetResourceRealOwnerId(v int64) *GetMediaAuditResultRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type GetMediaAuditResultResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaAuditResult *GetMediaAuditResultResponseMediaAuditResult `json:"MediaAuditResult" xml:"MediaAuditResult" require:"true" type:"Struct"`
}

func (s GetMediaAuditResultResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponse) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponse) SetRequestId(v string) *GetMediaAuditResultResponse {
  s.RequestId = &v
  return s
}

func (s *GetMediaAuditResultResponse) SetMediaAuditResult(v *GetMediaAuditResultResponseMediaAuditResult) *GetMediaAuditResultResponse {
  s.MediaAuditResult = v
  return s
}

type GetMediaAuditResultResponseMediaAuditResult struct {
  AbnormalModules *string `json:"AbnormalModules" xml:"AbnormalModules" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  ImageResult []*GetMediaAuditResultResponseMediaAuditResultImageResult `json:"ImageResult" xml:"ImageResult" require:"true" type:"Repeated"`
  TextResult []*GetMediaAuditResultResponseMediaAuditResultTextResult `json:"TextResult" xml:"TextResult" require:"true" type:"Repeated"`
  VideoResult *GetMediaAuditResultResponseMediaAuditResultVideoResult `json:"VideoResult" xml:"VideoResult" require:"true" type:"Struct"`
}

func (s GetMediaAuditResultResponseMediaAuditResult) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResult) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResult) SetAbnormalModules(v string) *GetMediaAuditResultResponseMediaAuditResult {
  s.AbnormalModules = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResult) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResult {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResult) SetSuggestion(v string) *GetMediaAuditResultResponseMediaAuditResult {
  s.Suggestion = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResult) SetImageResult(v []*GetMediaAuditResultResponseMediaAuditResultImageResult) *GetMediaAuditResultResponseMediaAuditResult {
  s.ImageResult = v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResult) SetTextResult(v []*GetMediaAuditResultResponseMediaAuditResultTextResult) *GetMediaAuditResultResponseMediaAuditResult {
  s.TextResult = v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResult) SetVideoResult(v *GetMediaAuditResultResponseMediaAuditResultVideoResult) *GetMediaAuditResultResponseMediaAuditResult {
  s.VideoResult = v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultImageResult struct     {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
  Result []*GetMediaAuditResultResponseMediaAuditResultImageResultResult `json:"Result" xml:"Result" require:"true" type:"Repeated"`
}

func (s GetMediaAuditResultResponseMediaAuditResultImageResult) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultImageResult) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultImageResult) SetSuggestion(v string) *GetMediaAuditResultResponseMediaAuditResultImageResult {
  s.Suggestion = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultImageResult) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultImageResult {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultImageResult) SetType(v string) *GetMediaAuditResultResponseMediaAuditResultImageResult {
  s.Type = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultImageResult) SetUrl(v string) *GetMediaAuditResultResponseMediaAuditResultImageResult {
  s.Url = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultImageResult) SetResult(v []*GetMediaAuditResultResponseMediaAuditResultImageResultResult) *GetMediaAuditResultResponseMediaAuditResultImageResult {
  s.Result = v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultImageResultResult struct     {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Scene *string `json:"Scene" xml:"Scene" require:"true"`
}

func (s GetMediaAuditResultResponseMediaAuditResultImageResultResult) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultImageResultResult) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultImageResultResult) SetSuggestion(v string) *GetMediaAuditResultResponseMediaAuditResultImageResultResult {
  s.Suggestion = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultImageResultResult) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultImageResultResult {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultImageResultResult) SetScore(v string) *GetMediaAuditResultResponseMediaAuditResultImageResultResult {
  s.Score = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultImageResultResult) SetScene(v string) *GetMediaAuditResultResponseMediaAuditResultImageResultResult {
  s.Scene = &v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultTextResult struct     {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Scene *string `json:"Scene" xml:"Scene" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Content *string `json:"Content" xml:"Content" require:"true"`
}

func (s GetMediaAuditResultResponseMediaAuditResultTextResult) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultTextResult) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultTextResult) SetSuggestion(v string) *GetMediaAuditResultResponseMediaAuditResultTextResult {
  s.Suggestion = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultTextResult) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultTextResult {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultTextResult) SetScore(v string) *GetMediaAuditResultResponseMediaAuditResultTextResult {
  s.Score = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultTextResult) SetScene(v string) *GetMediaAuditResultResponseMediaAuditResultTextResult {
  s.Scene = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultTextResult) SetType(v string) *GetMediaAuditResultResponseMediaAuditResultTextResult {
  s.Type = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultTextResult) SetContent(v string) *GetMediaAuditResultResponseMediaAuditResultTextResult {
  s.Content = &v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultVideoResult struct {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  TerrorismResult *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult `json:"TerrorismResult" xml:"TerrorismResult" require:"true" type:"Struct"`
  PornResult *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult `json:"PornResult" xml:"PornResult" require:"true" type:"Struct"`
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResult) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResult) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResult) SetSuggestion(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResult {
  s.Suggestion = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResult) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResult {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResult) SetTerrorismResult(v *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult) *GetMediaAuditResultResponseMediaAuditResultVideoResult {
  s.TerrorismResult = v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResult) SetPornResult(v *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult) *GetMediaAuditResultResponseMediaAuditResultVideoResult {
  s.PornResult = v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult struct {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  MaxScore *string `json:"MaxScore" xml:"MaxScore" require:"true"`
  AverageScore *string `json:"AverageScore" xml:"AverageScore" require:"true"`
  CounterList []*GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultCounterList `json:"CounterList" xml:"CounterList" require:"true" type:"Repeated"`
  TopList []*GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList `json:"TopList" xml:"TopList" require:"true" type:"Repeated"`
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult) SetSuggestion(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult {
  s.Suggestion = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult) SetMaxScore(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult {
  s.MaxScore = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult) SetAverageScore(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult {
  s.AverageScore = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult) SetCounterList(v []*GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultCounterList) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult {
  s.CounterList = v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult) SetTopList(v []*GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResult {
  s.TopList = v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultCounterList struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Count *int `json:"Count" xml:"Count" require:"true"`
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultCounterList) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultCounterList) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultCounterList) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultCounterList {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultCounterList) SetCount(v int) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultCounterList {
  s.Count = &v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Timestamp *string `json:"Timestamp" xml:"Timestamp" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList) SetScore(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList {
  s.Score = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList) SetTimestamp(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList {
  s.Timestamp = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList) SetUrl(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultTerrorismResultTopList {
  s.Url = &v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult struct {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  MaxScore *string `json:"MaxScore" xml:"MaxScore" require:"true"`
  AverageScore *string `json:"AverageScore" xml:"AverageScore" require:"true"`
  CounterList []*GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultCounterList `json:"CounterList" xml:"CounterList" require:"true" type:"Repeated"`
  TopList []*GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList `json:"TopList" xml:"TopList" require:"true" type:"Repeated"`
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult) SetSuggestion(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult {
  s.Suggestion = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult) SetMaxScore(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult {
  s.MaxScore = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult) SetAverageScore(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult {
  s.AverageScore = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult) SetCounterList(v []*GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultCounterList) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult {
  s.CounterList = v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult) SetTopList(v []*GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResult {
  s.TopList = v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultCounterList struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Count *int `json:"Count" xml:"Count" require:"true"`
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultCounterList) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultCounterList) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultCounterList) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultCounterList {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultCounterList) SetCount(v int) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultCounterList {
  s.Count = &v
  return s
}

type GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Timestamp *string `json:"Timestamp" xml:"Timestamp" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList) String() string {
  return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList) GoString() string {
  return s.String()
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList) SetLabel(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList {
  s.Label = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList) SetScore(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList {
  s.Score = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList) SetTimestamp(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList {
  s.Timestamp = &v
  return s
}

func (s *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList) SetUrl(v string) *GetMediaAuditResultResponseMediaAuditResultVideoResultPornResultTopList {
  s.Url = &v
  return s
}

type SubmitAIMediaAuditJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId"`
}

func (s SubmitAIMediaAuditJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIMediaAuditJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitAIMediaAuditJobRequest) SetAccessKeyId(v string) *SubmitAIMediaAuditJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitAIMediaAuditJobRequest) SetOwnerId(v string) *SubmitAIMediaAuditJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitAIMediaAuditJobRequest) SetResourceOwnerAccount(v string) *SubmitAIMediaAuditJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitAIMediaAuditJobRequest) SetResourceOwnerId(v int64) *SubmitAIMediaAuditJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitAIMediaAuditJobRequest) SetMediaId(v string) *SubmitAIMediaAuditJobRequest {
  s.MediaId = &v
  return s
}

func (s *SubmitAIMediaAuditJobRequest) SetTemplateId(v string) *SubmitAIMediaAuditJobRequest {
  s.TemplateId = &v
  return s
}

type SubmitAIMediaAuditJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s SubmitAIMediaAuditJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIMediaAuditJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitAIMediaAuditJobResponse) SetRequestId(v string) *SubmitAIMediaAuditJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitAIMediaAuditJobResponse) SetMediaId(v string) *SubmitAIMediaAuditJobResponse {
  s.MediaId = &v
  return s
}

func (s *SubmitAIMediaAuditJobResponse) SetJobId(v string) *SubmitAIMediaAuditJobResponse {
  s.JobId = &v
  return s
}

type GetAIMediaAuditJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s GetAIMediaAuditJobRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobRequest) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobRequest) SetAccessKeyId(v string) *GetAIMediaAuditJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetAIMediaAuditJobRequest) SetOwnerId(v string) *GetAIMediaAuditJobRequest {
  s.OwnerId = &v
  return s
}

func (s *GetAIMediaAuditJobRequest) SetResourceOwnerAccount(v string) *GetAIMediaAuditJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetAIMediaAuditJobRequest) SetResourceOwnerId(v int64) *GetAIMediaAuditJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetAIMediaAuditJobRequest) SetJobId(v string) *GetAIMediaAuditJobRequest {
  s.JobId = &v
  return s
}

type GetAIMediaAuditJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaAuditJob *GetAIMediaAuditJobResponseMediaAuditJob `json:"MediaAuditJob" xml:"MediaAuditJob" require:"true" type:"Struct"`
}

func (s GetAIMediaAuditJobResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponse) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponse) SetRequestId(v string) *GetAIMediaAuditJobResponse {
  s.RequestId = &v
  return s
}

func (s *GetAIMediaAuditJobResponse) SetMediaAuditJob(v *GetAIMediaAuditJobResponseMediaAuditJob) *GetAIMediaAuditJobResponse {
  s.MediaAuditJob = v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJob struct {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  CompleteTime *string `json:"CompleteTime" xml:"CompleteTime" require:"true"`
  Data *GetAIMediaAuditJobResponseMediaAuditJobData `json:"Data" xml:"Data" require:"true" type:"Struct"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJob) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJob) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJob) SetJobId(v string) *GetAIMediaAuditJobResponseMediaAuditJob {
  s.JobId = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJob) SetMediaId(v string) *GetAIMediaAuditJobResponseMediaAuditJob {
  s.MediaId = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJob) SetType(v string) *GetAIMediaAuditJobResponseMediaAuditJob {
  s.Type = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJob) SetStatus(v string) *GetAIMediaAuditJobResponseMediaAuditJob {
  s.Status = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJob) SetCode(v string) *GetAIMediaAuditJobResponseMediaAuditJob {
  s.Code = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJob) SetMessage(v string) *GetAIMediaAuditJobResponseMediaAuditJob {
  s.Message = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJob) SetCreationTime(v string) *GetAIMediaAuditJobResponseMediaAuditJob {
  s.CreationTime = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJob) SetCompleteTime(v string) *GetAIMediaAuditJobResponseMediaAuditJob {
  s.CompleteTime = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJob) SetData(v *GetAIMediaAuditJobResponseMediaAuditJobData) *GetAIMediaAuditJobResponseMediaAuditJob {
  s.Data = v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobData struct {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  AbnormalModules *string `json:"AbnormalModules" xml:"AbnormalModules" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  ImageResult []*GetAIMediaAuditJobResponseMediaAuditJobDataImageResult `json:"ImageResult" xml:"ImageResult" require:"true" type:"Repeated"`
  TextResult []*GetAIMediaAuditJobResponseMediaAuditJobDataTextResult `json:"TextResult" xml:"TextResult" require:"true" type:"Repeated"`
  VideoResult *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult `json:"VideoResult" xml:"VideoResult" require:"true" type:"Struct"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobData) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobData) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobData) SetSuggestion(v string) *GetAIMediaAuditJobResponseMediaAuditJobData {
  s.Suggestion = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobData) SetAbnormalModules(v string) *GetAIMediaAuditJobResponseMediaAuditJobData {
  s.AbnormalModules = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobData) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobData {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobData) SetImageResult(v []*GetAIMediaAuditJobResponseMediaAuditJobDataImageResult) *GetAIMediaAuditJobResponseMediaAuditJobData {
  s.ImageResult = v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobData) SetTextResult(v []*GetAIMediaAuditJobResponseMediaAuditJobDataTextResult) *GetAIMediaAuditJobResponseMediaAuditJobData {
  s.TextResult = v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobData) SetVideoResult(v *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult) *GetAIMediaAuditJobResponseMediaAuditJobData {
  s.VideoResult = v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataImageResult struct     {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
  Result []*GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult `json:"Result" xml:"Result" require:"true" type:"Repeated"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataImageResult) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataImageResult) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult) SetSuggestion(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult {
  s.Suggestion = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult) SetType(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult {
  s.Type = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult) SetUrl(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult {
  s.Url = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult) SetResult(v []*GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult) *GetAIMediaAuditJobResponseMediaAuditJobDataImageResult {
  s.Result = v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult struct     {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Scene *string `json:"Scene" xml:"Scene" require:"true"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult) SetSuggestion(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult {
  s.Suggestion = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult) SetScore(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult {
  s.Score = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult) SetScene(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataImageResultResult {
  s.Scene = &v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataTextResult struct     {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Scene *string `json:"Scene" xml:"Scene" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Content *string `json:"Content" xml:"Content" require:"true"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataTextResult) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataTextResult) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult) SetSuggestion(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult {
  s.Suggestion = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult) SetScore(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult {
  s.Score = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult) SetScene(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult {
  s.Scene = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult) SetType(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult {
  s.Type = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult) SetContent(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataTextResult {
  s.Content = &v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult struct {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  TerrorismResult *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult `json:"TerrorismResult" xml:"TerrorismResult" require:"true" type:"Struct"`
  PornResult *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult `json:"PornResult" xml:"PornResult" require:"true" type:"Struct"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult) SetSuggestion(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult {
  s.Suggestion = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult) SetTerrorismResult(v *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult {
  s.TerrorismResult = v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult) SetPornResult(v *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResult {
  s.PornResult = v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult struct {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  MaxScore *string `json:"MaxScore" xml:"MaxScore" require:"true"`
  AverageScore *string `json:"AverageScore" xml:"AverageScore" require:"true"`
  CounterList []*GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultCounterList `json:"CounterList" xml:"CounterList" require:"true" type:"Repeated"`
  TopList []*GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList `json:"TopList" xml:"TopList" require:"true" type:"Repeated"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult) SetSuggestion(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult {
  s.Suggestion = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult) SetMaxScore(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult {
  s.MaxScore = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult) SetAverageScore(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult {
  s.AverageScore = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult) SetCounterList(v []*GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultCounterList) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult {
  s.CounterList = v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult) SetTopList(v []*GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResult {
  s.TopList = v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultCounterList struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Count *int `json:"Count" xml:"Count" require:"true"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultCounterList) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultCounterList) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultCounterList) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultCounterList {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultCounterList) SetCount(v int) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultCounterList {
  s.Count = &v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Timestamp *string `json:"Timestamp" xml:"Timestamp" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList) SetScore(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList {
  s.Score = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList) SetTimestamp(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList {
  s.Timestamp = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList) SetUrl(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultTerrorismResultTopList {
  s.Url = &v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult struct {
  Suggestion *string `json:"Suggestion" xml:"Suggestion" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  MaxScore *string `json:"MaxScore" xml:"MaxScore" require:"true"`
  AverageScore *string `json:"AverageScore" xml:"AverageScore" require:"true"`
  CounterList []*GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultCounterList `json:"CounterList" xml:"CounterList" require:"true" type:"Repeated"`
  TopList []*GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList `json:"TopList" xml:"TopList" require:"true" type:"Repeated"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult) SetSuggestion(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult {
  s.Suggestion = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult) SetMaxScore(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult {
  s.MaxScore = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult) SetAverageScore(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult {
  s.AverageScore = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult) SetCounterList(v []*GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultCounterList) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult {
  s.CounterList = v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult) SetTopList(v []*GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResult {
  s.TopList = v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultCounterList struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Count *int `json:"Count" xml:"Count" require:"true"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultCounterList) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultCounterList) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultCounterList) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultCounterList {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultCounterList) SetCount(v int) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultCounterList {
  s.Count = &v
  return s
}

type GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList struct     {
  Label *string `json:"Label" xml:"Label" require:"true"`
  Score *string `json:"Score" xml:"Score" require:"true"`
  Timestamp *string `json:"Timestamp" xml:"Timestamp" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList) String() string {
  return tea.Prettify(s)
}

func (s GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList) GoString() string {
  return s.String()
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList) SetLabel(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList {
  s.Label = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList) SetScore(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList {
  s.Score = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList) SetTimestamp(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList {
  s.Timestamp = &v
  return s
}

func (s *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList) SetUrl(v string) *GetAIMediaAuditJobResponseMediaAuditJobDataVideoResultPornResultTopList {
  s.Url = &v
  return s
}

type DisplayAIAuditSwitchRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
}

func (s DisplayAIAuditSwitchRequest) String() string {
  return tea.Prettify(s)
}

func (s DisplayAIAuditSwitchRequest) GoString() string {
  return s.String()
}

func (s *DisplayAIAuditSwitchRequest) SetOwnerId(v int64) *DisplayAIAuditSwitchRequest {
  s.OwnerId = &v
  return s
}

type DisplayAIAuditSwitchResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  IsDisplay *bool `json:"IsDisplay" xml:"IsDisplay" require:"true"`
}

func (s DisplayAIAuditSwitchResponse) String() string {
  return tea.Prettify(s)
}

func (s DisplayAIAuditSwitchResponse) GoString() string {
  return s.String()
}

func (s *DisplayAIAuditSwitchResponse) SetRequestId(v string) *DisplayAIAuditSwitchResponse {
  s.RequestId = &v
  return s
}

func (s *DisplayAIAuditSwitchResponse) SetIsDisplay(v bool) *DisplayAIAuditSwitchResponse {
  s.IsDisplay = &v
  return s
}

type DescribePlayVideoStatisRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s DescribePlayVideoStatisRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribePlayVideoStatisRequest) GoString() string {
  return s.String()
}

func (s *DescribePlayVideoStatisRequest) SetOwnerId(v int64) *DescribePlayVideoStatisRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribePlayVideoStatisRequest) SetStartTime(v string) *DescribePlayVideoStatisRequest {
  s.StartTime = &v
  return s
}

func (s *DescribePlayVideoStatisRequest) SetEndTime(v string) *DescribePlayVideoStatisRequest {
  s.EndTime = &v
  return s
}

func (s *DescribePlayVideoStatisRequest) SetVideoId(v string) *DescribePlayVideoStatisRequest {
  s.VideoId = &v
  return s
}

type DescribePlayVideoStatisResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VideoPlayStatisDetails *DescribePlayVideoStatisResponseVideoPlayStatisDetails `json:"VideoPlayStatisDetails" xml:"VideoPlayStatisDetails" require:"true" type:"Struct"`
}

func (s DescribePlayVideoStatisResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribePlayVideoStatisResponse) GoString() string {
  return s.String()
}

func (s *DescribePlayVideoStatisResponse) SetRequestId(v string) *DescribePlayVideoStatisResponse {
  s.RequestId = &v
  return s
}

func (s *DescribePlayVideoStatisResponse) SetVideoPlayStatisDetails(v *DescribePlayVideoStatisResponseVideoPlayStatisDetails) *DescribePlayVideoStatisResponse {
  s.VideoPlayStatisDetails = v
  return s
}

type DescribePlayVideoStatisResponseVideoPlayStatisDetails struct {
  VideoPlayStatisDetail []*DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail `json:"VideoPlayStatisDetail" xml:"VideoPlayStatisDetail" require:"true" type:"Repeated"`
}

func (s DescribePlayVideoStatisResponseVideoPlayStatisDetails) String() string {
  return tea.Prettify(s)
}

func (s DescribePlayVideoStatisResponseVideoPlayStatisDetails) GoString() string {
  return s.String()
}

func (s *DescribePlayVideoStatisResponseVideoPlayStatisDetails) SetVideoPlayStatisDetail(v []*DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail) *DescribePlayVideoStatisResponseVideoPlayStatisDetails {
  s.VideoPlayStatisDetail = v
  return s
}

type DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail struct     {
  Date *string `json:"Date" xml:"Date" require:"true"`
  PlayDuration *string `json:"PlayDuration" xml:"PlayDuration" require:"true"`
  VV *string `json:"VV" xml:"VV" require:"true"`
  UV *string `json:"UV" xml:"UV" require:"true"`
  PlayRange *string `json:"PlayRange" xml:"PlayRange" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
}

func (s DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail) String() string {
  return tea.Prettify(s)
}

func (s DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail) GoString() string {
  return s.String()
}

func (s *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail) SetDate(v string) *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail {
  s.Date = &v
  return s
}

func (s *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail) SetPlayDuration(v string) *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail {
  s.PlayDuration = &v
  return s
}

func (s *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail) SetVV(v string) *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail {
  s.VV = &v
  return s
}

func (s *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail) SetUV(v string) *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail {
  s.UV = &v
  return s
}

func (s *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail) SetPlayRange(v string) *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail {
  s.PlayRange = &v
  return s
}

func (s *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail) SetTitle(v string) *DescribePlayVideoStatisResponseVideoPlayStatisDetailsVideoPlayStatisDetail {
  s.Title = &v
  return s
}

type TransferMediaDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId"`
  VideoInfo *string `json:"VideoInfo" xml:"VideoInfo"`
  MezzanineInfo *string `json:"MezzanineInfo" xml:"MezzanineInfo"`
  StreamInfos *string `json:"StreamInfos" xml:"StreamInfos"`
}

func (s TransferMediaDataRequest) String() string {
  return tea.Prettify(s)
}

func (s TransferMediaDataRequest) GoString() string {
  return s.String()
}

func (s *TransferMediaDataRequest) SetOwnerId(v int64) *TransferMediaDataRequest {
  s.OwnerId = &v
  return s
}

func (s *TransferMediaDataRequest) SetResourceOwnerAccount(v string) *TransferMediaDataRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *TransferMediaDataRequest) SetResourceOwnerId(v int64) *TransferMediaDataRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *TransferMediaDataRequest) SetResourceRealOwnerId(v int64) *TransferMediaDataRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *TransferMediaDataRequest) SetVideoId(v string) *TransferMediaDataRequest {
  s.VideoId = &v
  return s
}

func (s *TransferMediaDataRequest) SetVideoInfo(v string) *TransferMediaDataRequest {
  s.VideoInfo = &v
  return s
}

func (s *TransferMediaDataRequest) SetMezzanineInfo(v string) *TransferMediaDataRequest {
  s.MezzanineInfo = &v
  return s
}

func (s *TransferMediaDataRequest) SetStreamInfos(v string) *TransferMediaDataRequest {
  s.StreamInfos = &v
  return s
}

type TransferMediaDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s TransferMediaDataResponse) String() string {
  return tea.Prettify(s)
}

func (s TransferMediaDataResponse) GoString() string {
  return s.String()
}

func (s *TransferMediaDataResponse) SetRequestId(v string) *TransferMediaDataResponse {
  s.RequestId = &v
  return s
}

type CreateUploadAttachedMediaRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Title *string `json:"Title" xml:"Title"`
  BusinessType *string `json:"BusinessType" xml:"BusinessType" require:"true"`
  MediaExt *string `json:"MediaExt" xml:"MediaExt" require:"true"`
  FileName *string `json:"FileName" xml:"FileName"`
  Tags *string `json:"Tags" xml:"Tags"`
  CateId *int64 `json:"CateId" xml:"CateId"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation"`
  Description *string `json:"Description" xml:"Description"`
  FileSize *string `json:"FileSize" xml:"FileSize"`
  UserData *string `json:"UserData" xml:"UserData"`
}

func (s CreateUploadAttachedMediaRequest) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadAttachedMediaRequest) GoString() string {
  return s.String()
}

func (s *CreateUploadAttachedMediaRequest) SetAccessKeyId(v string) *CreateUploadAttachedMediaRequest {
  s.AccessKeyId = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetOwnerId(v int64) *CreateUploadAttachedMediaRequest {
  s.OwnerId = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetResourceOwnerAccount(v string) *CreateUploadAttachedMediaRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetResourceOwnerId(v int64) *CreateUploadAttachedMediaRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetTitle(v string) *CreateUploadAttachedMediaRequest {
  s.Title = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetBusinessType(v string) *CreateUploadAttachedMediaRequest {
  s.BusinessType = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetMediaExt(v string) *CreateUploadAttachedMediaRequest {
  s.MediaExt = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetFileName(v string) *CreateUploadAttachedMediaRequest {
  s.FileName = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetTags(v string) *CreateUploadAttachedMediaRequest {
  s.Tags = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetCateId(v int64) *CreateUploadAttachedMediaRequest {
  s.CateId = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetStorageLocation(v string) *CreateUploadAttachedMediaRequest {
  s.StorageLocation = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetDescription(v string) *CreateUploadAttachedMediaRequest {
  s.Description = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetFileSize(v string) *CreateUploadAttachedMediaRequest {
  s.FileSize = &v
  return s
}

func (s *CreateUploadAttachedMediaRequest) SetUserData(v string) *CreateUploadAttachedMediaRequest {
  s.UserData = &v
  return s
}

type CreateUploadAttachedMediaResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  MediaURL *string `json:"MediaURL" xml:"MediaURL" require:"true"`
  UploadAddress *string `json:"UploadAddress" xml:"UploadAddress" require:"true"`
  UploadAuth *string `json:"UploadAuth" xml:"UploadAuth" require:"true"`
  FileURL *string `json:"FileURL" xml:"FileURL" require:"true"`
}

func (s CreateUploadAttachedMediaResponse) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadAttachedMediaResponse) GoString() string {
  return s.String()
}

func (s *CreateUploadAttachedMediaResponse) SetRequestId(v string) *CreateUploadAttachedMediaResponse {
  s.RequestId = &v
  return s
}

func (s *CreateUploadAttachedMediaResponse) SetMediaId(v string) *CreateUploadAttachedMediaResponse {
  s.MediaId = &v
  return s
}

func (s *CreateUploadAttachedMediaResponse) SetMediaURL(v string) *CreateUploadAttachedMediaResponse {
  s.MediaURL = &v
  return s
}

func (s *CreateUploadAttachedMediaResponse) SetUploadAddress(v string) *CreateUploadAttachedMediaResponse {
  s.UploadAddress = &v
  return s
}

func (s *CreateUploadAttachedMediaResponse) SetUploadAuth(v string) *CreateUploadAttachedMediaResponse {
  s.UploadAuth = &v
  return s
}

func (s *CreateUploadAttachedMediaResponse) SetFileURL(v string) *CreateUploadAttachedMediaResponse {
  s.FileURL = &v
  return s
}

type GetUploadProgressRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Source *string `json:"Source" xml:"Source"`
  ClientId *string `json:"ClientId" xml:"ClientId"`
  BusinessType *string `json:"BusinessType" xml:"BusinessType"`
  TerminalType *string `json:"TerminalType" xml:"TerminalType"`
  DeviceModel *string `json:"DeviceModel" xml:"DeviceModel"`
  AppVersion *string `json:"AppVersion" xml:"AppVersion"`
  AuthTimestamp *int64 `json:"AuthTimestamp" xml:"AuthTimestamp" require:"true"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo" require:"true"`
  UploadInfoList *string `json:"UploadInfoList" xml:"UploadInfoList" require:"true"`
  UserId *int64 `json:"UserId" xml:"UserId"`
  UploadAddress *string `json:"UploadAddress" xml:"UploadAddress"`
}

func (s GetUploadProgressRequest) String() string {
  return tea.Prettify(s)
}

func (s GetUploadProgressRequest) GoString() string {
  return s.String()
}

func (s *GetUploadProgressRequest) SetAccessKeyId(v string) *GetUploadProgressRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetUploadProgressRequest) SetOwnerId(v int64) *GetUploadProgressRequest {
  s.OwnerId = &v
  return s
}

func (s *GetUploadProgressRequest) SetResourceOwnerAccount(v string) *GetUploadProgressRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetUploadProgressRequest) SetResourceOwnerId(v int64) *GetUploadProgressRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetUploadProgressRequest) SetSource(v string) *GetUploadProgressRequest {
  s.Source = &v
  return s
}

func (s *GetUploadProgressRequest) SetClientId(v string) *GetUploadProgressRequest {
  s.ClientId = &v
  return s
}

func (s *GetUploadProgressRequest) SetBusinessType(v string) *GetUploadProgressRequest {
  s.BusinessType = &v
  return s
}

func (s *GetUploadProgressRequest) SetTerminalType(v string) *GetUploadProgressRequest {
  s.TerminalType = &v
  return s
}

func (s *GetUploadProgressRequest) SetDeviceModel(v string) *GetUploadProgressRequest {
  s.DeviceModel = &v
  return s
}

func (s *GetUploadProgressRequest) SetAppVersion(v string) *GetUploadProgressRequest {
  s.AppVersion = &v
  return s
}

func (s *GetUploadProgressRequest) SetAuthTimestamp(v int64) *GetUploadProgressRequest {
  s.AuthTimestamp = &v
  return s
}

func (s *GetUploadProgressRequest) SetAuthInfo(v string) *GetUploadProgressRequest {
  s.AuthInfo = &v
  return s
}

func (s *GetUploadProgressRequest) SetUploadInfoList(v string) *GetUploadProgressRequest {
  s.UploadInfoList = &v
  return s
}

func (s *GetUploadProgressRequest) SetUserId(v int64) *GetUploadProgressRequest {
  s.UserId = &v
  return s
}

func (s *GetUploadProgressRequest) SetUploadAddress(v string) *GetUploadProgressRequest {
  s.UploadAddress = &v
  return s
}

type GetUploadProgressResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UploadProgress *GetUploadProgressResponseUploadProgress `json:"UploadProgress" xml:"UploadProgress" require:"true" type:"Struct"`
}

func (s GetUploadProgressResponse) String() string {
  return tea.Prettify(s)
}

func (s GetUploadProgressResponse) GoString() string {
  return s.String()
}

func (s *GetUploadProgressResponse) SetRequestId(v string) *GetUploadProgressResponse {
  s.RequestId = &v
  return s
}

func (s *GetUploadProgressResponse) SetUploadProgress(v *GetUploadProgressResponseUploadProgress) *GetUploadProgressResponse {
  s.UploadProgress = v
  return s
}

type GetUploadProgressResponseUploadProgress struct {
  UploadProgressList []*GetUploadProgressResponseUploadProgressUploadProgressList `json:"UploadProgressList" xml:"UploadProgressList" require:"true" type:"Repeated"`
}

func (s GetUploadProgressResponseUploadProgress) String() string {
  return tea.Prettify(s)
}

func (s GetUploadProgressResponseUploadProgress) GoString() string {
  return s.String()
}

func (s *GetUploadProgressResponseUploadProgress) SetUploadProgressList(v []*GetUploadProgressResponseUploadProgressUploadProgressList) *GetUploadProgressResponseUploadProgress {
  s.UploadProgressList = v
  return s
}

type GetUploadProgressResponseUploadProgressUploadProgressList struct     {
  Source *string `json:"Source" xml:"Source" require:"true"`
  ClientId *string `json:"ClientId" xml:"ClientId" require:"true"`
  BusinessType *string `json:"BusinessType" xml:"BusinessType" require:"true"`
  TerminalType *string `json:"TerminalType" xml:"TerminalType" require:"true"`
  DeviceModel *string `json:"DeviceModel" xml:"DeviceModel" require:"true"`
  AppVersion *string `json:"AppVersion" xml:"AppVersion" require:"true"`
  AuthTimestamp *string `json:"AuthTimestamp" xml:"AuthTimestamp" require:"true"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo" require:"true"`
  FileName *string `json:"FileName" xml:"FileName" require:"true"`
  FileSize *int64 `json:"FileSize" xml:"FileSize" require:"true"`
  FileCreateTime *string `json:"FileCreateTime" xml:"FileCreateTime" require:"true"`
  FileHash *string `json:"FileHash" xml:"FileHash" require:"true"`
  UploadSpeed *float32 `json:"UploadSpeed" xml:"UploadSpeed" require:"true"`
  UploadRatio *float32 `json:"UploadRatio" xml:"UploadRatio" require:"true"`
  UploadId *string `json:"UploadId" xml:"UploadId" require:"true"`
  DonePartsCount *int `json:"DonePartsCount" xml:"DonePartsCount" require:"true"`
  TotalPart *string `json:"TotalPart" xml:"TotalPart" require:"true"`
  PartSize *int64 `json:"PartSize" xml:"PartSize" require:"true"`
  UploadPoint *string `json:"UploadPoint" xml:"UploadPoint" require:"true"`
  UploadAddress *string `json:"UploadAddress" xml:"UploadAddress" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s GetUploadProgressResponseUploadProgressUploadProgressList) String() string {
  return tea.Prettify(s)
}

func (s GetUploadProgressResponseUploadProgressUploadProgressList) GoString() string {
  return s.String()
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetSource(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.Source = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetClientId(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.ClientId = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetBusinessType(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.BusinessType = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetTerminalType(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.TerminalType = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetDeviceModel(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.DeviceModel = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetAppVersion(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.AppVersion = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetAuthTimestamp(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.AuthTimestamp = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetAuthInfo(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.AuthInfo = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetFileName(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.FileName = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetFileSize(v int64) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.FileSize = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetFileCreateTime(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.FileCreateTime = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetFileHash(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.FileHash = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetUploadSpeed(v float32) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.UploadSpeed = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetUploadRatio(v float32) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.UploadRatio = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetUploadId(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.UploadId = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetDonePartsCount(v int) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.DonePartsCount = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetTotalPart(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.TotalPart = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetPartSize(v int64) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.PartSize = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetUploadPoint(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.UploadPoint = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetUploadAddress(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.UploadAddress = &v
  return s
}

func (s *GetUploadProgressResponseUploadProgressUploadProgressList) SetVideoId(v string) *GetUploadProgressResponseUploadProgressUploadProgressList {
  s.VideoId = &v
  return s
}

type UpdateVodTemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
  Name *string `json:"Name" xml:"Name"`
  TemplateConfig *string `json:"TemplateConfig" xml:"TemplateConfig"`
}

func (s UpdateVodTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateVodTemplateRequest) GoString() string {
  return s.String()
}

func (s *UpdateVodTemplateRequest) SetOwnerId(v int64) *UpdateVodTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateVodTemplateRequest) SetResourceOwnerAccount(v string) *UpdateVodTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateVodTemplateRequest) SetResourceOwnerId(v int64) *UpdateVodTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateVodTemplateRequest) SetVodTemplateId(v string) *UpdateVodTemplateRequest {
  s.VodTemplateId = &v
  return s
}

func (s *UpdateVodTemplateRequest) SetName(v string) *UpdateVodTemplateRequest {
  s.Name = &v
  return s
}

func (s *UpdateVodTemplateRequest) SetTemplateConfig(v string) *UpdateVodTemplateRequest {
  s.TemplateConfig = &v
  return s
}

type UpdateVodTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
}

func (s UpdateVodTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateVodTemplateResponse) GoString() string {
  return s.String()
}

func (s *UpdateVodTemplateResponse) SetRequestId(v string) *UpdateVodTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateVodTemplateResponse) SetVodTemplateId(v string) *UpdateVodTemplateResponse {
  s.VodTemplateId = &v
  return s
}

type SetDefaultVodTemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
}

func (s SetDefaultVodTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultVodTemplateRequest) GoString() string {
  return s.String()
}

func (s *SetDefaultVodTemplateRequest) SetOwnerId(v int64) *SetDefaultVodTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *SetDefaultVodTemplateRequest) SetResourceOwnerAccount(v string) *SetDefaultVodTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetDefaultVodTemplateRequest) SetResourceOwnerId(v int64) *SetDefaultVodTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetDefaultVodTemplateRequest) SetVodTemplateId(v string) *SetDefaultVodTemplateRequest {
  s.VodTemplateId = &v
  return s
}

type SetDefaultVodTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
}

func (s SetDefaultVodTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultVodTemplateResponse) GoString() string {
  return s.String()
}

func (s *SetDefaultVodTemplateResponse) SetRequestId(v string) *SetDefaultVodTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *SetDefaultVodTemplateResponse) SetVodTemplateId(v string) *SetDefaultVodTemplateResponse {
  s.VodTemplateId = &v
  return s
}

type ListVodTemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
}

func (s ListVodTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s ListVodTemplateRequest) GoString() string {
  return s.String()
}

func (s *ListVodTemplateRequest) SetOwnerId(v int64) *ListVodTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *ListVodTemplateRequest) SetResourceOwnerAccount(v string) *ListVodTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListVodTemplateRequest) SetResourceOwnerId(v int64) *ListVodTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListVodTemplateRequest) SetTemplateType(v string) *ListVodTemplateRequest {
  s.TemplateType = &v
  return s
}

type ListVodTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VodTemplateInfoList []*ListVodTemplateResponseVodTemplateInfoList `json:"VodTemplateInfoList" xml:"VodTemplateInfoList" require:"true" type:"Repeated"`
}

func (s ListVodTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s ListVodTemplateResponse) GoString() string {
  return s.String()
}

func (s *ListVodTemplateResponse) SetRequestId(v string) *ListVodTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *ListVodTemplateResponse) SetVodTemplateInfoList(v []*ListVodTemplateResponseVodTemplateInfoList) *ListVodTemplateResponse {
  s.VodTemplateInfoList = v
  return s
}

type ListVodTemplateResponseVodTemplateInfoList struct     {
  Name *string `json:"Name" xml:"Name" require:"true"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
  SubTemplateType *string `json:"SubTemplateType" xml:"SubTemplateType" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  TemplateConfig *string `json:"TemplateConfig" xml:"TemplateConfig" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
}

func (s ListVodTemplateResponseVodTemplateInfoList) String() string {
  return tea.Prettify(s)
}

func (s ListVodTemplateResponseVodTemplateInfoList) GoString() string {
  return s.String()
}

func (s *ListVodTemplateResponseVodTemplateInfoList) SetName(v string) *ListVodTemplateResponseVodTemplateInfoList {
  s.Name = &v
  return s
}

func (s *ListVodTemplateResponseVodTemplateInfoList) SetVodTemplateId(v string) *ListVodTemplateResponseVodTemplateInfoList {
  s.VodTemplateId = &v
  return s
}

func (s *ListVodTemplateResponseVodTemplateInfoList) SetTemplateType(v string) *ListVodTemplateResponseVodTemplateInfoList {
  s.TemplateType = &v
  return s
}

func (s *ListVodTemplateResponseVodTemplateInfoList) SetSubTemplateType(v string) *ListVodTemplateResponseVodTemplateInfoList {
  s.SubTemplateType = &v
  return s
}

func (s *ListVodTemplateResponseVodTemplateInfoList) SetSource(v string) *ListVodTemplateResponseVodTemplateInfoList {
  s.Source = &v
  return s
}

func (s *ListVodTemplateResponseVodTemplateInfoList) SetIsDefault(v string) *ListVodTemplateResponseVodTemplateInfoList {
  s.IsDefault = &v
  return s
}

func (s *ListVodTemplateResponseVodTemplateInfoList) SetTemplateConfig(v string) *ListVodTemplateResponseVodTemplateInfoList {
  s.TemplateConfig = &v
  return s
}

func (s *ListVodTemplateResponseVodTemplateInfoList) SetCreationTime(v string) *ListVodTemplateResponseVodTemplateInfoList {
  s.CreationTime = &v
  return s
}

func (s *ListVodTemplateResponseVodTemplateInfoList) SetModifyTime(v string) *ListVodTemplateResponseVodTemplateInfoList {
  s.ModifyTime = &v
  return s
}

type GetVodTemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
}

func (s GetVodTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s GetVodTemplateRequest) GoString() string {
  return s.String()
}

func (s *GetVodTemplateRequest) SetOwnerId(v int64) *GetVodTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *GetVodTemplateRequest) SetResourceOwnerAccount(v string) *GetVodTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetVodTemplateRequest) SetResourceOwnerId(v int64) *GetVodTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetVodTemplateRequest) SetVodTemplateId(v string) *GetVodTemplateRequest {
  s.VodTemplateId = &v
  return s
}

type GetVodTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VodTemplateInfo *GetVodTemplateResponseVodTemplateInfo `json:"VodTemplateInfo" xml:"VodTemplateInfo" require:"true" type:"Struct"`
}

func (s GetVodTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s GetVodTemplateResponse) GoString() string {
  return s.String()
}

func (s *GetVodTemplateResponse) SetRequestId(v string) *GetVodTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *GetVodTemplateResponse) SetVodTemplateInfo(v *GetVodTemplateResponseVodTemplateInfo) *GetVodTemplateResponse {
  s.VodTemplateInfo = v
  return s
}

type GetVodTemplateResponseVodTemplateInfo struct {
  Name *string `json:"Name" xml:"Name" require:"true"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
  SubTemplateType *string `json:"SubTemplateType" xml:"SubTemplateType" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  TemplateConfig *string `json:"TemplateConfig" xml:"TemplateConfig" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
}

func (s GetVodTemplateResponseVodTemplateInfo) String() string {
  return tea.Prettify(s)
}

func (s GetVodTemplateResponseVodTemplateInfo) GoString() string {
  return s.String()
}

func (s *GetVodTemplateResponseVodTemplateInfo) SetName(v string) *GetVodTemplateResponseVodTemplateInfo {
  s.Name = &v
  return s
}

func (s *GetVodTemplateResponseVodTemplateInfo) SetVodTemplateId(v string) *GetVodTemplateResponseVodTemplateInfo {
  s.VodTemplateId = &v
  return s
}

func (s *GetVodTemplateResponseVodTemplateInfo) SetTemplateType(v string) *GetVodTemplateResponseVodTemplateInfo {
  s.TemplateType = &v
  return s
}

func (s *GetVodTemplateResponseVodTemplateInfo) SetSubTemplateType(v string) *GetVodTemplateResponseVodTemplateInfo {
  s.SubTemplateType = &v
  return s
}

func (s *GetVodTemplateResponseVodTemplateInfo) SetSource(v string) *GetVodTemplateResponseVodTemplateInfo {
  s.Source = &v
  return s
}

func (s *GetVodTemplateResponseVodTemplateInfo) SetIsDefault(v string) *GetVodTemplateResponseVodTemplateInfo {
  s.IsDefault = &v
  return s
}

func (s *GetVodTemplateResponseVodTemplateInfo) SetTemplateConfig(v string) *GetVodTemplateResponseVodTemplateInfo {
  s.TemplateConfig = &v
  return s
}

func (s *GetVodTemplateResponseVodTemplateInfo) SetCreationTime(v string) *GetVodTemplateResponseVodTemplateInfo {
  s.CreationTime = &v
  return s
}

func (s *GetVodTemplateResponseVodTemplateInfo) SetModifyTime(v string) *GetVodTemplateResponseVodTemplateInfo {
  s.ModifyTime = &v
  return s
}

type DeleteVodTemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
}

func (s DeleteVodTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteVodTemplateRequest) GoString() string {
  return s.String()
}

func (s *DeleteVodTemplateRequest) SetOwnerId(v int64) *DeleteVodTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteVodTemplateRequest) SetResourceOwnerAccount(v string) *DeleteVodTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteVodTemplateRequest) SetResourceOwnerId(v int64) *DeleteVodTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteVodTemplateRequest) SetVodTemplateId(v string) *DeleteVodTemplateRequest {
  s.VodTemplateId = &v
  return s
}

type DeleteVodTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
}

func (s DeleteVodTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteVodTemplateResponse) GoString() string {
  return s.String()
}

func (s *DeleteVodTemplateResponse) SetRequestId(v string) *DeleteVodTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteVodTemplateResponse) SetVodTemplateId(v string) *DeleteVodTemplateResponse {
  s.VodTemplateId = &v
  return s
}

type AddVodTemplateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  TemplateType *string `json:"TemplateType" xml:"TemplateType" require:"true"`
  SubTemplateType *string `json:"SubTemplateType" xml:"SubTemplateType"`
  TemplateConfig *string `json:"TemplateConfig" xml:"TemplateConfig" require:"true"`
}

func (s AddVodTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s AddVodTemplateRequest) GoString() string {
  return s.String()
}

func (s *AddVodTemplateRequest) SetOwnerId(v int64) *AddVodTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *AddVodTemplateRequest) SetResourceOwnerAccount(v string) *AddVodTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddVodTemplateRequest) SetResourceOwnerId(v int64) *AddVodTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddVodTemplateRequest) SetName(v string) *AddVodTemplateRequest {
  s.Name = &v
  return s
}

func (s *AddVodTemplateRequest) SetTemplateType(v string) *AddVodTemplateRequest {
  s.TemplateType = &v
  return s
}

func (s *AddVodTemplateRequest) SetSubTemplateType(v string) *AddVodTemplateRequest {
  s.SubTemplateType = &v
  return s
}

func (s *AddVodTemplateRequest) SetTemplateConfig(v string) *AddVodTemplateRequest {
  s.TemplateConfig = &v
  return s
}

type AddVodTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VodTemplateId *string `json:"VodTemplateId" xml:"VodTemplateId" require:"true"`
}

func (s AddVodTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s AddVodTemplateResponse) GoString() string {
  return s.String()
}

func (s *AddVodTemplateResponse) SetRequestId(v string) *AddVodTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *AddVodTemplateResponse) SetVodTemplateId(v string) *AddVodTemplateResponse {
  s.VodTemplateId = &v
  return s
}

type GetMediaDNAResultRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
}

func (s GetMediaDNAResultRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMediaDNAResultRequest) GoString() string {
  return s.String()
}

func (s *GetMediaDNAResultRequest) SetAccessKeyId(v string) *GetMediaDNAResultRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMediaDNAResultRequest) SetOwnerId(v string) *GetMediaDNAResultRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMediaDNAResultRequest) SetResourceOwnerId(v string) *GetMediaDNAResultRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMediaDNAResultRequest) SetResourceOwnerAccount(v string) *GetMediaDNAResultRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMediaDNAResultRequest) SetOwnerAccount(v string) *GetMediaDNAResultRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetMediaDNAResultRequest) SetMediaId(v string) *GetMediaDNAResultRequest {
  s.MediaId = &v
  return s
}

type GetMediaDNAResultResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DNAResult *GetMediaDNAResultResponseDNAResult `json:"DNAResult" xml:"DNAResult" require:"true" type:"Struct"`
}

func (s GetMediaDNAResultResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMediaDNAResultResponse) GoString() string {
  return s.String()
}

func (s *GetMediaDNAResultResponse) SetRequestId(v string) *GetMediaDNAResultResponse {
  s.RequestId = &v
  return s
}

func (s *GetMediaDNAResultResponse) SetDNAResult(v *GetMediaDNAResultResponseDNAResult) *GetMediaDNAResultResponse {
  s.DNAResult = v
  return s
}

type GetMediaDNAResultResponseDNAResult struct {
  VideoDNA []*GetMediaDNAResultResponseDNAResultVideoDNA `json:"VideoDNA" xml:"VideoDNA" require:"true" type:"Repeated"`
}

func (s GetMediaDNAResultResponseDNAResult) String() string {
  return tea.Prettify(s)
}

func (s GetMediaDNAResultResponseDNAResult) GoString() string {
  return s.String()
}

func (s *GetMediaDNAResultResponseDNAResult) SetVideoDNA(v []*GetMediaDNAResultResponseDNAResultVideoDNA) *GetMediaDNAResultResponseDNAResult {
  s.VideoDNA = v
  return s
}

type GetMediaDNAResultResponseDNAResultVideoDNA struct     {
  PrimaryKey *string `json:"PrimaryKey" xml:"PrimaryKey" require:"true"`
  Similarity *string `json:"Similarity" xml:"Similarity" require:"true"`
  FpShotSlices []*GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlices `json:"FpShotSlices" xml:"FpShotSlices" require:"true" type:"Repeated"`
}

func (s GetMediaDNAResultResponseDNAResultVideoDNA) String() string {
  return tea.Prettify(s)
}

func (s GetMediaDNAResultResponseDNAResultVideoDNA) GoString() string {
  return s.String()
}

func (s *GetMediaDNAResultResponseDNAResultVideoDNA) SetPrimaryKey(v string) *GetMediaDNAResultResponseDNAResultVideoDNA {
  s.PrimaryKey = &v
  return s
}

func (s *GetMediaDNAResultResponseDNAResultVideoDNA) SetSimilarity(v string) *GetMediaDNAResultResponseDNAResultVideoDNA {
  s.Similarity = &v
  return s
}

func (s *GetMediaDNAResultResponseDNAResultVideoDNA) SetFpShotSlices(v []*GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlices) *GetMediaDNAResultResponseDNAResultVideoDNA {
  s.FpShotSlices = v
  return s
}

type GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlices struct     {
  Input *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesInput `json:"Input" xml:"Input" require:"true" type:"Struct"`
  Duplication *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesDuplication `json:"Duplication" xml:"Duplication" require:"true" type:"Struct"`
}

func (s GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlices) String() string {
  return tea.Prettify(s)
}

func (s GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlices) GoString() string {
  return s.String()
}

func (s *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlices) SetInput(v *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesInput) *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlices {
  s.Input = v
  return s
}

func (s *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlices) SetDuplication(v *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesDuplication) *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlices {
  s.Duplication = v
  return s
}

type GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesInput struct {
  Start *string `json:"Start" xml:"Start" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
}

func (s GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesInput) String() string {
  return tea.Prettify(s)
}

func (s GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesInput) GoString() string {
  return s.String()
}

func (s *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesInput) SetStart(v string) *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesInput {
  s.Start = &v
  return s
}

func (s *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesInput) SetDuration(v string) *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesInput {
  s.Duration = &v
  return s
}

type GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesDuplication struct {
  Start *string `json:"Start" xml:"Start" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
}

func (s GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesDuplication) String() string {
  return tea.Prettify(s)
}

func (s GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesDuplication) GoString() string {
  return s.String()
}

func (s *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesDuplication) SetStart(v string) *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesDuplication {
  s.Start = &v
  return s
}

func (s *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesDuplication) SetDuration(v string) *GetMediaDNAResultResponseDNAResultVideoDNAFpShotSlicesDuplication {
  s.Duration = &v
  return s
}

type DeleteMezzaninesRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  VideoIds *string `json:"VideoIds" xml:"VideoIds" require:"true"`
  Force *bool `json:"Force" xml:"Force"`
}

func (s DeleteMezzaninesRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteMezzaninesRequest) GoString() string {
  return s.String()
}

func (s *DeleteMezzaninesRequest) SetOwnerId(v int64) *DeleteMezzaninesRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteMezzaninesRequest) SetResourceOwnerAccount(v string) *DeleteMezzaninesRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteMezzaninesRequest) SetResourceOwnerId(v int64) *DeleteMezzaninesRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteMezzaninesRequest) SetResourceRealOwnerId(v int64) *DeleteMezzaninesRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *DeleteMezzaninesRequest) SetVideoIds(v string) *DeleteMezzaninesRequest {
  s.VideoIds = &v
  return s
}

func (s *DeleteMezzaninesRequest) SetForce(v bool) *DeleteMezzaninesRequest {
  s.Force = &v
  return s
}

type DeleteMezzaninesResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  NonExistVideoIds []*string `json:"NonExistVideoIds" xml:"NonExistVideoIds" require:"true" type:"Repeated"`
  UnRemoveableVideoIds []*string `json:"UnRemoveableVideoIds" xml:"UnRemoveableVideoIds" require:"true" type:"Repeated"`
}

func (s DeleteMezzaninesResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteMezzaninesResponse) GoString() string {
  return s.String()
}

func (s *DeleteMezzaninesResponse) SetRequestId(v string) *DeleteMezzaninesResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteMezzaninesResponse) SetNonExistVideoIds(v []*string) *DeleteMezzaninesResponse {
  s.NonExistVideoIds = v
  return s
}

func (s *DeleteMezzaninesResponse) SetUnRemoveableVideoIds(v []*string) *DeleteMezzaninesResponse {
  s.UnRemoveableVideoIds = v
  return s
}

type UpdateImageInfosRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  UpdateContent *string `json:"UpdateContent" xml:"UpdateContent" require:"true"`
}

func (s UpdateImageInfosRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateImageInfosRequest) GoString() string {
  return s.String()
}

func (s *UpdateImageInfosRequest) SetAccessKeyId(v string) *UpdateImageInfosRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateImageInfosRequest) SetOwnerId(v int64) *UpdateImageInfosRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateImageInfosRequest) SetResourceOwnerAccount(v string) *UpdateImageInfosRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateImageInfosRequest) SetResourceOwnerId(v int64) *UpdateImageInfosRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateImageInfosRequest) SetResourceRealOwnerId(v int64) *UpdateImageInfosRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *UpdateImageInfosRequest) SetUpdateContent(v string) *UpdateImageInfosRequest {
  s.UpdateContent = &v
  return s
}

type UpdateImageInfosResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  NonExistImageIds *UpdateImageInfosResponseNonExistImageIds `json:"NonExistImageIds" xml:"NonExistImageIds" require:"true" type:"Struct"`
}

func (s UpdateImageInfosResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateImageInfosResponse) GoString() string {
  return s.String()
}

func (s *UpdateImageInfosResponse) SetRequestId(v string) *UpdateImageInfosResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateImageInfosResponse) SetNonExistImageIds(v *UpdateImageInfosResponseNonExistImageIds) *UpdateImageInfosResponse {
  s.NonExistImageIds = v
  return s
}

type UpdateImageInfosResponseNonExistImageIds struct {
  ImageId []*string `json:"ImageId" xml:"ImageId" require:"true" type:"Repeated"`
}

func (s UpdateImageInfosResponseNonExistImageIds) String() string {
  return tea.Prettify(s)
}

func (s UpdateImageInfosResponseNonExistImageIds) GoString() string {
  return s.String()
}

func (s *UpdateImageInfosResponseNonExistImageIds) SetImageId(v []*string) *UpdateImageInfosResponseNonExistImageIds {
  s.ImageId = v
  return s
}

type DescribeVodDomainUsageDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  Type *string `json:"Type" xml:"Type"`
  Area *string `json:"Area" xml:"Area"`
  Field *string `json:"Field" xml:"Field" require:"true"`
}

func (s DescribeVodDomainUsageDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainUsageDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainUsageDataRequest) SetOwnerId(v int64) *DescribeVodDomainUsageDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainUsageDataRequest) SetDomainName(v string) *DescribeVodDomainUsageDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainUsageDataRequest) SetStartTime(v string) *DescribeVodDomainUsageDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainUsageDataRequest) SetEndTime(v string) *DescribeVodDomainUsageDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainUsageDataRequest) SetType(v string) *DescribeVodDomainUsageDataRequest {
  s.Type = &v
  return s
}

func (s *DescribeVodDomainUsageDataRequest) SetArea(v string) *DescribeVodDomainUsageDataRequest {
  s.Area = &v
  return s
}

func (s *DescribeVodDomainUsageDataRequest) SetField(v string) *DescribeVodDomainUsageDataRequest {
  s.Field = &v
  return s
}

type DescribeVodDomainUsageDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Area *string `json:"Area" xml:"Area" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  UsageDataPerInterval *DescribeVodDomainUsageDataResponseUsageDataPerInterval `json:"UsageDataPerInterval" xml:"UsageDataPerInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainUsageDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainUsageDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainUsageDataResponse) SetRequestId(v string) *DescribeVodDomainUsageDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainUsageDataResponse) SetDomainName(v string) *DescribeVodDomainUsageDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainUsageDataResponse) SetStartTime(v string) *DescribeVodDomainUsageDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainUsageDataResponse) SetEndTime(v string) *DescribeVodDomainUsageDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainUsageDataResponse) SetType(v string) *DescribeVodDomainUsageDataResponse {
  s.Type = &v
  return s
}

func (s *DescribeVodDomainUsageDataResponse) SetArea(v string) *DescribeVodDomainUsageDataResponse {
  s.Area = &v
  return s
}

func (s *DescribeVodDomainUsageDataResponse) SetDataInterval(v string) *DescribeVodDomainUsageDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainUsageDataResponse) SetUsageDataPerInterval(v *DescribeVodDomainUsageDataResponseUsageDataPerInterval) *DescribeVodDomainUsageDataResponse {
  s.UsageDataPerInterval = v
  return s
}

type DescribeVodDomainUsageDataResponseUsageDataPerInterval struct {
  DataModule []*DescribeVodDomainUsageDataResponseUsageDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainUsageDataResponseUsageDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainUsageDataResponseUsageDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainUsageDataResponseUsageDataPerInterval) SetDataModule(v []*DescribeVodDomainUsageDataResponseUsageDataPerIntervalDataModule) *DescribeVodDomainUsageDataResponseUsageDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainUsageDataResponseUsageDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeVodDomainUsageDataResponseUsageDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainUsageDataResponseUsageDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainUsageDataResponseUsageDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainUsageDataResponseUsageDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainUsageDataResponseUsageDataPerIntervalDataModule) SetValue(v string) *DescribeVodDomainUsageDataResponseUsageDataPerIntervalDataModule {
  s.Value = &v
  return s
}

type DescribeVodDomainTrafficDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  Interval *string `json:"Interval" xml:"Interval"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn"`
}

func (s DescribeVodDomainTrafficDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTrafficDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTrafficDataRequest) SetOwnerId(v int64) *DescribeVodDomainTrafficDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainTrafficDataRequest) SetDomainName(v string) *DescribeVodDomainTrafficDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainTrafficDataRequest) SetStartTime(v string) *DescribeVodDomainTrafficDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainTrafficDataRequest) SetEndTime(v string) *DescribeVodDomainTrafficDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainTrafficDataRequest) SetInterval(v string) *DescribeVodDomainTrafficDataRequest {
  s.Interval = &v
  return s
}

func (s *DescribeVodDomainTrafficDataRequest) SetIspNameEn(v string) *DescribeVodDomainTrafficDataRequest {
  s.IspNameEn = &v
  return s
}

func (s *DescribeVodDomainTrafficDataRequest) SetLocationNameEn(v string) *DescribeVodDomainTrafficDataRequest {
  s.LocationNameEn = &v
  return s
}

type DescribeVodDomainTrafficDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  TrafficDataPerInterval *DescribeVodDomainTrafficDataResponseTrafficDataPerInterval `json:"TrafficDataPerInterval" xml:"TrafficDataPerInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainTrafficDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTrafficDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTrafficDataResponse) SetRequestId(v string) *DescribeVodDomainTrafficDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponse) SetDomainName(v string) *DescribeVodDomainTrafficDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponse) SetStartTime(v string) *DescribeVodDomainTrafficDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponse) SetEndTime(v string) *DescribeVodDomainTrafficDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponse) SetDataInterval(v string) *DescribeVodDomainTrafficDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponse) SetTrafficDataPerInterval(v *DescribeVodDomainTrafficDataResponseTrafficDataPerInterval) *DescribeVodDomainTrafficDataResponse {
  s.TrafficDataPerInterval = v
  return s
}

type DescribeVodDomainTrafficDataResponseTrafficDataPerInterval struct {
  DataModule []*DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainTrafficDataResponseTrafficDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTrafficDataResponseTrafficDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTrafficDataResponseTrafficDataPerInterval) SetDataModule(v []*DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) *DescribeVodDomainTrafficDataResponseTrafficDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
  DomesticValue *string `json:"DomesticValue" xml:"DomesticValue" require:"true"`
  OverseasValue *string `json:"OverseasValue" xml:"OverseasValue" require:"true"`
  HttpsValue *string `json:"HttpsValue" xml:"HttpsValue" require:"true"`
  HttpsDomesticValue *string `json:"HttpsDomesticValue" xml:"HttpsDomesticValue" require:"true"`
  HttpsOverseasValue *string `json:"HttpsOverseasValue" xml:"HttpsOverseasValue" require:"true"`
}

func (s DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) SetValue(v string) *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule {
  s.Value = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) SetDomesticValue(v string) *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule {
  s.DomesticValue = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) SetOverseasValue(v string) *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule {
  s.OverseasValue = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) SetHttpsValue(v string) *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule {
  s.HttpsValue = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) SetHttpsDomesticValue(v string) *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule {
  s.HttpsDomesticValue = &v
  return s
}

func (s *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule) SetHttpsOverseasValue(v string) *DescribeVodDomainTrafficDataResponseTrafficDataPerIntervalDataModule {
  s.HttpsOverseasValue = &v
  return s
}

type DescribeVodDomainsUsageByDayRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainsUsageByDayRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainsUsageByDayRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainsUsageByDayRequest) SetOwnerId(v int64) *DescribeVodDomainsUsageByDayRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayRequest) SetDomainName(v string) *DescribeVodDomainsUsageByDayRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayRequest) SetStartTime(v string) *DescribeVodDomainsUsageByDayRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayRequest) SetEndTime(v string) *DescribeVodDomainsUsageByDayRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainsUsageByDayResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  UsageByDays *DescribeVodDomainsUsageByDayResponseUsageByDays `json:"UsageByDays" xml:"UsageByDays" require:"true" type:"Struct"`
  UsageTotal *DescribeVodDomainsUsageByDayResponseUsageTotal `json:"UsageTotal" xml:"UsageTotal" require:"true" type:"Struct"`
}

func (s DescribeVodDomainsUsageByDayResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainsUsageByDayResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainsUsageByDayResponse) SetRequestId(v string) *DescribeVodDomainsUsageByDayResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponse) SetDomainName(v string) *DescribeVodDomainsUsageByDayResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponse) SetDataInterval(v string) *DescribeVodDomainsUsageByDayResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponse) SetStartTime(v string) *DescribeVodDomainsUsageByDayResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponse) SetEndTime(v string) *DescribeVodDomainsUsageByDayResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponse) SetUsageByDays(v *DescribeVodDomainsUsageByDayResponseUsageByDays) *DescribeVodDomainsUsageByDayResponse {
  s.UsageByDays = v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponse) SetUsageTotal(v *DescribeVodDomainsUsageByDayResponseUsageTotal) *DescribeVodDomainsUsageByDayResponse {
  s.UsageTotal = v
  return s
}

type DescribeVodDomainsUsageByDayResponseUsageByDays struct {
  UsageByDay []*DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay `json:"UsageByDay" xml:"UsageByDay" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainsUsageByDayResponseUsageByDays) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainsUsageByDayResponseUsageByDays) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDays) SetUsageByDay(v []*DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) *DescribeVodDomainsUsageByDayResponseUsageByDays {
  s.UsageByDay = v
  return s
}

type DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Qps *string `json:"Qps" xml:"Qps" require:"true"`
  BytesHitRate *string `json:"BytesHitRate" xml:"BytesHitRate" require:"true"`
  RequestHitRate *string `json:"RequestHitRate" xml:"RequestHitRate" require:"true"`
  MaxBps *string `json:"MaxBps" xml:"MaxBps" require:"true"`
  MaxBpsTime *string `json:"MaxBpsTime" xml:"MaxBpsTime" require:"true"`
  MaxSrcBps *string `json:"MaxSrcBps" xml:"MaxSrcBps" require:"true"`
  MaxSrcBpsTime *string `json:"MaxSrcBpsTime" xml:"MaxSrcBpsTime" require:"true"`
  TotalAccess *string `json:"TotalAccess" xml:"TotalAccess" require:"true"`
  TotalTraffic *string `json:"TotalTraffic" xml:"TotalTraffic" require:"true"`
}

func (s DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetTimeStamp(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetQps(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.Qps = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetBytesHitRate(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.BytesHitRate = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetRequestHitRate(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.RequestHitRate = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetMaxBps(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.MaxBps = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetMaxBpsTime(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.MaxBpsTime = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetMaxSrcBps(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.MaxSrcBps = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetMaxSrcBpsTime(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.MaxSrcBpsTime = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetTotalAccess(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.TotalAccess = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay) SetTotalTraffic(v string) *DescribeVodDomainsUsageByDayResponseUsageByDaysUsageByDay {
  s.TotalTraffic = &v
  return s
}

type DescribeVodDomainsUsageByDayResponseUsageTotal struct {
  BytesHitRate *string `json:"BytesHitRate" xml:"BytesHitRate" require:"true"`
  RequestHitRate *string `json:"RequestHitRate" xml:"RequestHitRate" require:"true"`
  MaxBps *string `json:"MaxBps" xml:"MaxBps" require:"true"`
  MaxBpsTime *string `json:"MaxBpsTime" xml:"MaxBpsTime" require:"true"`
  MaxSrcBps *string `json:"MaxSrcBps" xml:"MaxSrcBps" require:"true"`
  MaxSrcBpsTime *string `json:"MaxSrcBpsTime" xml:"MaxSrcBpsTime" require:"true"`
  TotalAccess *string `json:"TotalAccess" xml:"TotalAccess" require:"true"`
  TotalTraffic *string `json:"TotalTraffic" xml:"TotalTraffic" require:"true"`
}

func (s DescribeVodDomainsUsageByDayResponseUsageTotal) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainsUsageByDayResponseUsageTotal) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainsUsageByDayResponseUsageTotal) SetBytesHitRate(v string) *DescribeVodDomainsUsageByDayResponseUsageTotal {
  s.BytesHitRate = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageTotal) SetRequestHitRate(v string) *DescribeVodDomainsUsageByDayResponseUsageTotal {
  s.RequestHitRate = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageTotal) SetMaxBps(v string) *DescribeVodDomainsUsageByDayResponseUsageTotal {
  s.MaxBps = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageTotal) SetMaxBpsTime(v string) *DescribeVodDomainsUsageByDayResponseUsageTotal {
  s.MaxBpsTime = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageTotal) SetMaxSrcBps(v string) *DescribeVodDomainsUsageByDayResponseUsageTotal {
  s.MaxSrcBps = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageTotal) SetMaxSrcBpsTime(v string) *DescribeVodDomainsUsageByDayResponseUsageTotal {
  s.MaxSrcBpsTime = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageTotal) SetTotalAccess(v string) *DescribeVodDomainsUsageByDayResponseUsageTotal {
  s.TotalAccess = &v
  return s
}

func (s *DescribeVodDomainsUsageByDayResponseUsageTotal) SetTotalTraffic(v string) *DescribeVodDomainsUsageByDayResponseUsageTotal {
  s.TotalTraffic = &v
  return s
}

type DescribeVodDomainSrcTrafficDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  Interval *string `json:"Interval" xml:"Interval"`
}

func (s DescribeVodDomainSrcTrafficDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainSrcTrafficDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainSrcTrafficDataRequest) SetOwnerId(v int64) *DescribeVodDomainSrcTrafficDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataRequest) SetDomainName(v string) *DescribeVodDomainSrcTrafficDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataRequest) SetStartTime(v string) *DescribeVodDomainSrcTrafficDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataRequest) SetEndTime(v string) *DescribeVodDomainSrcTrafficDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataRequest) SetInterval(v string) *DescribeVodDomainSrcTrafficDataRequest {
  s.Interval = &v
  return s
}

type DescribeVodDomainSrcTrafficDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  SrcTrafficDataPerInterval *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerInterval `json:"SrcTrafficDataPerInterval" xml:"SrcTrafficDataPerInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainSrcTrafficDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainSrcTrafficDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainSrcTrafficDataResponse) SetRequestId(v string) *DescribeVodDomainSrcTrafficDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataResponse) SetDomainName(v string) *DescribeVodDomainSrcTrafficDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataResponse) SetStartTime(v string) *DescribeVodDomainSrcTrafficDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataResponse) SetEndTime(v string) *DescribeVodDomainSrcTrafficDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataResponse) SetDataInterval(v string) *DescribeVodDomainSrcTrafficDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataResponse) SetSrcTrafficDataPerInterval(v *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerInterval) *DescribeVodDomainSrcTrafficDataResponse {
  s.SrcTrafficDataPerInterval = v
  return s
}

type DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerInterval struct {
  DataModule []*DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerInterval) SetDataModule(v []*DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule) *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
  HttpsValue *string `json:"HttpsValue" xml:"HttpsValue" require:"true"`
}

func (s DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule) SetValue(v string) *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule {
  s.Value = &v
  return s
}

func (s *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule) SetHttpsValue(v string) *DescribeVodDomainSrcTrafficDataResponseSrcTrafficDataPerIntervalDataModule {
  s.HttpsValue = &v
  return s
}

type DescribeVodDomainSrcBpsDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  Interval *string `json:"Interval" xml:"Interval"`
}

func (s DescribeVodDomainSrcBpsDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainSrcBpsDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainSrcBpsDataRequest) SetOwnerId(v int64) *DescribeVodDomainSrcBpsDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataRequest) SetDomainName(v string) *DescribeVodDomainSrcBpsDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataRequest) SetStartTime(v string) *DescribeVodDomainSrcBpsDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataRequest) SetEndTime(v string) *DescribeVodDomainSrcBpsDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataRequest) SetInterval(v string) *DescribeVodDomainSrcBpsDataRequest {
  s.Interval = &v
  return s
}

type DescribeVodDomainSrcBpsDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  SrcBpsDataPerInterval *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerInterval `json:"SrcBpsDataPerInterval" xml:"SrcBpsDataPerInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainSrcBpsDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainSrcBpsDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainSrcBpsDataResponse) SetRequestId(v string) *DescribeVodDomainSrcBpsDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataResponse) SetDomainName(v string) *DescribeVodDomainSrcBpsDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataResponse) SetStartTime(v string) *DescribeVodDomainSrcBpsDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataResponse) SetEndTime(v string) *DescribeVodDomainSrcBpsDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataResponse) SetDataInterval(v string) *DescribeVodDomainSrcBpsDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataResponse) SetSrcBpsDataPerInterval(v *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerInterval) *DescribeVodDomainSrcBpsDataResponse {
  s.SrcBpsDataPerInterval = v
  return s
}

type DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerInterval struct {
  DataModule []*DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerInterval) SetDataModule(v []*DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule) *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
  HttpsValue *string `json:"HttpsValue" xml:"HttpsValue" require:"true"`
}

func (s DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule) SetValue(v string) *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule {
  s.Value = &v
  return s
}

func (s *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule) SetHttpsValue(v string) *DescribeVodDomainSrcBpsDataResponseSrcBpsDataPerIntervalDataModule {
  s.HttpsValue = &v
  return s
}

type DescribeVodDomainRealTimeTrafficDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainRealTimeTrafficDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeTrafficDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeTrafficDataRequest) SetOwnerId(v int64) *DescribeVodDomainRealTimeTrafficDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainRealTimeTrafficDataRequest) SetDomainName(v string) *DescribeVodDomainRealTimeTrafficDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeTrafficDataRequest) SetStartTime(v string) *DescribeVodDomainRealTimeTrafficDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeTrafficDataRequest) SetEndTime(v string) *DescribeVodDomainRealTimeTrafficDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainRealTimeTrafficDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  RealTimeTrafficDataPerInterval *DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerInterval `json:"RealTimeTrafficDataPerInterval" xml:"RealTimeTrafficDataPerInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRealTimeTrafficDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeTrafficDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeTrafficDataResponse) SetRequestId(v string) *DescribeVodDomainRealTimeTrafficDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainRealTimeTrafficDataResponse) SetDomainName(v string) *DescribeVodDomainRealTimeTrafficDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeTrafficDataResponse) SetStartTime(v string) *DescribeVodDomainRealTimeTrafficDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeTrafficDataResponse) SetEndTime(v string) *DescribeVodDomainRealTimeTrafficDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeTrafficDataResponse) SetDataInterval(v string) *DescribeVodDomainRealTimeTrafficDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainRealTimeTrafficDataResponse) SetRealTimeTrafficDataPerInterval(v *DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerInterval) *DescribeVodDomainRealTimeTrafficDataResponse {
  s.RealTimeTrafficDataPerInterval = v
  return s
}

type DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerInterval struct {
  DataModule []*DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerInterval) SetDataModule(v []*DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerIntervalDataModule) *DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerIntervalDataModule) SetValue(v string) *DescribeVodDomainRealTimeTrafficDataResponseRealTimeTrafficDataPerIntervalDataModule {
  s.Value = &v
  return s
}

type DescribeVodDomainRealTimeSrcTrafficDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainRealTimeSrcTrafficDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeSrcTrafficDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataRequest) SetOwnerId(v int64) *DescribeVodDomainRealTimeSrcTrafficDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataRequest) SetDomainName(v string) *DescribeVodDomainRealTimeSrcTrafficDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataRequest) SetStartTime(v string) *DescribeVodDomainRealTimeSrcTrafficDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataRequest) SetEndTime(v string) *DescribeVodDomainRealTimeSrcTrafficDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainRealTimeSrcTrafficDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  RealTimeSrcTrafficDataPerInterval *DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerInterval `json:"RealTimeSrcTrafficDataPerInterval" xml:"RealTimeSrcTrafficDataPerInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRealTimeSrcTrafficDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeSrcTrafficDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataResponse) SetRequestId(v string) *DescribeVodDomainRealTimeSrcTrafficDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataResponse) SetDomainName(v string) *DescribeVodDomainRealTimeSrcTrafficDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataResponse) SetStartTime(v string) *DescribeVodDomainRealTimeSrcTrafficDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataResponse) SetEndTime(v string) *DescribeVodDomainRealTimeSrcTrafficDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataResponse) SetDataInterval(v string) *DescribeVodDomainRealTimeSrcTrafficDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataResponse) SetRealTimeSrcTrafficDataPerInterval(v *DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerInterval) *DescribeVodDomainRealTimeSrcTrafficDataResponse {
  s.RealTimeSrcTrafficDataPerInterval = v
  return s
}

type DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerInterval struct {
  DataModule []*DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerInterval) SetDataModule(v []*DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerIntervalDataModule) *DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerIntervalDataModule) SetValue(v string) *DescribeVodDomainRealTimeSrcTrafficDataResponseRealTimeSrcTrafficDataPerIntervalDataModule {
  s.Value = &v
  return s
}

type DescribeVodDomainRealTimeSrcBpsDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainRealTimeSrcBpsDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeSrcBpsDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeSrcBpsDataRequest) SetOwnerId(v int64) *DescribeVodDomainRealTimeSrcBpsDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcBpsDataRequest) SetDomainName(v string) *DescribeVodDomainRealTimeSrcBpsDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcBpsDataRequest) SetStartTime(v string) *DescribeVodDomainRealTimeSrcBpsDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcBpsDataRequest) SetEndTime(v string) *DescribeVodDomainRealTimeSrcBpsDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainRealTimeSrcBpsDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  RealTimeSrcBpsDataPerInterval *DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerInterval `json:"RealTimeSrcBpsDataPerInterval" xml:"RealTimeSrcBpsDataPerInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRealTimeSrcBpsDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeSrcBpsDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeSrcBpsDataResponse) SetRequestId(v string) *DescribeVodDomainRealTimeSrcBpsDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcBpsDataResponse) SetDomainName(v string) *DescribeVodDomainRealTimeSrcBpsDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcBpsDataResponse) SetStartTime(v string) *DescribeVodDomainRealTimeSrcBpsDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcBpsDataResponse) SetEndTime(v string) *DescribeVodDomainRealTimeSrcBpsDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcBpsDataResponse) SetDataInterval(v string) *DescribeVodDomainRealTimeSrcBpsDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcBpsDataResponse) SetRealTimeSrcBpsDataPerInterval(v *DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerInterval) *DescribeVodDomainRealTimeSrcBpsDataResponse {
  s.RealTimeSrcBpsDataPerInterval = v
  return s
}

type DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerInterval struct {
  DataModule []*DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerInterval) SetDataModule(v []*DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerIntervalDataModule) *DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerIntervalDataModule) SetValue(v string) *DescribeVodDomainRealTimeSrcBpsDataResponseRealTimeSrcBpsDataPerIntervalDataModule {
  s.Value = &v
  return s
}

type DescribeVodDomainRealTimeReqHitRateDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainRealTimeReqHitRateDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeReqHitRateDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeReqHitRateDataRequest) SetOwnerId(v int64) *DescribeVodDomainRealTimeReqHitRateDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainRealTimeReqHitRateDataRequest) SetDomainName(v string) *DescribeVodDomainRealTimeReqHitRateDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeReqHitRateDataRequest) SetStartTime(v string) *DescribeVodDomainRealTimeReqHitRateDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeReqHitRateDataRequest) SetEndTime(v string) *DescribeVodDomainRealTimeReqHitRateDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainRealTimeReqHitRateDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Data *DescribeVodDomainRealTimeReqHitRateDataResponseData `json:"Data" xml:"Data" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRealTimeReqHitRateDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeReqHitRateDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeReqHitRateDataResponse) SetRequestId(v string) *DescribeVodDomainRealTimeReqHitRateDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainRealTimeReqHitRateDataResponse) SetData(v *DescribeVodDomainRealTimeReqHitRateDataResponseData) *DescribeVodDomainRealTimeReqHitRateDataResponse {
  s.Data = v
  return s
}

type DescribeVodDomainRealTimeReqHitRateDataResponseData struct {
  ReqHitRateDataModel []*DescribeVodDomainRealTimeReqHitRateDataResponseDataReqHitRateDataModel `json:"ReqHitRateDataModel" xml:"ReqHitRateDataModel" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRealTimeReqHitRateDataResponseData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeReqHitRateDataResponseData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeReqHitRateDataResponseData) SetReqHitRateDataModel(v []*DescribeVodDomainRealTimeReqHitRateDataResponseDataReqHitRateDataModel) *DescribeVodDomainRealTimeReqHitRateDataResponseData {
  s.ReqHitRateDataModel = v
  return s
}

type DescribeVodDomainRealTimeReqHitRateDataResponseDataReqHitRateDataModel struct     {
  ReqHitRate *float32 `json:"ReqHitRate" xml:"ReqHitRate" require:"true"`
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeVodDomainRealTimeReqHitRateDataResponseDataReqHitRateDataModel) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeReqHitRateDataResponseDataReqHitRateDataModel) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeReqHitRateDataResponseDataReqHitRateDataModel) SetReqHitRate(v float32) *DescribeVodDomainRealTimeReqHitRateDataResponseDataReqHitRateDataModel {
  s.ReqHitRate = &v
  return s
}

func (s *DescribeVodDomainRealTimeReqHitRateDataResponseDataReqHitRateDataModel) SetTimeStamp(v string) *DescribeVodDomainRealTimeReqHitRateDataResponseDataReqHitRateDataModel {
  s.TimeStamp = &v
  return s
}

type DescribeVodDomainRealTimeQpsDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainRealTimeQpsDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeQpsDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeQpsDataRequest) SetOwnerId(v int64) *DescribeVodDomainRealTimeQpsDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainRealTimeQpsDataRequest) SetDomainName(v string) *DescribeVodDomainRealTimeQpsDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeQpsDataRequest) SetIspNameEn(v string) *DescribeVodDomainRealTimeQpsDataRequest {
  s.IspNameEn = &v
  return s
}

func (s *DescribeVodDomainRealTimeQpsDataRequest) SetLocationNameEn(v string) *DescribeVodDomainRealTimeQpsDataRequest {
  s.LocationNameEn = &v
  return s
}

func (s *DescribeVodDomainRealTimeQpsDataRequest) SetStartTime(v string) *DescribeVodDomainRealTimeQpsDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeQpsDataRequest) SetEndTime(v string) *DescribeVodDomainRealTimeQpsDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainRealTimeQpsDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Data *DescribeVodDomainRealTimeQpsDataResponseData `json:"Data" xml:"Data" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRealTimeQpsDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeQpsDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeQpsDataResponse) SetRequestId(v string) *DescribeVodDomainRealTimeQpsDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainRealTimeQpsDataResponse) SetData(v *DescribeVodDomainRealTimeQpsDataResponseData) *DescribeVodDomainRealTimeQpsDataResponse {
  s.Data = v
  return s
}

type DescribeVodDomainRealTimeQpsDataResponseData struct {
  QpsModel []*DescribeVodDomainRealTimeQpsDataResponseDataQpsModel `json:"QpsModel" xml:"QpsModel" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRealTimeQpsDataResponseData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeQpsDataResponseData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeQpsDataResponseData) SetQpsModel(v []*DescribeVodDomainRealTimeQpsDataResponseDataQpsModel) *DescribeVodDomainRealTimeQpsDataResponseData {
  s.QpsModel = v
  return s
}

type DescribeVodDomainRealTimeQpsDataResponseDataQpsModel struct     {
  Qps *float32 `json:"Qps" xml:"Qps" require:"true"`
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeVodDomainRealTimeQpsDataResponseDataQpsModel) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeQpsDataResponseDataQpsModel) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeQpsDataResponseDataQpsModel) SetQps(v float32) *DescribeVodDomainRealTimeQpsDataResponseDataQpsModel {
  s.Qps = &v
  return s
}

func (s *DescribeVodDomainRealTimeQpsDataResponseDataQpsModel) SetTimeStamp(v string) *DescribeVodDomainRealTimeQpsDataResponseDataQpsModel {
  s.TimeStamp = &v
  return s
}

type DescribeVodDomainRealTimeHttpCodeDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn"`
}

func (s DescribeVodDomainRealTimeHttpCodeDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeHttpCodeDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeHttpCodeDataRequest) SetOwnerId(v int64) *DescribeVodDomainRealTimeHttpCodeDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataRequest) SetDomainName(v string) *DescribeVodDomainRealTimeHttpCodeDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataRequest) SetStartTime(v string) *DescribeVodDomainRealTimeHttpCodeDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataRequest) SetEndTime(v string) *DescribeVodDomainRealTimeHttpCodeDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataRequest) SetIspNameEn(v string) *DescribeVodDomainRealTimeHttpCodeDataRequest {
  s.IspNameEn = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataRequest) SetLocationNameEn(v string) *DescribeVodDomainRealTimeHttpCodeDataRequest {
  s.LocationNameEn = &v
  return s
}

type DescribeVodDomainRealTimeHttpCodeDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  RealTimeHttpCodeData *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeData `json:"RealTimeHttpCodeData" xml:"RealTimeHttpCodeData" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponse) SetRequestId(v string) *DescribeVodDomainRealTimeHttpCodeDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponse) SetDomainName(v string) *DescribeVodDomainRealTimeHttpCodeDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponse) SetStartTime(v string) *DescribeVodDomainRealTimeHttpCodeDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponse) SetEndTime(v string) *DescribeVodDomainRealTimeHttpCodeDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponse) SetDataInterval(v string) *DescribeVodDomainRealTimeHttpCodeDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponse) SetRealTimeHttpCodeData(v *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeData) *DescribeVodDomainRealTimeHttpCodeDataResponse {
  s.RealTimeHttpCodeData = v
  return s
}

type DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeData struct {
  UsageData []*DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageData `json:"UsageData" xml:"UsageData" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeData) SetUsageData(v []*DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageData) *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeData {
  s.UsageData = v
  return s
}

type DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageData struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValue `json:"Value" xml:"Value" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageData) SetTimeStamp(v string) *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageData {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageData) SetValue(v *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValue) *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageData {
  s.Value = v
  return s
}

type DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValue struct {
  RealTimeCodeProportionData []*DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData `json:"RealTimeCodeProportionData" xml:"RealTimeCodeProportionData" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValue) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValue) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValue) SetRealTimeCodeProportionData(v []*DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValue {
  s.RealTimeCodeProportionData = v
  return s
}

type DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData struct     {
  Code *string `json:"Code" xml:"Code" require:"true"`
  Proportion *string `json:"Proportion" xml:"Proportion" require:"true"`
  Count *string `json:"Count" xml:"Count" require:"true"`
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) SetCode(v string) *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData {
  s.Code = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) SetProportion(v string) *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData {
  s.Proportion = &v
  return s
}

func (s *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData) SetCount(v string) *DescribeVodDomainRealTimeHttpCodeDataResponseRealTimeHttpCodeDataUsageDataValueRealTimeCodeProportionData {
  s.Count = &v
  return s
}

type DescribeVodDomainRealTimeByteHitRateDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainRealTimeByteHitRateDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeByteHitRateDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeByteHitRateDataRequest) SetOwnerId(v int64) *DescribeVodDomainRealTimeByteHitRateDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainRealTimeByteHitRateDataRequest) SetDomainName(v string) *DescribeVodDomainRealTimeByteHitRateDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeByteHitRateDataRequest) SetStartTime(v string) *DescribeVodDomainRealTimeByteHitRateDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeByteHitRateDataRequest) SetEndTime(v string) *DescribeVodDomainRealTimeByteHitRateDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainRealTimeByteHitRateDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Data *DescribeVodDomainRealTimeByteHitRateDataResponseData `json:"Data" xml:"Data" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRealTimeByteHitRateDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeByteHitRateDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeByteHitRateDataResponse) SetRequestId(v string) *DescribeVodDomainRealTimeByteHitRateDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainRealTimeByteHitRateDataResponse) SetData(v *DescribeVodDomainRealTimeByteHitRateDataResponseData) *DescribeVodDomainRealTimeByteHitRateDataResponse {
  s.Data = v
  return s
}

type DescribeVodDomainRealTimeByteHitRateDataResponseData struct {
  ByteHitRateDataModel []*DescribeVodDomainRealTimeByteHitRateDataResponseDataByteHitRateDataModel `json:"ByteHitRateDataModel" xml:"ByteHitRateDataModel" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRealTimeByteHitRateDataResponseData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeByteHitRateDataResponseData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeByteHitRateDataResponseData) SetByteHitRateDataModel(v []*DescribeVodDomainRealTimeByteHitRateDataResponseDataByteHitRateDataModel) *DescribeVodDomainRealTimeByteHitRateDataResponseData {
  s.ByteHitRateDataModel = v
  return s
}

type DescribeVodDomainRealTimeByteHitRateDataResponseDataByteHitRateDataModel struct     {
  ByteHitRate *float32 `json:"ByteHitRate" xml:"ByteHitRate" require:"true"`
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeVodDomainRealTimeByteHitRateDataResponseDataByteHitRateDataModel) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeByteHitRateDataResponseDataByteHitRateDataModel) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeByteHitRateDataResponseDataByteHitRateDataModel) SetByteHitRate(v float32) *DescribeVodDomainRealTimeByteHitRateDataResponseDataByteHitRateDataModel {
  s.ByteHitRate = &v
  return s
}

func (s *DescribeVodDomainRealTimeByteHitRateDataResponseDataByteHitRateDataModel) SetTimeStamp(v string) *DescribeVodDomainRealTimeByteHitRateDataResponseDataByteHitRateDataModel {
  s.TimeStamp = &v
  return s
}

type DescribeVodDomainRealTimeBpsDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainRealTimeBpsDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeBpsDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeBpsDataRequest) SetOwnerId(v int64) *DescribeVodDomainRealTimeBpsDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainRealTimeBpsDataRequest) SetDomainName(v string) *DescribeVodDomainRealTimeBpsDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainRealTimeBpsDataRequest) SetIspNameEn(v string) *DescribeVodDomainRealTimeBpsDataRequest {
  s.IspNameEn = &v
  return s
}

func (s *DescribeVodDomainRealTimeBpsDataRequest) SetLocationNameEn(v string) *DescribeVodDomainRealTimeBpsDataRequest {
  s.LocationNameEn = &v
  return s
}

func (s *DescribeVodDomainRealTimeBpsDataRequest) SetStartTime(v string) *DescribeVodDomainRealTimeBpsDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainRealTimeBpsDataRequest) SetEndTime(v string) *DescribeVodDomainRealTimeBpsDataRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainRealTimeBpsDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Data *DescribeVodDomainRealTimeBpsDataResponseData `json:"Data" xml:"Data" require:"true" type:"Struct"`
}

func (s DescribeVodDomainRealTimeBpsDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeBpsDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeBpsDataResponse) SetRequestId(v string) *DescribeVodDomainRealTimeBpsDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainRealTimeBpsDataResponse) SetData(v *DescribeVodDomainRealTimeBpsDataResponseData) *DescribeVodDomainRealTimeBpsDataResponse {
  s.Data = v
  return s
}

type DescribeVodDomainRealTimeBpsDataResponseData struct {
  BpsModel []*DescribeVodDomainRealTimeBpsDataResponseDataBpsModel `json:"BpsModel" xml:"BpsModel" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainRealTimeBpsDataResponseData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeBpsDataResponseData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeBpsDataResponseData) SetBpsModel(v []*DescribeVodDomainRealTimeBpsDataResponseDataBpsModel) *DescribeVodDomainRealTimeBpsDataResponseData {
  s.BpsModel = v
  return s
}

type DescribeVodDomainRealTimeBpsDataResponseDataBpsModel struct     {
  Bps *float32 `json:"Bps" xml:"Bps" require:"true"`
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
}

func (s DescribeVodDomainRealTimeBpsDataResponseDataBpsModel) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainRealTimeBpsDataResponseDataBpsModel) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainRealTimeBpsDataResponseDataBpsModel) SetBps(v float32) *DescribeVodDomainRealTimeBpsDataResponseDataBpsModel {
  s.Bps = &v
  return s
}

func (s *DescribeVodDomainRealTimeBpsDataResponseDataBpsModel) SetTimeStamp(v string) *DescribeVodDomainRealTimeBpsDataResponseDataBpsModel {
  s.TimeStamp = &v
  return s
}

type DescribeVodDomainQpsDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  Interval *string `json:"Interval" xml:"Interval"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn"`
}

func (s DescribeVodDomainQpsDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainQpsDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainQpsDataRequest) SetOwnerId(v int64) *DescribeVodDomainQpsDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainQpsDataRequest) SetDomainName(v string) *DescribeVodDomainQpsDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainQpsDataRequest) SetStartTime(v string) *DescribeVodDomainQpsDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainQpsDataRequest) SetEndTime(v string) *DescribeVodDomainQpsDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainQpsDataRequest) SetInterval(v string) *DescribeVodDomainQpsDataRequest {
  s.Interval = &v
  return s
}

func (s *DescribeVodDomainQpsDataRequest) SetIspNameEn(v string) *DescribeVodDomainQpsDataRequest {
  s.IspNameEn = &v
  return s
}

func (s *DescribeVodDomainQpsDataRequest) SetLocationNameEn(v string) *DescribeVodDomainQpsDataRequest {
  s.LocationNameEn = &v
  return s
}

type DescribeVodDomainQpsDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  QpsDataInterval *DescribeVodDomainQpsDataResponseQpsDataInterval `json:"QpsDataInterval" xml:"QpsDataInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainQpsDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainQpsDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainQpsDataResponse) SetRequestId(v string) *DescribeVodDomainQpsDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponse) SetDomainName(v string) *DescribeVodDomainQpsDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponse) SetStartTime(v string) *DescribeVodDomainQpsDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponse) SetEndTime(v string) *DescribeVodDomainQpsDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponse) SetDataInterval(v string) *DescribeVodDomainQpsDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponse) SetQpsDataInterval(v *DescribeVodDomainQpsDataResponseQpsDataInterval) *DescribeVodDomainQpsDataResponse {
  s.QpsDataInterval = v
  return s
}

type DescribeVodDomainQpsDataResponseQpsDataInterval struct {
  DataModule []*DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainQpsDataResponseQpsDataInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainQpsDataResponseQpsDataInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainQpsDataResponseQpsDataInterval) SetDataModule(v []*DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) *DescribeVodDomainQpsDataResponseQpsDataInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
  DomesticValue *string `json:"DomesticValue" xml:"DomesticValue" require:"true"`
  OverseasValue *string `json:"OverseasValue" xml:"OverseasValue" require:"true"`
  AccValue *string `json:"AccValue" xml:"AccValue" require:"true"`
  AccDomesticValue *string `json:"AccDomesticValue" xml:"AccDomesticValue" require:"true"`
  AccOverseasValue *string `json:"AccOverseasValue" xml:"AccOverseasValue" require:"true"`
  HttpsValue *string `json:"HttpsValue" xml:"HttpsValue" require:"true"`
  HttpsDomesticValue *string `json:"HttpsDomesticValue" xml:"HttpsDomesticValue" require:"true"`
  HttpsOverseasValue *string `json:"HttpsOverseasValue" xml:"HttpsOverseasValue" require:"true"`
  HttpsAccValue *string `json:"HttpsAccValue" xml:"HttpsAccValue" require:"true"`
  HttpsAccDomesticValue *string `json:"HttpsAccDomesticValue" xml:"HttpsAccDomesticValue" require:"true"`
  HttpsAccOverseasValue *string `json:"HttpsAccOverseasValue" xml:"HttpsAccOverseasValue" require:"true"`
}

func (s DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.Value = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetDomesticValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.DomesticValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetOverseasValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.OverseasValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetAccValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.AccValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetAccDomesticValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.AccDomesticValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetAccOverseasValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.AccOverseasValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetHttpsValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.HttpsValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetHttpsDomesticValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.HttpsDomesticValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetHttpsOverseasValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.HttpsOverseasValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetHttpsAccValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.HttpsAccValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetHttpsAccDomesticValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.HttpsAccDomesticValue = &v
  return s
}

func (s *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule) SetHttpsAccOverseasValue(v string) *DescribeVodDomainQpsDataResponseQpsDataIntervalDataModule {
  s.HttpsAccOverseasValue = &v
  return s
}

type DescribeVodDomainHttpCodeDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  Interval *string `json:"Interval" xml:"Interval"`
}

func (s DescribeVodDomainHttpCodeDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHttpCodeDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHttpCodeDataRequest) SetOwnerId(v int64) *DescribeVodDomainHttpCodeDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataRequest) SetDomainName(v string) *DescribeVodDomainHttpCodeDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataRequest) SetStartTime(v string) *DescribeVodDomainHttpCodeDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataRequest) SetEndTime(v string) *DescribeVodDomainHttpCodeDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataRequest) SetInterval(v string) *DescribeVodDomainHttpCodeDataRequest {
  s.Interval = &v
  return s
}

type DescribeVodDomainHttpCodeDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  HttpCodeData *DescribeVodDomainHttpCodeDataResponseHttpCodeData `json:"HttpCodeData" xml:"HttpCodeData" require:"true" type:"Struct"`
}

func (s DescribeVodDomainHttpCodeDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHttpCodeDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHttpCodeDataResponse) SetRequestId(v string) *DescribeVodDomainHttpCodeDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataResponse) SetDomainName(v string) *DescribeVodDomainHttpCodeDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataResponse) SetStartTime(v string) *DescribeVodDomainHttpCodeDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataResponse) SetEndTime(v string) *DescribeVodDomainHttpCodeDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataResponse) SetDataInterval(v string) *DescribeVodDomainHttpCodeDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataResponse) SetHttpCodeData(v *DescribeVodDomainHttpCodeDataResponseHttpCodeData) *DescribeVodDomainHttpCodeDataResponse {
  s.HttpCodeData = v
  return s
}

type DescribeVodDomainHttpCodeDataResponseHttpCodeData struct {
  UsageData []*DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageData `json:"UsageData" xml:"UsageData" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainHttpCodeDataResponseHttpCodeData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHttpCodeDataResponseHttpCodeData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHttpCodeDataResponseHttpCodeData) SetUsageData(v []*DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageData) *DescribeVodDomainHttpCodeDataResponseHttpCodeData {
  s.UsageData = v
  return s
}

type DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageData struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValue `json:"Value" xml:"Value" require:"true" type:"Struct"`
}

func (s DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageData) SetTimeStamp(v string) *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageData {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageData) SetValue(v *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValue) *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageData {
  s.Value = v
  return s
}

type DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValue struct {
  CodeProportionData []*DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData `json:"CodeProportionData" xml:"CodeProportionData" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValue) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValue) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValue) SetCodeProportionData(v []*DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData) *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValue {
  s.CodeProportionData = v
  return s
}

type DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData struct     {
  Code *string `json:"Code" xml:"Code" require:"true"`
  Proportion *string `json:"Proportion" xml:"Proportion" require:"true"`
  Count *string `json:"Count" xml:"Count" require:"true"`
}

func (s DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData) SetCode(v string) *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData {
  s.Code = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData) SetProportion(v string) *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData {
  s.Proportion = &v
  return s
}

func (s *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData) SetCount(v string) *DescribeVodDomainHttpCodeDataResponseHttpCodeDataUsageDataValueCodeProportionData {
  s.Count = &v
  return s
}

type DescribeVodDomainHitRateDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  Interval *string `json:"Interval" xml:"Interval"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn"`
}

func (s DescribeVodDomainHitRateDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHitRateDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHitRateDataRequest) SetOwnerId(v int64) *DescribeVodDomainHitRateDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainHitRateDataRequest) SetDomainName(v string) *DescribeVodDomainHitRateDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainHitRateDataRequest) SetStartTime(v string) *DescribeVodDomainHitRateDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainHitRateDataRequest) SetEndTime(v string) *DescribeVodDomainHitRateDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainHitRateDataRequest) SetInterval(v string) *DescribeVodDomainHitRateDataRequest {
  s.Interval = &v
  return s
}

func (s *DescribeVodDomainHitRateDataRequest) SetIspNameEn(v string) *DescribeVodDomainHitRateDataRequest {
  s.IspNameEn = &v
  return s
}

func (s *DescribeVodDomainHitRateDataRequest) SetLocationNameEn(v string) *DescribeVodDomainHitRateDataRequest {
  s.LocationNameEn = &v
  return s
}

type DescribeVodDomainHitRateDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  HitRateInterval *DescribeVodDomainHitRateDataResponseHitRateInterval `json:"HitRateInterval" xml:"HitRateInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainHitRateDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHitRateDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHitRateDataResponse) SetRequestId(v string) *DescribeVodDomainHitRateDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainHitRateDataResponse) SetDomainName(v string) *DescribeVodDomainHitRateDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainHitRateDataResponse) SetStartTime(v string) *DescribeVodDomainHitRateDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainHitRateDataResponse) SetEndTime(v string) *DescribeVodDomainHitRateDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainHitRateDataResponse) SetDataInterval(v string) *DescribeVodDomainHitRateDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainHitRateDataResponse) SetHitRateInterval(v *DescribeVodDomainHitRateDataResponseHitRateInterval) *DescribeVodDomainHitRateDataResponse {
  s.HitRateInterval = v
  return s
}

type DescribeVodDomainHitRateDataResponseHitRateInterval struct {
  DataModule []*DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainHitRateDataResponseHitRateInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHitRateDataResponseHitRateInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHitRateDataResponseHitRateInterval) SetDataModule(v []*DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule) *DescribeVodDomainHitRateDataResponseHitRateInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
  HttpsValue *string `json:"HttpsValue" xml:"HttpsValue" require:"true"`
}

func (s DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule) SetValue(v string) *DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule {
  s.Value = &v
  return s
}

func (s *DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule) SetHttpsValue(v string) *DescribeVodDomainHitRateDataResponseHitRateIntervalDataModule {
  s.HttpsValue = &v
  return s
}

type DescribeVodDomainBpsDataRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  Interval *string `json:"Interval" xml:"Interval"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn"`
}

func (s DescribeVodDomainBpsDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainBpsDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainBpsDataRequest) SetOwnerId(v int64) *DescribeVodDomainBpsDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainBpsDataRequest) SetDomainName(v string) *DescribeVodDomainBpsDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainBpsDataRequest) SetStartTime(v string) *DescribeVodDomainBpsDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainBpsDataRequest) SetEndTime(v string) *DescribeVodDomainBpsDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainBpsDataRequest) SetInterval(v string) *DescribeVodDomainBpsDataRequest {
  s.Interval = &v
  return s
}

func (s *DescribeVodDomainBpsDataRequest) SetIspNameEn(v string) *DescribeVodDomainBpsDataRequest {
  s.IspNameEn = &v
  return s
}

func (s *DescribeVodDomainBpsDataRequest) SetLocationNameEn(v string) *DescribeVodDomainBpsDataRequest {
  s.LocationNameEn = &v
  return s
}

type DescribeVodDomainBpsDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn" require:"true"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  BpsDataPerInterval *DescribeVodDomainBpsDataResponseBpsDataPerInterval `json:"BpsDataPerInterval" xml:"BpsDataPerInterval" require:"true" type:"Struct"`
}

func (s DescribeVodDomainBpsDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainBpsDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainBpsDataResponse) SetRequestId(v string) *DescribeVodDomainBpsDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponse) SetDomainName(v string) *DescribeVodDomainBpsDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponse) SetStartTime(v string) *DescribeVodDomainBpsDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponse) SetEndTime(v string) *DescribeVodDomainBpsDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponse) SetLocationNameEn(v string) *DescribeVodDomainBpsDataResponse {
  s.LocationNameEn = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponse) SetIspNameEn(v string) *DescribeVodDomainBpsDataResponse {
  s.IspNameEn = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponse) SetDataInterval(v string) *DescribeVodDomainBpsDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponse) SetBpsDataPerInterval(v *DescribeVodDomainBpsDataResponseBpsDataPerInterval) *DescribeVodDomainBpsDataResponse {
  s.BpsDataPerInterval = v
  return s
}

type DescribeVodDomainBpsDataResponseBpsDataPerInterval struct {
  DataModule []*DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainBpsDataResponseBpsDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainBpsDataResponseBpsDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainBpsDataResponseBpsDataPerInterval) SetDataModule(v []*DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) *DescribeVodDomainBpsDataResponseBpsDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
  DomesticValue *string `json:"DomesticValue" xml:"DomesticValue" require:"true"`
  OverseasValue *string `json:"OverseasValue" xml:"OverseasValue" require:"true"`
  HttpsValue *string `json:"HttpsValue" xml:"HttpsValue" require:"true"`
  HttpsDomesticValue *string `json:"HttpsDomesticValue" xml:"HttpsDomesticValue" require:"true"`
  HttpsOverseasValue *string `json:"HttpsOverseasValue" xml:"HttpsOverseasValue" require:"true"`
}

func (s DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) SetValue(v string) *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.Value = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) SetDomesticValue(v string) *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.DomesticValue = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) SetOverseasValue(v string) *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.OverseasValue = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) SetHttpsValue(v string) *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.HttpsValue = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) SetHttpsDomesticValue(v string) *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.HttpsDomesticValue = &v
  return s
}

func (s *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule) SetHttpsOverseasValue(v string) *DescribeVodDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.HttpsOverseasValue = &v
  return s
}

type GetVideoDNAResultRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
}

func (s GetVideoDNAResultRequest) String() string {
  return tea.Prettify(s)
}

func (s GetVideoDNAResultRequest) GoString() string {
  return s.String()
}

func (s *GetVideoDNAResultRequest) SetAccessKeyId(v string) *GetVideoDNAResultRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetVideoDNAResultRequest) SetOwnerId(v string) *GetVideoDNAResultRequest {
  s.OwnerId = &v
  return s
}

func (s *GetVideoDNAResultRequest) SetResourceOwnerId(v string) *GetVideoDNAResultRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetVideoDNAResultRequest) SetResourceOwnerAccount(v string) *GetVideoDNAResultRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetVideoDNAResultRequest) SetOwnerAccount(v string) *GetVideoDNAResultRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetVideoDNAResultRequest) SetMediaId(v string) *GetVideoDNAResultRequest {
  s.MediaId = &v
  return s
}

type GetVideoDNAResultResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoDNAResult *GetVideoDNAResultResponseAIVideoDNAResult `json:"AIVideoDNAResult" xml:"AIVideoDNAResult" require:"true" type:"Struct"`
}

func (s GetVideoDNAResultResponse) String() string {
  return tea.Prettify(s)
}

func (s GetVideoDNAResultResponse) GoString() string {
  return s.String()
}

func (s *GetVideoDNAResultResponse) SetRequestId(v string) *GetVideoDNAResultResponse {
  s.RequestId = &v
  return s
}

func (s *GetVideoDNAResultResponse) SetAIVideoDNAResult(v *GetVideoDNAResultResponseAIVideoDNAResult) *GetVideoDNAResultResponse {
  s.AIVideoDNAResult = v
  return s
}

type GetVideoDNAResultResponseAIVideoDNAResult struct {
  FpShots []*GetVideoDNAResultResponseAIVideoDNAResultFpShots `json:"FpShots" xml:"FpShots" require:"true" type:"Repeated"`
}

func (s GetVideoDNAResultResponseAIVideoDNAResult) String() string {
  return tea.Prettify(s)
}

func (s GetVideoDNAResultResponseAIVideoDNAResult) GoString() string {
  return s.String()
}

func (s *GetVideoDNAResultResponseAIVideoDNAResult) SetFpShots(v []*GetVideoDNAResultResponseAIVideoDNAResultFpShots) *GetVideoDNAResultResponseAIVideoDNAResult {
  s.FpShots = v
  return s
}

type GetVideoDNAResultResponseAIVideoDNAResultFpShots struct     {
  PrimaryKey *string `json:"PrimaryKey" xml:"PrimaryKey" require:"true"`
  Similarity *string `json:"Similarity" xml:"Similarity" require:"true"`
  FpShotSlices []*GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlices `json:"FpShotSlices" xml:"FpShotSlices" require:"true" type:"Repeated"`
}

func (s GetVideoDNAResultResponseAIVideoDNAResultFpShots) String() string {
  return tea.Prettify(s)
}

func (s GetVideoDNAResultResponseAIVideoDNAResultFpShots) GoString() string {
  return s.String()
}

func (s *GetVideoDNAResultResponseAIVideoDNAResultFpShots) SetPrimaryKey(v string) *GetVideoDNAResultResponseAIVideoDNAResultFpShots {
  s.PrimaryKey = &v
  return s
}

func (s *GetVideoDNAResultResponseAIVideoDNAResultFpShots) SetSimilarity(v string) *GetVideoDNAResultResponseAIVideoDNAResultFpShots {
  s.Similarity = &v
  return s
}

func (s *GetVideoDNAResultResponseAIVideoDNAResultFpShots) SetFpShotSlices(v []*GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlices) *GetVideoDNAResultResponseAIVideoDNAResultFpShots {
  s.FpShotSlices = v
  return s
}

type GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlices struct     {
  Input *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesInput `json:"Input" xml:"Input" require:"true" type:"Struct"`
  Duplication *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesDuplication `json:"Duplication" xml:"Duplication" require:"true" type:"Struct"`
}

func (s GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlices) String() string {
  return tea.Prettify(s)
}

func (s GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlices) GoString() string {
  return s.String()
}

func (s *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlices) SetInput(v *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesInput) *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlices {
  s.Input = v
  return s
}

func (s *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlices) SetDuplication(v *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesDuplication) *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlices {
  s.Duplication = v
  return s
}

type GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesInput struct {
  Start *string `json:"Start" xml:"Start" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
}

func (s GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesInput) String() string {
  return tea.Prettify(s)
}

func (s GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesInput) GoString() string {
  return s.String()
}

func (s *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesInput) SetStart(v string) *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesInput {
  s.Start = &v
  return s
}

func (s *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesInput) SetDuration(v string) *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesInput {
  s.Duration = &v
  return s
}

type GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesDuplication struct {
  Start *string `json:"Start" xml:"Start" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
}

func (s GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesDuplication) String() string {
  return tea.Prettify(s)
}

func (s GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesDuplication) GoString() string {
  return s.String()
}

func (s *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesDuplication) SetStart(v string) *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesDuplication {
  s.Start = &v
  return s
}

func (s *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesDuplication) SetDuration(v string) *GetVideoDNAResultResponseAIVideoDNAResultFpShotsFpShotSlicesDuplication {
  s.Duration = &v
  return s
}

type DescribeVodCertificateDetailRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  CertName *string `json:"CertName" xml:"CertName" require:"true"`
}

func (s DescribeVodCertificateDetailRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodCertificateDetailRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodCertificateDetailRequest) SetOwnerId(v int64) *DescribeVodCertificateDetailRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodCertificateDetailRequest) SetSecurityToken(v string) *DescribeVodCertificateDetailRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeVodCertificateDetailRequest) SetCertName(v string) *DescribeVodCertificateDetailRequest {
  s.CertName = &v
  return s
}

type DescribeVodCertificateDetailResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Cert *string `json:"Cert" xml:"Cert" require:"true"`
  Key *string `json:"Key" xml:"Key" require:"true"`
  CertId *int64 `json:"CertId" xml:"CertId" require:"true"`
  CertName *string `json:"CertName" xml:"CertName" require:"true"`
}

func (s DescribeVodCertificateDetailResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodCertificateDetailResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodCertificateDetailResponse) SetRequestId(v string) *DescribeVodCertificateDetailResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodCertificateDetailResponse) SetCert(v string) *DescribeVodCertificateDetailResponse {
  s.Cert = &v
  return s
}

func (s *DescribeVodCertificateDetailResponse) SetKey(v string) *DescribeVodCertificateDetailResponse {
  s.Key = &v
  return s
}

func (s *DescribeVodCertificateDetailResponse) SetCertId(v int64) *DescribeVodCertificateDetailResponse {
  s.CertId = &v
  return s
}

func (s *DescribeVodCertificateDetailResponse) SetCertName(v string) *DescribeVodCertificateDetailResponse {
  s.CertName = &v
  return s
}

type DeleteImageRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  DeleteImageType *string `json:"DeleteImageType" xml:"DeleteImageType" require:"true"`
  ImageURLs *string `json:"ImageURLs" xml:"ImageURLs"`
  ImageIds *string `json:"ImageIds" xml:"ImageIds"`
  VideoId *string `json:"VideoId" xml:"VideoId"`
  ImageType *string `json:"ImageType" xml:"ImageType"`
}

func (s DeleteImageRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteImageRequest) GoString() string {
  return s.String()
}

func (s *DeleteImageRequest) SetAccessKeyId(v string) *DeleteImageRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteImageRequest) SetOwnerId(v int64) *DeleteImageRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteImageRequest) SetResourceOwnerAccount(v string) *DeleteImageRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteImageRequest) SetResourceOwnerId(v int64) *DeleteImageRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteImageRequest) SetDeleteImageType(v string) *DeleteImageRequest {
  s.DeleteImageType = &v
  return s
}

func (s *DeleteImageRequest) SetImageURLs(v string) *DeleteImageRequest {
  s.ImageURLs = &v
  return s
}

func (s *DeleteImageRequest) SetImageIds(v string) *DeleteImageRequest {
  s.ImageIds = &v
  return s
}

func (s *DeleteImageRequest) SetVideoId(v string) *DeleteImageRequest {
  s.VideoId = &v
  return s
}

func (s *DeleteImageRequest) SetImageType(v string) *DeleteImageRequest {
  s.ImageType = &v
  return s
}

type DeleteImageResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteImageResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteImageResponse) GoString() string {
  return s.String()
}

func (s *DeleteImageResponse) SetRequestId(v string) *DeleteImageResponse {
  s.RequestId = &v
  return s
}

type GetAuditResultDetailRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
}

func (s GetAuditResultDetailRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAuditResultDetailRequest) GoString() string {
  return s.String()
}

func (s *GetAuditResultDetailRequest) SetAccessKeyId(v string) *GetAuditResultDetailRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetAuditResultDetailRequest) SetOwnerId(v string) *GetAuditResultDetailRequest {
  s.OwnerId = &v
  return s
}

func (s *GetAuditResultDetailRequest) SetResourceOwnerId(v string) *GetAuditResultDetailRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetAuditResultDetailRequest) SetResourceOwnerAccount(v string) *GetAuditResultDetailRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetAuditResultDetailRequest) SetOwnerAccount(v string) *GetAuditResultDetailRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetAuditResultDetailRequest) SetMediaId(v string) *GetAuditResultDetailRequest {
  s.MediaId = &v
  return s
}

func (s *GetAuditResultDetailRequest) SetPageNo(v int) *GetAuditResultDetailRequest {
  s.PageNo = &v
  return s
}

type GetAuditResultDetailResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIAuditResultDetail *GetAuditResultDetailResponseAIAuditResultDetail `json:"AIAuditResultDetail" xml:"AIAuditResultDetail" require:"true" type:"Struct"`
}

func (s GetAuditResultDetailResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAuditResultDetailResponse) GoString() string {
  return s.String()
}

func (s *GetAuditResultDetailResponse) SetRequestId(v string) *GetAuditResultDetailResponse {
  s.RequestId = &v
  return s
}

func (s *GetAuditResultDetailResponse) SetAIAuditResultDetail(v *GetAuditResultDetailResponseAIAuditResultDetail) *GetAuditResultDetailResponse {
  s.AIAuditResultDetail = v
  return s
}

type GetAuditResultDetailResponseAIAuditResultDetail struct {
  Total *int `json:"Total" xml:"Total" require:"true"`
  List []*GetAuditResultDetailResponseAIAuditResultDetailList `json:"List" xml:"List" require:"true" type:"Repeated"`
}

func (s GetAuditResultDetailResponseAIAuditResultDetail) String() string {
  return tea.Prettify(s)
}

func (s GetAuditResultDetailResponseAIAuditResultDetail) GoString() string {
  return s.String()
}

func (s *GetAuditResultDetailResponseAIAuditResultDetail) SetTotal(v int) *GetAuditResultDetailResponseAIAuditResultDetail {
  s.Total = &v
  return s
}

func (s *GetAuditResultDetailResponseAIAuditResultDetail) SetList(v []*GetAuditResultDetailResponseAIAuditResultDetailList) *GetAuditResultDetailResponseAIAuditResultDetail {
  s.List = v
  return s
}

type GetAuditResultDetailResponseAIAuditResultDetailList struct     {
  PornLabel *string `json:"PornLabel" xml:"PornLabel" require:"true"`
  PornScore *string `json:"PornScore" xml:"PornScore" require:"true"`
  TerrorismLabel *string `json:"TerrorismLabel" xml:"TerrorismLabel" require:"true"`
  TerrorismScore *string `json:"TerrorismScore" xml:"TerrorismScore" require:"true"`
  Index *string `json:"Index" xml:"Index" require:"true"`
  Object *string `json:"Object" xml:"Object" require:"true"`
  Timestamp *string `json:"Timestamp" xml:"Timestamp" require:"true"`
}

func (s GetAuditResultDetailResponseAIAuditResultDetailList) String() string {
  return tea.Prettify(s)
}

func (s GetAuditResultDetailResponseAIAuditResultDetailList) GoString() string {
  return s.String()
}

func (s *GetAuditResultDetailResponseAIAuditResultDetailList) SetPornLabel(v string) *GetAuditResultDetailResponseAIAuditResultDetailList {
  s.PornLabel = &v
  return s
}

func (s *GetAuditResultDetailResponseAIAuditResultDetailList) SetPornScore(v string) *GetAuditResultDetailResponseAIAuditResultDetailList {
  s.PornScore = &v
  return s
}

func (s *GetAuditResultDetailResponseAIAuditResultDetailList) SetTerrorismLabel(v string) *GetAuditResultDetailResponseAIAuditResultDetailList {
  s.TerrorismLabel = &v
  return s
}

func (s *GetAuditResultDetailResponseAIAuditResultDetailList) SetTerrorismScore(v string) *GetAuditResultDetailResponseAIAuditResultDetailList {
  s.TerrorismScore = &v
  return s
}

func (s *GetAuditResultDetailResponseAIAuditResultDetailList) SetIndex(v string) *GetAuditResultDetailResponseAIAuditResultDetailList {
  s.Index = &v
  return s
}

func (s *GetAuditResultDetailResponseAIAuditResultDetailList) SetObject(v string) *GetAuditResultDetailResponseAIAuditResultDetailList {
  s.Object = &v
  return s
}

func (s *GetAuditResultDetailResponseAIAuditResultDetailList) SetTimestamp(v string) *GetAuditResultDetailResponseAIAuditResultDetailList {
  s.Timestamp = &v
  return s
}

type GetMediaStreamRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  JobId *string `json:"JobId" xml:"JobId"`
  PlayURL *string `json:"PlayURL" xml:"PlayURL"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s GetMediaStreamRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMediaStreamRequest) GoString() string {
  return s.String()
}

func (s *GetMediaStreamRequest) SetOwnerId(v int64) *GetMediaStreamRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMediaStreamRequest) SetResourceOwnerAccount(v string) *GetMediaStreamRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMediaStreamRequest) SetResourceOwnerId(v int64) *GetMediaStreamRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMediaStreamRequest) SetJobId(v string) *GetMediaStreamRequest {
  s.JobId = &v
  return s
}

func (s *GetMediaStreamRequest) SetPlayURL(v string) *GetMediaStreamRequest {
  s.PlayURL = &v
  return s
}

func (s *GetMediaStreamRequest) SetResourceRealOwnerId(v int64) *GetMediaStreamRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type GetMediaStreamResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  StreamInfo *GetMediaStreamResponseStreamInfo `json:"StreamInfo" xml:"StreamInfo" require:"true" type:"Struct"`
}

func (s GetMediaStreamResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMediaStreamResponse) GoString() string {
  return s.String()
}

func (s *GetMediaStreamResponse) SetRequestId(v string) *GetMediaStreamResponse {
  s.RequestId = &v
  return s
}

func (s *GetMediaStreamResponse) SetStreamInfo(v *GetMediaStreamResponseStreamInfo) *GetMediaStreamResponse {
  s.StreamInfo = v
  return s
}

type GetMediaStreamResponseStreamInfo struct {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  FileType *string `json:"FileType" xml:"FileType" require:"true"`
  AudioStream *GetMediaStreamResponseStreamInfoAudioStream `json:"AudioStream" xml:"AudioStream" require:"true" type:"Struct"`
  VideoStream *GetMediaStreamResponseStreamInfoVideoStream `json:"VideoStream" xml:"VideoStream" require:"true" type:"Struct"`
  PlayInfo *GetMediaStreamResponseStreamInfoPlayInfo `json:"PlayInfo" xml:"PlayInfo" require:"true" type:"Struct"`
}

func (s GetMediaStreamResponseStreamInfo) String() string {
  return tea.Prettify(s)
}

func (s GetMediaStreamResponseStreamInfo) GoString() string {
  return s.String()
}

func (s *GetMediaStreamResponseStreamInfo) SetVideoId(v string) *GetMediaStreamResponseStreamInfo {
  s.VideoId = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfo) SetFileType(v string) *GetMediaStreamResponseStreamInfo {
  s.FileType = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfo) SetAudioStream(v *GetMediaStreamResponseStreamInfoAudioStream) *GetMediaStreamResponseStreamInfo {
  s.AudioStream = v
  return s
}

func (s *GetMediaStreamResponseStreamInfo) SetVideoStream(v *GetMediaStreamResponseStreamInfoVideoStream) *GetMediaStreamResponseStreamInfo {
  s.VideoStream = v
  return s
}

func (s *GetMediaStreamResponseStreamInfo) SetPlayInfo(v *GetMediaStreamResponseStreamInfoPlayInfo) *GetMediaStreamResponseStreamInfo {
  s.PlayInfo = v
  return s
}

type GetMediaStreamResponseStreamInfoAudioStream struct {
  Index *string `json:"Index" xml:"Index" require:"true"`
  CodecName *string `json:"CodecName" xml:"CodecName" require:"true"`
  CodecLongName *string `json:"CodecLongName" xml:"CodecLongName" require:"true"`
  CodecTimeBase *string `json:"CodecTimeBase" xml:"CodecTimeBase" require:"true"`
  CodecTagString *string `json:"CodecTagString" xml:"CodecTagString" require:"true"`
  CodecTag *string `json:"CodecTag" xml:"CodecTag" require:"true"`
  SampleFmt *string `json:"SampleFmt" xml:"SampleFmt" require:"true"`
  SampleRate *string `json:"SampleRate" xml:"SampleRate" require:"true"`
  Channels *string `json:"Channels" xml:"Channels" require:"true"`
  ChannelLayout *string `json:"ChannelLayout" xml:"ChannelLayout" require:"true"`
  Timebase *string `json:"Timebase" xml:"Timebase" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  NumFrames *string `json:"NumFrames" xml:"NumFrames" require:"true"`
  Lang *string `json:"Lang" xml:"Lang" require:"true"`
}

func (s GetMediaStreamResponseStreamInfoAudioStream) String() string {
  return tea.Prettify(s)
}

func (s GetMediaStreamResponseStreamInfoAudioStream) GoString() string {
  return s.String()
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetIndex(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.Index = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetCodecName(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.CodecName = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetCodecLongName(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.CodecLongName = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetCodecTimeBase(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.CodecTimeBase = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetCodecTagString(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.CodecTagString = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetCodecTag(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.CodecTag = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetSampleFmt(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.SampleFmt = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetSampleRate(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.SampleRate = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetChannels(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.Channels = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetChannelLayout(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.ChannelLayout = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetTimebase(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.Timebase = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetStartTime(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.StartTime = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetDuration(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.Duration = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetBitrate(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.Bitrate = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetNumFrames(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.NumFrames = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoAudioStream) SetLang(v string) *GetMediaStreamResponseStreamInfoAudioStream {
  s.Lang = &v
  return s
}

type GetMediaStreamResponseStreamInfoVideoStream struct {
  Index *string `json:"Index" xml:"Index" require:"true"`
  CodecName *string `json:"CodecName" xml:"CodecName" require:"true"`
  CodecLongName *string `json:"CodecLongName" xml:"CodecLongName" require:"true"`
  Profile *string `json:"Profile" xml:"Profile" require:"true"`
  CodecTimeBase *string `json:"CodecTimeBase" xml:"CodecTimeBase" require:"true"`
  CodecTagString *string `json:"CodecTagString" xml:"CodecTagString" require:"true"`
  CodecTag *string `json:"CodecTag" xml:"CodecTag" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  HasBFrames *string `json:"HasBFrames" xml:"HasBFrames" require:"true"`
  Sar *string `json:"Sar" xml:"Sar" require:"true"`
  Dar *string `json:"Dar" xml:"Dar" require:"true"`
  PixFmt *string `json:"PixFmt" xml:"PixFmt" require:"true"`
  Level *string `json:"Level" xml:"Level" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  AvgFPS *string `json:"AvgFPS" xml:"AvgFPS" require:"true"`
  Timebase *string `json:"Timebase" xml:"Timebase" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  NumFrames *string `json:"NumFrames" xml:"NumFrames" require:"true"`
  Lang *string `json:"Lang" xml:"Lang" require:"true"`
}

func (s GetMediaStreamResponseStreamInfoVideoStream) String() string {
  return tea.Prettify(s)
}

func (s GetMediaStreamResponseStreamInfoVideoStream) GoString() string {
  return s.String()
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetIndex(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Index = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetCodecName(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.CodecName = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetCodecLongName(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.CodecLongName = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetProfile(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Profile = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetCodecTimeBase(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.CodecTimeBase = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetCodecTagString(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.CodecTagString = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetCodecTag(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.CodecTag = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetWidth(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Width = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetHeight(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Height = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetHasBFrames(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.HasBFrames = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetSar(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Sar = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetDar(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Dar = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetPixFmt(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.PixFmt = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetLevel(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Level = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetFps(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Fps = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetAvgFPS(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.AvgFPS = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetTimebase(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Timebase = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetStartTime(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.StartTime = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetDuration(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Duration = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetNumFrames(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.NumFrames = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoVideoStream) SetLang(v string) *GetMediaStreamResponseStreamInfoVideoStream {
  s.Lang = &v
  return s
}

type GetMediaStreamResponseStreamInfoPlayInfo struct {
  Width *int64 `json:"Width" xml:"Width" require:"true"`
  Height *int64 `json:"Height" xml:"Height" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  PlayURL *string `json:"PlayURL" xml:"PlayURL" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Encrypt *int64 `json:"Encrypt" xml:"Encrypt" require:"true"`
  Plaintext *string `json:"Plaintext" xml:"Plaintext" require:"true"`
  Complexity *string `json:"Complexity" xml:"Complexity" require:"true"`
  StreamType *string `json:"StreamType" xml:"StreamType" require:"true"`
  Rand *string `json:"Rand" xml:"Rand" require:"true"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  PreprocessStatus *string `json:"PreprocessStatus" xml:"PreprocessStatus" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  EncryptType *string `json:"EncryptType" xml:"EncryptType" require:"true"`
  TemplateGroupId *string `json:"TemplateGroupId" xml:"TemplateGroupId" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
}

func (s GetMediaStreamResponseStreamInfoPlayInfo) String() string {
  return tea.Prettify(s)
}

func (s GetMediaStreamResponseStreamInfoPlayInfo) GoString() string {
  return s.String()
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetWidth(v int64) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Width = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetHeight(v int64) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Height = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetSize(v int64) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Size = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetPlayURL(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.PlayURL = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetBitrate(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Bitrate = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetDefinition(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Definition = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetDuration(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Duration = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetFormat(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Format = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetFps(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Fps = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetEncrypt(v int64) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Encrypt = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetPlaintext(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Plaintext = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetComplexity(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Complexity = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetStreamType(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.StreamType = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetRand(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Rand = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetJobId(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.JobId = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetPreprocessStatus(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.PreprocessStatus = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetWatermarkId(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.WatermarkId = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetStatus(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Status = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetCreationTime(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.CreationTime = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetModificationTime(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.ModificationTime = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetEncryptType(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.EncryptType = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetTemplateGroupId(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.TemplateGroupId = &v
  return s
}

func (s *GetMediaStreamResponseStreamInfoPlayInfo) SetSource(v string) *GetMediaStreamResponseStreamInfoPlayInfo {
  s.Source = &v
  return s
}

type PayOrderCallbackRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  Product *string `json:"product" xml:"product"`
  Version *string `json:"version" xml:"version"`
  Action *string `json:"action" xml:"action"`
  RegionId *string `json:"regionId" xml:"regionId"`
  Domain *string `json:"domain" xml:"domain"`
  Data *string `json:"data" xml:"data"`
}

func (s PayOrderCallbackRequest) String() string {
  return tea.Prettify(s)
}

func (s PayOrderCallbackRequest) GoString() string {
  return s.String()
}

func (s *PayOrderCallbackRequest) SetAccessKeyId(v string) *PayOrderCallbackRequest {
  s.AccessKeyId = &v
  return s
}

func (s *PayOrderCallbackRequest) SetOwnerId(v int64) *PayOrderCallbackRequest {
  s.OwnerId = &v
  return s
}

func (s *PayOrderCallbackRequest) SetSecurityToken(v string) *PayOrderCallbackRequest {
  s.SecurityToken = &v
  return s
}

func (s *PayOrderCallbackRequest) SetProduct(v string) *PayOrderCallbackRequest {
  s.Product = &v
  return s
}

func (s *PayOrderCallbackRequest) SetVersion(v string) *PayOrderCallbackRequest {
  s.Version = &v
  return s
}

func (s *PayOrderCallbackRequest) SetAction(v string) *PayOrderCallbackRequest {
  s.Action = &v
  return s
}

func (s *PayOrderCallbackRequest) SetRegionId(v string) *PayOrderCallbackRequest {
  s.RegionId = &v
  return s
}

func (s *PayOrderCallbackRequest) SetDomain(v string) *PayOrderCallbackRequest {
  s.Domain = &v
  return s
}

func (s *PayOrderCallbackRequest) SetData(v string) *PayOrderCallbackRequest {
  s.Data = &v
  return s
}

type PayOrderCallbackResponse struct {
  RequestId *string `json:"requestId" xml:"requestId" require:"true"`
  Success *bool `json:"success" xml:"success" require:"true"`
  Code *string `json:"code" xml:"code" require:"true"`
  Message *string `json:"message" xml:"message" require:"true"`
  Data *string `json:"data" xml:"data" require:"true"`
}

func (s PayOrderCallbackResponse) String() string {
  return tea.Prettify(s)
}

func (s PayOrderCallbackResponse) GoString() string {
  return s.String()
}

func (s *PayOrderCallbackResponse) SetRequestId(v string) *PayOrderCallbackResponse {
  s.RequestId = &v
  return s
}

func (s *PayOrderCallbackResponse) SetSuccess(v bool) *PayOrderCallbackResponse {
  s.Success = &v
  return s
}

func (s *PayOrderCallbackResponse) SetCode(v string) *PayOrderCallbackResponse {
  s.Code = &v
  return s
}

func (s *PayOrderCallbackResponse) SetMessage(v string) *PayOrderCallbackResponse {
  s.Message = &v
  return s
}

func (s *PayOrderCallbackResponse) SetData(v string) *PayOrderCallbackResponse {
  s.Data = &v
  return s
}

type ModifyRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  Product *string `json:"product" xml:"product"`
  Version *string `json:"version" xml:"version"`
  Action *string `json:"action" xml:"action"`
  RegionId *string `json:"regionId" xml:"regionId"`
  Domain *string `json:"domain" xml:"domain"`
  Data *string `json:"data" xml:"data"`
}

func (s ModifyRequest) String() string {
  return tea.Prettify(s)
}

func (s ModifyRequest) GoString() string {
  return s.String()
}

func (s *ModifyRequest) SetAccessKeyId(v string) *ModifyRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ModifyRequest) SetOwnerId(v int64) *ModifyRequest {
  s.OwnerId = &v
  return s
}

func (s *ModifyRequest) SetSecurityToken(v string) *ModifyRequest {
  s.SecurityToken = &v
  return s
}

func (s *ModifyRequest) SetProduct(v string) *ModifyRequest {
  s.Product = &v
  return s
}

func (s *ModifyRequest) SetVersion(v string) *ModifyRequest {
  s.Version = &v
  return s
}

func (s *ModifyRequest) SetAction(v string) *ModifyRequest {
  s.Action = &v
  return s
}

func (s *ModifyRequest) SetRegionId(v string) *ModifyRequest {
  s.RegionId = &v
  return s
}

func (s *ModifyRequest) SetDomain(v string) *ModifyRequest {
  s.Domain = &v
  return s
}

func (s *ModifyRequest) SetData(v string) *ModifyRequest {
  s.Data = &v
  return s
}

type ModifyResponse struct {
  RequestId *string `json:"requestId" xml:"requestId" require:"true"`
  Success *bool `json:"success" xml:"success" require:"true"`
  Code *string `json:"code" xml:"code" require:"true"`
  Message *string `json:"message" xml:"message" require:"true"`
  Data *string `json:"data" xml:"data" require:"true"`
}

func (s ModifyResponse) String() string {
  return tea.Prettify(s)
}

func (s ModifyResponse) GoString() string {
  return s.String()
}

func (s *ModifyResponse) SetRequestId(v string) *ModifyResponse {
  s.RequestId = &v
  return s
}

func (s *ModifyResponse) SetSuccess(v bool) *ModifyResponse {
  s.Success = &v
  return s
}

func (s *ModifyResponse) SetCode(v string) *ModifyResponse {
  s.Code = &v
  return s
}

func (s *ModifyResponse) SetMessage(v string) *ModifyResponse {
  s.Message = &v
  return s
}

func (s *ModifyResponse) SetData(v string) *ModifyResponse {
  s.Data = &v
  return s
}

type CompleteOrderParamRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  Product *string `json:"product" xml:"product"`
  Version *string `json:"version" xml:"version"`
  Action *string `json:"action" xml:"action"`
  RegionId *string `json:"regionId" xml:"regionId"`
  Domain *string `json:"domain" xml:"domain"`
  Data *string `json:"data" xml:"data"`
}

func (s CompleteOrderParamRequest) String() string {
  return tea.Prettify(s)
}

func (s CompleteOrderParamRequest) GoString() string {
  return s.String()
}

func (s *CompleteOrderParamRequest) SetAccessKeyId(v string) *CompleteOrderParamRequest {
  s.AccessKeyId = &v
  return s
}

func (s *CompleteOrderParamRequest) SetOwnerId(v int64) *CompleteOrderParamRequest {
  s.OwnerId = &v
  return s
}

func (s *CompleteOrderParamRequest) SetSecurityToken(v string) *CompleteOrderParamRequest {
  s.SecurityToken = &v
  return s
}

func (s *CompleteOrderParamRequest) SetProduct(v string) *CompleteOrderParamRequest {
  s.Product = &v
  return s
}

func (s *CompleteOrderParamRequest) SetVersion(v string) *CompleteOrderParamRequest {
  s.Version = &v
  return s
}

func (s *CompleteOrderParamRequest) SetAction(v string) *CompleteOrderParamRequest {
  s.Action = &v
  return s
}

func (s *CompleteOrderParamRequest) SetRegionId(v string) *CompleteOrderParamRequest {
  s.RegionId = &v
  return s
}

func (s *CompleteOrderParamRequest) SetDomain(v string) *CompleteOrderParamRequest {
  s.Domain = &v
  return s
}

func (s *CompleteOrderParamRequest) SetData(v string) *CompleteOrderParamRequest {
  s.Data = &v
  return s
}

type CompleteOrderParamResponse struct {
  RequestId *string `json:"requestId" xml:"requestId" require:"true"`
  Success *bool `json:"success" xml:"success" require:"true"`
  Code *string `json:"code" xml:"code" require:"true"`
  Message *string `json:"message" xml:"message" require:"true"`
  Data *string `json:"data" xml:"data" require:"true"`
}

func (s CompleteOrderParamResponse) String() string {
  return tea.Prettify(s)
}

func (s CompleteOrderParamResponse) GoString() string {
  return s.String()
}

func (s *CompleteOrderParamResponse) SetRequestId(v string) *CompleteOrderParamResponse {
  s.RequestId = &v
  return s
}

func (s *CompleteOrderParamResponse) SetSuccess(v bool) *CompleteOrderParamResponse {
  s.Success = &v
  return s
}

func (s *CompleteOrderParamResponse) SetCode(v string) *CompleteOrderParamResponse {
  s.Code = &v
  return s
}

func (s *CompleteOrderParamResponse) SetMessage(v string) *CompleteOrderParamResponse {
  s.Message = &v
  return s
}

func (s *CompleteOrderParamResponse) SetData(v string) *CompleteOrderParamResponse {
  s.Data = &v
  return s
}

type UpdateTemplateGroupDaemonRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateGroupId *string `json:"TemplateGroupId" xml:"TemplateGroupId" require:"true"`
  UserId *int64 `json:"UserId" xml:"UserId" require:"true"`
  IsLocked *string `json:"IsLocked" xml:"IsLocked"`
  GroupName *string `json:"GroupName" xml:"GroupName"`
}

func (s UpdateTemplateGroupDaemonRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateTemplateGroupDaemonRequest) GoString() string {
  return s.String()
}

func (s *UpdateTemplateGroupDaemonRequest) SetAccessKeyId(v string) *UpdateTemplateGroupDaemonRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateTemplateGroupDaemonRequest) SetOwnerId(v int64) *UpdateTemplateGroupDaemonRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateTemplateGroupDaemonRequest) SetResourceOwnerAccount(v string) *UpdateTemplateGroupDaemonRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateTemplateGroupDaemonRequest) SetResourceOwnerId(v int64) *UpdateTemplateGroupDaemonRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateTemplateGroupDaemonRequest) SetTemplateGroupId(v string) *UpdateTemplateGroupDaemonRequest {
  s.TemplateGroupId = &v
  return s
}

func (s *UpdateTemplateGroupDaemonRequest) SetUserId(v int64) *UpdateTemplateGroupDaemonRequest {
  s.UserId = &v
  return s
}

func (s *UpdateTemplateGroupDaemonRequest) SetIsLocked(v string) *UpdateTemplateGroupDaemonRequest {
  s.IsLocked = &v
  return s
}

func (s *UpdateTemplateGroupDaemonRequest) SetGroupName(v string) *UpdateTemplateGroupDaemonRequest {
  s.GroupName = &v
  return s
}

type UpdateTemplateGroupDaemonResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s UpdateTemplateGroupDaemonResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateTemplateGroupDaemonResponse) GoString() string {
  return s.String()
}

func (s *UpdateTemplateGroupDaemonResponse) SetRequestId(v string) *UpdateTemplateGroupDaemonResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateTemplateGroupDaemonResponse) SetResult(v bool) *UpdateTemplateGroupDaemonResponse {
  s.Result = &v
  return s
}

type CreateKMSServiceKeyRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  KmsRegionId *string `json:"KmsRegionId" xml:"KmsRegionId"`
}

func (s CreateKMSServiceKeyRequest) String() string {
  return tea.Prettify(s)
}

func (s CreateKMSServiceKeyRequest) GoString() string {
  return s.String()
}

func (s *CreateKMSServiceKeyRequest) SetAccessKeyId(v string) *CreateKMSServiceKeyRequest {
  s.AccessKeyId = &v
  return s
}

func (s *CreateKMSServiceKeyRequest) SetOwnerId(v string) *CreateKMSServiceKeyRequest {
  s.OwnerId = &v
  return s
}

func (s *CreateKMSServiceKeyRequest) SetResourceOwnerId(v string) *CreateKMSServiceKeyRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *CreateKMSServiceKeyRequest) SetResourceOwnerAccount(v string) *CreateKMSServiceKeyRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *CreateKMSServiceKeyRequest) SetOwnerAccount(v string) *CreateKMSServiceKeyRequest {
  s.OwnerAccount = &v
  return s
}

func (s *CreateKMSServiceKeyRequest) SetResourceRealOwnerId(v int64) *CreateKMSServiceKeyRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *CreateKMSServiceKeyRequest) SetKmsRegionId(v string) *CreateKMSServiceKeyRequest {
  s.KmsRegionId = &v
  return s
}

type CreateKMSServiceKeyResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s CreateKMSServiceKeyResponse) String() string {
  return tea.Prettify(s)
}

func (s CreateKMSServiceKeyResponse) GoString() string {
  return s.String()
}

func (s *CreateKMSServiceKeyResponse) SetRequestId(v string) *CreateKMSServiceKeyResponse {
  s.RequestId = &v
  return s
}

type SetAuditSecurityIpRequest struct {
  SecurityGroupName *string `json:"SecurityGroupName" xml:"SecurityGroupName"`
  Ips *string `json:"Ips" xml:"Ips" require:"true"`
  OperateMode *string `json:"OperateMode" xml:"OperateMode"`
}

func (s SetAuditSecurityIpRequest) String() string {
  return tea.Prettify(s)
}

func (s SetAuditSecurityIpRequest) GoString() string {
  return s.String()
}

func (s *SetAuditSecurityIpRequest) SetSecurityGroupName(v string) *SetAuditSecurityIpRequest {
  s.SecurityGroupName = &v
  return s
}

func (s *SetAuditSecurityIpRequest) SetIps(v string) *SetAuditSecurityIpRequest {
  s.Ips = &v
  return s
}

func (s *SetAuditSecurityIpRequest) SetOperateMode(v string) *SetAuditSecurityIpRequest {
  s.OperateMode = &v
  return s
}

type SetAuditSecurityIpResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SetAuditSecurityIpResponse) String() string {
  return tea.Prettify(s)
}

func (s SetAuditSecurityIpResponse) GoString() string {
  return s.String()
}

func (s *SetAuditSecurityIpResponse) SetRequestId(v string) *SetAuditSecurityIpResponse {
  s.RequestId = &v
  return s
}

type ListAuditSecurityIpRequest struct {
  SecurityGroupName *string `json:"SecurityGroupName" xml:"SecurityGroupName"`
}

func (s ListAuditSecurityIpRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAuditSecurityIpRequest) GoString() string {
  return s.String()
}

func (s *ListAuditSecurityIpRequest) SetSecurityGroupName(v string) *ListAuditSecurityIpRequest {
  s.SecurityGroupName = &v
  return s
}

type ListAuditSecurityIpResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  SecurityIpList []*ListAuditSecurityIpResponseSecurityIpList `json:"SecurityIpList" xml:"SecurityIpList" require:"true" type:"Repeated"`
}

func (s ListAuditSecurityIpResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAuditSecurityIpResponse) GoString() string {
  return s.String()
}

func (s *ListAuditSecurityIpResponse) SetRequestId(v string) *ListAuditSecurityIpResponse {
  s.RequestId = &v
  return s
}

func (s *ListAuditSecurityIpResponse) SetSecurityIpList(v []*ListAuditSecurityIpResponseSecurityIpList) *ListAuditSecurityIpResponse {
  s.SecurityIpList = v
  return s
}

type ListAuditSecurityIpResponseSecurityIpList struct     {
  SecurityGroupName *string `json:"SecurityGroupName" xml:"SecurityGroupName" require:"true"`
  Ips *string `json:"Ips" xml:"Ips" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
}

func (s ListAuditSecurityIpResponseSecurityIpList) String() string {
  return tea.Prettify(s)
}

func (s ListAuditSecurityIpResponseSecurityIpList) GoString() string {
  return s.String()
}

func (s *ListAuditSecurityIpResponseSecurityIpList) SetSecurityGroupName(v string) *ListAuditSecurityIpResponseSecurityIpList {
  s.SecurityGroupName = &v
  return s
}

func (s *ListAuditSecurityIpResponseSecurityIpList) SetIps(v string) *ListAuditSecurityIpResponseSecurityIpList {
  s.Ips = &v
  return s
}

func (s *ListAuditSecurityIpResponseSecurityIpList) SetCreationTime(v string) *ListAuditSecurityIpResponseSecurityIpList {
  s.CreationTime = &v
  return s
}

func (s *ListAuditSecurityIpResponseSecurityIpList) SetModificationTime(v string) *ListAuditSecurityIpResponseSecurityIpList {
  s.ModificationTime = &v
  return s
}

type GetVideoInfosRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoIds *string `json:"VideoIds" xml:"VideoIds" require:"true"`
}

func (s GetVideoInfosRequest) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfosRequest) GoString() string {
  return s.String()
}

func (s *GetVideoInfosRequest) SetOwnerId(v int64) *GetVideoInfosRequest {
  s.OwnerId = &v
  return s
}

func (s *GetVideoInfosRequest) SetResourceOwnerAccount(v string) *GetVideoInfosRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetVideoInfosRequest) SetResourceOwnerId(v int64) *GetVideoInfosRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetVideoInfosRequest) SetVideoIds(v string) *GetVideoInfosRequest {
  s.VideoIds = &v
  return s
}

type GetVideoInfosResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VideoList []*GetVideoInfosResponseVideoList `json:"VideoList" xml:"VideoList" require:"true" type:"Repeated"`
  NonExistVideoIds []*string `json:"NonExistVideoIds" xml:"NonExistVideoIds" require:"true" type:"Repeated"`
}

func (s GetVideoInfosResponse) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfosResponse) GoString() string {
  return s.String()
}

func (s *GetVideoInfosResponse) SetRequestId(v string) *GetVideoInfosResponse {
  s.RequestId = &v
  return s
}

func (s *GetVideoInfosResponse) SetVideoList(v []*GetVideoInfosResponseVideoList) *GetVideoInfosResponse {
  s.VideoList = v
  return s
}

func (s *GetVideoInfosResponse) SetNonExistVideoIds(v []*string) *GetVideoInfosResponse {
  s.NonExistVideoIds = v
  return s
}

type GetVideoInfosResponseVideoList struct     {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch" require:"true"`
  TemplateGroupId *string `json:"TemplateGroupId" xml:"TemplateGroupId" require:"true"`
  PreprocessStatus *string `json:"PreprocessStatus" xml:"PreprocessStatus" require:"true"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
  RegionId *string `json:"RegionId" xml:"RegionId" require:"true"`
  ThumbnailList []*GetVideoInfosResponseVideoListThumbnailList `json:"ThumbnailList" xml:"ThumbnailList" require:"true" type:"Repeated"`
  Snapshots []*string `json:"Snapshots" xml:"Snapshots" require:"true" type:"Repeated"`
}

func (s GetVideoInfosResponseVideoList) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfosResponseVideoList) GoString() string {
  return s.String()
}

func (s *GetVideoInfosResponseVideoList) SetVideoId(v string) *GetVideoInfosResponseVideoList {
  s.VideoId = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetTitle(v string) *GetVideoInfosResponseVideoList {
  s.Title = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetTags(v string) *GetVideoInfosResponseVideoList {
  s.Tags = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetStatus(v string) *GetVideoInfosResponseVideoList {
  s.Status = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetSize(v int64) *GetVideoInfosResponseVideoList {
  s.Size = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetDuration(v float32) *GetVideoInfosResponseVideoList {
  s.Duration = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetDescription(v string) *GetVideoInfosResponseVideoList {
  s.Description = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetModificationTime(v string) *GetVideoInfosResponseVideoList {
  s.ModificationTime = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetCreationTime(v string) *GetVideoInfosResponseVideoList {
  s.CreationTime = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetCoverURL(v string) *GetVideoInfosResponseVideoList {
  s.CoverURL = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetCateId(v int64) *GetVideoInfosResponseVideoList {
  s.CateId = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetCateName(v string) *GetVideoInfosResponseVideoList {
  s.CateName = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetDownloadSwitch(v string) *GetVideoInfosResponseVideoList {
  s.DownloadSwitch = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetTemplateGroupId(v string) *GetVideoInfosResponseVideoList {
  s.TemplateGroupId = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetPreprocessStatus(v string) *GetVideoInfosResponseVideoList {
  s.PreprocessStatus = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetStorageLocation(v string) *GetVideoInfosResponseVideoList {
  s.StorageLocation = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetRegionId(v string) *GetVideoInfosResponseVideoList {
  s.RegionId = &v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetThumbnailList(v []*GetVideoInfosResponseVideoListThumbnailList) *GetVideoInfosResponseVideoList {
  s.ThumbnailList = v
  return s
}

func (s *GetVideoInfosResponseVideoList) SetSnapshots(v []*string) *GetVideoInfosResponseVideoList {
  s.Snapshots = v
  return s
}

type GetVideoInfosResponseVideoListThumbnailList struct     {
  URL *string `json:"URL" xml:"URL" require:"true"`
}

func (s GetVideoInfosResponseVideoListThumbnailList) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfosResponseVideoListThumbnailList) GoString() string {
  return s.String()
}

func (s *GetVideoInfosResponseVideoListThumbnailList) SetURL(v string) *GetVideoInfosResponseVideoListThumbnailList {
  s.URL = &v
  return s
}

type AssumeOssRoleRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  ClientId *string `json:"ClientId" xml:"ClientId" require:"true"`
  BusinessType *string `json:"BusinessType" xml:"BusinessType" require:"true"`
  TerminalType *string `json:"TerminalType" xml:"TerminalType" require:"true"`
  DeviceModel *string `json:"DeviceModel" xml:"DeviceModel" require:"true"`
  AppVersion *string `json:"AppVersion" xml:"AppVersion" require:"true"`
  AuthTimestamp *int64 `json:"AuthTimestamp" xml:"AuthTimestamp" require:"true"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo" require:"true"`
  Prefix *string `json:"Prefix" xml:"Prefix"`
}

func (s AssumeOssRoleRequest) String() string {
  return tea.Prettify(s)
}

func (s AssumeOssRoleRequest) GoString() string {
  return s.String()
}

func (s *AssumeOssRoleRequest) SetOwnerId(v int64) *AssumeOssRoleRequest {
  s.OwnerId = &v
  return s
}

func (s *AssumeOssRoleRequest) SetResourceOwnerAccount(v string) *AssumeOssRoleRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AssumeOssRoleRequest) SetResourceOwnerId(v int64) *AssumeOssRoleRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AssumeOssRoleRequest) SetSource(v string) *AssumeOssRoleRequest {
  s.Source = &v
  return s
}

func (s *AssumeOssRoleRequest) SetClientId(v string) *AssumeOssRoleRequest {
  s.ClientId = &v
  return s
}

func (s *AssumeOssRoleRequest) SetBusinessType(v string) *AssumeOssRoleRequest {
  s.BusinessType = &v
  return s
}

func (s *AssumeOssRoleRequest) SetTerminalType(v string) *AssumeOssRoleRequest {
  s.TerminalType = &v
  return s
}

func (s *AssumeOssRoleRequest) SetDeviceModel(v string) *AssumeOssRoleRequest {
  s.DeviceModel = &v
  return s
}

func (s *AssumeOssRoleRequest) SetAppVersion(v string) *AssumeOssRoleRequest {
  s.AppVersion = &v
  return s
}

func (s *AssumeOssRoleRequest) SetAuthTimestamp(v int64) *AssumeOssRoleRequest {
  s.AuthTimestamp = &v
  return s
}

func (s *AssumeOssRoleRequest) SetAuthInfo(v string) *AssumeOssRoleRequest {
  s.AuthInfo = &v
  return s
}

func (s *AssumeOssRoleRequest) SetPrefix(v string) *AssumeOssRoleRequest {
  s.Prefix = &v
  return s
}

type AssumeOssRoleResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  OssAuthResult *string `json:"OssAuthResult" xml:"OssAuthResult" require:"true"`
}

func (s AssumeOssRoleResponse) String() string {
  return tea.Prettify(s)
}

func (s AssumeOssRoleResponse) GoString() string {
  return s.String()
}

func (s *AssumeOssRoleResponse) SetRequestId(v string) *AssumeOssRoleResponse {
  s.RequestId = &v
  return s
}

func (s *AssumeOssRoleResponse) SetOssAuthResult(v string) *AssumeOssRoleResponse {
  s.OssAuthResult = &v
  return s
}

type UpdateVodDomainRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  Sources *string `json:"Sources" xml:"Sources"`
  ResourceGroupId *string `json:"ResourceGroupId" xml:"ResourceGroupId"`
  TopLevelDomain *string `json:"TopLevelDomain" xml:"TopLevelDomain"`
}

func (s UpdateVodDomainRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateVodDomainRequest) GoString() string {
  return s.String()
}

func (s *UpdateVodDomainRequest) SetOwnerId(v int64) *UpdateVodDomainRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateVodDomainRequest) SetSecurityToken(v string) *UpdateVodDomainRequest {
  s.SecurityToken = &v
  return s
}

func (s *UpdateVodDomainRequest) SetDomainName(v string) *UpdateVodDomainRequest {
  s.DomainName = &v
  return s
}

func (s *UpdateVodDomainRequest) SetSources(v string) *UpdateVodDomainRequest {
  s.Sources = &v
  return s
}

func (s *UpdateVodDomainRequest) SetResourceGroupId(v string) *UpdateVodDomainRequest {
  s.ResourceGroupId = &v
  return s
}

func (s *UpdateVodDomainRequest) SetTopLevelDomain(v string) *UpdateVodDomainRequest {
  s.TopLevelDomain = &v
  return s
}

type UpdateVodDomainResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateVodDomainResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateVodDomainResponse) GoString() string {
  return s.String()
}

func (s *UpdateVodDomainResponse) SetRequestId(v string) *UpdateVodDomainResponse {
  s.RequestId = &v
  return s
}

type StopVodDomainRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
}

func (s StopVodDomainRequest) String() string {
  return tea.Prettify(s)
}

func (s StopVodDomainRequest) GoString() string {
  return s.String()
}

func (s *StopVodDomainRequest) SetOwnerId(v int64) *StopVodDomainRequest {
  s.OwnerId = &v
  return s
}

func (s *StopVodDomainRequest) SetSecurityToken(v string) *StopVodDomainRequest {
  s.SecurityToken = &v
  return s
}

func (s *StopVodDomainRequest) SetDomainName(v string) *StopVodDomainRequest {
  s.DomainName = &v
  return s
}

type StopVodDomainResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s StopVodDomainResponse) String() string {
  return tea.Prettify(s)
}

func (s StopVodDomainResponse) GoString() string {
  return s.String()
}

func (s *StopVodDomainResponse) SetRequestId(v string) *StopVodDomainResponse {
  s.RequestId = &v
  return s
}

type StartVodDomainRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
}

func (s StartVodDomainRequest) String() string {
  return tea.Prettify(s)
}

func (s StartVodDomainRequest) GoString() string {
  return s.String()
}

func (s *StartVodDomainRequest) SetOwnerId(v int64) *StartVodDomainRequest {
  s.OwnerId = &v
  return s
}

func (s *StartVodDomainRequest) SetSecurityToken(v string) *StartVodDomainRequest {
  s.SecurityToken = &v
  return s
}

func (s *StartVodDomainRequest) SetDomainName(v string) *StartVodDomainRequest {
  s.DomainName = &v
  return s
}

type StartVodDomainResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s StartVodDomainResponse) String() string {
  return tea.Prettify(s)
}

func (s StartVodDomainResponse) GoString() string {
  return s.String()
}

func (s *StartVodDomainResponse) SetRequestId(v string) *StartVodDomainResponse {
  s.RequestId = &v
  return s
}

type SetVodDomainCertificateRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  CertName *string `json:"CertName" xml:"CertName"`
  SSLProtocol *string `json:"SSLProtocol" xml:"SSLProtocol" require:"true"`
  SSLPub *string `json:"SSLPub" xml:"SSLPub"`
  SSLPri *string `json:"SSLPri" xml:"SSLPri"`
  Region *string `json:"Region" xml:"Region"`
}

func (s SetVodDomainCertificateRequest) String() string {
  return tea.Prettify(s)
}

func (s SetVodDomainCertificateRequest) GoString() string {
  return s.String()
}

func (s *SetVodDomainCertificateRequest) SetOwnerId(v int64) *SetVodDomainCertificateRequest {
  s.OwnerId = &v
  return s
}

func (s *SetVodDomainCertificateRequest) SetSecurityToken(v string) *SetVodDomainCertificateRequest {
  s.SecurityToken = &v
  return s
}

func (s *SetVodDomainCertificateRequest) SetDomainName(v string) *SetVodDomainCertificateRequest {
  s.DomainName = &v
  return s
}

func (s *SetVodDomainCertificateRequest) SetCertName(v string) *SetVodDomainCertificateRequest {
  s.CertName = &v
  return s
}

func (s *SetVodDomainCertificateRequest) SetSSLProtocol(v string) *SetVodDomainCertificateRequest {
  s.SSLProtocol = &v
  return s
}

func (s *SetVodDomainCertificateRequest) SetSSLPub(v string) *SetVodDomainCertificateRequest {
  s.SSLPub = &v
  return s
}

func (s *SetVodDomainCertificateRequest) SetSSLPri(v string) *SetVodDomainCertificateRequest {
  s.SSLPri = &v
  return s
}

func (s *SetVodDomainCertificateRequest) SetRegion(v string) *SetVodDomainCertificateRequest {
  s.Region = &v
  return s
}

type SetVodDomainCertificateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SetVodDomainCertificateResponse) String() string {
  return tea.Prettify(s)
}

func (s SetVodDomainCertificateResponse) GoString() string {
  return s.String()
}

func (s *SetVodDomainCertificateResponse) SetRequestId(v string) *SetVodDomainCertificateResponse {
  s.RequestId = &v
  return s
}

type RefreshVodObjectCachesRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  ObjectPath *string `json:"ObjectPath" xml:"ObjectPath" require:"true"`
  ObjectType *string `json:"ObjectType" xml:"ObjectType"`
}

func (s RefreshVodObjectCachesRequest) String() string {
  return tea.Prettify(s)
}

func (s RefreshVodObjectCachesRequest) GoString() string {
  return s.String()
}

func (s *RefreshVodObjectCachesRequest) SetOwnerId(v int64) *RefreshVodObjectCachesRequest {
  s.OwnerId = &v
  return s
}

func (s *RefreshVodObjectCachesRequest) SetSecurityToken(v string) *RefreshVodObjectCachesRequest {
  s.SecurityToken = &v
  return s
}

func (s *RefreshVodObjectCachesRequest) SetObjectPath(v string) *RefreshVodObjectCachesRequest {
  s.ObjectPath = &v
  return s
}

func (s *RefreshVodObjectCachesRequest) SetObjectType(v string) *RefreshVodObjectCachesRequest {
  s.ObjectType = &v
  return s
}

type RefreshVodObjectCachesResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  RefreshTaskId *string `json:"RefreshTaskId" xml:"RefreshTaskId" require:"true"`
}

func (s RefreshVodObjectCachesResponse) String() string {
  return tea.Prettify(s)
}

func (s RefreshVodObjectCachesResponse) GoString() string {
  return s.String()
}

func (s *RefreshVodObjectCachesResponse) SetRequestId(v string) *RefreshVodObjectCachesResponse {
  s.RequestId = &v
  return s
}

func (s *RefreshVodObjectCachesResponse) SetRefreshTaskId(v string) *RefreshVodObjectCachesResponse {
  s.RefreshTaskId = &v
  return s
}

type PreloadVodObjectCachesRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  ObjectPath *string `json:"ObjectPath" xml:"ObjectPath" require:"true"`
}

func (s PreloadVodObjectCachesRequest) String() string {
  return tea.Prettify(s)
}

func (s PreloadVodObjectCachesRequest) GoString() string {
  return s.String()
}

func (s *PreloadVodObjectCachesRequest) SetOwnerId(v int64) *PreloadVodObjectCachesRequest {
  s.OwnerId = &v
  return s
}

func (s *PreloadVodObjectCachesRequest) SetSecurityToken(v string) *PreloadVodObjectCachesRequest {
  s.SecurityToken = &v
  return s
}

func (s *PreloadVodObjectCachesRequest) SetObjectPath(v string) *PreloadVodObjectCachesRequest {
  s.ObjectPath = &v
  return s
}

type PreloadVodObjectCachesResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PreloadTaskId *string `json:"PreloadTaskId" xml:"PreloadTaskId" require:"true"`
}

func (s PreloadVodObjectCachesResponse) String() string {
  return tea.Prettify(s)
}

func (s PreloadVodObjectCachesResponse) GoString() string {
  return s.String()
}

func (s *PreloadVodObjectCachesResponse) SetRequestId(v string) *PreloadVodObjectCachesResponse {
  s.RequestId = &v
  return s
}

func (s *PreloadVodObjectCachesResponse) SetPreloadTaskId(v string) *PreloadVodObjectCachesResponse {
  s.PreloadTaskId = &v
  return s
}

type DescribeVodUserResourcePackageRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
}

func (s DescribeVodUserResourcePackageRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserResourcePackageRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodUserResourcePackageRequest) SetOwnerId(v int64) *DescribeVodUserResourcePackageRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodUserResourcePackageRequest) SetSecurityToken(v string) *DescribeVodUserResourcePackageRequest {
  s.SecurityToken = &v
  return s
}

type DescribeVodUserResourcePackageResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  ResourcePackageInfos *DescribeVodUserResourcePackageResponseResourcePackageInfos `json:"ResourcePackageInfos" xml:"ResourcePackageInfos" require:"true" type:"Struct"`
}

func (s DescribeVodUserResourcePackageResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserResourcePackageResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodUserResourcePackageResponse) SetRequestId(v string) *DescribeVodUserResourcePackageResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodUserResourcePackageResponse) SetResourcePackageInfos(v *DescribeVodUserResourcePackageResponseResourcePackageInfos) *DescribeVodUserResourcePackageResponse {
  s.ResourcePackageInfos = v
  return s
}

type DescribeVodUserResourcePackageResponseResourcePackageInfos struct {
  ResourcePackageInfo []*DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo `json:"ResourcePackageInfo" xml:"ResourcePackageInfo" require:"true" type:"Repeated"`
}

func (s DescribeVodUserResourcePackageResponseResourcePackageInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserResourcePackageResponseResourcePackageInfos) GoString() string {
  return s.String()
}

func (s *DescribeVodUserResourcePackageResponseResourcePackageInfos) SetResourcePackageInfo(v []*DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo) *DescribeVodUserResourcePackageResponseResourcePackageInfos {
  s.ResourcePackageInfo = v
  return s
}

type DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo struct     {
  CurrCapacity *string `json:"CurrCapacity" xml:"CurrCapacity" require:"true"`
  InitCapacity *string `json:"InitCapacity" xml:"InitCapacity" require:"true"`
  CommodityCode *string `json:"CommodityCode" xml:"CommodityCode" require:"true"`
  DisplayName *string `json:"DisplayName" xml:"DisplayName" require:"true"`
  InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo) GoString() string {
  return s.String()
}

func (s *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo) SetCurrCapacity(v string) *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo {
  s.CurrCapacity = &v
  return s
}

func (s *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo) SetInitCapacity(v string) *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo {
  s.InitCapacity = &v
  return s
}

func (s *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo) SetCommodityCode(v string) *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo {
  s.CommodityCode = &v
  return s
}

func (s *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo) SetDisplayName(v string) *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo {
  s.DisplayName = &v
  return s
}

func (s *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo) SetInstanceId(v string) *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo {
  s.InstanceId = &v
  return s
}

func (s *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo) SetStatus(v string) *DescribeVodUserResourcePackageResponseResourcePackageInfosResourcePackageInfo {
  s.Status = &v
  return s
}

type DescribeVodUserQuotaRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
}

func (s DescribeVodUserQuotaRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserQuotaRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodUserQuotaRequest) SetOwnerId(v int64) *DescribeVodUserQuotaRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodUserQuotaRequest) SetSecurityToken(v string) *DescribeVodUserQuotaRequest {
  s.SecurityToken = &v
  return s
}

type DescribeVodUserQuotaResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainQuota *int `json:"DomainQuota" xml:"DomainQuota" require:"true"`
  RefreshUrlQuota *int `json:"RefreshUrlQuota" xml:"RefreshUrlQuota" require:"true"`
  RefreshDirQuota *int `json:"RefreshDirQuota" xml:"RefreshDirQuota" require:"true"`
  RefreshUrlRemain *int `json:"RefreshUrlRemain" xml:"RefreshUrlRemain" require:"true"`
  RefreshDirRemain *int `json:"RefreshDirRemain" xml:"RefreshDirRemain" require:"true"`
  PreloadQuota *int `json:"PreloadQuota" xml:"PreloadQuota" require:"true"`
  PreloadRemain *int `json:"PreloadRemain" xml:"PreloadRemain" require:"true"`
  BlockQuota *int `json:"BlockQuota" xml:"BlockQuota" require:"true"`
  BlockRemain *int `json:"BlockRemain" xml:"BlockRemain" require:"true"`
}

func (s DescribeVodUserQuotaResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserQuotaResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodUserQuotaResponse) SetRequestId(v string) *DescribeVodUserQuotaResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodUserQuotaResponse) SetDomainQuota(v int) *DescribeVodUserQuotaResponse {
  s.DomainQuota = &v
  return s
}

func (s *DescribeVodUserQuotaResponse) SetRefreshUrlQuota(v int) *DescribeVodUserQuotaResponse {
  s.RefreshUrlQuota = &v
  return s
}

func (s *DescribeVodUserQuotaResponse) SetRefreshDirQuota(v int) *DescribeVodUserQuotaResponse {
  s.RefreshDirQuota = &v
  return s
}

func (s *DescribeVodUserQuotaResponse) SetRefreshUrlRemain(v int) *DescribeVodUserQuotaResponse {
  s.RefreshUrlRemain = &v
  return s
}

func (s *DescribeVodUserQuotaResponse) SetRefreshDirRemain(v int) *DescribeVodUserQuotaResponse {
  s.RefreshDirRemain = &v
  return s
}

func (s *DescribeVodUserQuotaResponse) SetPreloadQuota(v int) *DescribeVodUserQuotaResponse {
  s.PreloadQuota = &v
  return s
}

func (s *DescribeVodUserQuotaResponse) SetPreloadRemain(v int) *DescribeVodUserQuotaResponse {
  s.PreloadRemain = &v
  return s
}

func (s *DescribeVodUserQuotaResponse) SetBlockQuota(v int) *DescribeVodUserQuotaResponse {
  s.BlockQuota = &v
  return s
}

func (s *DescribeVodUserQuotaResponse) SetBlockRemain(v int) *DescribeVodUserQuotaResponse {
  s.BlockRemain = &v
  return s
}

type DescribeVodUserDomainsRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  PageNumber *int `json:"PageNumber" xml:"PageNumber"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  DomainStatus *string `json:"DomainStatus" xml:"DomainStatus"`
  DomainSearchType *string `json:"DomainSearchType" xml:"DomainSearchType"`
  CdnType *string `json:"CdnType" xml:"CdnType"`
  CheckDomainShow *bool `json:"CheckDomainShow" xml:"CheckDomainShow"`
  ResourceGroupId *string `json:"ResourceGroupId" xml:"ResourceGroupId"`
  FuncId *string `json:"FuncId" xml:"FuncId"`
  FuncFilter *string `json:"FuncFilter" xml:"FuncFilter"`
}

func (s DescribeVodUserDomainsRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserDomainsRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodUserDomainsRequest) SetOwnerId(v int64) *DescribeVodUserDomainsRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetSecurityToken(v string) *DescribeVodUserDomainsRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetPageSize(v int) *DescribeVodUserDomainsRequest {
  s.PageSize = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetPageNumber(v int) *DescribeVodUserDomainsRequest {
  s.PageNumber = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetDomainName(v string) *DescribeVodUserDomainsRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetDomainStatus(v string) *DescribeVodUserDomainsRequest {
  s.DomainStatus = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetDomainSearchType(v string) *DescribeVodUserDomainsRequest {
  s.DomainSearchType = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetCdnType(v string) *DescribeVodUserDomainsRequest {
  s.CdnType = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetCheckDomainShow(v bool) *DescribeVodUserDomainsRequest {
  s.CheckDomainShow = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetResourceGroupId(v string) *DescribeVodUserDomainsRequest {
  s.ResourceGroupId = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetFuncId(v string) *DescribeVodUserDomainsRequest {
  s.FuncId = &v
  return s
}

func (s *DescribeVodUserDomainsRequest) SetFuncFilter(v string) *DescribeVodUserDomainsRequest {
  s.FuncFilter = &v
  return s
}

type DescribeVodUserDomainsResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PageNumber *int64 `json:"PageNumber" xml:"PageNumber" require:"true"`
  PageSize *int64 `json:"PageSize" xml:"PageSize" require:"true"`
  TotalCount *int64 `json:"TotalCount" xml:"TotalCount" require:"true"`
  Domains *DescribeVodUserDomainsResponseDomains `json:"Domains" xml:"Domains" require:"true" type:"Struct"`
}

func (s DescribeVodUserDomainsResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserDomainsResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodUserDomainsResponse) SetRequestId(v string) *DescribeVodUserDomainsResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodUserDomainsResponse) SetPageNumber(v int64) *DescribeVodUserDomainsResponse {
  s.PageNumber = &v
  return s
}

func (s *DescribeVodUserDomainsResponse) SetPageSize(v int64) *DescribeVodUserDomainsResponse {
  s.PageSize = &v
  return s
}

func (s *DescribeVodUserDomainsResponse) SetTotalCount(v int64) *DescribeVodUserDomainsResponse {
  s.TotalCount = &v
  return s
}

func (s *DescribeVodUserDomainsResponse) SetDomains(v *DescribeVodUserDomainsResponseDomains) *DescribeVodUserDomainsResponse {
  s.Domains = v
  return s
}

type DescribeVodUserDomainsResponseDomains struct {
  PageData []*DescribeVodUserDomainsResponseDomainsPageData `json:"PageData" xml:"PageData" require:"true" type:"Repeated"`
}

func (s DescribeVodUserDomainsResponseDomains) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserDomainsResponseDomains) GoString() string {
  return s.String()
}

func (s *DescribeVodUserDomainsResponseDomains) SetPageData(v []*DescribeVodUserDomainsResponseDomainsPageData) *DescribeVodUserDomainsResponseDomains {
  s.PageData = v
  return s
}

type DescribeVodUserDomainsResponseDomainsPageData struct     {
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  Cname *string `json:"Cname" xml:"Cname" require:"true"`
  CdnType *string `json:"CdnType" xml:"CdnType" require:"true"`
  DomainStatus *string `json:"DomainStatus" xml:"DomainStatus" require:"true"`
  GmtCreated *string `json:"GmtCreated" xml:"GmtCreated" require:"true"`
  GmtModified *string `json:"GmtModified" xml:"GmtModified" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  SslProtocol *string `json:"SslProtocol" xml:"SslProtocol" require:"true"`
  Weight *string `json:"Weight" xml:"Weight" require:"true"`
  ResourceGroupId *string `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
  Sandbox *string `json:"Sandbox" xml:"Sandbox" require:"true"`
  Sources *DescribeVodUserDomainsResponseDomainsPageDataSources `json:"Sources" xml:"Sources" require:"true" type:"Struct"`
}

func (s DescribeVodUserDomainsResponseDomainsPageData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserDomainsResponseDomainsPageData) GoString() string {
  return s.String()
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetDomainName(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.DomainName = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetCname(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.Cname = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetCdnType(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.CdnType = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetDomainStatus(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.DomainStatus = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetGmtCreated(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.GmtCreated = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetGmtModified(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.GmtModified = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetDescription(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.Description = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetSslProtocol(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.SslProtocol = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetWeight(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.Weight = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetResourceGroupId(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.ResourceGroupId = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetSandbox(v string) *DescribeVodUserDomainsResponseDomainsPageData {
  s.Sandbox = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageData) SetSources(v *DescribeVodUserDomainsResponseDomainsPageDataSources) *DescribeVodUserDomainsResponseDomainsPageData {
  s.Sources = v
  return s
}

type DescribeVodUserDomainsResponseDomainsPageDataSources struct {
  Source []*DescribeVodUserDomainsResponseDomainsPageDataSourcesSource `json:"Source" xml:"Source" require:"true" type:"Repeated"`
}

func (s DescribeVodUserDomainsResponseDomainsPageDataSources) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserDomainsResponseDomainsPageDataSources) GoString() string {
  return s.String()
}

func (s *DescribeVodUserDomainsResponseDomainsPageDataSources) SetSource(v []*DescribeVodUserDomainsResponseDomainsPageDataSourcesSource) *DescribeVodUserDomainsResponseDomainsPageDataSources {
  s.Source = v
  return s
}

type DescribeVodUserDomainsResponseDomainsPageDataSourcesSource struct     {
  Type *string `json:"Type" xml:"Type" require:"true"`
  Content *string `json:"Content" xml:"Content" require:"true"`
  Port *int `json:"Port" xml:"Port" require:"true"`
  Priority *string `json:"Priority" xml:"Priority" require:"true"`
}

func (s DescribeVodUserDomainsResponseDomainsPageDataSourcesSource) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodUserDomainsResponseDomainsPageDataSourcesSource) GoString() string {
  return s.String()
}

func (s *DescribeVodUserDomainsResponseDomainsPageDataSourcesSource) SetType(v string) *DescribeVodUserDomainsResponseDomainsPageDataSourcesSource {
  s.Type = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageDataSourcesSource) SetContent(v string) *DescribeVodUserDomainsResponseDomainsPageDataSourcesSource {
  s.Content = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageDataSourcesSource) SetPort(v int) *DescribeVodUserDomainsResponseDomainsPageDataSourcesSource {
  s.Port = &v
  return s
}

func (s *DescribeVodUserDomainsResponseDomainsPageDataSourcesSource) SetPriority(v string) *DescribeVodUserDomainsResponseDomainsPageDataSourcesSource {
  s.Priority = &v
  return s
}

type DescribeVodServiceRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
}

func (s DescribeVodServiceRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodServiceRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodServiceRequest) SetOwnerId(v int64) *DescribeVodServiceRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodServiceRequest) SetSecurityToken(v string) *DescribeVodServiceRequest {
  s.SecurityToken = &v
  return s
}

type DescribeVodServiceResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
  InternetChargeType *string `json:"InternetChargeType" xml:"InternetChargeType" require:"true"`
  OpeningTime *string `json:"OpeningTime" xml:"OpeningTime" require:"true"`
  ChangingChargeType *string `json:"ChangingChargeType" xml:"ChangingChargeType" require:"true"`
  ChangingAffectTime *string `json:"ChangingAffectTime" xml:"ChangingAffectTime" require:"true"`
  OperationLocks *DescribeVodServiceResponseOperationLocks `json:"OperationLocks" xml:"OperationLocks" require:"true" type:"Struct"`
}

func (s DescribeVodServiceResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodServiceResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodServiceResponse) SetRequestId(v string) *DescribeVodServiceResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodServiceResponse) SetInstanceId(v string) *DescribeVodServiceResponse {
  s.InstanceId = &v
  return s
}

func (s *DescribeVodServiceResponse) SetInternetChargeType(v string) *DescribeVodServiceResponse {
  s.InternetChargeType = &v
  return s
}

func (s *DescribeVodServiceResponse) SetOpeningTime(v string) *DescribeVodServiceResponse {
  s.OpeningTime = &v
  return s
}

func (s *DescribeVodServiceResponse) SetChangingChargeType(v string) *DescribeVodServiceResponse {
  s.ChangingChargeType = &v
  return s
}

func (s *DescribeVodServiceResponse) SetChangingAffectTime(v string) *DescribeVodServiceResponse {
  s.ChangingAffectTime = &v
  return s
}

func (s *DescribeVodServiceResponse) SetOperationLocks(v *DescribeVodServiceResponseOperationLocks) *DescribeVodServiceResponse {
  s.OperationLocks = v
  return s
}

type DescribeVodServiceResponseOperationLocks struct {
  LockReason []*DescribeVodServiceResponseOperationLocksLockReason `json:"LockReason" xml:"LockReason" require:"true" type:"Repeated"`
}

func (s DescribeVodServiceResponseOperationLocks) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodServiceResponseOperationLocks) GoString() string {
  return s.String()
}

func (s *DescribeVodServiceResponseOperationLocks) SetLockReason(v []*DescribeVodServiceResponseOperationLocksLockReason) *DescribeVodServiceResponseOperationLocks {
  s.LockReason = v
  return s
}

type DescribeVodServiceResponseOperationLocksLockReason struct     {
  LockReason *string `json:"LockReason" xml:"LockReason" require:"true"`
}

func (s DescribeVodServiceResponseOperationLocksLockReason) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodServiceResponseOperationLocksLockReason) GoString() string {
  return s.String()
}

func (s *DescribeVodServiceResponseOperationLocksLockReason) SetLockReason(v string) *DescribeVodServiceResponseOperationLocksLockReason {
  s.LockReason = &v
  return s
}

type DescribeVodRefreshTasksRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  TaskId *string `json:"TaskId" xml:"TaskId"`
  ObjectPath *string `json:"ObjectPath" xml:"ObjectPath"`
  PageNumber *int `json:"PageNumber" xml:"PageNumber"`
  ObjectType *string `json:"ObjectType" xml:"ObjectType"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  Status *string `json:"Status" xml:"Status"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  ResourceGroupId *string `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s DescribeVodRefreshTasksRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodRefreshTasksRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodRefreshTasksRequest) SetOwnerId(v int64) *DescribeVodRefreshTasksRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetSecurityToken(v string) *DescribeVodRefreshTasksRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetTaskId(v string) *DescribeVodRefreshTasksRequest {
  s.TaskId = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetObjectPath(v string) *DescribeVodRefreshTasksRequest {
  s.ObjectPath = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetPageNumber(v int) *DescribeVodRefreshTasksRequest {
  s.PageNumber = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetObjectType(v string) *DescribeVodRefreshTasksRequest {
  s.ObjectType = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetDomainName(v string) *DescribeVodRefreshTasksRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetStatus(v string) *DescribeVodRefreshTasksRequest {
  s.Status = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetPageSize(v int) *DescribeVodRefreshTasksRequest {
  s.PageSize = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetStartTime(v string) *DescribeVodRefreshTasksRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetEndTime(v string) *DescribeVodRefreshTasksRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeVodRefreshTasksRequest) SetResourceGroupId(v string) *DescribeVodRefreshTasksRequest {
  s.ResourceGroupId = &v
  return s
}

type DescribeVodRefreshTasksResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PageNumber *int64 `json:"PageNumber" xml:"PageNumber" require:"true"`
  PageSize *int64 `json:"PageSize" xml:"PageSize" require:"true"`
  TotalCount *int64 `json:"TotalCount" xml:"TotalCount" require:"true"`
  Tasks *DescribeVodRefreshTasksResponseTasks `json:"Tasks" xml:"Tasks" require:"true" type:"Struct"`
}

func (s DescribeVodRefreshTasksResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodRefreshTasksResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodRefreshTasksResponse) SetRequestId(v string) *DescribeVodRefreshTasksResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodRefreshTasksResponse) SetPageNumber(v int64) *DescribeVodRefreshTasksResponse {
  s.PageNumber = &v
  return s
}

func (s *DescribeVodRefreshTasksResponse) SetPageSize(v int64) *DescribeVodRefreshTasksResponse {
  s.PageSize = &v
  return s
}

func (s *DescribeVodRefreshTasksResponse) SetTotalCount(v int64) *DescribeVodRefreshTasksResponse {
  s.TotalCount = &v
  return s
}

func (s *DescribeVodRefreshTasksResponse) SetTasks(v *DescribeVodRefreshTasksResponseTasks) *DescribeVodRefreshTasksResponse {
  s.Tasks = v
  return s
}

type DescribeVodRefreshTasksResponseTasks struct {
  Task []*DescribeVodRefreshTasksResponseTasksTask `json:"Task" xml:"Task" require:"true" type:"Repeated"`
}

func (s DescribeVodRefreshTasksResponseTasks) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodRefreshTasksResponseTasks) GoString() string {
  return s.String()
}

func (s *DescribeVodRefreshTasksResponseTasks) SetTask(v []*DescribeVodRefreshTasksResponseTasksTask) *DescribeVodRefreshTasksResponseTasks {
  s.Task = v
  return s
}

type DescribeVodRefreshTasksResponseTasksTask struct     {
  TaskId *string `json:"TaskId" xml:"TaskId" require:"true"`
  ObjectPath *string `json:"ObjectPath" xml:"ObjectPath" require:"true"`
  Process *string `json:"Process" xml:"Process" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  ObjectType *string `json:"ObjectType" xml:"ObjectType" require:"true"`
}

func (s DescribeVodRefreshTasksResponseTasksTask) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodRefreshTasksResponseTasksTask) GoString() string {
  return s.String()
}

func (s *DescribeVodRefreshTasksResponseTasksTask) SetTaskId(v string) *DescribeVodRefreshTasksResponseTasksTask {
  s.TaskId = &v
  return s
}

func (s *DescribeVodRefreshTasksResponseTasksTask) SetObjectPath(v string) *DescribeVodRefreshTasksResponseTasksTask {
  s.ObjectPath = &v
  return s
}

func (s *DescribeVodRefreshTasksResponseTasksTask) SetProcess(v string) *DescribeVodRefreshTasksResponseTasksTask {
  s.Process = &v
  return s
}

func (s *DescribeVodRefreshTasksResponseTasksTask) SetStatus(v string) *DescribeVodRefreshTasksResponseTasksTask {
  s.Status = &v
  return s
}

func (s *DescribeVodRefreshTasksResponseTasksTask) SetCreationTime(v string) *DescribeVodRefreshTasksResponseTasksTask {
  s.CreationTime = &v
  return s
}

func (s *DescribeVodRefreshTasksResponseTasksTask) SetDescription(v string) *DescribeVodRefreshTasksResponseTasksTask {
  s.Description = &v
  return s
}

func (s *DescribeVodRefreshTasksResponseTasksTask) SetObjectType(v string) *DescribeVodRefreshTasksResponseTasksTask {
  s.ObjectType = &v
  return s
}

type DescribeVodRefreshQuotaRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
}

func (s DescribeVodRefreshQuotaRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodRefreshQuotaRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodRefreshQuotaRequest) SetOwnerId(v int64) *DescribeVodRefreshQuotaRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodRefreshQuotaRequest) SetSecurityToken(v string) *DescribeVodRefreshQuotaRequest {
  s.SecurityToken = &v
  return s
}

type DescribeVodRefreshQuotaResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UrlQuota *string `json:"UrlQuota" xml:"UrlQuota" require:"true"`
  DirQuota *string `json:"DirQuota" xml:"DirQuota" require:"true"`
  UrlRemain *string `json:"UrlRemain" xml:"UrlRemain" require:"true"`
  DirRemain *string `json:"DirRemain" xml:"DirRemain" require:"true"`
  PreloadQuota *string `json:"PreloadQuota" xml:"PreloadQuota" require:"true"`
  BlockQuota *string `json:"BlockQuota" xml:"BlockQuota" require:"true"`
  PreloadRemain *string `json:"PreloadRemain" xml:"PreloadRemain" require:"true"`
  BlockRemain *string `json:"blockRemain" xml:"blockRemain" require:"true"`
}

func (s DescribeVodRefreshQuotaResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodRefreshQuotaResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodRefreshQuotaResponse) SetRequestId(v string) *DescribeVodRefreshQuotaResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodRefreshQuotaResponse) SetUrlQuota(v string) *DescribeVodRefreshQuotaResponse {
  s.UrlQuota = &v
  return s
}

func (s *DescribeVodRefreshQuotaResponse) SetDirQuota(v string) *DescribeVodRefreshQuotaResponse {
  s.DirQuota = &v
  return s
}

func (s *DescribeVodRefreshQuotaResponse) SetUrlRemain(v string) *DescribeVodRefreshQuotaResponse {
  s.UrlRemain = &v
  return s
}

func (s *DescribeVodRefreshQuotaResponse) SetDirRemain(v string) *DescribeVodRefreshQuotaResponse {
  s.DirRemain = &v
  return s
}

func (s *DescribeVodRefreshQuotaResponse) SetPreloadQuota(v string) *DescribeVodRefreshQuotaResponse {
  s.PreloadQuota = &v
  return s
}

func (s *DescribeVodRefreshQuotaResponse) SetBlockQuota(v string) *DescribeVodRefreshQuotaResponse {
  s.BlockQuota = &v
  return s
}

func (s *DescribeVodRefreshQuotaResponse) SetPreloadRemain(v string) *DescribeVodRefreshQuotaResponse {
  s.PreloadRemain = &v
  return s
}

func (s *DescribeVodRefreshQuotaResponse) SetBlockRemain(v string) *DescribeVodRefreshQuotaResponse {
  s.BlockRemain = &v
  return s
}

type DescribeVodDomainDetailRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
}

func (s DescribeVodDomainDetailRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainDetailRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainDetailRequest) SetOwnerId(v int64) *DescribeVodDomainDetailRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainDetailRequest) SetSecurityToken(v string) *DescribeVodDomainDetailRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeVodDomainDetailRequest) SetDomainName(v string) *DescribeVodDomainDetailRequest {
  s.DomainName = &v
  return s
}

type DescribeVodDomainDetailResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainDetail *DescribeVodDomainDetailResponseDomainDetail `json:"DomainDetail" xml:"DomainDetail" require:"true" type:"Struct"`
}

func (s DescribeVodDomainDetailResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainDetailResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainDetailResponse) SetRequestId(v string) *DescribeVodDomainDetailResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainDetailResponse) SetDomainDetail(v *DescribeVodDomainDetailResponseDomainDetail) *DescribeVodDomainDetailResponse {
  s.DomainDetail = v
  return s
}

type DescribeVodDomainDetailResponseDomainDetail struct {
  GmtCreated *string `json:"GmtCreated" xml:"GmtCreated" require:"true"`
  GmtModified *string `json:"GmtModified" xml:"GmtModified" require:"true"`
  DomainStatus *string `json:"DomainStatus" xml:"DomainStatus" require:"true"`
  Cname *string `json:"Cname" xml:"Cname" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  SSLProtocol *string `json:"SSLProtocol" xml:"SSLProtocol" require:"true"`
  SSLPub *string `json:"SSLPub" xml:"SSLPub" require:"true"`
  Scope *string `json:"Scope" xml:"Scope" require:"true"`
  CertName *string `json:"CertName" xml:"CertName" require:"true"`
  ResourceGroupId *string `json:"ResourceGroupId" xml:"ResourceGroupId" require:"true"`
  Weight *string `json:"Weight" xml:"Weight" require:"true"`
  Sources *DescribeVodDomainDetailResponseDomainDetailSources `json:"Sources" xml:"Sources" require:"true" type:"Struct"`
}

func (s DescribeVodDomainDetailResponseDomainDetail) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainDetailResponseDomainDetail) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetGmtCreated(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.GmtCreated = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetGmtModified(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.GmtModified = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetDomainStatus(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.DomainStatus = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetCname(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.Cname = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetDomainName(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetDescription(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.Description = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetSSLProtocol(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.SSLProtocol = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetSSLPub(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.SSLPub = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetScope(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.Scope = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetCertName(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.CertName = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetResourceGroupId(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.ResourceGroupId = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetWeight(v string) *DescribeVodDomainDetailResponseDomainDetail {
  s.Weight = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetail) SetSources(v *DescribeVodDomainDetailResponseDomainDetailSources) *DescribeVodDomainDetailResponseDomainDetail {
  s.Sources = v
  return s
}

type DescribeVodDomainDetailResponseDomainDetailSources struct {
  Source []*DescribeVodDomainDetailResponseDomainDetailSourcesSource `json:"Source" xml:"Source" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainDetailResponseDomainDetailSources) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainDetailResponseDomainDetailSources) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainDetailResponseDomainDetailSources) SetSource(v []*DescribeVodDomainDetailResponseDomainDetailSourcesSource) *DescribeVodDomainDetailResponseDomainDetailSources {
  s.Source = v
  return s
}

type DescribeVodDomainDetailResponseDomainDetailSourcesSource struct     {
  Content *string `json:"Content" xml:"Content" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Port *int `json:"Port" xml:"Port" require:"true"`
  Enabled *string `json:"Enabled" xml:"Enabled" require:"true"`
  Priority *string `json:"Priority" xml:"Priority" require:"true"`
}

func (s DescribeVodDomainDetailResponseDomainDetailSourcesSource) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainDetailResponseDomainDetailSourcesSource) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainDetailResponseDomainDetailSourcesSource) SetContent(v string) *DescribeVodDomainDetailResponseDomainDetailSourcesSource {
  s.Content = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetailSourcesSource) SetType(v string) *DescribeVodDomainDetailResponseDomainDetailSourcesSource {
  s.Type = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetailSourcesSource) SetPort(v int) *DescribeVodDomainDetailResponseDomainDetailSourcesSource {
  s.Port = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetailSourcesSource) SetEnabled(v string) *DescribeVodDomainDetailResponseDomainDetailSourcesSource {
  s.Enabled = &v
  return s
}

func (s *DescribeVodDomainDetailResponseDomainDetailSourcesSource) SetPriority(v string) *DescribeVodDomainDetailResponseDomainDetailSourcesSource {
  s.Priority = &v
  return s
}

type DescribeVodDomainConfigsRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  FunctionNames *string `json:"FunctionNames" xml:"FunctionNames" require:"true"`
}

func (s DescribeVodDomainConfigsRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainConfigsRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainConfigsRequest) SetOwnerId(v int64) *DescribeVodDomainConfigsRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainConfigsRequest) SetSecurityToken(v string) *DescribeVodDomainConfigsRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeVodDomainConfigsRequest) SetDomainName(v string) *DescribeVodDomainConfigsRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainConfigsRequest) SetFunctionNames(v string) *DescribeVodDomainConfigsRequest {
  s.FunctionNames = &v
  return s
}

type DescribeVodDomainConfigsResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainConfigs *DescribeVodDomainConfigsResponseDomainConfigs `json:"DomainConfigs" xml:"DomainConfigs" require:"true" type:"Struct"`
}

func (s DescribeVodDomainConfigsResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainConfigsResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainConfigsResponse) SetRequestId(v string) *DescribeVodDomainConfigsResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainConfigsResponse) SetDomainConfigs(v *DescribeVodDomainConfigsResponseDomainConfigs) *DescribeVodDomainConfigsResponse {
  s.DomainConfigs = v
  return s
}

type DescribeVodDomainConfigsResponseDomainConfigs struct {
  DomainConfig []*DescribeVodDomainConfigsResponseDomainConfigsDomainConfig `json:"DomainConfig" xml:"DomainConfig" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainConfigsResponseDomainConfigs) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainConfigsResponseDomainConfigs) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainConfigsResponseDomainConfigs) SetDomainConfig(v []*DescribeVodDomainConfigsResponseDomainConfigsDomainConfig) *DescribeVodDomainConfigsResponseDomainConfigs {
  s.DomainConfig = v
  return s
}

type DescribeVodDomainConfigsResponseDomainConfigsDomainConfig struct     {
  FunctionName *string `json:"FunctionName" xml:"FunctionName" require:"true"`
  ConfigId *string `json:"ConfigId" xml:"ConfigId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  FunctionArgs *DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgs `json:"FunctionArgs" xml:"FunctionArgs" require:"true" type:"Struct"`
}

func (s DescribeVodDomainConfigsResponseDomainConfigsDomainConfig) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainConfigsResponseDomainConfigsDomainConfig) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainConfigsResponseDomainConfigsDomainConfig) SetFunctionName(v string) *DescribeVodDomainConfigsResponseDomainConfigsDomainConfig {
  s.FunctionName = &v
  return s
}

func (s *DescribeVodDomainConfigsResponseDomainConfigsDomainConfig) SetConfigId(v string) *DescribeVodDomainConfigsResponseDomainConfigsDomainConfig {
  s.ConfigId = &v
  return s
}

func (s *DescribeVodDomainConfigsResponseDomainConfigsDomainConfig) SetStatus(v string) *DescribeVodDomainConfigsResponseDomainConfigsDomainConfig {
  s.Status = &v
  return s
}

func (s *DescribeVodDomainConfigsResponseDomainConfigsDomainConfig) SetFunctionArgs(v *DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgs) *DescribeVodDomainConfigsResponseDomainConfigsDomainConfig {
  s.FunctionArgs = v
  return s
}

type DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgs struct {
  FunctionArg []*DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgsFunctionArg `json:"FunctionArg" xml:"FunctionArg" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgs) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgs) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgs) SetFunctionArg(v []*DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgsFunctionArg) *DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgs {
  s.FunctionArg = v
  return s
}

type DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgsFunctionArg struct     {
  ArgName *string `json:"ArgName" xml:"ArgName" require:"true"`
  ArgValue *string `json:"ArgValue" xml:"ArgValue" require:"true"`
}

func (s DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgsFunctionArg) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgsFunctionArg) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgsFunctionArg) SetArgName(v string) *DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgsFunctionArg {
  s.ArgName = &v
  return s
}

func (s *DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgsFunctionArg) SetArgValue(v string) *DescribeVodDomainConfigsResponseDomainConfigsDomainConfigFunctionArgsFunctionArg {
  s.ArgValue = &v
  return s
}

type DescribeVodCertificateListRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
}

func (s DescribeVodCertificateListRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodCertificateListRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodCertificateListRequest) SetOwnerId(v int64) *DescribeVodCertificateListRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodCertificateListRequest) SetSecurityToken(v string) *DescribeVodCertificateListRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeVodCertificateListRequest) SetDomainName(v string) *DescribeVodCertificateListRequest {
  s.DomainName = &v
  return s
}

type DescribeVodCertificateListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  CertificateListModel *DescribeVodCertificateListResponseCertificateListModel `json:"CertificateListModel" xml:"CertificateListModel" require:"true" type:"Struct"`
}

func (s DescribeVodCertificateListResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodCertificateListResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodCertificateListResponse) SetRequestId(v string) *DescribeVodCertificateListResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodCertificateListResponse) SetCertificateListModel(v *DescribeVodCertificateListResponseCertificateListModel) *DescribeVodCertificateListResponse {
  s.CertificateListModel = v
  return s
}

type DescribeVodCertificateListResponseCertificateListModel struct {
  Count *int `json:"Count" xml:"Count" require:"true"`
  CertList *DescribeVodCertificateListResponseCertificateListModelCertList `json:"CertList" xml:"CertList" require:"true" type:"Struct"`
}

func (s DescribeVodCertificateListResponseCertificateListModel) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodCertificateListResponseCertificateListModel) GoString() string {
  return s.String()
}

func (s *DescribeVodCertificateListResponseCertificateListModel) SetCount(v int) *DescribeVodCertificateListResponseCertificateListModel {
  s.Count = &v
  return s
}

func (s *DescribeVodCertificateListResponseCertificateListModel) SetCertList(v *DescribeVodCertificateListResponseCertificateListModelCertList) *DescribeVodCertificateListResponseCertificateListModel {
  s.CertList = v
  return s
}

type DescribeVodCertificateListResponseCertificateListModelCertList struct {
  Cert []*DescribeVodCertificateListResponseCertificateListModelCertListCert `json:"Cert" xml:"Cert" require:"true" type:"Repeated"`
}

func (s DescribeVodCertificateListResponseCertificateListModelCertList) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodCertificateListResponseCertificateListModelCertList) GoString() string {
  return s.String()
}

func (s *DescribeVodCertificateListResponseCertificateListModelCertList) SetCert(v []*DescribeVodCertificateListResponseCertificateListModelCertListCert) *DescribeVodCertificateListResponseCertificateListModelCertList {
  s.Cert = v
  return s
}

type DescribeVodCertificateListResponseCertificateListModelCertListCert struct     {
  CertName *string `json:"CertName" xml:"CertName" require:"true"`
  CertId *int64 `json:"CertId" xml:"CertId" require:"true"`
  Fingerprint *string `json:"Fingerprint" xml:"Fingerprint" require:"true"`
  Common *string `json:"Common" xml:"Common" require:"true"`
  Issuer *string `json:"Issuer" xml:"Issuer" require:"true"`
  LastTime *int64 `json:"LastTime" xml:"LastTime" require:"true"`
}

func (s DescribeVodCertificateListResponseCertificateListModelCertListCert) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodCertificateListResponseCertificateListModelCertListCert) GoString() string {
  return s.String()
}

func (s *DescribeVodCertificateListResponseCertificateListModelCertListCert) SetCertName(v string) *DescribeVodCertificateListResponseCertificateListModelCertListCert {
  s.CertName = &v
  return s
}

func (s *DescribeVodCertificateListResponseCertificateListModelCertListCert) SetCertId(v int64) *DescribeVodCertificateListResponseCertificateListModelCertListCert {
  s.CertId = &v
  return s
}

func (s *DescribeVodCertificateListResponseCertificateListModelCertListCert) SetFingerprint(v string) *DescribeVodCertificateListResponseCertificateListModelCertListCert {
  s.Fingerprint = &v
  return s
}

func (s *DescribeVodCertificateListResponseCertificateListModelCertListCert) SetCommon(v string) *DescribeVodCertificateListResponseCertificateListModelCertListCert {
  s.Common = &v
  return s
}

func (s *DescribeVodCertificateListResponseCertificateListModelCertListCert) SetIssuer(v string) *DescribeVodCertificateListResponseCertificateListModelCertListCert {
  s.Issuer = &v
  return s
}

func (s *DescribeVodCertificateListResponseCertificateListModelCertListCert) SetLastTime(v int64) *DescribeVodCertificateListResponseCertificateListModelCertListCert {
  s.LastTime = &v
  return s
}

type DescribeUserVodStatusRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
}

func (s DescribeUserVodStatusRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVodStatusRequest) GoString() string {
  return s.String()
}

func (s *DescribeUserVodStatusRequest) SetOwnerId(v int64) *DescribeUserVodStatusRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeUserVodStatusRequest) SetSecurityToken(v string) *DescribeUserVodStatusRequest {
  s.SecurityToken = &v
  return s
}

type DescribeUserVodStatusResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Enabled *bool `json:"Enabled" xml:"Enabled" require:"true"`
  OnService *bool `json:"OnService" xml:"OnService" require:"true"`
  InDebt *bool `json:"InDebt" xml:"InDebt" require:"true"`
  InDebtOverdue *bool `json:"InDebtOverdue" xml:"InDebtOverdue" require:"true"`
}

func (s DescribeUserVodStatusResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVodStatusResponse) GoString() string {
  return s.String()
}

func (s *DescribeUserVodStatusResponse) SetRequestId(v string) *DescribeUserVodStatusResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeUserVodStatusResponse) SetEnabled(v bool) *DescribeUserVodStatusResponse {
  s.Enabled = &v
  return s
}

func (s *DescribeUserVodStatusResponse) SetOnService(v bool) *DescribeUserVodStatusResponse {
  s.OnService = &v
  return s
}

func (s *DescribeUserVodStatusResponse) SetInDebt(v bool) *DescribeUserVodStatusResponse {
  s.InDebt = &v
  return s
}

func (s *DescribeUserVodStatusResponse) SetInDebtOverdue(v bool) *DescribeUserVodStatusResponse {
  s.InDebtOverdue = &v
  return s
}

type DeleteVodDomainRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  ResourceGroupId *string `json:"ResourceGroupId" xml:"ResourceGroupId"`
}

func (s DeleteVodDomainRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteVodDomainRequest) GoString() string {
  return s.String()
}

func (s *DeleteVodDomainRequest) SetOwnerId(v int64) *DeleteVodDomainRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteVodDomainRequest) SetOwnerAccount(v string) *DeleteVodDomainRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteVodDomainRequest) SetSecurityToken(v string) *DeleteVodDomainRequest {
  s.SecurityToken = &v
  return s
}

func (s *DeleteVodDomainRequest) SetDomainName(v string) *DeleteVodDomainRequest {
  s.DomainName = &v
  return s
}

func (s *DeleteVodDomainRequest) SetResourceGroupId(v string) *DeleteVodDomainRequest {
  s.ResourceGroupId = &v
  return s
}

type DeleteVodDomainResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteVodDomainResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteVodDomainResponse) GoString() string {
  return s.String()
}

func (s *DeleteVodDomainResponse) SetRequestId(v string) *DeleteVodDomainResponse {
  s.RequestId = &v
  return s
}

type AddVodDomainRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  Sources *string `json:"Sources" xml:"Sources" require:"true"`
  CheckUrl *string `json:"CheckUrl" xml:"CheckUrl"`
  Scope *string `json:"Scope" xml:"Scope"`
}

func (s AddVodDomainRequest) String() string {
  return tea.Prettify(s)
}

func (s AddVodDomainRequest) GoString() string {
  return s.String()
}

func (s *AddVodDomainRequest) SetOwnerId(v int64) *AddVodDomainRequest {
  s.OwnerId = &v
  return s
}

func (s *AddVodDomainRequest) SetOwnerAccount(v string) *AddVodDomainRequest {
  s.OwnerAccount = &v
  return s
}

func (s *AddVodDomainRequest) SetSecurityToken(v string) *AddVodDomainRequest {
  s.SecurityToken = &v
  return s
}

func (s *AddVodDomainRequest) SetDomainName(v string) *AddVodDomainRequest {
  s.DomainName = &v
  return s
}

func (s *AddVodDomainRequest) SetSources(v string) *AddVodDomainRequest {
  s.Sources = &v
  return s
}

func (s *AddVodDomainRequest) SetCheckUrl(v string) *AddVodDomainRequest {
  s.CheckUrl = &v
  return s
}

func (s *AddVodDomainRequest) SetScope(v string) *AddVodDomainRequest {
  s.Scope = &v
  return s
}

type AddVodDomainResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddVodDomainResponse) String() string {
  return tea.Prettify(s)
}

func (s AddVodDomainResponse) GoString() string {
  return s.String()
}

func (s *AddVodDomainResponse) SetRequestId(v string) *AddVodDomainResponse {
  s.RequestId = &v
  return s
}

type DescribeVodDomainLogRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  PageSize *int64 `json:"PageSize" xml:"PageSize"`
  PageNumber *int64 `json:"PageNumber" xml:"PageNumber"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s DescribeVodDomainLogRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainLogRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainLogRequest) SetOwnerId(v int64) *DescribeVodDomainLogRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainLogRequest) SetDomainName(v string) *DescribeVodDomainLogRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainLogRequest) SetPageSize(v int64) *DescribeVodDomainLogRequest {
  s.PageSize = &v
  return s
}

func (s *DescribeVodDomainLogRequest) SetPageNumber(v int64) *DescribeVodDomainLogRequest {
  s.PageNumber = &v
  return s
}

func (s *DescribeVodDomainLogRequest) SetStartTime(v string) *DescribeVodDomainLogRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainLogRequest) SetEndTime(v string) *DescribeVodDomainLogRequest {
  s.EndTime = &v
  return s
}

type DescribeVodDomainLogResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainLogDetails *DescribeVodDomainLogResponseDomainLogDetails `json:"DomainLogDetails" xml:"DomainLogDetails" require:"true" type:"Struct"`
}

func (s DescribeVodDomainLogResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainLogResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainLogResponse) SetRequestId(v string) *DescribeVodDomainLogResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainLogResponse) SetDomainLogDetails(v *DescribeVodDomainLogResponseDomainLogDetails) *DescribeVodDomainLogResponse {
  s.DomainLogDetails = v
  return s
}

type DescribeVodDomainLogResponseDomainLogDetails struct {
  DomainLogDetail []*DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail `json:"DomainLogDetail" xml:"DomainLogDetail" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainLogResponseDomainLogDetails) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainLogResponseDomainLogDetails) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainLogResponseDomainLogDetails) SetDomainLogDetail(v []*DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail) *DescribeVodDomainLogResponseDomainLogDetails {
  s.DomainLogDetail = v
  return s
}

type DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail struct     {
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  LogCount *int64 `json:"LogCount" xml:"LogCount" require:"true"`
  LogInfos *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfos `json:"LogInfos" xml:"LogInfos" require:"true" type:"Struct"`
  PageInfos *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos `json:"PageInfos" xml:"PageInfos" require:"true" type:"Struct"`
}

func (s DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail) SetDomainName(v string) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail) SetLogCount(v int64) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail {
  s.LogCount = &v
  return s
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail) SetLogInfos(v *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfos) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail {
  s.LogInfos = v
  return s
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail) SetPageInfos(v *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetail {
  s.PageInfos = v
  return s
}

type DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfos struct {
  LogInfoDetail []*DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail `json:"LogInfoDetail" xml:"LogInfoDetail" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfos) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfos) SetLogInfoDetail(v []*DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfos {
  s.LogInfoDetail = v
  return s
}

type DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail struct     {
  LogName *string `json:"LogName" xml:"LogName" require:"true"`
  LogPath *string `json:"LogPath" xml:"LogPath" require:"true"`
  LogSize *int64 `json:"LogSize" xml:"LogSize" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetLogName(v string) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
  s.LogName = &v
  return s
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetLogPath(v string) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
  s.LogPath = &v
  return s
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetLogSize(v int64) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
  s.LogSize = &v
  return s
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetStartTime(v string) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
  s.StartTime = &v
  return s
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail) SetEndTime(v string) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailLogInfosLogInfoDetail {
  s.EndTime = &v
  return s
}

type DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos struct {
  PageNumber *int64 `json:"PageNumber" xml:"PageNumber" require:"true"`
  PageSize *int64 `json:"PageSize" xml:"PageSize" require:"true"`
  Total *int64 `json:"Total" xml:"Total" require:"true"`
}

func (s DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos) SetPageNumber(v int64) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos {
  s.PageNumber = &v
  return s
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos) SetPageSize(v int64) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos {
  s.PageSize = &v
  return s
}

func (s *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos) SetTotal(v int64) *DescribeVodDomainLogResponseDomainLogDetailsDomainLogDetailPageInfos {
  s.Total = &v
  return s
}

type DescribeVodDomainCnameRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
}

func (s DescribeVodDomainCnameRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainCnameRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainCnameRequest) SetOwnerId(v int64) *DescribeVodDomainCnameRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainCnameRequest) SetDomainName(v string) *DescribeVodDomainCnameRequest {
  s.DomainName = &v
  return s
}

type DescribeVodDomainCnameResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  CnameDatas *DescribeVodDomainCnameResponseCnameDatas `json:"CnameDatas" xml:"CnameDatas" require:"true" type:"Struct"`
}

func (s DescribeVodDomainCnameResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainCnameResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainCnameResponse) SetRequestId(v string) *DescribeVodDomainCnameResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainCnameResponse) SetCnameDatas(v *DescribeVodDomainCnameResponseCnameDatas) *DescribeVodDomainCnameResponse {
  s.CnameDatas = v
  return s
}

type DescribeVodDomainCnameResponseCnameDatas struct {
  Data []*DescribeVodDomainCnameResponseCnameDatasData `json:"Data" xml:"Data" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainCnameResponseCnameDatas) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainCnameResponseCnameDatas) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainCnameResponseCnameDatas) SetData(v []*DescribeVodDomainCnameResponseCnameDatasData) *DescribeVodDomainCnameResponseCnameDatas {
  s.Data = v
  return s
}

type DescribeVodDomainCnameResponseCnameDatasData struct     {
  Domain *string `json:"Domain" xml:"Domain" require:"true"`
  Cname *string `json:"Cname" xml:"Cname" require:"true"`
  Status *int `json:"Status" xml:"Status" require:"true"`
}

func (s DescribeVodDomainCnameResponseCnameDatasData) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainCnameResponseCnameDatasData) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainCnameResponseCnameDatasData) SetDomain(v string) *DescribeVodDomainCnameResponseCnameDatasData {
  s.Domain = &v
  return s
}

func (s *DescribeVodDomainCnameResponseCnameDatasData) SetCname(v string) *DescribeVodDomainCnameResponseCnameDatasData {
  s.Cname = &v
  return s
}

func (s *DescribeVodDomainCnameResponseCnameDatasData) SetStatus(v int) *DescribeVodDomainCnameResponseCnameDatasData {
  s.Status = &v
  return s
}

type DescribeVodDomainCertificateInfoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
}

func (s DescribeVodDomainCertificateInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainCertificateInfoRequest) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainCertificateInfoRequest) SetOwnerId(v int64) *DescribeVodDomainCertificateInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoRequest) SetDomainName(v string) *DescribeVodDomainCertificateInfoRequest {
  s.DomainName = &v
  return s
}

type DescribeVodDomainCertificateInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  CertInfos *DescribeVodDomainCertificateInfoResponseCertInfos `json:"CertInfos" xml:"CertInfos" require:"true" type:"Struct"`
}

func (s DescribeVodDomainCertificateInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainCertificateInfoResponse) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainCertificateInfoResponse) SetRequestId(v string) *DescribeVodDomainCertificateInfoResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoResponse) SetCertInfos(v *DescribeVodDomainCertificateInfoResponseCertInfos) *DescribeVodDomainCertificateInfoResponse {
  s.CertInfos = v
  return s
}

type DescribeVodDomainCertificateInfoResponseCertInfos struct {
  CertInfo []*DescribeVodDomainCertificateInfoResponseCertInfosCertInfo `json:"CertInfo" xml:"CertInfo" require:"true" type:"Repeated"`
}

func (s DescribeVodDomainCertificateInfoResponseCertInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainCertificateInfoResponseCertInfos) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfos) SetCertInfo(v []*DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) *DescribeVodDomainCertificateInfoResponseCertInfos {
  s.CertInfo = v
  return s
}

type DescribeVodDomainCertificateInfoResponseCertInfosCertInfo struct     {
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  CertName *string `json:"CertName" xml:"CertName" require:"true"`
  CertDomainName *string `json:"CertDomainName" xml:"CertDomainName" require:"true"`
  CertExpireTime *string `json:"CertExpireTime" xml:"CertExpireTime" require:"true"`
  CertLife *string `json:"CertLife" xml:"CertLife" require:"true"`
  CertOrg *string `json:"CertOrg" xml:"CertOrg" require:"true"`
  CertType *string `json:"CertType" xml:"CertType" require:"true"`
  ServerCertificateStatus *string `json:"ServerCertificateStatus" xml:"ServerCertificateStatus" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) String() string {
  return tea.Prettify(s)
}

func (s DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) GoString() string {
  return s.String()
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) SetDomainName(v string) *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo {
  s.DomainName = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) SetCertName(v string) *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo {
  s.CertName = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) SetCertDomainName(v string) *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo {
  s.CertDomainName = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) SetCertExpireTime(v string) *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo {
  s.CertExpireTime = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) SetCertLife(v string) *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo {
  s.CertLife = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) SetCertOrg(v string) *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo {
  s.CertOrg = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) SetCertType(v string) *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo {
  s.CertType = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) SetServerCertificateStatus(v string) *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo {
  s.ServerCertificateStatus = &v
  return s
}

func (s *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo) SetStatus(v string) *DescribeVodDomainCertificateInfoResponseCertInfosCertInfo {
  s.Status = &v
  return s
}

type UploadMediaByURLRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  UploadURLs *string `json:"UploadURLs" xml:"UploadURLs" require:"true"`
  TemplateGroupId *string `json:"TemplateGroupId" xml:"TemplateGroupId"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation"`
  UploadMetadatas *string `json:"UploadMetadatas" xml:"UploadMetadatas"`
  Priority *string `json:"Priority" xml:"Priority"`
  MessageCallback *string `json:"MessageCallback" xml:"MessageCallback"`
}

func (s UploadMediaByURLRequest) String() string {
  return tea.Prettify(s)
}

func (s UploadMediaByURLRequest) GoString() string {
  return s.String()
}

func (s *UploadMediaByURLRequest) SetOwnerId(v int64) *UploadMediaByURLRequest {
  s.OwnerId = &v
  return s
}

func (s *UploadMediaByURLRequest) SetResourceOwnerAccount(v string) *UploadMediaByURLRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UploadMediaByURLRequest) SetResourceOwnerId(v int64) *UploadMediaByURLRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UploadMediaByURLRequest) SetUploadURLs(v string) *UploadMediaByURLRequest {
  s.UploadURLs = &v
  return s
}

func (s *UploadMediaByURLRequest) SetTemplateGroupId(v string) *UploadMediaByURLRequest {
  s.TemplateGroupId = &v
  return s
}

func (s *UploadMediaByURLRequest) SetStorageLocation(v string) *UploadMediaByURLRequest {
  s.StorageLocation = &v
  return s
}

func (s *UploadMediaByURLRequest) SetUploadMetadatas(v string) *UploadMediaByURLRequest {
  s.UploadMetadatas = &v
  return s
}

func (s *UploadMediaByURLRequest) SetPriority(v string) *UploadMediaByURLRequest {
  s.Priority = &v
  return s
}

func (s *UploadMediaByURLRequest) SetMessageCallback(v string) *UploadMediaByURLRequest {
  s.MessageCallback = &v
  return s
}

type UploadMediaByURLResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UploadJobs *UploadMediaByURLResponseUploadJobs `json:"UploadJobs" xml:"UploadJobs" require:"true" type:"Struct"`
}

func (s UploadMediaByURLResponse) String() string {
  return tea.Prettify(s)
}

func (s UploadMediaByURLResponse) GoString() string {
  return s.String()
}

func (s *UploadMediaByURLResponse) SetRequestId(v string) *UploadMediaByURLResponse {
  s.RequestId = &v
  return s
}

func (s *UploadMediaByURLResponse) SetUploadJobs(v *UploadMediaByURLResponseUploadJobs) *UploadMediaByURLResponse {
  s.UploadJobs = v
  return s
}

type UploadMediaByURLResponseUploadJobs struct {
  UploadJob []*UploadMediaByURLResponseUploadJobsUploadJob `json:"UploadJob" xml:"UploadJob" require:"true" type:"Repeated"`
}

func (s UploadMediaByURLResponseUploadJobs) String() string {
  return tea.Prettify(s)
}

func (s UploadMediaByURLResponseUploadJobs) GoString() string {
  return s.String()
}

func (s *UploadMediaByURLResponseUploadJobs) SetUploadJob(v []*UploadMediaByURLResponseUploadJobsUploadJob) *UploadMediaByURLResponseUploadJobs {
  s.UploadJob = v
  return s
}

type UploadMediaByURLResponseUploadJobsUploadJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  SourceURL *string `json:"SourceURL" xml:"SourceURL" require:"true"`
}

func (s UploadMediaByURLResponseUploadJobsUploadJob) String() string {
  return tea.Prettify(s)
}

func (s UploadMediaByURLResponseUploadJobsUploadJob) GoString() string {
  return s.String()
}

func (s *UploadMediaByURLResponseUploadJobsUploadJob) SetJobId(v string) *UploadMediaByURLResponseUploadJobsUploadJob {
  s.JobId = &v
  return s
}

func (s *UploadMediaByURLResponseUploadJobsUploadJob) SetSourceURL(v string) *UploadMediaByURLResponseUploadJobsUploadJob {
  s.SourceURL = &v
  return s
}

type GetAIServiceRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Types *string `json:"Types" xml:"Types" require:"true"`
}

func (s GetAIServiceRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAIServiceRequest) GoString() string {
  return s.String()
}

func (s *GetAIServiceRequest) SetAccessKeyId(v string) *GetAIServiceRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetAIServiceRequest) SetOwnerId(v string) *GetAIServiceRequest {
  s.OwnerId = &v
  return s
}

func (s *GetAIServiceRequest) SetResourceOwnerId(v string) *GetAIServiceRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetAIServiceRequest) SetResourceOwnerAccount(v string) *GetAIServiceRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetAIServiceRequest) SetOwnerAccount(v string) *GetAIServiceRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetAIServiceRequest) SetTypes(v string) *GetAIServiceRequest {
  s.Types = &v
  return s
}

type GetAIServiceResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIList []*GetAIServiceResponseAIList `json:"AIList" xml:"AIList" require:"true" type:"Repeated"`
}

func (s GetAIServiceResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAIServiceResponse) GoString() string {
  return s.String()
}

func (s *GetAIServiceResponse) SetRequestId(v string) *GetAIServiceResponse {
  s.RequestId = &v
  return s
}

func (s *GetAIServiceResponse) SetAIList(v []*GetAIServiceResponseAIList) *GetAIServiceResponse {
  s.AIList = v
  return s
}

type GetAIServiceResponseAIList struct     {
  Type *string `json:"Type" xml:"Type" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s GetAIServiceResponseAIList) String() string {
  return tea.Prettify(s)
}

func (s GetAIServiceResponseAIList) GoString() string {
  return s.String()
}

func (s *GetAIServiceResponseAIList) SetType(v string) *GetAIServiceResponseAIList {
  s.Type = &v
  return s
}

func (s *GetAIServiceResponseAIList) SetStatus(v string) *GetAIServiceResponseAIList {
  s.Status = &v
  return s
}

type SetAIServiceRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Operation *string `json:"Operation" xml:"Operation" require:"true"`
  Types *string `json:"Types" xml:"Types" require:"true"`
}

func (s SetAIServiceRequest) String() string {
  return tea.Prettify(s)
}

func (s SetAIServiceRequest) GoString() string {
  return s.String()
}

func (s *SetAIServiceRequest) SetAccessKeyId(v string) *SetAIServiceRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetAIServiceRequest) SetOwnerId(v string) *SetAIServiceRequest {
  s.OwnerId = &v
  return s
}

func (s *SetAIServiceRequest) SetResourceOwnerId(v string) *SetAIServiceRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetAIServiceRequest) SetResourceOwnerAccount(v string) *SetAIServiceRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetAIServiceRequest) SetOwnerAccount(v string) *SetAIServiceRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SetAIServiceRequest) SetOperation(v string) *SetAIServiceRequest {
  s.Operation = &v
  return s
}

func (s *SetAIServiceRequest) SetTypes(v string) *SetAIServiceRequest {
  s.Types = &v
  return s
}

type SetAIServiceResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  SuccessTypes *string `json:"SuccessTypes" xml:"SuccessTypes" require:"true"`
  FailedTypes *string `json:"FailedTypes" xml:"FailedTypes" require:"true"`
}

func (s SetAIServiceResponse) String() string {
  return tea.Prettify(s)
}

func (s SetAIServiceResponse) GoString() string {
  return s.String()
}

func (s *SetAIServiceResponse) SetRequestId(v string) *SetAIServiceResponse {
  s.RequestId = &v
  return s
}

func (s *SetAIServiceResponse) SetSuccessTypes(v string) *SetAIServiceResponse {
  s.SuccessTypes = &v
  return s
}

func (s *SetAIServiceResponse) SetFailedTypes(v string) *SetAIServiceResponse {
  s.FailedTypes = &v
  return s
}

type SetL2OssKeyConfigRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  PrivateOssAuth *string `json:"PrivateOssAuth" xml:"PrivateOssAuth" require:"true"`
}

func (s SetL2OssKeyConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s SetL2OssKeyConfigRequest) GoString() string {
  return s.String()
}

func (s *SetL2OssKeyConfigRequest) SetAccessKeyId(v string) *SetL2OssKeyConfigRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetL2OssKeyConfigRequest) SetOwnerId(v string) *SetL2OssKeyConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *SetL2OssKeyConfigRequest) SetResourceOwnerId(v string) *SetL2OssKeyConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetL2OssKeyConfigRequest) SetResourceOwnerAccount(v string) *SetL2OssKeyConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetL2OssKeyConfigRequest) SetOwnerAccount(v string) *SetL2OssKeyConfigRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SetL2OssKeyConfigRequest) SetResourceRealOwnerId(v int64) *SetL2OssKeyConfigRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *SetL2OssKeyConfigRequest) SetDomainName(v string) *SetL2OssKeyConfigRequest {
  s.DomainName = &v
  return s
}

func (s *SetL2OssKeyConfigRequest) SetPrivateOssAuth(v string) *SetL2OssKeyConfigRequest {
  s.PrivateOssAuth = &v
  return s
}

type SetL2OssKeyConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SetL2OssKeyConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s SetL2OssKeyConfigResponse) GoString() string {
  return s.String()
}

func (s *SetL2OssKeyConfigResponse) SetRequestId(v string) *SetL2OssKeyConfigResponse {
  s.RequestId = &v
  return s
}

type SetDefaultUploadStorageRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
}

func (s SetDefaultUploadStorageRequest) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultUploadStorageRequest) GoString() string {
  return s.String()
}

func (s *SetDefaultUploadStorageRequest) SetAccessKeyId(v string) *SetDefaultUploadStorageRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetDefaultUploadStorageRequest) SetOwnerId(v string) *SetDefaultUploadStorageRequest {
  s.OwnerId = &v
  return s
}

func (s *SetDefaultUploadStorageRequest) SetResourceOwnerId(v string) *SetDefaultUploadStorageRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetDefaultUploadStorageRequest) SetResourceOwnerAccount(v string) *SetDefaultUploadStorageRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetDefaultUploadStorageRequest) SetOwnerAccount(v string) *SetDefaultUploadStorageRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SetDefaultUploadStorageRequest) SetResourceRealOwnerId(v int64) *SetDefaultUploadStorageRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *SetDefaultUploadStorageRequest) SetStorageLocation(v string) *SetDefaultUploadStorageRequest {
  s.StorageLocation = &v
  return s
}

type SetDefaultUploadStorageResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SetDefaultUploadStorageResponse) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultUploadStorageResponse) GoString() string {
  return s.String()
}

func (s *SetDefaultUploadStorageResponse) SetRequestId(v string) *SetDefaultUploadStorageResponse {
  s.RequestId = &v
  return s
}

type SearchMediaRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  SearchType *string `json:"SearchType" xml:"SearchType"`
  Fields *string `json:"Fields" xml:"Fields"`
  Match *string `json:"Match" xml:"Match"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  ScrollToken *string `json:"ScrollToken" xml:"ScrollToken"`
  ResultTypes *string `json:"ResultTypes" xml:"ResultTypes"`
  SessionId *string `json:"SessionId" xml:"SessionId"`
}

func (s SearchMediaRequest) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaRequest) GoString() string {
  return s.String()
}

func (s *SearchMediaRequest) SetOwnerId(v int64) *SearchMediaRequest {
  s.OwnerId = &v
  return s
}

func (s *SearchMediaRequest) SetResourceOwnerAccount(v string) *SearchMediaRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SearchMediaRequest) SetResourceOwnerId(v int64) *SearchMediaRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SearchMediaRequest) SetResourceRealOwnerId(v int64) *SearchMediaRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *SearchMediaRequest) SetSearchType(v string) *SearchMediaRequest {
  s.SearchType = &v
  return s
}

func (s *SearchMediaRequest) SetFields(v string) *SearchMediaRequest {
  s.Fields = &v
  return s
}

func (s *SearchMediaRequest) SetMatch(v string) *SearchMediaRequest {
  s.Match = &v
  return s
}

func (s *SearchMediaRequest) SetSortBy(v string) *SearchMediaRequest {
  s.SortBy = &v
  return s
}

func (s *SearchMediaRequest) SetPageNo(v int) *SearchMediaRequest {
  s.PageNo = &v
  return s
}

func (s *SearchMediaRequest) SetPageSize(v int) *SearchMediaRequest {
  s.PageSize = &v
  return s
}

func (s *SearchMediaRequest) SetScrollToken(v string) *SearchMediaRequest {
  s.ScrollToken = &v
  return s
}

func (s *SearchMediaRequest) SetResultTypes(v string) *SearchMediaRequest {
  s.ResultTypes = &v
  return s
}

func (s *SearchMediaRequest) SetSessionId(v string) *SearchMediaRequest {
  s.SessionId = &v
  return s
}

type SearchMediaResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  ScrollToken *string `json:"ScrollToken" xml:"ScrollToken" require:"true"`
  Total *int64 `json:"Total" xml:"Total" require:"true"`
  MediaList []*SearchMediaResponseMediaList `json:"MediaList" xml:"MediaList" require:"true" type:"Repeated"`
}

func (s SearchMediaResponse) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaResponse) GoString() string {
  return s.String()
}

func (s *SearchMediaResponse) SetRequestId(v string) *SearchMediaResponse {
  s.RequestId = &v
  return s
}

func (s *SearchMediaResponse) SetScrollToken(v string) *SearchMediaResponse {
  s.ScrollToken = &v
  return s
}

func (s *SearchMediaResponse) SetTotal(v int64) *SearchMediaResponse {
  s.Total = &v
  return s
}

func (s *SearchMediaResponse) SetMediaList(v []*SearchMediaResponseMediaList) *SearchMediaResponse {
  s.MediaList = v
  return s
}

type SearchMediaResponseMediaList struct     {
  MediaType *string `json:"MediaType" xml:"MediaType" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Video *SearchMediaResponseMediaListVideo `json:"Video" xml:"Video" require:"true" type:"Struct"`
  Audio *SearchMediaResponseMediaListAudio `json:"Audio" xml:"Audio" require:"true" type:"Struct"`
  Image *SearchMediaResponseMediaListImage `json:"Image" xml:"Image" require:"true" type:"Struct"`
}

func (s SearchMediaResponseMediaList) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaResponseMediaList) GoString() string {
  return s.String()
}

func (s *SearchMediaResponseMediaList) SetMediaType(v string) *SearchMediaResponseMediaList {
  s.MediaType = &v
  return s
}

func (s *SearchMediaResponseMediaList) SetCreationTime(v string) *SearchMediaResponseMediaList {
  s.CreationTime = &v
  return s
}

func (s *SearchMediaResponseMediaList) SetMediaId(v string) *SearchMediaResponseMediaList {
  s.MediaId = &v
  return s
}

func (s *SearchMediaResponseMediaList) SetVideo(v *SearchMediaResponseMediaListVideo) *SearchMediaResponseMediaList {
  s.Video = v
  return s
}

func (s *SearchMediaResponseMediaList) SetAudio(v *SearchMediaResponseMediaListAudio) *SearchMediaResponseMediaList {
  s.Audio = v
  return s
}

func (s *SearchMediaResponseMediaList) SetImage(v *SearchMediaResponseMediaListImage) *SearchMediaResponseMediaList {
  s.Image = v
  return s
}

type SearchMediaResponseMediaListVideo struct {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  MediaSource *string `json:"MediaSource" xml:"MediaSource" require:"true"`
  MediaType *string `json:"MediaType" xml:"MediaType" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch" require:"true"`
  PreprocessStatus *string `json:"PreprocessStatus" xml:"PreprocessStatus" require:"true"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
  RegionId *string `json:"RegionId" xml:"RegionId" require:"true"`
  TranscodeMode *string `json:"TranscodeMode" xml:"TranscodeMode" require:"true"`
  AuditStatus *string `json:"AuditStatus" xml:"AuditStatus" require:"true"`
  AuditAIStatus *string `json:"AuditAIStatus" xml:"AuditAIStatus" require:"true"`
  AuditManualStatus *string `json:"AuditManualStatus" xml:"AuditManualStatus" require:"true"`
  AuditAIResult *string `json:"AuditAIResult" xml:"AuditAIResult" require:"true"`
  AuditTemplateId *string `json:"AuditTemplateId" xml:"AuditTemplateId" require:"true"`
  CustomMediaInfo *string `json:"CustomMediaInfo" xml:"CustomMediaInfo" require:"true"`
  PlayInfoList []*SearchMediaResponseMediaListVideoPlayInfoList `json:"PlayInfoList" xml:"PlayInfoList" require:"true" type:"Repeated"`
  Snapshots []*string `json:"Snapshots" xml:"Snapshots" require:"true" type:"Repeated"`
  SpriteSnapshots []*string `json:"SpriteSnapshots" xml:"SpriteSnapshots" require:"true" type:"Repeated"`
}

func (s SearchMediaResponseMediaListVideo) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaResponseMediaListVideo) GoString() string {
  return s.String()
}

func (s *SearchMediaResponseMediaListVideo) SetVideoId(v string) *SearchMediaResponseMediaListVideo {
  s.VideoId = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetMediaSource(v string) *SearchMediaResponseMediaListVideo {
  s.MediaSource = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetMediaType(v string) *SearchMediaResponseMediaListVideo {
  s.MediaType = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetTitle(v string) *SearchMediaResponseMediaListVideo {
  s.Title = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetTags(v string) *SearchMediaResponseMediaListVideo {
  s.Tags = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetStatus(v string) *SearchMediaResponseMediaListVideo {
  s.Status = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetSize(v int64) *SearchMediaResponseMediaListVideo {
  s.Size = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetDuration(v float32) *SearchMediaResponseMediaListVideo {
  s.Duration = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetDescription(v string) *SearchMediaResponseMediaListVideo {
  s.Description = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetModificationTime(v string) *SearchMediaResponseMediaListVideo {
  s.ModificationTime = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetCreationTime(v string) *SearchMediaResponseMediaListVideo {
  s.CreationTime = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetCoverURL(v string) *SearchMediaResponseMediaListVideo {
  s.CoverURL = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetCateId(v int64) *SearchMediaResponseMediaListVideo {
  s.CateId = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetCateName(v string) *SearchMediaResponseMediaListVideo {
  s.CateName = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetDownloadSwitch(v string) *SearchMediaResponseMediaListVideo {
  s.DownloadSwitch = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetPreprocessStatus(v string) *SearchMediaResponseMediaListVideo {
  s.PreprocessStatus = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetStorageLocation(v string) *SearchMediaResponseMediaListVideo {
  s.StorageLocation = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetRegionId(v string) *SearchMediaResponseMediaListVideo {
  s.RegionId = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetTranscodeMode(v string) *SearchMediaResponseMediaListVideo {
  s.TranscodeMode = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetAuditStatus(v string) *SearchMediaResponseMediaListVideo {
  s.AuditStatus = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetAuditAIStatus(v string) *SearchMediaResponseMediaListVideo {
  s.AuditAIStatus = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetAuditManualStatus(v string) *SearchMediaResponseMediaListVideo {
  s.AuditManualStatus = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetAuditAIResult(v string) *SearchMediaResponseMediaListVideo {
  s.AuditAIResult = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetAuditTemplateId(v string) *SearchMediaResponseMediaListVideo {
  s.AuditTemplateId = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetCustomMediaInfo(v string) *SearchMediaResponseMediaListVideo {
  s.CustomMediaInfo = &v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetPlayInfoList(v []*SearchMediaResponseMediaListVideoPlayInfoList) *SearchMediaResponseMediaListVideo {
  s.PlayInfoList = v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetSnapshots(v []*string) *SearchMediaResponseMediaListVideo {
  s.Snapshots = v
  return s
}

func (s *SearchMediaResponseMediaListVideo) SetSpriteSnapshots(v []*string) *SearchMediaResponseMediaListVideo {
  s.SpriteSnapshots = v
  return s
}

type SearchMediaResponseMediaListVideoPlayInfoList struct     {
  Width *int64 `json:"Width" xml:"Width" require:"true"`
  Height *int64 `json:"Height" xml:"Height" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  PlayURL *string `json:"PlayURL" xml:"PlayURL" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Encrypt *int64 `json:"Encrypt" xml:"Encrypt" require:"true"`
  Plaintext *string `json:"Plaintext" xml:"Plaintext" require:"true"`
  Complexity *string `json:"Complexity" xml:"Complexity" require:"true"`
  StreamType *string `json:"StreamType" xml:"StreamType" require:"true"`
  Rand *string `json:"Rand" xml:"Rand" require:"true"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s SearchMediaResponseMediaListVideoPlayInfoList) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaResponseMediaListVideoPlayInfoList) GoString() string {
  return s.String()
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetWidth(v int64) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Width = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetHeight(v int64) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Height = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetSize(v int64) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Size = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetPlayURL(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.PlayURL = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetBitrate(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Bitrate = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetDefinition(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Definition = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetDuration(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Duration = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetFormat(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Format = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetFps(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Fps = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetEncrypt(v int64) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Encrypt = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetPlaintext(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Plaintext = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetComplexity(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Complexity = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetStreamType(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.StreamType = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetRand(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.Rand = &v
  return s
}

func (s *SearchMediaResponseMediaListVideoPlayInfoList) SetJobId(v string) *SearchMediaResponseMediaListVideoPlayInfoList {
  s.JobId = &v
  return s
}

type SearchMediaResponseMediaListAudio struct {
  AudioId *string `json:"AudioId" xml:"AudioId" require:"true"`
  MediaSource *string `json:"MediaSource" xml:"MediaSource" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch" require:"true"`
  PreprocessStatus *string `json:"PreprocessStatus" xml:"PreprocessStatus" require:"true"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
  RegionId *string `json:"RegionId" xml:"RegionId" require:"true"`
  TranscodeMode *string `json:"TranscodeMode" xml:"TranscodeMode" require:"true"`
  AuditStatus *string `json:"AuditStatus" xml:"AuditStatus" require:"true"`
  AuditAIStatus *string `json:"AuditAIStatus" xml:"AuditAIStatus" require:"true"`
  AuditManualStatus *string `json:"AuditManualStatus" xml:"AuditManualStatus" require:"true"`
  AuditAIResult *string `json:"AuditAIResult" xml:"AuditAIResult" require:"true"`
  AuditTemplateId *string `json:"AuditTemplateId" xml:"AuditTemplateId" require:"true"`
  CustomMediaInfo *string `json:"CustomMediaInfo" xml:"CustomMediaInfo" require:"true"`
  PlayInfoList []*SearchMediaResponseMediaListAudioPlayInfoList `json:"PlayInfoList" xml:"PlayInfoList" require:"true" type:"Repeated"`
  Snapshots []*string `json:"Snapshots" xml:"Snapshots" require:"true" type:"Repeated"`
  SpriteSnapshots []*string `json:"SpriteSnapshots" xml:"SpriteSnapshots" require:"true" type:"Repeated"`
}

func (s SearchMediaResponseMediaListAudio) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaResponseMediaListAudio) GoString() string {
  return s.String()
}

func (s *SearchMediaResponseMediaListAudio) SetAudioId(v string) *SearchMediaResponseMediaListAudio {
  s.AudioId = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetMediaSource(v string) *SearchMediaResponseMediaListAudio {
  s.MediaSource = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetTitle(v string) *SearchMediaResponseMediaListAudio {
  s.Title = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetTags(v string) *SearchMediaResponseMediaListAudio {
  s.Tags = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetStatus(v string) *SearchMediaResponseMediaListAudio {
  s.Status = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetSize(v int64) *SearchMediaResponseMediaListAudio {
  s.Size = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetDuration(v float32) *SearchMediaResponseMediaListAudio {
  s.Duration = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetDescription(v string) *SearchMediaResponseMediaListAudio {
  s.Description = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetModificationTime(v string) *SearchMediaResponseMediaListAudio {
  s.ModificationTime = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetCreationTime(v string) *SearchMediaResponseMediaListAudio {
  s.CreationTime = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetCoverURL(v string) *SearchMediaResponseMediaListAudio {
  s.CoverURL = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetCateId(v int64) *SearchMediaResponseMediaListAudio {
  s.CateId = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetCateName(v string) *SearchMediaResponseMediaListAudio {
  s.CateName = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetDownloadSwitch(v string) *SearchMediaResponseMediaListAudio {
  s.DownloadSwitch = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetPreprocessStatus(v string) *SearchMediaResponseMediaListAudio {
  s.PreprocessStatus = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetStorageLocation(v string) *SearchMediaResponseMediaListAudio {
  s.StorageLocation = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetRegionId(v string) *SearchMediaResponseMediaListAudio {
  s.RegionId = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetTranscodeMode(v string) *SearchMediaResponseMediaListAudio {
  s.TranscodeMode = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetAuditStatus(v string) *SearchMediaResponseMediaListAudio {
  s.AuditStatus = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetAuditAIStatus(v string) *SearchMediaResponseMediaListAudio {
  s.AuditAIStatus = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetAuditManualStatus(v string) *SearchMediaResponseMediaListAudio {
  s.AuditManualStatus = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetAuditAIResult(v string) *SearchMediaResponseMediaListAudio {
  s.AuditAIResult = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetAuditTemplateId(v string) *SearchMediaResponseMediaListAudio {
  s.AuditTemplateId = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetCustomMediaInfo(v string) *SearchMediaResponseMediaListAudio {
  s.CustomMediaInfo = &v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetPlayInfoList(v []*SearchMediaResponseMediaListAudioPlayInfoList) *SearchMediaResponseMediaListAudio {
  s.PlayInfoList = v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetSnapshots(v []*string) *SearchMediaResponseMediaListAudio {
  s.Snapshots = v
  return s
}

func (s *SearchMediaResponseMediaListAudio) SetSpriteSnapshots(v []*string) *SearchMediaResponseMediaListAudio {
  s.SpriteSnapshots = v
  return s
}

type SearchMediaResponseMediaListAudioPlayInfoList struct     {
  Width *int64 `json:"Width" xml:"Width" require:"true"`
  Height *int64 `json:"Height" xml:"Height" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  PlayURL *string `json:"PlayURL" xml:"PlayURL" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Encrypt *int64 `json:"Encrypt" xml:"Encrypt" require:"true"`
  Plaintext *string `json:"Plaintext" xml:"Plaintext" require:"true"`
  Complexity *string `json:"Complexity" xml:"Complexity" require:"true"`
  StreamType *string `json:"StreamType" xml:"StreamType" require:"true"`
  Rand *string `json:"Rand" xml:"Rand" require:"true"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s SearchMediaResponseMediaListAudioPlayInfoList) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaResponseMediaListAudioPlayInfoList) GoString() string {
  return s.String()
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetWidth(v int64) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Width = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetHeight(v int64) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Height = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetSize(v int64) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Size = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetPlayURL(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.PlayURL = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetBitrate(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Bitrate = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetDefinition(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Definition = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetDuration(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Duration = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetFormat(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Format = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetFps(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Fps = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetEncrypt(v int64) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Encrypt = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetPlaintext(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Plaintext = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetComplexity(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Complexity = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetStreamType(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.StreamType = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetRand(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.Rand = &v
  return s
}

func (s *SearchMediaResponseMediaListAudioPlayInfoList) SetJobId(v string) *SearchMediaResponseMediaListAudioPlayInfoList {
  s.JobId = &v
  return s
}

type SearchMediaResponseMediaListImage struct {
  Title *string `json:"Title" xml:"Title" require:"true"`
  ImageId *string `json:"ImageId" xml:"ImageId" require:"true"`
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Ext *string `json:"Ext" xml:"Ext" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  URL *string `json:"URL" xml:"URL" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
  RegionId *string `json:"RegionId" xml:"RegionId" require:"true"`
}

func (s SearchMediaResponseMediaListImage) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaResponseMediaListImage) GoString() string {
  return s.String()
}

func (s *SearchMediaResponseMediaListImage) SetTitle(v string) *SearchMediaResponseMediaListImage {
  s.Title = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetImageId(v string) *SearchMediaResponseMediaListImage {
  s.ImageId = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetCateId(v int64) *SearchMediaResponseMediaListImage {
  s.CateId = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetCateName(v string) *SearchMediaResponseMediaListImage {
  s.CateName = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetExt(v string) *SearchMediaResponseMediaListImage {
  s.Ext = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetCreationTime(v string) *SearchMediaResponseMediaListImage {
  s.CreationTime = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetModificationTime(v string) *SearchMediaResponseMediaListImage {
  s.ModificationTime = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetTags(v string) *SearchMediaResponseMediaListImage {
  s.Tags = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetType(v string) *SearchMediaResponseMediaListImage {
  s.Type = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetURL(v string) *SearchMediaResponseMediaListImage {
  s.URL = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetStatus(v string) *SearchMediaResponseMediaListImage {
  s.Status = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetDescription(v string) *SearchMediaResponseMediaListImage {
  s.Description = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetStorageLocation(v string) *SearchMediaResponseMediaListImage {
  s.StorageLocation = &v
  return s
}

func (s *SearchMediaResponseMediaListImage) SetRegionId(v string) *SearchMediaResponseMediaListImage {
  s.RegionId = &v
  return s
}

type UpdateVideoInfosRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  UpdateContent *string `json:"UpdateContent" xml:"UpdateContent" require:"true"`
}

func (s UpdateVideoInfosRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateVideoInfosRequest) GoString() string {
  return s.String()
}

func (s *UpdateVideoInfosRequest) SetOwnerId(v int64) *UpdateVideoInfosRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateVideoInfosRequest) SetResourceOwnerAccount(v string) *UpdateVideoInfosRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateVideoInfosRequest) SetResourceOwnerId(v int64) *UpdateVideoInfosRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateVideoInfosRequest) SetUpdateContent(v string) *UpdateVideoInfosRequest {
  s.UpdateContent = &v
  return s
}

type UpdateVideoInfosResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  NonExistVideoIds []*string `json:"NonExistVideoIds" xml:"NonExistVideoIds" require:"true" type:"Repeated"`
}

func (s UpdateVideoInfosResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateVideoInfosResponse) GoString() string {
  return s.String()
}

func (s *UpdateVideoInfosResponse) SetRequestId(v string) *UpdateVideoInfosResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateVideoInfosResponse) SetNonExistVideoIds(v []*string) *UpdateVideoInfosResponse {
  s.NonExistVideoIds = v
  return s
}

type GenerateDownloadSecretKeyRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  AppIdentification *string `json:"AppIdentification" xml:"AppIdentification" require:"true"`
  AppDecryptKey *string `json:"AppDecryptKey" xml:"AppDecryptKey" require:"true"`
}

func (s GenerateDownloadSecretKeyRequest) String() string {
  return tea.Prettify(s)
}

func (s GenerateDownloadSecretKeyRequest) GoString() string {
  return s.String()
}

func (s *GenerateDownloadSecretKeyRequest) SetOwnerId(v int64) *GenerateDownloadSecretKeyRequest {
  s.OwnerId = &v
  return s
}

func (s *GenerateDownloadSecretKeyRequest) SetResourceOwnerAccount(v string) *GenerateDownloadSecretKeyRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GenerateDownloadSecretKeyRequest) SetResourceOwnerId(v int64) *GenerateDownloadSecretKeyRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GenerateDownloadSecretKeyRequest) SetAppIdentification(v string) *GenerateDownloadSecretKeyRequest {
  s.AppIdentification = &v
  return s
}

func (s *GenerateDownloadSecretKeyRequest) SetAppDecryptKey(v string) *GenerateDownloadSecretKeyRequest {
  s.AppDecryptKey = &v
  return s
}

type GenerateDownloadSecretKeyResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AppEncryptKey *string `json:"AppEncryptKey" xml:"AppEncryptKey" require:"true"`
}

func (s GenerateDownloadSecretKeyResponse) String() string {
  return tea.Prettify(s)
}

func (s GenerateDownloadSecretKeyResponse) GoString() string {
  return s.String()
}

func (s *GenerateDownloadSecretKeyResponse) SetRequestId(v string) *GenerateDownloadSecretKeyResponse {
  s.RequestId = &v
  return s
}

func (s *GenerateDownloadSecretKeyResponse) SetAppEncryptKey(v string) *GenerateDownloadSecretKeyResponse {
  s.AppEncryptKey = &v
  return s
}

type AssumeSlsRoleRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ClientId *string `json:"ClientId" xml:"ClientId" require:"true"`
  BusinessType *string `json:"BusinessType" xml:"BusinessType" require:"true"`
  TerminalType *string `json:"TerminalType" xml:"TerminalType" require:"true"`
  DeviceModel *string `json:"DeviceModel" xml:"DeviceModel" require:"true"`
  AppVersion *string `json:"AppVersion" xml:"AppVersion" require:"true"`
  AuthTimestamp *int64 `json:"AuthTimestamp" xml:"AuthTimestamp" require:"true"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo" require:"true"`
}

func (s AssumeSlsRoleRequest) String() string {
  return tea.Prettify(s)
}

func (s AssumeSlsRoleRequest) GoString() string {
  return s.String()
}

func (s *AssumeSlsRoleRequest) SetOwnerId(v int64) *AssumeSlsRoleRequest {
  s.OwnerId = &v
  return s
}

func (s *AssumeSlsRoleRequest) SetResourceOwnerAccount(v string) *AssumeSlsRoleRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AssumeSlsRoleRequest) SetResourceOwnerId(v int64) *AssumeSlsRoleRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AssumeSlsRoleRequest) SetClientId(v string) *AssumeSlsRoleRequest {
  s.ClientId = &v
  return s
}

func (s *AssumeSlsRoleRequest) SetBusinessType(v string) *AssumeSlsRoleRequest {
  s.BusinessType = &v
  return s
}

func (s *AssumeSlsRoleRequest) SetTerminalType(v string) *AssumeSlsRoleRequest {
  s.TerminalType = &v
  return s
}

func (s *AssumeSlsRoleRequest) SetDeviceModel(v string) *AssumeSlsRoleRequest {
  s.DeviceModel = &v
  return s
}

func (s *AssumeSlsRoleRequest) SetAppVersion(v string) *AssumeSlsRoleRequest {
  s.AppVersion = &v
  return s
}

func (s *AssumeSlsRoleRequest) SetAuthTimestamp(v int64) *AssumeSlsRoleRequest {
  s.AuthTimestamp = &v
  return s
}

func (s *AssumeSlsRoleRequest) SetAuthInfo(v string) *AssumeSlsRoleRequest {
  s.AuthInfo = &v
  return s
}

type AssumeSlsRoleResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  SlsAuthResult *string `json:"SlsAuthResult" xml:"SlsAuthResult" require:"true"`
}

func (s AssumeSlsRoleResponse) String() string {
  return tea.Prettify(s)
}

func (s AssumeSlsRoleResponse) GoString() string {
  return s.String()
}

func (s *AssumeSlsRoleResponse) SetRequestId(v string) *AssumeSlsRoleResponse {
  s.RequestId = &v
  return s
}

func (s *AssumeSlsRoleResponse) SetSlsAuthResult(v string) *AssumeSlsRoleResponse {
  s.SlsAuthResult = &v
  return s
}

type GetPersonalStorageListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  StorageRegion *string `json:"StorageRegion" xml:"StorageRegion"`
  Prefix *string `json:"Prefix" xml:"Prefix"`
  MaxKeys *string `json:"MaxKeys" xml:"MaxKeys"`
}

func (s GetPersonalStorageListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetPersonalStorageListRequest) GoString() string {
  return s.String()
}

func (s *GetPersonalStorageListRequest) SetAccessKeyId(v string) *GetPersonalStorageListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetPersonalStorageListRequest) SetOwnerId(v string) *GetPersonalStorageListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetPersonalStorageListRequest) SetResourceOwnerId(v string) *GetPersonalStorageListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetPersonalStorageListRequest) SetResourceOwnerAccount(v string) *GetPersonalStorageListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetPersonalStorageListRequest) SetOwnerAccount(v string) *GetPersonalStorageListRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetPersonalStorageListRequest) SetResourceRealOwnerId(v int64) *GetPersonalStorageListRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetPersonalStorageListRequest) SetStorageRegion(v string) *GetPersonalStorageListRequest {
  s.StorageRegion = &v
  return s
}

func (s *GetPersonalStorageListRequest) SetPrefix(v string) *GetPersonalStorageListRequest {
  s.Prefix = &v
  return s
}

func (s *GetPersonalStorageListRequest) SetMaxKeys(v string) *GetPersonalStorageListRequest {
  s.MaxKeys = &v
  return s
}

type GetPersonalStorageListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  StorageInfoList *GetPersonalStorageListResponseStorageInfoList `json:"StorageInfoList" xml:"StorageInfoList" require:"true" type:"Struct"`
}

func (s GetPersonalStorageListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetPersonalStorageListResponse) GoString() string {
  return s.String()
}

func (s *GetPersonalStorageListResponse) SetRequestId(v string) *GetPersonalStorageListResponse {
  s.RequestId = &v
  return s
}

func (s *GetPersonalStorageListResponse) SetStorageInfoList(v *GetPersonalStorageListResponseStorageInfoList) *GetPersonalStorageListResponse {
  s.StorageInfoList = v
  return s
}

type GetPersonalStorageListResponseStorageInfoList struct {
  StorageInfo []*GetPersonalStorageListResponseStorageInfoListStorageInfo `json:"StorageInfo" xml:"StorageInfo" require:"true" type:"Repeated"`
}

func (s GetPersonalStorageListResponseStorageInfoList) String() string {
  return tea.Prettify(s)
}

func (s GetPersonalStorageListResponseStorageInfoList) GoString() string {
  return s.String()
}

func (s *GetPersonalStorageListResponseStorageInfoList) SetStorageInfo(v []*GetPersonalStorageListResponseStorageInfoListStorageInfo) *GetPersonalStorageListResponseStorageInfoList {
  s.StorageInfo = v
  return s
}

type GetPersonalStorageListResponseStorageInfoListStorageInfo struct     {
  Location *string `json:"Location" xml:"Location" require:"true"`
  GmtCreate *string `json:"GmtCreate" xml:"GmtCreate" require:"true"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId" require:"true"`
  StorageClass *string `json:"StorageClass" xml:"StorageClass" require:"true"`
  ExtranetEndpoint *string `json:"ExtranetEndpoint" xml:"ExtranetEndpoint" require:"true"`
  IntranetEndpoint *string `json:"IntranetEndpoint" xml:"IntranetEndpoint" require:"true"`
  StorageACL *string `json:"StorageACL" xml:"StorageACL" require:"true"`
}

func (s GetPersonalStorageListResponseStorageInfoListStorageInfo) String() string {
  return tea.Prettify(s)
}

func (s GetPersonalStorageListResponseStorageInfoListStorageInfo) GoString() string {
  return s.String()
}

func (s *GetPersonalStorageListResponseStorageInfoListStorageInfo) SetLocation(v string) *GetPersonalStorageListResponseStorageInfoListStorageInfo {
  s.Location = &v
  return s
}

func (s *GetPersonalStorageListResponseStorageInfoListStorageInfo) SetGmtCreate(v string) *GetPersonalStorageListResponseStorageInfoListStorageInfo {
  s.GmtCreate = &v
  return s
}

func (s *GetPersonalStorageListResponseStorageInfoListStorageInfo) SetOwnerId(v int64) *GetPersonalStorageListResponseStorageInfoListStorageInfo {
  s.OwnerId = &v
  return s
}

func (s *GetPersonalStorageListResponseStorageInfoListStorageInfo) SetStorageClass(v string) *GetPersonalStorageListResponseStorageInfoListStorageInfo {
  s.StorageClass = &v
  return s
}

func (s *GetPersonalStorageListResponseStorageInfoListStorageInfo) SetExtranetEndpoint(v string) *GetPersonalStorageListResponseStorageInfoListStorageInfo {
  s.ExtranetEndpoint = &v
  return s
}

func (s *GetPersonalStorageListResponseStorageInfoListStorageInfo) SetIntranetEndpoint(v string) *GetPersonalStorageListResponseStorageInfoListStorageInfo {
  s.IntranetEndpoint = &v
  return s
}

func (s *GetPersonalStorageListResponseStorageInfoListStorageInfo) SetStorageACL(v string) *GetPersonalStorageListResponseStorageInfoListStorageInfo {
  s.StorageACL = &v
  return s
}

type GetStorageRegionListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s GetStorageRegionListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetStorageRegionListRequest) GoString() string {
  return s.String()
}

func (s *GetStorageRegionListRequest) SetAccessKeyId(v string) *GetStorageRegionListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetStorageRegionListRequest) SetOwnerId(v string) *GetStorageRegionListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetStorageRegionListRequest) SetResourceOwnerId(v string) *GetStorageRegionListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetStorageRegionListRequest) SetResourceOwnerAccount(v string) *GetStorageRegionListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetStorageRegionListRequest) SetOwnerAccount(v string) *GetStorageRegionListRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetStorageRegionListRequest) SetResourceRealOwnerId(v int64) *GetStorageRegionListRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type GetStorageRegionListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  RegionList *GetStorageRegionListResponseRegionList `json:"RegionList" xml:"RegionList" require:"true" type:"Struct"`
}

func (s GetStorageRegionListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetStorageRegionListResponse) GoString() string {
  return s.String()
}

func (s *GetStorageRegionListResponse) SetRequestId(v string) *GetStorageRegionListResponse {
  s.RequestId = &v
  return s
}

func (s *GetStorageRegionListResponse) SetRegionList(v *GetStorageRegionListResponseRegionList) *GetStorageRegionListResponse {
  s.RegionList = v
  return s
}

type GetStorageRegionListResponseRegionList struct {
  Region []*GetStorageRegionListResponseRegionListRegion `json:"Region" xml:"Region" require:"true" type:"Repeated"`
}

func (s GetStorageRegionListResponseRegionList) String() string {
  return tea.Prettify(s)
}

func (s GetStorageRegionListResponseRegionList) GoString() string {
  return s.String()
}

func (s *GetStorageRegionListResponseRegionList) SetRegion(v []*GetStorageRegionListResponseRegionListRegion) *GetStorageRegionListResponseRegionList {
  s.Region = v
  return s
}

type GetStorageRegionListResponseRegionListRegion struct     {
  RegionID *string `json:"RegionID" xml:"RegionID" require:"true"`
}

func (s GetStorageRegionListResponseRegionListRegion) String() string {
  return tea.Prettify(s)
}

func (s GetStorageRegionListResponseRegionListRegion) GoString() string {
  return s.String()
}

func (s *GetStorageRegionListResponseRegionListRegion) SetRegionID(v string) *GetStorageRegionListResponseRegionListRegion {
  s.RegionID = &v
  return s
}

type SetStorageACLRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
  StorageACL *string `json:"StorageACL" xml:"StorageACL" require:"true"`
}

func (s SetStorageACLRequest) String() string {
  return tea.Prettify(s)
}

func (s SetStorageACLRequest) GoString() string {
  return s.String()
}

func (s *SetStorageACLRequest) SetAccessKeyId(v string) *SetStorageACLRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetStorageACLRequest) SetOwnerId(v string) *SetStorageACLRequest {
  s.OwnerId = &v
  return s
}

func (s *SetStorageACLRequest) SetResourceOwnerId(v string) *SetStorageACLRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetStorageACLRequest) SetResourceOwnerAccount(v string) *SetStorageACLRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetStorageACLRequest) SetOwnerAccount(v string) *SetStorageACLRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SetStorageACLRequest) SetResourceRealOwnerId(v int64) *SetStorageACLRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *SetStorageACLRequest) SetStorageLocation(v string) *SetStorageACLRequest {
  s.StorageLocation = &v
  return s
}

func (s *SetStorageACLRequest) SetStorageACL(v string) *SetStorageACLRequest {
  s.StorageACL = &v
  return s
}

type SetStorageACLResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SetStorageACLResponse) String() string {
  return tea.Prettify(s)
}

func (s SetStorageACLResponse) GoString() string {
  return s.String()
}

func (s *SetStorageACLResponse) SetRequestId(v string) *SetStorageACLResponse {
  s.RequestId = &v
  return s
}

type GetMessageCallbackEventListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s GetMessageCallbackEventListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMessageCallbackEventListRequest) GoString() string {
  return s.String()
}

func (s *GetMessageCallbackEventListRequest) SetAccessKeyId(v string) *GetMessageCallbackEventListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMessageCallbackEventListRequest) SetOwnerId(v string) *GetMessageCallbackEventListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMessageCallbackEventListRequest) SetResourceOwnerId(v string) *GetMessageCallbackEventListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMessageCallbackEventListRequest) SetResourceOwnerAccount(v string) *GetMessageCallbackEventListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMessageCallbackEventListRequest) SetOwnerAccount(v string) *GetMessageCallbackEventListRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetMessageCallbackEventListRequest) SetResourceRealOwnerId(v int64) *GetMessageCallbackEventListRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type GetMessageCallbackEventListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  EventList *string `json:"EventList" xml:"EventList" require:"true"`
}

func (s GetMessageCallbackEventListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMessageCallbackEventListResponse) GoString() string {
  return s.String()
}

func (s *GetMessageCallbackEventListResponse) SetRequestId(v string) *GetMessageCallbackEventListResponse {
  s.RequestId = &v
  return s
}

func (s *GetMessageCallbackEventListResponse) SetEventList(v string) *GetMessageCallbackEventListResponse {
  s.EventList = &v
  return s
}

type GetStorageInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation"`
}

func (s GetStorageInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetStorageInfoRequest) GoString() string {
  return s.String()
}

func (s *GetStorageInfoRequest) SetAccessKeyId(v string) *GetStorageInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetStorageInfoRequest) SetOwnerId(v string) *GetStorageInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetStorageInfoRequest) SetResourceOwnerId(v string) *GetStorageInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetStorageInfoRequest) SetResourceOwnerAccount(v string) *GetStorageInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetStorageInfoRequest) SetOwnerAccount(v string) *GetStorageInfoRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetStorageInfoRequest) SetResourceRealOwnerId(v int64) *GetStorageInfoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetStorageInfoRequest) SetStorageLocation(v string) *GetStorageInfoRequest {
  s.StorageLocation = &v
  return s
}

type GetStorageInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  StorageACL *string `json:"StorageACL" xml:"StorageACL" require:"true"`
  DomainInfoList *GetStorageInfoResponseDomainInfoList `json:"DomainInfoList" xml:"DomainInfoList" require:"true" type:"Struct"`
  Storage *GetStorageInfoResponseStorage `json:"Storage" xml:"Storage" require:"true" type:"Struct"`
}

func (s GetStorageInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetStorageInfoResponse) GoString() string {
  return s.String()
}

func (s *GetStorageInfoResponse) SetRequestId(v string) *GetStorageInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetStorageInfoResponse) SetStorageACL(v string) *GetStorageInfoResponse {
  s.StorageACL = &v
  return s
}

func (s *GetStorageInfoResponse) SetDomainInfoList(v *GetStorageInfoResponseDomainInfoList) *GetStorageInfoResponse {
  s.DomainInfoList = v
  return s
}

func (s *GetStorageInfoResponse) SetStorage(v *GetStorageInfoResponseStorage) *GetStorageInfoResponse {
  s.Storage = v
  return s
}

type GetStorageInfoResponseDomainInfoList struct {
  DomainInfo []*GetStorageInfoResponseDomainInfoListDomainInfo `json:"DomainInfo" xml:"DomainInfo" require:"true" type:"Repeated"`
}

func (s GetStorageInfoResponseDomainInfoList) String() string {
  return tea.Prettify(s)
}

func (s GetStorageInfoResponseDomainInfoList) GoString() string {
  return s.String()
}

func (s *GetStorageInfoResponseDomainInfoList) SetDomainInfo(v []*GetStorageInfoResponseDomainInfoListDomainInfo) *GetStorageInfoResponseDomainInfoList {
  s.DomainInfo = v
  return s
}

type GetStorageInfoResponseDomainInfoListDomainInfo struct     {
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  DomainStatus *string `json:"DomainStatus" xml:"DomainStatus" require:"true"`
  DomainCname *string `json:"DomainCname" xml:"DomainCname" require:"true"`
  DefaultPlay *bool `json:"DefaultPlay" xml:"DefaultPlay" require:"true"`
}

func (s GetStorageInfoResponseDomainInfoListDomainInfo) String() string {
  return tea.Prettify(s)
}

func (s GetStorageInfoResponseDomainInfoListDomainInfo) GoString() string {
  return s.String()
}

func (s *GetStorageInfoResponseDomainInfoListDomainInfo) SetDomainName(v string) *GetStorageInfoResponseDomainInfoListDomainInfo {
  s.DomainName = &v
  return s
}

func (s *GetStorageInfoResponseDomainInfoListDomainInfo) SetDomainStatus(v string) *GetStorageInfoResponseDomainInfoListDomainInfo {
  s.DomainStatus = &v
  return s
}

func (s *GetStorageInfoResponseDomainInfoListDomainInfo) SetDomainCname(v string) *GetStorageInfoResponseDomainInfoListDomainInfo {
  s.DomainCname = &v
  return s
}

func (s *GetStorageInfoResponseDomainInfoListDomainInfo) SetDefaultPlay(v bool) *GetStorageInfoResponseDomainInfoListDomainInfo {
  s.DefaultPlay = &v
  return s
}

type GetStorageInfoResponseStorage struct {
  GmtCreate *string `json:"GmtCreate" xml:"GmtCreate" require:"true"`
  GmtModified *string `json:"GmtModified" xml:"GmtModified" require:"true"`
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
  Location *string `json:"Location" xml:"Location" require:"true"`
  Type *int `json:"Type" xml:"Type" require:"true"`
  Region *string `json:"Region" xml:"Region" require:"true"`
  Status *int `json:"Status" xml:"Status" require:"true"`
  StorageUsage *int `json:"StorageUsage" xml:"StorageUsage" require:"true"`
  DefaultUpload *bool `json:"DefaultUpload" xml:"DefaultUpload" require:"true"`
}

func (s GetStorageInfoResponseStorage) String() string {
  return tea.Prettify(s)
}

func (s GetStorageInfoResponseStorage) GoString() string {
  return s.String()
}

func (s *GetStorageInfoResponseStorage) SetGmtCreate(v string) *GetStorageInfoResponseStorage {
  s.GmtCreate = &v
  return s
}

func (s *GetStorageInfoResponseStorage) SetGmtModified(v string) *GetStorageInfoResponseStorage {
  s.GmtModified = &v
  return s
}

func (s *GetStorageInfoResponseStorage) SetGroupId(v string) *GetStorageInfoResponseStorage {
  s.GroupId = &v
  return s
}

func (s *GetStorageInfoResponseStorage) SetLocation(v string) *GetStorageInfoResponseStorage {
  s.Location = &v
  return s
}

func (s *GetStorageInfoResponseStorage) SetType(v int) *GetStorageInfoResponseStorage {
  s.Type = &v
  return s
}

func (s *GetStorageInfoResponseStorage) SetRegion(v string) *GetStorageInfoResponseStorage {
  s.Region = &v
  return s
}

func (s *GetStorageInfoResponseStorage) SetStatus(v int) *GetStorageInfoResponseStorage {
  s.Status = &v
  return s
}

func (s *GetStorageInfoResponseStorage) SetStorageUsage(v int) *GetStorageInfoResponseStorage {
  s.StorageUsage = &v
  return s
}

func (s *GetStorageInfoResponseStorage) SetDefaultUpload(v bool) *GetStorageInfoResponseStorage {
  s.DefaultUpload = &v
  return s
}

type DeleteStorageRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
}

func (s DeleteStorageRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteStorageRequest) GoString() string {
  return s.String()
}

func (s *DeleteStorageRequest) SetAccessKeyId(v string) *DeleteStorageRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteStorageRequest) SetOwnerId(v string) *DeleteStorageRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteStorageRequest) SetResourceOwnerId(v string) *DeleteStorageRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteStorageRequest) SetResourceOwnerAccount(v string) *DeleteStorageRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteStorageRequest) SetOwnerAccount(v string) *DeleteStorageRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteStorageRequest) SetResourceRealOwnerId(v int64) *DeleteStorageRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *DeleteStorageRequest) SetStorageLocation(v string) *DeleteStorageRequest {
  s.StorageLocation = &v
  return s
}

type DeleteStorageResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteStorageResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteStorageResponse) GoString() string {
  return s.String()
}

func (s *DeleteStorageResponse) SetRequestId(v string) *DeleteStorageResponse {
  s.RequestId = &v
  return s
}

type AddStorageRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  StorageType *string `json:"StorageType" xml:"StorageType" require:"true"`
  StorageRegion *string `json:"StorageRegion" xml:"StorageRegion" require:"true"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation"`
}

func (s AddStorageRequest) String() string {
  return tea.Prettify(s)
}

func (s AddStorageRequest) GoString() string {
  return s.String()
}

func (s *AddStorageRequest) SetAccessKeyId(v string) *AddStorageRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddStorageRequest) SetOwnerId(v string) *AddStorageRequest {
  s.OwnerId = &v
  return s
}

func (s *AddStorageRequest) SetResourceOwnerId(v string) *AddStorageRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddStorageRequest) SetResourceOwnerAccount(v string) *AddStorageRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddStorageRequest) SetOwnerAccount(v string) *AddStorageRequest {
  s.OwnerAccount = &v
  return s
}

func (s *AddStorageRequest) SetResourceRealOwnerId(v int64) *AddStorageRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *AddStorageRequest) SetStorageType(v string) *AddStorageRequest {
  s.StorageType = &v
  return s
}

func (s *AddStorageRequest) SetStorageRegion(v string) *AddStorageRequest {
  s.StorageRegion = &v
  return s
}

func (s *AddStorageRequest) SetStorageLocation(v string) *AddStorageRequest {
  s.StorageLocation = &v
  return s
}

type AddStorageResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddStorageResponse) String() string {
  return tea.Prettify(s)
}

func (s AddStorageResponse) GoString() string {
  return s.String()
}

func (s *AddStorageResponse) SetRequestId(v string) *AddStorageResponse {
  s.RequestId = &v
  return s
}

type GetStorageListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  PageNumber *int `json:"PageNumber" xml:"PageNumber"`
  StorageRegion *string `json:"StorageRegion" xml:"StorageRegion"`
  StorageType *string `json:"StorageType" xml:"StorageType"`
  StorageStatus *string `json:"StorageStatus" xml:"StorageStatus"`
  Division *string `json:"Division" xml:"Division"`
}

func (s GetStorageListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetStorageListRequest) GoString() string {
  return s.String()
}

func (s *GetStorageListRequest) SetAccessKeyId(v string) *GetStorageListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetStorageListRequest) SetOwnerId(v string) *GetStorageListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetStorageListRequest) SetResourceOwnerId(v string) *GetStorageListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetStorageListRequest) SetResourceOwnerAccount(v string) *GetStorageListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetStorageListRequest) SetOwnerAccount(v string) *GetStorageListRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetStorageListRequest) SetResourceRealOwnerId(v int64) *GetStorageListRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetStorageListRequest) SetPageSize(v int) *GetStorageListRequest {
  s.PageSize = &v
  return s
}

func (s *GetStorageListRequest) SetPageNumber(v int) *GetStorageListRequest {
  s.PageNumber = &v
  return s
}

func (s *GetStorageListRequest) SetStorageRegion(v string) *GetStorageListRequest {
  s.StorageRegion = &v
  return s
}

func (s *GetStorageListRequest) SetStorageType(v string) *GetStorageListRequest {
  s.StorageType = &v
  return s
}

func (s *GetStorageListRequest) SetStorageStatus(v string) *GetStorageListRequest {
  s.StorageStatus = &v
  return s
}

func (s *GetStorageListRequest) SetDivision(v string) *GetStorageListRequest {
  s.Division = &v
  return s
}

type GetStorageListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PageSize *int `json:"PageSize" xml:"PageSize" require:"true"`
  PageNumber *int `json:"PageNumber" xml:"PageNumber" require:"true"`
  TotalCount *int `json:"TotalCount" xml:"TotalCount" require:"true"`
  StorageList *GetStorageListResponseStorageList `json:"StorageList" xml:"StorageList" require:"true" type:"Struct"`
}

func (s GetStorageListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetStorageListResponse) GoString() string {
  return s.String()
}

func (s *GetStorageListResponse) SetRequestId(v string) *GetStorageListResponse {
  s.RequestId = &v
  return s
}

func (s *GetStorageListResponse) SetPageSize(v int) *GetStorageListResponse {
  s.PageSize = &v
  return s
}

func (s *GetStorageListResponse) SetPageNumber(v int) *GetStorageListResponse {
  s.PageNumber = &v
  return s
}

func (s *GetStorageListResponse) SetTotalCount(v int) *GetStorageListResponse {
  s.TotalCount = &v
  return s
}

func (s *GetStorageListResponse) SetStorageList(v *GetStorageListResponseStorageList) *GetStorageListResponse {
  s.StorageList = v
  return s
}

type GetStorageListResponseStorageList struct {
  Storage []*GetStorageListResponseStorageListStorage `json:"Storage" xml:"Storage" require:"true" type:"Repeated"`
}

func (s GetStorageListResponseStorageList) String() string {
  return tea.Prettify(s)
}

func (s GetStorageListResponseStorageList) GoString() string {
  return s.String()
}

func (s *GetStorageListResponseStorageList) SetStorage(v []*GetStorageListResponseStorageListStorage) *GetStorageListResponseStorageList {
  s.Storage = v
  return s
}

type GetStorageListResponseStorageListStorage struct     {
  GmtCreate *string `json:"GmtCreate" xml:"GmtCreate" require:"true"`
  GmtModified *string `json:"GmtModified" xml:"GmtModified" require:"true"`
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
  Location *string `json:"Location" xml:"Location" require:"true"`
  Type *int `json:"Type" xml:"Type" require:"true"`
  Region *string `json:"Region" xml:"Region" require:"true"`
  Status *int `json:"Status" xml:"Status" require:"true"`
  StorageUsage *int `json:"StorageUsage" xml:"StorageUsage" require:"true"`
  DefaultUpload *bool `json:"DefaultUpload" xml:"DefaultUpload" require:"true"`
}

func (s GetStorageListResponseStorageListStorage) String() string {
  return tea.Prettify(s)
}

func (s GetStorageListResponseStorageListStorage) GoString() string {
  return s.String()
}

func (s *GetStorageListResponseStorageListStorage) SetGmtCreate(v string) *GetStorageListResponseStorageListStorage {
  s.GmtCreate = &v
  return s
}

func (s *GetStorageListResponseStorageListStorage) SetGmtModified(v string) *GetStorageListResponseStorageListStorage {
  s.GmtModified = &v
  return s
}

func (s *GetStorageListResponseStorageListStorage) SetGroupId(v string) *GetStorageListResponseStorageListStorage {
  s.GroupId = &v
  return s
}

func (s *GetStorageListResponseStorageListStorage) SetLocation(v string) *GetStorageListResponseStorageListStorage {
  s.Location = &v
  return s
}

func (s *GetStorageListResponseStorageListStorage) SetType(v int) *GetStorageListResponseStorageListStorage {
  s.Type = &v
  return s
}

func (s *GetStorageListResponseStorageListStorage) SetRegion(v string) *GetStorageListResponseStorageListStorage {
  s.Region = &v
  return s
}

func (s *GetStorageListResponseStorageListStorage) SetStatus(v int) *GetStorageListResponseStorageListStorage {
  s.Status = &v
  return s
}

func (s *GetStorageListResponseStorageListStorage) SetStorageUsage(v int) *GetStorageListResponseStorageListStorage {
  s.StorageUsage = &v
  return s
}

func (s *GetStorageListResponseStorageListStorage) SetDefaultUpload(v bool) *GetStorageListResponseStorageListStorage {
  s.DefaultUpload = &v
  return s
}

type GetThirdPartPlayPolicyRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  ContentId *string `json:"ContentId" xml:"ContentId" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  AuthTimestamp *int64 `json:"AuthTimestamp" xml:"AuthTimestamp" require:"true"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo" require:"true"`
}

func (s GetThirdPartPlayPolicyRequest) String() string {
  return tea.Prettify(s)
}

func (s GetThirdPartPlayPolicyRequest) GoString() string {
  return s.String()
}

func (s *GetThirdPartPlayPolicyRequest) SetOwnerId(v int64) *GetThirdPartPlayPolicyRequest {
  s.OwnerId = &v
  return s
}

func (s *GetThirdPartPlayPolicyRequest) SetResourceOwnerAccount(v string) *GetThirdPartPlayPolicyRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetThirdPartPlayPolicyRequest) SetResourceOwnerId(v int64) *GetThirdPartPlayPolicyRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetThirdPartPlayPolicyRequest) SetResourceRealOwnerId(v int64) *GetThirdPartPlayPolicyRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetThirdPartPlayPolicyRequest) SetContentId(v string) *GetThirdPartPlayPolicyRequest {
  s.ContentId = &v
  return s
}

func (s *GetThirdPartPlayPolicyRequest) SetSource(v string) *GetThirdPartPlayPolicyRequest {
  s.Source = &v
  return s
}

func (s *GetThirdPartPlayPolicyRequest) SetAuthTimestamp(v int64) *GetThirdPartPlayPolicyRequest {
  s.AuthTimestamp = &v
  return s
}

func (s *GetThirdPartPlayPolicyRequest) SetAuthInfo(v string) *GetThirdPartPlayPolicyRequest {
  s.AuthInfo = &v
  return s
}

type GetThirdPartPlayPolicyResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PolicyInfo *string `json:"PolicyInfo" xml:"PolicyInfo" require:"true"`
}

func (s GetThirdPartPlayPolicyResponse) String() string {
  return tea.Prettify(s)
}

func (s GetThirdPartPlayPolicyResponse) GoString() string {
  return s.String()
}

func (s *GetThirdPartPlayPolicyResponse) SetRequestId(v string) *GetThirdPartPlayPolicyResponse {
  s.RequestId = &v
  return s
}

func (s *GetThirdPartPlayPolicyResponse) SetPolicyInfo(v string) *GetThirdPartPlayPolicyResponse {
  s.PolicyInfo = &v
  return s
}

type AddThirdPartPlayPolicyRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  PolicyInfoList *string `json:"PolicyInfoList" xml:"PolicyInfoList" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  AuthTimestamp *int64 `json:"AuthTimestamp" xml:"AuthTimestamp" require:"true"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo" require:"true"`
}

func (s AddThirdPartPlayPolicyRequest) String() string {
  return tea.Prettify(s)
}

func (s AddThirdPartPlayPolicyRequest) GoString() string {
  return s.String()
}

func (s *AddThirdPartPlayPolicyRequest) SetOwnerId(v int64) *AddThirdPartPlayPolicyRequest {
  s.OwnerId = &v
  return s
}

func (s *AddThirdPartPlayPolicyRequest) SetResourceOwnerAccount(v string) *AddThirdPartPlayPolicyRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddThirdPartPlayPolicyRequest) SetResourceOwnerId(v int64) *AddThirdPartPlayPolicyRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddThirdPartPlayPolicyRequest) SetResourceRealOwnerId(v int64) *AddThirdPartPlayPolicyRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *AddThirdPartPlayPolicyRequest) SetPolicyInfoList(v string) *AddThirdPartPlayPolicyRequest {
  s.PolicyInfoList = &v
  return s
}

func (s *AddThirdPartPlayPolicyRequest) SetSource(v string) *AddThirdPartPlayPolicyRequest {
  s.Source = &v
  return s
}

func (s *AddThirdPartPlayPolicyRequest) SetAuthTimestamp(v int64) *AddThirdPartPlayPolicyRequest {
  s.AuthTimestamp = &v
  return s
}

func (s *AddThirdPartPlayPolicyRequest) SetAuthInfo(v string) *AddThirdPartPlayPolicyRequest {
  s.AuthInfo = &v
  return s
}

type AddThirdPartPlayPolicyResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Count *string `json:"Count" xml:"Count" require:"true"`
}

func (s AddThirdPartPlayPolicyResponse) String() string {
  return tea.Prettify(s)
}

func (s AddThirdPartPlayPolicyResponse) GoString() string {
  return s.String()
}

func (s *AddThirdPartPlayPolicyResponse) SetRequestId(v string) *AddThirdPartPlayPolicyResponse {
  s.RequestId = &v
  return s
}

func (s *AddThirdPartPlayPolicyResponse) SetCount(v string) *AddThirdPartPlayPolicyResponse {
  s.Count = &v
  return s
}

type AuthorizeAppLicenseRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  SdkCode *int64 `json:"SdkCode" xml:"SdkCode"`
  LicenseVersion *int64 `json:"LicenseVersion" xml:"LicenseVersion" require:"true"`
  Platform *int64 `json:"Platform" xml:"Platform" require:"true"`
  BundleId *string `json:"BundleId" xml:"BundleId"`
  PackageName *string `json:"PackageName" xml:"PackageName"`
  LicenseSignature *string `json:"LicenseSignature" xml:"LicenseSignature"`
  Nonce *string `json:"Nonce" xml:"Nonce" require:"true"`
  Time *int64 `json:"Time" xml:"Time" require:"true"`
  Sign *string `json:"Sign" xml:"Sign" require:"true"`
  SdkVersion *string `json:"SdkVersion" xml:"SdkVersion"`
  SdkVersionCode *int64 `json:"SdkVersionCode" xml:"SdkVersionCode"`
}

func (s AuthorizeAppLicenseRequest) String() string {
  return tea.Prettify(s)
}

func (s AuthorizeAppLicenseRequest) GoString() string {
  return s.String()
}

func (s *AuthorizeAppLicenseRequest) SetAccessKeyId(v string) *AuthorizeAppLicenseRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetOwnerId(v string) *AuthorizeAppLicenseRequest {
  s.OwnerId = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetSdkCode(v int64) *AuthorizeAppLicenseRequest {
  s.SdkCode = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetLicenseVersion(v int64) *AuthorizeAppLicenseRequest {
  s.LicenseVersion = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetPlatform(v int64) *AuthorizeAppLicenseRequest {
  s.Platform = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetBundleId(v string) *AuthorizeAppLicenseRequest {
  s.BundleId = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetPackageName(v string) *AuthorizeAppLicenseRequest {
  s.PackageName = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetLicenseSignature(v string) *AuthorizeAppLicenseRequest {
  s.LicenseSignature = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetNonce(v string) *AuthorizeAppLicenseRequest {
  s.Nonce = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetTime(v int64) *AuthorizeAppLicenseRequest {
  s.Time = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetSign(v string) *AuthorizeAppLicenseRequest {
  s.Sign = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetSdkVersion(v string) *AuthorizeAppLicenseRequest {
  s.SdkVersion = &v
  return s
}

func (s *AuthorizeAppLicenseRequest) SetSdkVersionCode(v int64) *AuthorizeAppLicenseRequest {
  s.SdkVersionCode = &v
  return s
}

type AuthorizeAppLicenseResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  ExpireDate *string `json:"ExpireDate" xml:"ExpireDate" require:"true"`
  Sign *string `json:"Sign" xml:"Sign" require:"true"`
  Feature *string `json:"Feature" xml:"Feature" require:"true"`
}

func (s AuthorizeAppLicenseResponse) String() string {
  return tea.Prettify(s)
}

func (s AuthorizeAppLicenseResponse) GoString() string {
  return s.String()
}

func (s *AuthorizeAppLicenseResponse) SetRequestId(v string) *AuthorizeAppLicenseResponse {
  s.RequestId = &v
  return s
}

func (s *AuthorizeAppLicenseResponse) SetExpireDate(v string) *AuthorizeAppLicenseResponse {
  s.ExpireDate = &v
  return s
}

func (s *AuthorizeAppLicenseResponse) SetSign(v string) *AuthorizeAppLicenseResponse {
  s.Sign = &v
  return s
}

func (s *AuthorizeAppLicenseResponse) SetFeature(v string) *AuthorizeAppLicenseResponse {
  s.Feature = &v
  return s
}

type GetAppLicenseRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  LicenseId *int64 `json:"LicenseId" xml:"LicenseId" require:"true"`
}

func (s GetAppLicenseRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAppLicenseRequest) GoString() string {
  return s.String()
}

func (s *GetAppLicenseRequest) SetAccessKeyId(v string) *GetAppLicenseRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetAppLicenseRequest) SetOwnerId(v string) *GetAppLicenseRequest {
  s.OwnerId = &v
  return s
}

func (s *GetAppLicenseRequest) SetLicenseId(v int64) *GetAppLicenseRequest {
  s.LicenseId = &v
  return s
}

type GetAppLicenseResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AppLicense *GetAppLicenseResponseAppLicense `json:"AppLicense" xml:"AppLicense" require:"true" type:"Struct"`
}

func (s GetAppLicenseResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAppLicenseResponse) GoString() string {
  return s.String()
}

func (s *GetAppLicenseResponse) SetRequestId(v string) *GetAppLicenseResponse {
  s.RequestId = &v
  return s
}

func (s *GetAppLicenseResponse) SetAppLicense(v *GetAppLicenseResponseAppLicense) *GetAppLicenseResponse {
  s.AppLicense = v
  return s
}

type GetAppLicenseResponseAppLicense struct {
  LicenseId *int64 `json:"LicenseId" xml:"LicenseId" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ContractNo *string `json:"ContractNo" xml:"ContractNo" require:"true"`
  AppName *string `json:"AppName" xml:"AppName" require:"true"`
  BundleId *string `json:"BundleId" xml:"BundleId" require:"true"`
  PackageName *string `json:"PackageName" xml:"PackageName" require:"true"`
  LicenseSignature *string `json:"LicenseSignature" xml:"LicenseSignature" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Feature *string `json:"Feature" xml:"Feature" require:"true"`
  ExpiredOn *string `json:"ExpiredOn" xml:"ExpiredOn" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  SdkIds *string `json:"SdkIds" xml:"SdkIds" require:"true"`
  AccountId *int64 `json:"AccountId" xml:"AccountId" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
}

func (s GetAppLicenseResponseAppLicense) String() string {
  return tea.Prettify(s)
}

func (s GetAppLicenseResponseAppLicense) GoString() string {
  return s.String()
}

func (s *GetAppLicenseResponseAppLicense) SetLicenseId(v int64) *GetAppLicenseResponseAppLicense {
  s.LicenseId = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetCreationTime(v string) *GetAppLicenseResponseAppLicense {
  s.CreationTime = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetContractNo(v string) *GetAppLicenseResponseAppLicense {
  s.ContractNo = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetAppName(v string) *GetAppLicenseResponseAppLicense {
  s.AppName = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetBundleId(v string) *GetAppLicenseResponseAppLicense {
  s.BundleId = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetPackageName(v string) *GetAppLicenseResponseAppLicense {
  s.PackageName = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetLicenseSignature(v string) *GetAppLicenseResponseAppLicense {
  s.LicenseSignature = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetType(v string) *GetAppLicenseResponseAppLicense {
  s.Type = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetFeature(v string) *GetAppLicenseResponseAppLicense {
  s.Feature = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetExpiredOn(v string) *GetAppLicenseResponseAppLicense {
  s.ExpiredOn = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetStatus(v string) *GetAppLicenseResponseAppLicense {
  s.Status = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetSdkIds(v string) *GetAppLicenseResponseAppLicense {
  s.SdkIds = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetAccountId(v int64) *GetAppLicenseResponseAppLicense {
  s.AccountId = &v
  return s
}

func (s *GetAppLicenseResponseAppLicense) SetCustomerId(v int64) *GetAppLicenseResponseAppLicense {
  s.CustomerId = &v
  return s
}

type UpdateAppLicenseRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  LicenseId *int64 `json:"LicenseId" xml:"LicenseId" require:"true"`
  ContractNo *string `json:"ContractNo" xml:"ContractNo"`
  AppName *string `json:"AppName" xml:"AppName"`
  BundleId *string `json:"BundleId" xml:"BundleId"`
  PackageName *string `json:"PackageName" xml:"PackageName"`
  LicenseSignature *string `json:"LicenseSignature" xml:"LicenseSignature"`
  Type *string `json:"Type" xml:"Type"`
  Feature *string `json:"Feature" xml:"Feature"`
  Status *string `json:"Status" xml:"Status"`
  ExpiredOn *string `json:"ExpiredOn" xml:"ExpiredOn"`
  SdkIds *string `json:"SdkIds" xml:"SdkIds"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId"`
  AccountId *int64 `json:"AccountId" xml:"AccountId"`
}

func (s UpdateAppLicenseRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateAppLicenseRequest) GoString() string {
  return s.String()
}

func (s *UpdateAppLicenseRequest) SetAccessKeyId(v string) *UpdateAppLicenseRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetOwnerId(v string) *UpdateAppLicenseRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetLicenseId(v int64) *UpdateAppLicenseRequest {
  s.LicenseId = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetContractNo(v string) *UpdateAppLicenseRequest {
  s.ContractNo = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetAppName(v string) *UpdateAppLicenseRequest {
  s.AppName = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetBundleId(v string) *UpdateAppLicenseRequest {
  s.BundleId = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetPackageName(v string) *UpdateAppLicenseRequest {
  s.PackageName = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetLicenseSignature(v string) *UpdateAppLicenseRequest {
  s.LicenseSignature = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetType(v string) *UpdateAppLicenseRequest {
  s.Type = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetFeature(v string) *UpdateAppLicenseRequest {
  s.Feature = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetStatus(v string) *UpdateAppLicenseRequest {
  s.Status = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetExpiredOn(v string) *UpdateAppLicenseRequest {
  s.ExpiredOn = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetSdkIds(v string) *UpdateAppLicenseRequest {
  s.SdkIds = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetCustomerId(v int64) *UpdateAppLicenseRequest {
  s.CustomerId = &v
  return s
}

func (s *UpdateAppLicenseRequest) SetAccountId(v int64) *UpdateAppLicenseRequest {
  s.AccountId = &v
  return s
}

type UpdateAppLicenseResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateAppLicenseResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateAppLicenseResponse) GoString() string {
  return s.String()
}

func (s *UpdateAppLicenseResponse) SetRequestId(v string) *UpdateAppLicenseResponse {
  s.RequestId = &v
  return s
}

type AddAppLicenseRequest struct {
  AppName *string `json:"AppName" xml:"AppName"`
  ContractNo *string `json:"ContractNo" xml:"ContractNo"`
  BundleId *string `json:"BundleId" xml:"BundleId"`
  PackageName *string `json:"PackageName" xml:"PackageName"`
  LicenseSignature *string `json:"LicenseSignature" xml:"LicenseSignature"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Feature *string `json:"Feature" xml:"Feature"`
  ExpiredOn *string `json:"ExpiredOn" xml:"ExpiredOn" require:"true"`
  SdkIds *string `json:"SdkIds" xml:"SdkIds"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId"`
  AccountId *int64 `json:"AccountId" xml:"AccountId"`
  LicenseId *int64 `json:"LicenseId" xml:"LicenseId"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime"`
  Status *string `json:"Status" xml:"Status"`
}

func (s AddAppLicenseRequest) String() string {
  return tea.Prettify(s)
}

func (s AddAppLicenseRequest) GoString() string {
  return s.String()
}

func (s *AddAppLicenseRequest) SetAppName(v string) *AddAppLicenseRequest {
  s.AppName = &v
  return s
}

func (s *AddAppLicenseRequest) SetContractNo(v string) *AddAppLicenseRequest {
  s.ContractNo = &v
  return s
}

func (s *AddAppLicenseRequest) SetBundleId(v string) *AddAppLicenseRequest {
  s.BundleId = &v
  return s
}

func (s *AddAppLicenseRequest) SetPackageName(v string) *AddAppLicenseRequest {
  s.PackageName = &v
  return s
}

func (s *AddAppLicenseRequest) SetLicenseSignature(v string) *AddAppLicenseRequest {
  s.LicenseSignature = &v
  return s
}

func (s *AddAppLicenseRequest) SetType(v string) *AddAppLicenseRequest {
  s.Type = &v
  return s
}

func (s *AddAppLicenseRequest) SetFeature(v string) *AddAppLicenseRequest {
  s.Feature = &v
  return s
}

func (s *AddAppLicenseRequest) SetExpiredOn(v string) *AddAppLicenseRequest {
  s.ExpiredOn = &v
  return s
}

func (s *AddAppLicenseRequest) SetSdkIds(v string) *AddAppLicenseRequest {
  s.SdkIds = &v
  return s
}

func (s *AddAppLicenseRequest) SetCustomerId(v int64) *AddAppLicenseRequest {
  s.CustomerId = &v
  return s
}

func (s *AddAppLicenseRequest) SetAccountId(v int64) *AddAppLicenseRequest {
  s.AccountId = &v
  return s
}

func (s *AddAppLicenseRequest) SetLicenseId(v int64) *AddAppLicenseRequest {
  s.LicenseId = &v
  return s
}

func (s *AddAppLicenseRequest) SetCreateTime(v string) *AddAppLicenseRequest {
  s.CreateTime = &v
  return s
}

func (s *AddAppLicenseRequest) SetStatus(v string) *AddAppLicenseRequest {
  s.Status = &v
  return s
}

type AddAppLicenseResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  LicenseId *int64 `json:"LicenseId" xml:"LicenseId" require:"true"`
}

func (s AddAppLicenseResponse) String() string {
  return tea.Prettify(s)
}

func (s AddAppLicenseResponse) GoString() string {
  return s.String()
}

func (s *AddAppLicenseResponse) SetRequestId(v string) *AddAppLicenseResponse {
  s.RequestId = &v
  return s
}

func (s *AddAppLicenseResponse) SetLicenseId(v int64) *AddAppLicenseResponse {
  s.LicenseId = &v
  return s
}

type GetAppLicenseListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId"`
  AccountId *int64 `json:"AccountId" xml:"AccountId"`
  ContractNo *string `json:"ContractNo" xml:"ContractNo"`
  AppName *string `json:"AppName" xml:"AppName"`
  BundleId *string `json:"BundleId" xml:"BundleId"`
  PackageName *string `json:"PackageName" xml:"PackageName"`
  Type *string `json:"Type" xml:"Type"`
  SdkIds *string `json:"SdkIds" xml:"SdkIds"`
  Feature *string `json:"Feature" xml:"Feature"`
  Status *string `json:"Status" xml:"Status"`
  PageNo *int64 `json:"PageNo" xml:"PageNo"`
  PageSize *int64 `json:"PageSize" xml:"PageSize"`
  StartCreationTime *string `json:"StartCreationTime" xml:"StartCreationTime"`
  EndCreationTime *string `json:"EndCreationTime" xml:"EndCreationTime"`
  StartExpiredTime *string `json:"StartExpiredTime" xml:"StartExpiredTime"`
  EndExpiredTime *string `json:"EndExpiredTime" xml:"EndExpiredTime"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
}

func (s GetAppLicenseListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAppLicenseListRequest) GoString() string {
  return s.String()
}

func (s *GetAppLicenseListRequest) SetAccessKeyId(v string) *GetAppLicenseListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetAppLicenseListRequest) SetOwnerId(v string) *GetAppLicenseListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetAppLicenseListRequest) SetCustomerId(v int64) *GetAppLicenseListRequest {
  s.CustomerId = &v
  return s
}

func (s *GetAppLicenseListRequest) SetAccountId(v int64) *GetAppLicenseListRequest {
  s.AccountId = &v
  return s
}

func (s *GetAppLicenseListRequest) SetContractNo(v string) *GetAppLicenseListRequest {
  s.ContractNo = &v
  return s
}

func (s *GetAppLicenseListRequest) SetAppName(v string) *GetAppLicenseListRequest {
  s.AppName = &v
  return s
}

func (s *GetAppLicenseListRequest) SetBundleId(v string) *GetAppLicenseListRequest {
  s.BundleId = &v
  return s
}

func (s *GetAppLicenseListRequest) SetPackageName(v string) *GetAppLicenseListRequest {
  s.PackageName = &v
  return s
}

func (s *GetAppLicenseListRequest) SetType(v string) *GetAppLicenseListRequest {
  s.Type = &v
  return s
}

func (s *GetAppLicenseListRequest) SetSdkIds(v string) *GetAppLicenseListRequest {
  s.SdkIds = &v
  return s
}

func (s *GetAppLicenseListRequest) SetFeature(v string) *GetAppLicenseListRequest {
  s.Feature = &v
  return s
}

func (s *GetAppLicenseListRequest) SetStatus(v string) *GetAppLicenseListRequest {
  s.Status = &v
  return s
}

func (s *GetAppLicenseListRequest) SetPageNo(v int64) *GetAppLicenseListRequest {
  s.PageNo = &v
  return s
}

func (s *GetAppLicenseListRequest) SetPageSize(v int64) *GetAppLicenseListRequest {
  s.PageSize = &v
  return s
}

func (s *GetAppLicenseListRequest) SetStartCreationTime(v string) *GetAppLicenseListRequest {
  s.StartCreationTime = &v
  return s
}

func (s *GetAppLicenseListRequest) SetEndCreationTime(v string) *GetAppLicenseListRequest {
  s.EndCreationTime = &v
  return s
}

func (s *GetAppLicenseListRequest) SetStartExpiredTime(v string) *GetAppLicenseListRequest {
  s.StartExpiredTime = &v
  return s
}

func (s *GetAppLicenseListRequest) SetEndExpiredTime(v string) *GetAppLicenseListRequest {
  s.EndExpiredTime = &v
  return s
}

func (s *GetAppLicenseListRequest) SetSortBy(v string) *GetAppLicenseListRequest {
  s.SortBy = &v
  return s
}

type GetAppLicenseListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Total *int64 `json:"Total" xml:"Total" require:"true"`
  AppLicenseList *GetAppLicenseListResponseAppLicenseList `json:"AppLicenseList" xml:"AppLicenseList" require:"true" type:"Struct"`
}

func (s GetAppLicenseListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAppLicenseListResponse) GoString() string {
  return s.String()
}

func (s *GetAppLicenseListResponse) SetRequestId(v string) *GetAppLicenseListResponse {
  s.RequestId = &v
  return s
}

func (s *GetAppLicenseListResponse) SetTotal(v int64) *GetAppLicenseListResponse {
  s.Total = &v
  return s
}

func (s *GetAppLicenseListResponse) SetAppLicenseList(v *GetAppLicenseListResponseAppLicenseList) *GetAppLicenseListResponse {
  s.AppLicenseList = v
  return s
}

type GetAppLicenseListResponseAppLicenseList struct {
  AppLicense []*GetAppLicenseListResponseAppLicenseListAppLicense `json:"AppLicense" xml:"AppLicense" require:"true" type:"Repeated"`
}

func (s GetAppLicenseListResponseAppLicenseList) String() string {
  return tea.Prettify(s)
}

func (s GetAppLicenseListResponseAppLicenseList) GoString() string {
  return s.String()
}

func (s *GetAppLicenseListResponseAppLicenseList) SetAppLicense(v []*GetAppLicenseListResponseAppLicenseListAppLicense) *GetAppLicenseListResponseAppLicenseList {
  s.AppLicense = v
  return s
}

type GetAppLicenseListResponseAppLicenseListAppLicense struct     {
  LicenseId *int64 `json:"LicenseId" xml:"LicenseId" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ContractNo *string `json:"ContractNo" xml:"ContractNo" require:"true"`
  AppName *string `json:"AppName" xml:"AppName" require:"true"`
  BundleId *string `json:"BundleId" xml:"BundleId" require:"true"`
  PackageName *string `json:"PackageName" xml:"PackageName" require:"true"`
  LicenseSignature *string `json:"LicenseSignature" xml:"LicenseSignature" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Feature *string `json:"Feature" xml:"Feature" require:"true"`
  ExpiredOn *string `json:"ExpiredOn" xml:"ExpiredOn" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  SdkIds *string `json:"SdkIds" xml:"SdkIds" require:"true"`
  AccountId *int64 `json:"AccountId" xml:"AccountId" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
}

func (s GetAppLicenseListResponseAppLicenseListAppLicense) String() string {
  return tea.Prettify(s)
}

func (s GetAppLicenseListResponseAppLicenseListAppLicense) GoString() string {
  return s.String()
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetLicenseId(v int64) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.LicenseId = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetCreationTime(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.CreationTime = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetContractNo(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.ContractNo = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetAppName(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.AppName = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetBundleId(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.BundleId = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetPackageName(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.PackageName = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetLicenseSignature(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.LicenseSignature = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetType(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.Type = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetFeature(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.Feature = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetExpiredOn(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.ExpiredOn = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetStatus(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.Status = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetSdkIds(v string) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.SdkIds = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetAccountId(v int64) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.AccountId = &v
  return s
}

func (s *GetAppLicenseListResponseAppLicenseListAppLicense) SetCustomerId(v int64) *GetAppLicenseListResponseAppLicenseListAppLicense {
  s.CustomerId = &v
  return s
}

type SPIPhysicalDeleteResourceActionRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  Pk *string `json:"Pk" xml:"Pk" require:"true"`
  Bid *string `json:"Bid" xml:"Bid" require:"true"`
  Hid *int64 `json:"Hid" xml:"Hid" require:"true"`
  Country *string `json:"Country" xml:"Country" require:"true"`
  TaskIdentifier *string `json:"TaskIdentifier" xml:"TaskIdentifier" require:"true"`
  TaskExtraData *string `json:"TaskExtraData" xml:"TaskExtraData" require:"true"`
  GmtWakeup *string `json:"GmtWakeup" xml:"GmtWakeup" require:"true"`
  Success *bool `json:"Success" xml:"Success"`
  Message *string `json:"Message" xml:"Message"`
  Level *int64 `json:"Level" xml:"Level"`
  Url *string `json:"Url" xml:"Url"`
  Prompt *string `json:"Prompt" xml:"Prompt"`
}

func (s SPIPhysicalDeleteResourceActionRequest) String() string {
  return tea.Prettify(s)
}

func (s SPIPhysicalDeleteResourceActionRequest) GoString() string {
  return s.String()
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetAccessKeyId(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetOwnerId(v int64) *SPIPhysicalDeleteResourceActionRequest {
  s.OwnerId = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetSecurityToken(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.SecurityToken = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetPk(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.Pk = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetBid(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.Bid = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetHid(v int64) *SPIPhysicalDeleteResourceActionRequest {
  s.Hid = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetCountry(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.Country = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetTaskIdentifier(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.TaskIdentifier = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetTaskExtraData(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.TaskExtraData = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetGmtWakeup(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.GmtWakeup = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetSuccess(v bool) *SPIPhysicalDeleteResourceActionRequest {
  s.Success = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetMessage(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.Message = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetLevel(v int64) *SPIPhysicalDeleteResourceActionRequest {
  s.Level = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetUrl(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.Url = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionRequest) SetPrompt(v string) *SPIPhysicalDeleteResourceActionRequest {
  s.Prompt = &v
  return s
}

type SPIPhysicalDeleteResourceActionResponse struct {
  Interrupt *bool `json:"Interrupt" xml:"Interrupt" require:"true"`
  Invoker *string `json:"Invoker" xml:"Invoker" require:"true"`
  Pk *string `json:"Pk" xml:"Pk" require:"true"`
  Bid *string `json:"Bid" xml:"Bid" require:"true"`
  Hid *int64 `json:"Hid" xml:"Hid" require:"true"`
  Country *string `json:"Country" xml:"Country" require:"true"`
  TaskIdentifier *string `json:"TaskIdentifier" xml:"TaskIdentifier" require:"true"`
  TaskExtraData *string `json:"TaskExtraData" xml:"TaskExtraData" require:"true"`
  GmtWakeup *string `json:"GmtWakeup" xml:"GmtWakeup" require:"true"`
  Success *bool `json:"Success" xml:"Success" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  Level *int64 `json:"Level" xml:"Level" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
  Prompt *string `json:"Prompt" xml:"Prompt" require:"true"`
}

func (s SPIPhysicalDeleteResourceActionResponse) String() string {
  return tea.Prettify(s)
}

func (s SPIPhysicalDeleteResourceActionResponse) GoString() string {
  return s.String()
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetInterrupt(v bool) *SPIPhysicalDeleteResourceActionResponse {
  s.Interrupt = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetInvoker(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.Invoker = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetPk(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.Pk = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetBid(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.Bid = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetHid(v int64) *SPIPhysicalDeleteResourceActionResponse {
  s.Hid = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetCountry(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.Country = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetTaskIdentifier(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.TaskIdentifier = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetTaskExtraData(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.TaskExtraData = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetGmtWakeup(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.GmtWakeup = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetSuccess(v bool) *SPIPhysicalDeleteResourceActionResponse {
  s.Success = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetMessage(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.Message = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetLevel(v int64) *SPIPhysicalDeleteResourceActionResponse {
  s.Level = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetUrl(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.Url = &v
  return s
}

func (s *SPIPhysicalDeleteResourceActionResponse) SetPrompt(v string) *SPIPhysicalDeleteResourceActionResponse {
  s.Prompt = &v
  return s
}

type SPICheckResourceActionRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  Pk *string `json:"Pk" xml:"Pk" require:"true"`
  Bid *string `json:"Bid" xml:"Bid" require:"true"`
  Hid *int64 `json:"Hid" xml:"Hid" require:"true"`
  Country *string `json:"Country" xml:"Country" require:"true"`
  TaskIdentifier *string `json:"TaskIdentifier" xml:"TaskIdentifier" require:"true"`
  TaskExtraData *string `json:"TaskExtraData" xml:"TaskExtraData" require:"true"`
  GmtWakeup *string `json:"GmtWakeup" xml:"GmtWakeup" require:"true"`
  Success *bool `json:"Success" xml:"Success"`
  Message *string `json:"Message" xml:"Message"`
  Level *int64 `json:"Level" xml:"Level"`
  Url *string `json:"Url" xml:"Url"`
  Prompt *string `json:"Prompt" xml:"Prompt"`
}

func (s SPICheckResourceActionRequest) String() string {
  return tea.Prettify(s)
}

func (s SPICheckResourceActionRequest) GoString() string {
  return s.String()
}

func (s *SPICheckResourceActionRequest) SetAccessKeyId(v string) *SPICheckResourceActionRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetOwnerId(v int64) *SPICheckResourceActionRequest {
  s.OwnerId = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetSecurityToken(v string) *SPICheckResourceActionRequest {
  s.SecurityToken = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetPk(v string) *SPICheckResourceActionRequest {
  s.Pk = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetBid(v string) *SPICheckResourceActionRequest {
  s.Bid = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetHid(v int64) *SPICheckResourceActionRequest {
  s.Hid = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetCountry(v string) *SPICheckResourceActionRequest {
  s.Country = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetTaskIdentifier(v string) *SPICheckResourceActionRequest {
  s.TaskIdentifier = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetTaskExtraData(v string) *SPICheckResourceActionRequest {
  s.TaskExtraData = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetGmtWakeup(v string) *SPICheckResourceActionRequest {
  s.GmtWakeup = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetSuccess(v bool) *SPICheckResourceActionRequest {
  s.Success = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetMessage(v string) *SPICheckResourceActionRequest {
  s.Message = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetLevel(v int64) *SPICheckResourceActionRequest {
  s.Level = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetUrl(v string) *SPICheckResourceActionRequest {
  s.Url = &v
  return s
}

func (s *SPICheckResourceActionRequest) SetPrompt(v string) *SPICheckResourceActionRequest {
  s.Prompt = &v
  return s
}

type SPICheckResourceActionResponse struct {
  Interrupt *bool `json:"Interrupt" xml:"Interrupt" require:"true"`
  Invoker *string `json:"Invoker" xml:"Invoker" require:"true"`
  Pk *string `json:"Pk" xml:"Pk" require:"true"`
  Bid *string `json:"Bid" xml:"Bid" require:"true"`
  Hid *int64 `json:"Hid" xml:"Hid" require:"true"`
  Country *string `json:"Country" xml:"Country" require:"true"`
  TaskIdentifier *string `json:"TaskIdentifier" xml:"TaskIdentifier" require:"true"`
  TaskExtraData *string `json:"TaskExtraData" xml:"TaskExtraData" require:"true"`
  GmtWakeup *string `json:"GmtWakeup" xml:"GmtWakeup" require:"true"`
  Success *bool `json:"Success" xml:"Success" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  Level *int64 `json:"Level" xml:"Level" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
  Prompt *string `json:"Prompt" xml:"Prompt" require:"true"`
}

func (s SPICheckResourceActionResponse) String() string {
  return tea.Prettify(s)
}

func (s SPICheckResourceActionResponse) GoString() string {
  return s.String()
}

func (s *SPICheckResourceActionResponse) SetInterrupt(v bool) *SPICheckResourceActionResponse {
  s.Interrupt = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetInvoker(v string) *SPICheckResourceActionResponse {
  s.Invoker = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetPk(v string) *SPICheckResourceActionResponse {
  s.Pk = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetBid(v string) *SPICheckResourceActionResponse {
  s.Bid = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetHid(v int64) *SPICheckResourceActionResponse {
  s.Hid = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetCountry(v string) *SPICheckResourceActionResponse {
  s.Country = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetTaskIdentifier(v string) *SPICheckResourceActionResponse {
  s.TaskIdentifier = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetTaskExtraData(v string) *SPICheckResourceActionResponse {
  s.TaskExtraData = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetGmtWakeup(v string) *SPICheckResourceActionResponse {
  s.GmtWakeup = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetSuccess(v bool) *SPICheckResourceActionResponse {
  s.Success = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetMessage(v string) *SPICheckResourceActionResponse {
  s.Message = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetLevel(v int64) *SPICheckResourceActionResponse {
  s.Level = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetUrl(v string) *SPICheckResourceActionResponse {
  s.Url = &v
  return s
}

func (s *SPICheckResourceActionResponse) SetPrompt(v string) *SPICheckResourceActionResponse {
  s.Prompt = &v
  return s
}

type SPILogicalDeleteResourceActionRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  Pk *string `json:"Pk" xml:"Pk" require:"true"`
  Bid *string `json:"Bid" xml:"Bid" require:"true"`
  Hid *int64 `json:"Hid" xml:"Hid" require:"true"`
  Country *string `json:"Country" xml:"Country" require:"true"`
  TaskIdentifier *string `json:"TaskIdentifier" xml:"TaskIdentifier" require:"true"`
  TaskExtraData *string `json:"TaskExtraData" xml:"TaskExtraData" require:"true"`
  GmtWakeup *string `json:"GmtWakeup" xml:"GmtWakeup" require:"true"`
  Success *bool `json:"Success" xml:"Success"`
  Message *string `json:"Message" xml:"Message"`
  Level *int64 `json:"Level" xml:"Level"`
  Url *string `json:"Url" xml:"Url"`
  Prompt *string `json:"Prompt" xml:"Prompt"`
}

func (s SPILogicalDeleteResourceActionRequest) String() string {
  return tea.Prettify(s)
}

func (s SPILogicalDeleteResourceActionRequest) GoString() string {
  return s.String()
}

func (s *SPILogicalDeleteResourceActionRequest) SetAccessKeyId(v string) *SPILogicalDeleteResourceActionRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetOwnerId(v int64) *SPILogicalDeleteResourceActionRequest {
  s.OwnerId = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetSecurityToken(v string) *SPILogicalDeleteResourceActionRequest {
  s.SecurityToken = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetPk(v string) *SPILogicalDeleteResourceActionRequest {
  s.Pk = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetBid(v string) *SPILogicalDeleteResourceActionRequest {
  s.Bid = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetHid(v int64) *SPILogicalDeleteResourceActionRequest {
  s.Hid = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetCountry(v string) *SPILogicalDeleteResourceActionRequest {
  s.Country = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetTaskIdentifier(v string) *SPILogicalDeleteResourceActionRequest {
  s.TaskIdentifier = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetTaskExtraData(v string) *SPILogicalDeleteResourceActionRequest {
  s.TaskExtraData = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetGmtWakeup(v string) *SPILogicalDeleteResourceActionRequest {
  s.GmtWakeup = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetSuccess(v bool) *SPILogicalDeleteResourceActionRequest {
  s.Success = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetMessage(v string) *SPILogicalDeleteResourceActionRequest {
  s.Message = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetLevel(v int64) *SPILogicalDeleteResourceActionRequest {
  s.Level = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetUrl(v string) *SPILogicalDeleteResourceActionRequest {
  s.Url = &v
  return s
}

func (s *SPILogicalDeleteResourceActionRequest) SetPrompt(v string) *SPILogicalDeleteResourceActionRequest {
  s.Prompt = &v
  return s
}

type SPILogicalDeleteResourceActionResponse struct {
  Interrupt *bool `json:"Interrupt" xml:"Interrupt" require:"true"`
  Invoker *string `json:"Invoker" xml:"Invoker" require:"true"`
  Pk *string `json:"Pk" xml:"Pk" require:"true"`
  Bid *string `json:"Bid" xml:"Bid" require:"true"`
  Hid *int64 `json:"Hid" xml:"Hid" require:"true"`
  Country *string `json:"Country" xml:"Country" require:"true"`
  TaskIdentifier *string `json:"TaskIdentifier" xml:"TaskIdentifier" require:"true"`
  TaskExtraData *string `json:"TaskExtraData" xml:"TaskExtraData" require:"true"`
  GmtWakeup *string `json:"GmtWakeup" xml:"GmtWakeup" require:"true"`
  Success *bool `json:"Success" xml:"Success" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  Level *int64 `json:"Level" xml:"Level" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
  Prompt *string `json:"Prompt" xml:"Prompt" require:"true"`
}

func (s SPILogicalDeleteResourceActionResponse) String() string {
  return tea.Prettify(s)
}

func (s SPILogicalDeleteResourceActionResponse) GoString() string {
  return s.String()
}

func (s *SPILogicalDeleteResourceActionResponse) SetInterrupt(v bool) *SPILogicalDeleteResourceActionResponse {
  s.Interrupt = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetInvoker(v string) *SPILogicalDeleteResourceActionResponse {
  s.Invoker = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetPk(v string) *SPILogicalDeleteResourceActionResponse {
  s.Pk = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetBid(v string) *SPILogicalDeleteResourceActionResponse {
  s.Bid = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetHid(v int64) *SPILogicalDeleteResourceActionResponse {
  s.Hid = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetCountry(v string) *SPILogicalDeleteResourceActionResponse {
  s.Country = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetTaskIdentifier(v string) *SPILogicalDeleteResourceActionResponse {
  s.TaskIdentifier = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetTaskExtraData(v string) *SPILogicalDeleteResourceActionResponse {
  s.TaskExtraData = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetGmtWakeup(v string) *SPILogicalDeleteResourceActionResponse {
  s.GmtWakeup = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetSuccess(v bool) *SPILogicalDeleteResourceActionResponse {
  s.Success = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetMessage(v string) *SPILogicalDeleteResourceActionResponse {
  s.Message = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetLevel(v int64) *SPILogicalDeleteResourceActionResponse {
  s.Level = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetUrl(v string) *SPILogicalDeleteResourceActionResponse {
  s.Url = &v
  return s
}

func (s *SPILogicalDeleteResourceActionResponse) SetPrompt(v string) *SPILogicalDeleteResourceActionResponse {
  s.Prompt = &v
  return s
}

type SubmitPreprocessJobsRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  PreprocessType *string `json:"PreprocessType" xml:"PreprocessType" require:"true"`
}

func (s SubmitPreprocessJobsRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitPreprocessJobsRequest) GoString() string {
  return s.String()
}

func (s *SubmitPreprocessJobsRequest) SetAccessKeyId(v string) *SubmitPreprocessJobsRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitPreprocessJobsRequest) SetOwnerId(v int64) *SubmitPreprocessJobsRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitPreprocessJobsRequest) SetResourceOwnerAccount(v string) *SubmitPreprocessJobsRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitPreprocessJobsRequest) SetResourceOwnerId(v int64) *SubmitPreprocessJobsRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitPreprocessJobsRequest) SetVideoId(v string) *SubmitPreprocessJobsRequest {
  s.VideoId = &v
  return s
}

func (s *SubmitPreprocessJobsRequest) SetPreprocessType(v string) *SubmitPreprocessJobsRequest {
  s.PreprocessType = &v
  return s
}

type SubmitPreprocessJobsResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TranscodeJobs *SubmitPreprocessJobsResponseTranscodeJobs `json:"TranscodeJobs" xml:"TranscodeJobs" require:"true" type:"Struct"`
}

func (s SubmitPreprocessJobsResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitPreprocessJobsResponse) GoString() string {
  return s.String()
}

func (s *SubmitPreprocessJobsResponse) SetRequestId(v string) *SubmitPreprocessJobsResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitPreprocessJobsResponse) SetTranscodeJobs(v *SubmitPreprocessJobsResponseTranscodeJobs) *SubmitPreprocessJobsResponse {
  s.TranscodeJobs = v
  return s
}

type SubmitPreprocessJobsResponseTranscodeJobs struct {
  TranscodeJob []*SubmitPreprocessJobsResponseTranscodeJobsTranscodeJob `json:"TranscodeJob" xml:"TranscodeJob" require:"true" type:"Repeated"`
}

func (s SubmitPreprocessJobsResponseTranscodeJobs) String() string {
  return tea.Prettify(s)
}

func (s SubmitPreprocessJobsResponseTranscodeJobs) GoString() string {
  return s.String()
}

func (s *SubmitPreprocessJobsResponseTranscodeJobs) SetTranscodeJob(v []*SubmitPreprocessJobsResponseTranscodeJobsTranscodeJob) *SubmitPreprocessJobsResponseTranscodeJobs {
  s.TranscodeJob = v
  return s
}

type SubmitPreprocessJobsResponseTranscodeJobsTranscodeJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s SubmitPreprocessJobsResponseTranscodeJobsTranscodeJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitPreprocessJobsResponseTranscodeJobsTranscodeJob) GoString() string {
  return s.String()
}

func (s *SubmitPreprocessJobsResponseTranscodeJobsTranscodeJob) SetJobId(v string) *SubmitPreprocessJobsResponseTranscodeJobsTranscodeJob {
  s.JobId = &v
  return s
}

type QueryOrderParamRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Data *string `json:"data" xml:"data" require:"true"`
}

func (s QueryOrderParamRequest) String() string {
  return tea.Prettify(s)
}

func (s QueryOrderParamRequest) GoString() string {
  return s.String()
}

func (s *QueryOrderParamRequest) SetAccessKeyId(v string) *QueryOrderParamRequest {
  s.AccessKeyId = &v
  return s
}

func (s *QueryOrderParamRequest) SetOwnerId(v string) *QueryOrderParamRequest {
  s.OwnerId = &v
  return s
}

func (s *QueryOrderParamRequest) SetResourceOwnerId(v string) *QueryOrderParamRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *QueryOrderParamRequest) SetResourceOwnerAccount(v string) *QueryOrderParamRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *QueryOrderParamRequest) SetOwnerAccount(v string) *QueryOrderParamRequest {
  s.OwnerAccount = &v
  return s
}

func (s *QueryOrderParamRequest) SetData(v string) *QueryOrderParamRequest {
  s.Data = &v
  return s
}

type QueryOrderParamResponse struct {
  RequestId *string `json:"requestId" xml:"requestId" require:"true"`
  Success *bool `json:"success" xml:"success" require:"true"`
  Code *string `json:"code" xml:"code" require:"true"`
  Message *string `json:"message" xml:"message" require:"true"`
  Data *string `json:"data" xml:"data" require:"true"`
}

func (s QueryOrderParamResponse) String() string {
  return tea.Prettify(s)
}

func (s QueryOrderParamResponse) GoString() string {
  return s.String()
}

func (s *QueryOrderParamResponse) SetRequestId(v string) *QueryOrderParamResponse {
  s.RequestId = &v
  return s
}

func (s *QueryOrderParamResponse) SetSuccess(v bool) *QueryOrderParamResponse {
  s.Success = &v
  return s
}

func (s *QueryOrderParamResponse) SetCode(v string) *QueryOrderParamResponse {
  s.Code = &v
  return s
}

func (s *QueryOrderParamResponse) SetMessage(v string) *QueryOrderParamResponse {
  s.Message = &v
  return s
}

func (s *QueryOrderParamResponse) SetData(v string) *QueryOrderParamResponse {
  s.Data = &v
  return s
}

type AssumeExperienceRoleRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Data *string `json:"Data" xml:"Data" require:"true"`
  Cookie *string `json:"Cookie" xml:"Cookie"`
}

func (s AssumeExperienceRoleRequest) String() string {
  return tea.Prettify(s)
}

func (s AssumeExperienceRoleRequest) GoString() string {
  return s.String()
}

func (s *AssumeExperienceRoleRequest) SetOwnerId(v int64) *AssumeExperienceRoleRequest {
  s.OwnerId = &v
  return s
}

func (s *AssumeExperienceRoleRequest) SetResourceOwnerAccount(v string) *AssumeExperienceRoleRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AssumeExperienceRoleRequest) SetResourceOwnerId(v int64) *AssumeExperienceRoleRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AssumeExperienceRoleRequest) SetData(v string) *AssumeExperienceRoleRequest {
  s.Data = &v
  return s
}

func (s *AssumeExperienceRoleRequest) SetCookie(v string) *AssumeExperienceRoleRequest {
  s.Cookie = &v
  return s
}

type AssumeExperienceRoleResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *string `json:"Result" xml:"Result" require:"true"`
}

func (s AssumeExperienceRoleResponse) String() string {
  return tea.Prettify(s)
}

func (s AssumeExperienceRoleResponse) GoString() string {
  return s.String()
}

func (s *AssumeExperienceRoleResponse) SetRequestId(v string) *AssumeExperienceRoleResponse {
  s.RequestId = &v
  return s
}

func (s *AssumeExperienceRoleResponse) SetResult(v string) *AssumeExperienceRoleResponse {
  s.Result = &v
  return s
}

type ListSnapshotsRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  SnapshotType *string `json:"SnapshotType" xml:"SnapshotType"`
  AuthTimeout *string `json:"AuthTimeout" xml:"AuthTimeout"`
  PageSize *string `json:"PageSize" xml:"PageSize"`
  PageNo *string `json:"PageNo" xml:"PageNo"`
}

func (s ListSnapshotsRequest) String() string {
  return tea.Prettify(s)
}

func (s ListSnapshotsRequest) GoString() string {
  return s.String()
}

func (s *ListSnapshotsRequest) SetAccessKeyId(v string) *ListSnapshotsRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListSnapshotsRequest) SetOwnerId(v int64) *ListSnapshotsRequest {
  s.OwnerId = &v
  return s
}

func (s *ListSnapshotsRequest) SetResourceOwnerAccount(v string) *ListSnapshotsRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListSnapshotsRequest) SetResourceOwnerId(v int64) *ListSnapshotsRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListSnapshotsRequest) SetVideoId(v string) *ListSnapshotsRequest {
  s.VideoId = &v
  return s
}

func (s *ListSnapshotsRequest) SetSnapshotType(v string) *ListSnapshotsRequest {
  s.SnapshotType = &v
  return s
}

func (s *ListSnapshotsRequest) SetAuthTimeout(v string) *ListSnapshotsRequest {
  s.AuthTimeout = &v
  return s
}

func (s *ListSnapshotsRequest) SetPageSize(v string) *ListSnapshotsRequest {
  s.PageSize = &v
  return s
}

func (s *ListSnapshotsRequest) SetPageNo(v string) *ListSnapshotsRequest {
  s.PageNo = &v
  return s
}

type ListSnapshotsResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaSnapshot *ListSnapshotsResponseMediaSnapshot `json:"MediaSnapshot" xml:"MediaSnapshot" require:"true" type:"Struct"`
}

func (s ListSnapshotsResponse) String() string {
  return tea.Prettify(s)
}

func (s ListSnapshotsResponse) GoString() string {
  return s.String()
}

func (s *ListSnapshotsResponse) SetRequestId(v string) *ListSnapshotsResponse {
  s.RequestId = &v
  return s
}

func (s *ListSnapshotsResponse) SetMediaSnapshot(v *ListSnapshotsResponseMediaSnapshot) *ListSnapshotsResponse {
  s.MediaSnapshot = v
  return s
}

type ListSnapshotsResponseMediaSnapshot struct {
  Total *int64 `json:"Total" xml:"Total" require:"true"`
  Regular *string `json:"Regular" xml:"Regular" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  Snapshots *ListSnapshotsResponseMediaSnapshotSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
}

func (s ListSnapshotsResponseMediaSnapshot) String() string {
  return tea.Prettify(s)
}

func (s ListSnapshotsResponseMediaSnapshot) GoString() string {
  return s.String()
}

func (s *ListSnapshotsResponseMediaSnapshot) SetTotal(v int64) *ListSnapshotsResponseMediaSnapshot {
  s.Total = &v
  return s
}

func (s *ListSnapshotsResponseMediaSnapshot) SetRegular(v string) *ListSnapshotsResponseMediaSnapshot {
  s.Regular = &v
  return s
}

func (s *ListSnapshotsResponseMediaSnapshot) SetCreationTime(v string) *ListSnapshotsResponseMediaSnapshot {
  s.CreationTime = &v
  return s
}

func (s *ListSnapshotsResponseMediaSnapshot) SetJobId(v string) *ListSnapshotsResponseMediaSnapshot {
  s.JobId = &v
  return s
}

func (s *ListSnapshotsResponseMediaSnapshot) SetSnapshots(v *ListSnapshotsResponseMediaSnapshotSnapshots) *ListSnapshotsResponseMediaSnapshot {
  s.Snapshots = v
  return s
}

type ListSnapshotsResponseMediaSnapshotSnapshots struct {
  Snapshot []*ListSnapshotsResponseMediaSnapshotSnapshotsSnapshot `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s ListSnapshotsResponseMediaSnapshotSnapshots) String() string {
  return tea.Prettify(s)
}

func (s ListSnapshotsResponseMediaSnapshotSnapshots) GoString() string {
  return s.String()
}

func (s *ListSnapshotsResponseMediaSnapshotSnapshots) SetSnapshot(v []*ListSnapshotsResponseMediaSnapshotSnapshotsSnapshot) *ListSnapshotsResponseMediaSnapshotSnapshots {
  s.Snapshot = v
  return s
}

type ListSnapshotsResponseMediaSnapshotSnapshotsSnapshot struct     {
  Index *int64 `json:"Index" xml:"Index" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
}

func (s ListSnapshotsResponseMediaSnapshotSnapshotsSnapshot) String() string {
  return tea.Prettify(s)
}

func (s ListSnapshotsResponseMediaSnapshotSnapshotsSnapshot) GoString() string {
  return s.String()
}

func (s *ListSnapshotsResponseMediaSnapshotSnapshotsSnapshot) SetIndex(v int64) *ListSnapshotsResponseMediaSnapshotSnapshotsSnapshot {
  s.Index = &v
  return s
}

func (s *ListSnapshotsResponseMediaSnapshotSnapshotsSnapshot) SetUrl(v string) *ListSnapshotsResponseMediaSnapshotSnapshotsSnapshot {
  s.Url = &v
  return s
}

type SetDefaultPlayDomainRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
}

func (s SetDefaultPlayDomainRequest) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultPlayDomainRequest) GoString() string {
  return s.String()
}

func (s *SetDefaultPlayDomainRequest) SetAccessKeyId(v string) *SetDefaultPlayDomainRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetDefaultPlayDomainRequest) SetOwnerId(v string) *SetDefaultPlayDomainRequest {
  s.OwnerId = &v
  return s
}

func (s *SetDefaultPlayDomainRequest) SetResourceOwnerId(v string) *SetDefaultPlayDomainRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetDefaultPlayDomainRequest) SetResourceOwnerAccount(v string) *SetDefaultPlayDomainRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetDefaultPlayDomainRequest) SetOwnerAccount(v string) *SetDefaultPlayDomainRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SetDefaultPlayDomainRequest) SetResourceRealOwnerId(v int64) *SetDefaultPlayDomainRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *SetDefaultPlayDomainRequest) SetDomainName(v string) *SetDefaultPlayDomainRequest {
  s.DomainName = &v
  return s
}

type SetDefaultPlayDomainResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SetDefaultPlayDomainResponse) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultPlayDomainResponse) GoString() string {
  return s.String()
}

func (s *SetDefaultPlayDomainResponse) SetRequestId(v string) *SetDefaultPlayDomainResponse {
  s.RequestId = &v
  return s
}

type EditVideoIndexFileRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  EditType *string `json:"EditType" xml:"EditType" require:"true"`
  EditConfig *string `json:"EditConfig" xml:"EditConfig" require:"true"`
}

func (s EditVideoIndexFileRequest) String() string {
  return tea.Prettify(s)
}

func (s EditVideoIndexFileRequest) GoString() string {
  return s.String()
}

func (s *EditVideoIndexFileRequest) SetOwnerId(v int64) *EditVideoIndexFileRequest {
  s.OwnerId = &v
  return s
}

func (s *EditVideoIndexFileRequest) SetResourceOwnerAccount(v string) *EditVideoIndexFileRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *EditVideoIndexFileRequest) SetResourceOwnerId(v int64) *EditVideoIndexFileRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *EditVideoIndexFileRequest) SetVideoId(v string) *EditVideoIndexFileRequest {
  s.VideoId = &v
  return s
}

func (s *EditVideoIndexFileRequest) SetEditType(v string) *EditVideoIndexFileRequest {
  s.EditType = &v
  return s
}

func (s *EditVideoIndexFileRequest) SetEditConfig(v string) *EditVideoIndexFileRequest {
  s.EditConfig = &v
  return s
}

type EditVideoIndexFileResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s EditVideoIndexFileResponse) String() string {
  return tea.Prettify(s)
}

func (s EditVideoIndexFileResponse) GoString() string {
  return s.String()
}

func (s *EditVideoIndexFileResponse) SetRequestId(v string) *EditVideoIndexFileResponse {
  s.RequestId = &v
  return s
}

type SetCDNDomainServerCertificateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ProductCode *string `json:"ProductCode" xml:"ProductCode" require:"true"`
  APIProxyName *string `json:"APIProxyName" xml:"APIProxyName" require:"true"`
  APIProxyParam *string `json:"APIProxyParam" xml:"APIProxyParam" require:"true"`
}

func (s SetCDNDomainServerCertificateRequest) String() string {
  return tea.Prettify(s)
}

func (s SetCDNDomainServerCertificateRequest) GoString() string {
  return s.String()
}

func (s *SetCDNDomainServerCertificateRequest) SetAccessKeyId(v string) *SetCDNDomainServerCertificateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetCDNDomainServerCertificateRequest) SetOwnerId(v string) *SetCDNDomainServerCertificateRequest {
  s.OwnerId = &v
  return s
}

func (s *SetCDNDomainServerCertificateRequest) SetResourceOwnerId(v string) *SetCDNDomainServerCertificateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetCDNDomainServerCertificateRequest) SetResourceOwnerAccount(v string) *SetCDNDomainServerCertificateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetCDNDomainServerCertificateRequest) SetOwnerAccount(v string) *SetCDNDomainServerCertificateRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SetCDNDomainServerCertificateRequest) SetProductCode(v string) *SetCDNDomainServerCertificateRequest {
  s.ProductCode = &v
  return s
}

func (s *SetCDNDomainServerCertificateRequest) SetAPIProxyName(v string) *SetCDNDomainServerCertificateRequest {
  s.APIProxyName = &v
  return s
}

func (s *SetCDNDomainServerCertificateRequest) SetAPIProxyParam(v string) *SetCDNDomainServerCertificateRequest {
  s.APIProxyParam = &v
  return s
}

type SetCDNDomainServerCertificateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Response *string `json:"Response" xml:"Response" require:"true"`
}

func (s SetCDNDomainServerCertificateResponse) String() string {
  return tea.Prettify(s)
}

func (s SetCDNDomainServerCertificateResponse) GoString() string {
  return s.String()
}

func (s *SetCDNDomainServerCertificateResponse) SetRequestId(v string) *SetCDNDomainServerCertificateResponse {
  s.RequestId = &v
  return s
}

func (s *SetCDNDomainServerCertificateResponse) SetResponse(v string) *SetCDNDomainServerCertificateResponse {
  s.Response = &v
  return s
}

type SetCDNForceRedirectConfigRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ProductCode *string `json:"ProductCode" xml:"ProductCode" require:"true"`
  APIProxyName *string `json:"APIProxyName" xml:"APIProxyName" require:"true"`
  APIProxyParam *string `json:"APIProxyParam" xml:"APIProxyParam" require:"true"`
}

func (s SetCDNForceRedirectConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s SetCDNForceRedirectConfigRequest) GoString() string {
  return s.String()
}

func (s *SetCDNForceRedirectConfigRequest) SetAccessKeyId(v string) *SetCDNForceRedirectConfigRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetCDNForceRedirectConfigRequest) SetOwnerId(v string) *SetCDNForceRedirectConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *SetCDNForceRedirectConfigRequest) SetResourceOwnerId(v string) *SetCDNForceRedirectConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetCDNForceRedirectConfigRequest) SetResourceOwnerAccount(v string) *SetCDNForceRedirectConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetCDNForceRedirectConfigRequest) SetOwnerAccount(v string) *SetCDNForceRedirectConfigRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SetCDNForceRedirectConfigRequest) SetProductCode(v string) *SetCDNForceRedirectConfigRequest {
  s.ProductCode = &v
  return s
}

func (s *SetCDNForceRedirectConfigRequest) SetAPIProxyName(v string) *SetCDNForceRedirectConfigRequest {
  s.APIProxyName = &v
  return s
}

func (s *SetCDNForceRedirectConfigRequest) SetAPIProxyParam(v string) *SetCDNForceRedirectConfigRequest {
  s.APIProxyParam = &v
  return s
}

type SetCDNForceRedirectConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Response *string `json:"Response" xml:"Response" require:"true"`
}

func (s SetCDNForceRedirectConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s SetCDNForceRedirectConfigResponse) GoString() string {
  return s.String()
}

func (s *SetCDNForceRedirectConfigResponse) SetRequestId(v string) *SetCDNForceRedirectConfigResponse {
  s.RequestId = &v
  return s
}

func (s *SetCDNForceRedirectConfigResponse) SetResponse(v string) *SetCDNForceRedirectConfigResponse {
  s.Response = &v
  return s
}

type SubmitTranscodeJobsRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  TemplateGroupId *string `json:"TemplateGroupId" xml:"TemplateGroupId" require:"true"`
  PipelineId *string `json:"PipelineId" xml:"PipelineId"`
  EncryptConfig *string `json:"EncryptConfig" xml:"EncryptConfig"`
  OverrideParams *string `json:"OverrideParams" xml:"OverrideParams"`
}

func (s SubmitTranscodeJobsRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitTranscodeJobsRequest) GoString() string {
  return s.String()
}

func (s *SubmitTranscodeJobsRequest) SetAccessKeyId(v string) *SubmitTranscodeJobsRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitTranscodeJobsRequest) SetOwnerId(v int64) *SubmitTranscodeJobsRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitTranscodeJobsRequest) SetResourceOwnerAccount(v string) *SubmitTranscodeJobsRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitTranscodeJobsRequest) SetResourceOwnerId(v int64) *SubmitTranscodeJobsRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitTranscodeJobsRequest) SetVideoId(v string) *SubmitTranscodeJobsRequest {
  s.VideoId = &v
  return s
}

func (s *SubmitTranscodeJobsRequest) SetTemplateGroupId(v string) *SubmitTranscodeJobsRequest {
  s.TemplateGroupId = &v
  return s
}

func (s *SubmitTranscodeJobsRequest) SetPipelineId(v string) *SubmitTranscodeJobsRequest {
  s.PipelineId = &v
  return s
}

func (s *SubmitTranscodeJobsRequest) SetEncryptConfig(v string) *SubmitTranscodeJobsRequest {
  s.EncryptConfig = &v
  return s
}

func (s *SubmitTranscodeJobsRequest) SetOverrideParams(v string) *SubmitTranscodeJobsRequest {
  s.OverrideParams = &v
  return s
}

type SubmitTranscodeJobsResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TranscodeJobs *SubmitTranscodeJobsResponseTranscodeJobs `json:"TranscodeJobs" xml:"TranscodeJobs" require:"true" type:"Struct"`
}

func (s SubmitTranscodeJobsResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitTranscodeJobsResponse) GoString() string {
  return s.String()
}

func (s *SubmitTranscodeJobsResponse) SetRequestId(v string) *SubmitTranscodeJobsResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitTranscodeJobsResponse) SetTranscodeJobs(v *SubmitTranscodeJobsResponseTranscodeJobs) *SubmitTranscodeJobsResponse {
  s.TranscodeJobs = v
  return s
}

type SubmitTranscodeJobsResponseTranscodeJobs struct {
  TranscodeJob []*SubmitTranscodeJobsResponseTranscodeJobsTranscodeJob `json:"TranscodeJob" xml:"TranscodeJob" require:"true" type:"Repeated"`
}

func (s SubmitTranscodeJobsResponseTranscodeJobs) String() string {
  return tea.Prettify(s)
}

func (s SubmitTranscodeJobsResponseTranscodeJobs) GoString() string {
  return s.String()
}

func (s *SubmitTranscodeJobsResponseTranscodeJobs) SetTranscodeJob(v []*SubmitTranscodeJobsResponseTranscodeJobsTranscodeJob) *SubmitTranscodeJobsResponseTranscodeJobs {
  s.TranscodeJob = v
  return s
}

type SubmitTranscodeJobsResponseTranscodeJobsTranscodeJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s SubmitTranscodeJobsResponseTranscodeJobsTranscodeJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitTranscodeJobsResponseTranscodeJobsTranscodeJob) GoString() string {
  return s.String()
}

func (s *SubmitTranscodeJobsResponseTranscodeJobsTranscodeJob) SetJobId(v string) *SubmitTranscodeJobsResponseTranscodeJobsTranscodeJob {
  s.JobId = &v
  return s
}

type GetAuditResultRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s GetAuditResultRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAuditResultRequest) GoString() string {
  return s.String()
}

func (s *GetAuditResultRequest) SetAccessKeyId(v string) *GetAuditResultRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetAuditResultRequest) SetOwnerId(v string) *GetAuditResultRequest {
  s.OwnerId = &v
  return s
}

func (s *GetAuditResultRequest) SetResourceOwnerId(v string) *GetAuditResultRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetAuditResultRequest) SetResourceOwnerAccount(v string) *GetAuditResultRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetAuditResultRequest) SetOwnerAccount(v string) *GetAuditResultRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetAuditResultRequest) SetVideoId(v string) *GetAuditResultRequest {
  s.VideoId = &v
  return s
}

type GetAuditResultResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIAuditResult *GetAuditResultResponseAIAuditResult `json:"AIAuditResult" xml:"AIAuditResult" require:"true" type:"Struct"`
}

func (s GetAuditResultResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAuditResultResponse) GoString() string {
  return s.String()
}

func (s *GetAuditResultResponse) SetRequestId(v string) *GetAuditResultResponse {
  s.RequestId = &v
  return s
}

func (s *GetAuditResultResponse) SetAIAuditResult(v *GetAuditResultResponseAIAuditResult) *GetAuditResultResponse {
  s.AIAuditResult = v
  return s
}

type GetAuditResultResponseAIAuditResult struct {
  AbnormalModules *string `json:"AbnormalModules" xml:"AbnormalModules" require:"true"`
  Label *string `json:"Label" xml:"Label" require:"true"`
  PornResult *string `json:"PornResult" xml:"PornResult" require:"true"`
  TerrorismResult *string `json:"TerrorismResult" xml:"TerrorismResult" require:"true"`
  TitleResult *string `json:"TitleResult" xml:"TitleResult" require:"true"`
  CoverResult *string `json:"CoverResult" xml:"CoverResult" require:"true"`
}

func (s GetAuditResultResponseAIAuditResult) String() string {
  return tea.Prettify(s)
}

func (s GetAuditResultResponseAIAuditResult) GoString() string {
  return s.String()
}

func (s *GetAuditResultResponseAIAuditResult) SetAbnormalModules(v string) *GetAuditResultResponseAIAuditResult {
  s.AbnormalModules = &v
  return s
}

func (s *GetAuditResultResponseAIAuditResult) SetLabel(v string) *GetAuditResultResponseAIAuditResult {
  s.Label = &v
  return s
}

func (s *GetAuditResultResponseAIAuditResult) SetPornResult(v string) *GetAuditResultResponseAIAuditResult {
  s.PornResult = &v
  return s
}

func (s *GetAuditResultResponseAIAuditResult) SetTerrorismResult(v string) *GetAuditResultResponseAIAuditResult {
  s.TerrorismResult = &v
  return s
}

func (s *GetAuditResultResponseAIAuditResult) SetTitleResult(v string) *GetAuditResultResponseAIAuditResult {
  s.TitleResult = &v
  return s
}

func (s *GetAuditResultResponseAIAuditResult) SetCoverResult(v string) *GetAuditResultResponseAIAuditResult {
  s.CoverResult = &v
  return s
}

type CreateAuditRequest struct {
  AuditContent *string `json:"AuditContent" xml:"AuditContent" require:"true"`
}

func (s CreateAuditRequest) String() string {
  return tea.Prettify(s)
}

func (s CreateAuditRequest) GoString() string {
  return s.String()
}

func (s *CreateAuditRequest) SetAuditContent(v string) *CreateAuditRequest {
  s.AuditContent = &v
  return s
}

type CreateAuditResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s CreateAuditResponse) String() string {
  return tea.Prettify(s)
}

func (s CreateAuditResponse) GoString() string {
  return s.String()
}

func (s *CreateAuditResponse) SetRequestId(v string) *CreateAuditResponse {
  s.RequestId = &v
  return s
}

type GetAuditHistoryRequest struct {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  PageNo *int64 `json:"PageNo" xml:"PageNo"`
  PageSize *int64 `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
}

func (s GetAuditHistoryRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAuditHistoryRequest) GoString() string {
  return s.String()
}

func (s *GetAuditHistoryRequest) SetVideoId(v string) *GetAuditHistoryRequest {
  s.VideoId = &v
  return s
}

func (s *GetAuditHistoryRequest) SetPageNo(v int64) *GetAuditHistoryRequest {
  s.PageNo = &v
  return s
}

func (s *GetAuditHistoryRequest) SetPageSize(v int64) *GetAuditHistoryRequest {
  s.PageSize = &v
  return s
}

func (s *GetAuditHistoryRequest) SetSortBy(v string) *GetAuditHistoryRequest {
  s.SortBy = &v
  return s
}

type GetAuditHistoryResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Total *int64 `json:"Total" xml:"Total" require:"true"`
  Histories []*GetAuditHistoryResponseHistories `json:"Histories" xml:"Histories" require:"true" type:"Repeated"`
}

func (s GetAuditHistoryResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAuditHistoryResponse) GoString() string {
  return s.String()
}

func (s *GetAuditHistoryResponse) SetRequestId(v string) *GetAuditHistoryResponse {
  s.RequestId = &v
  return s
}

func (s *GetAuditHistoryResponse) SetStatus(v string) *GetAuditHistoryResponse {
  s.Status = &v
  return s
}

func (s *GetAuditHistoryResponse) SetTotal(v int64) *GetAuditHistoryResponse {
  s.Total = &v
  return s
}

func (s *GetAuditHistoryResponse) SetHistories(v []*GetAuditHistoryResponseHistories) *GetAuditHistoryResponse {
  s.Histories = v
  return s
}

type GetAuditHistoryResponseHistories struct     {
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Reason *string `json:"Reason" xml:"Reason" require:"true"`
  Comment *string `json:"Comment" xml:"Comment" require:"true"`
  Auditor *string `json:"Auditor" xml:"Auditor" require:"true"`
}

func (s GetAuditHistoryResponseHistories) String() string {
  return tea.Prettify(s)
}

func (s GetAuditHistoryResponseHistories) GoString() string {
  return s.String()
}

func (s *GetAuditHistoryResponseHistories) SetCreationTime(v string) *GetAuditHistoryResponseHistories {
  s.CreationTime = &v
  return s
}

func (s *GetAuditHistoryResponseHistories) SetStatus(v string) *GetAuditHistoryResponseHistories {
  s.Status = &v
  return s
}

func (s *GetAuditHistoryResponseHistories) SetReason(v string) *GetAuditHistoryResponseHistories {
  s.Reason = &v
  return s
}

func (s *GetAuditHistoryResponseHistories) SetComment(v string) *GetAuditHistoryResponseHistories {
  s.Comment = &v
  return s
}

func (s *GetAuditHistoryResponseHistories) SetAuditor(v string) *GetAuditHistoryResponseHistories {
  s.Auditor = &v
  return s
}

type FinishLiveStreamRecordRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  StreamName *string `json:"StreamName" xml:"StreamName" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  AppName *string `json:"AppName" xml:"AppName" require:"true"`
  AutoCompose *string `json:"AutoCompose" xml:"AutoCompose"`
  TranscodeGroupId *string `json:"TranscodeGroupId" xml:"TranscodeGroupId"`
}

func (s FinishLiveStreamRecordRequest) String() string {
  return tea.Prettify(s)
}

func (s FinishLiveStreamRecordRequest) GoString() string {
  return s.String()
}

func (s *FinishLiveStreamRecordRequest) SetOwnerId(v int64) *FinishLiveStreamRecordRequest {
  s.OwnerId = &v
  return s
}

func (s *FinishLiveStreamRecordRequest) SetResourceOwnerAccount(v string) *FinishLiveStreamRecordRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *FinishLiveStreamRecordRequest) SetResourceOwnerId(v int64) *FinishLiveStreamRecordRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *FinishLiveStreamRecordRequest) SetCustomerId(v int64) *FinishLiveStreamRecordRequest {
  s.CustomerId = &v
  return s
}

func (s *FinishLiveStreamRecordRequest) SetStreamName(v string) *FinishLiveStreamRecordRequest {
  s.StreamName = &v
  return s
}

func (s *FinishLiveStreamRecordRequest) SetDomainName(v string) *FinishLiveStreamRecordRequest {
  s.DomainName = &v
  return s
}

func (s *FinishLiveStreamRecordRequest) SetAppName(v string) *FinishLiveStreamRecordRequest {
  s.AppName = &v
  return s
}

func (s *FinishLiveStreamRecordRequest) SetAutoCompose(v string) *FinishLiveStreamRecordRequest {
  s.AutoCompose = &v
  return s
}

func (s *FinishLiveStreamRecordRequest) SetTranscodeGroupId(v string) *FinishLiveStreamRecordRequest {
  s.TranscodeGroupId = &v
  return s
}

type FinishLiveStreamRecordResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s FinishLiveStreamRecordResponse) String() string {
  return tea.Prettify(s)
}

func (s FinishLiveStreamRecordResponse) GoString() string {
  return s.String()
}

func (s *FinishLiveStreamRecordResponse) SetRequestId(v string) *FinishLiveStreamRecordResponse {
  s.RequestId = &v
  return s
}

type ListLiveRecordVideoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  StreamName *string `json:"StreamName" xml:"StreamName"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  AppName *string `json:"AppName" xml:"AppName"`
  QueryType *string `json:"QueryType" xml:"QueryType"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s ListLiveRecordVideoRequest) String() string {
  return tea.Prettify(s)
}

func (s ListLiveRecordVideoRequest) GoString() string {
  return s.String()
}

func (s *ListLiveRecordVideoRequest) SetOwnerId(v int64) *ListLiveRecordVideoRequest {
  s.OwnerId = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetResourceOwnerAccount(v string) *ListLiveRecordVideoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetResourceOwnerId(v int64) *ListLiveRecordVideoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetStreamName(v string) *ListLiveRecordVideoRequest {
  s.StreamName = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetDomainName(v string) *ListLiveRecordVideoRequest {
  s.DomainName = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetAppName(v string) *ListLiveRecordVideoRequest {
  s.AppName = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetQueryType(v string) *ListLiveRecordVideoRequest {
  s.QueryType = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetPageNo(v int) *ListLiveRecordVideoRequest {
  s.PageNo = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetPageSize(v int) *ListLiveRecordVideoRequest {
  s.PageSize = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetSortBy(v string) *ListLiveRecordVideoRequest {
  s.SortBy = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetStartTime(v string) *ListLiveRecordVideoRequest {
  s.StartTime = &v
  return s
}

func (s *ListLiveRecordVideoRequest) SetEndTime(v string) *ListLiveRecordVideoRequest {
  s.EndTime = &v
  return s
}

type ListLiveRecordVideoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Total *int `json:"Total" xml:"Total" require:"true"`
  LiveRecordVideoList *ListLiveRecordVideoResponseLiveRecordVideoList `json:"LiveRecordVideoList" xml:"LiveRecordVideoList" require:"true" type:"Struct"`
}

func (s ListLiveRecordVideoResponse) String() string {
  return tea.Prettify(s)
}

func (s ListLiveRecordVideoResponse) GoString() string {
  return s.String()
}

func (s *ListLiveRecordVideoResponse) SetRequestId(v string) *ListLiveRecordVideoResponse {
  s.RequestId = &v
  return s
}

func (s *ListLiveRecordVideoResponse) SetTotal(v int) *ListLiveRecordVideoResponse {
  s.Total = &v
  return s
}

func (s *ListLiveRecordVideoResponse) SetLiveRecordVideoList(v *ListLiveRecordVideoResponseLiveRecordVideoList) *ListLiveRecordVideoResponse {
  s.LiveRecordVideoList = v
  return s
}

type ListLiveRecordVideoResponseLiveRecordVideoList struct {
  LiveRecordVideo []*ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo `json:"LiveRecordVideo" xml:"LiveRecordVideo" require:"true" type:"Repeated"`
}

func (s ListLiveRecordVideoResponseLiveRecordVideoList) String() string {
  return tea.Prettify(s)
}

func (s ListLiveRecordVideoResponseLiveRecordVideoList) GoString() string {
  return s.String()
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoList) SetLiveRecordVideo(v []*ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) *ListLiveRecordVideoResponseLiveRecordVideoList {
  s.LiveRecordVideo = v
  return s
}

type ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo struct     {
  StreamName *string `json:"StreamName" xml:"StreamName" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  AppName *string `json:"AppName" xml:"AppName" require:"true"`
  PlaylistId *string `json:"PlaylistId" xml:"PlaylistId" require:"true"`
  RecordStartTime *string `json:"RecordStartTime" xml:"RecordStartTime" require:"true"`
  RecordEndTime *string `json:"RecordEndTime" xml:"RecordEndTime" require:"true"`
  PlayInfoList *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoList `json:"PlayInfoList" xml:"PlayInfoList" require:"true" type:"Struct"`
  Video *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo `json:"Video" xml:"Video" require:"true" type:"Struct"`
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) String() string {
  return tea.Prettify(s)
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) GoString() string {
  return s.String()
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) SetStreamName(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo {
  s.StreamName = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) SetDomainName(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo {
  s.DomainName = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) SetAppName(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo {
  s.AppName = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) SetPlaylistId(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo {
  s.PlaylistId = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) SetRecordStartTime(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo {
  s.RecordStartTime = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) SetRecordEndTime(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo {
  s.RecordEndTime = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) SetPlayInfoList(v *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoList) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo {
  s.PlayInfoList = v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo) SetVideo(v *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideo {
  s.Video = v
  return s
}

type ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoList struct {
  PlayInfo []*ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo `json:"PlayInfo" xml:"PlayInfo" require:"true" type:"Repeated"`
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoList) String() string {
  return tea.Prettify(s)
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoList) GoString() string {
  return s.String()
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoList) SetPlayInfo(v []*ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoList {
  s.PlayInfo = v
  return s
}

type ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo struct     {
  Width *int64 `json:"Width" xml:"Width" require:"true"`
  Height *int64 `json:"Height" xml:"Height" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  PlayURL *string `json:"PlayURL" xml:"PlayURL" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Encrypt *int64 `json:"Encrypt" xml:"Encrypt" require:"true"`
  Plaintext *string `json:"Plaintext" xml:"Plaintext" require:"true"`
  Complexity *string `json:"Complexity" xml:"Complexity" require:"true"`
  StreamType *string `json:"StreamType" xml:"StreamType" require:"true"`
  Rand *string `json:"Rand" xml:"Rand" require:"true"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) String() string {
  return tea.Prettify(s)
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) GoString() string {
  return s.String()
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetWidth(v int64) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Width = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetHeight(v int64) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Height = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetSize(v int64) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Size = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetPlayURL(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.PlayURL = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetBitrate(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Bitrate = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetDefinition(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Definition = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetDuration(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Duration = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetFormat(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Format = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetFps(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Fps = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetEncrypt(v int64) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Encrypt = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetPlaintext(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Plaintext = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetComplexity(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Complexity = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetStreamType(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.StreamType = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetRand(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.Rand = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo) SetJobId(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoPlayInfoListPlayInfo {
  s.JobId = &v
  return s
}

type ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo struct {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Privilege *int `json:"Privilege" xml:"Privilege" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch" require:"true"`
  TemplateGroupId *string `json:"TemplateGroupId" xml:"TemplateGroupId" require:"true"`
  Snapshots *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideoSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) String() string {
  return tea.Prettify(s)
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) GoString() string {
  return s.String()
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetVideoId(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.VideoId = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetTitle(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.Title = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetTags(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.Tags = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetStatus(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.Status = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetSize(v int64) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.Size = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetPrivilege(v int) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.Privilege = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetDuration(v float32) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.Duration = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetDescription(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.Description = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetCustomerId(v int64) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.CustomerId = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetCreateTime(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.CreateTime = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetModifyTime(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.ModifyTime = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetCoverURL(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.CoverURL = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetCateId(v int) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.CateId = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetCateName(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.CateName = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetDownloadSwitch(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.DownloadSwitch = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetTemplateGroupId(v string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.TemplateGroupId = &v
  return s
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo) SetSnapshots(v *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideoSnapshots) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideo {
  s.Snapshots = v
  return s
}

type ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideoSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideoSnapshots) String() string {
  return tea.Prettify(s)
}

func (s ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideoSnapshots) GoString() string {
  return s.String()
}

func (s *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideoSnapshots) SetSnapshot(v []*string) *ListLiveRecordVideoResponseLiveRecordVideoListLiveRecordVideoVideoSnapshots {
  s.Snapshot = v
  return s
}

type AddLiveStreamVideoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  StreamName *string `json:"StreamName" xml:"StreamName" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  AppName *string `json:"AppName" xml:"AppName" require:"true"`
  TranscodeGroupId *string `json:"TranscodeGroupId" xml:"TranscodeGroupId"`
  ResourceInfo *string `json:"ResourceInfo" xml:"ResourceInfo"`
  FileUrl *string `json:"FileUrl" xml:"FileUrl" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  Title *string `json:"Title" xml:"Title"`
  Tags *string `json:"Tags" xml:"Tags"`
}

func (s AddLiveStreamVideoRequest) String() string {
  return tea.Prettify(s)
}

func (s AddLiveStreamVideoRequest) GoString() string {
  return s.String()
}

func (s *AddLiveStreamVideoRequest) SetOwnerId(v int64) *AddLiveStreamVideoRequest {
  s.OwnerId = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetResourceOwnerAccount(v string) *AddLiveStreamVideoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetResourceOwnerId(v int64) *AddLiveStreamVideoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetCustomerId(v int64) *AddLiveStreamVideoRequest {
  s.CustomerId = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetStreamName(v string) *AddLiveStreamVideoRequest {
  s.StreamName = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetDomainName(v string) *AddLiveStreamVideoRequest {
  s.DomainName = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetAppName(v string) *AddLiveStreamVideoRequest {
  s.AppName = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetTranscodeGroupId(v string) *AddLiveStreamVideoRequest {
  s.TranscodeGroupId = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetResourceInfo(v string) *AddLiveStreamVideoRequest {
  s.ResourceInfo = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetFileUrl(v string) *AddLiveStreamVideoRequest {
  s.FileUrl = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetStartTime(v string) *AddLiveStreamVideoRequest {
  s.StartTime = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetEndTime(v string) *AddLiveStreamVideoRequest {
  s.EndTime = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetTitle(v string) *AddLiveStreamVideoRequest {
  s.Title = &v
  return s
}

func (s *AddLiveStreamVideoRequest) SetTags(v string) *AddLiveStreamVideoRequest {
  s.Tags = &v
  return s
}

type AddLiveStreamVideoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  PlaylistId *string `json:"PlaylistId" xml:"PlaylistId" require:"true"`
}

func (s AddLiveStreamVideoResponse) String() string {
  return tea.Prettify(s)
}

func (s AddLiveStreamVideoResponse) GoString() string {
  return s.String()
}

func (s *AddLiveStreamVideoResponse) SetRequestId(v string) *AddLiveStreamVideoResponse {
  s.RequestId = &v
  return s
}

func (s *AddLiveStreamVideoResponse) SetMediaId(v string) *AddLiveStreamVideoResponse {
  s.MediaId = &v
  return s
}

func (s *AddLiveStreamVideoResponse) SetPlaylistId(v string) *AddLiveStreamVideoResponse {
  s.PlaylistId = &v
  return s
}

type SetTemplateGroupPropertyRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
  PropertyName *string `json:"PropertyName" xml:"PropertyName" require:"true"`
  PropertyValue *string `json:"PropertyValue" xml:"PropertyValue" require:"true"`
}

func (s SetTemplateGroupPropertyRequest) String() string {
  return tea.Prettify(s)
}

func (s SetTemplateGroupPropertyRequest) GoString() string {
  return s.String()
}

func (s *SetTemplateGroupPropertyRequest) SetAccessKeyId(v string) *SetTemplateGroupPropertyRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetTemplateGroupPropertyRequest) SetOwnerId(v int64) *SetTemplateGroupPropertyRequest {
  s.OwnerId = &v
  return s
}

func (s *SetTemplateGroupPropertyRequest) SetResourceOwnerAccount(v string) *SetTemplateGroupPropertyRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetTemplateGroupPropertyRequest) SetResourceOwnerId(v int64) *SetTemplateGroupPropertyRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetTemplateGroupPropertyRequest) SetGroupId(v string) *SetTemplateGroupPropertyRequest {
  s.GroupId = &v
  return s
}

func (s *SetTemplateGroupPropertyRequest) SetPropertyName(v string) *SetTemplateGroupPropertyRequest {
  s.PropertyName = &v
  return s
}

func (s *SetTemplateGroupPropertyRequest) SetPropertyValue(v string) *SetTemplateGroupPropertyRequest {
  s.PropertyValue = &v
  return s
}

type SetTemplateGroupPropertyResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s SetTemplateGroupPropertyResponse) String() string {
  return tea.Prettify(s)
}

func (s SetTemplateGroupPropertyResponse) GoString() string {
  return s.String()
}

func (s *SetTemplateGroupPropertyResponse) SetRequestId(v string) *SetTemplateGroupPropertyResponse {
  s.RequestId = &v
  return s
}

func (s *SetTemplateGroupPropertyResponse) SetResult(v bool) *SetTemplateGroupPropertyResponse {
  s.Result = &v
  return s
}

type QueryUploadInfoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  TranscodeGroupId *string `json:"TranscodeGroupId" xml:"TranscodeGroupId" require:"true"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation"`
  LiveRegionId *string `json:"LiveRegionId" xml:"LiveRegionId"`
  ComposeTranscodeGroupId *string `json:"ComposeTranscodeGroupId" xml:"ComposeTranscodeGroupId"`
}

func (s QueryUploadInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s QueryUploadInfoRequest) GoString() string {
  return s.String()
}

func (s *QueryUploadInfoRequest) SetOwnerId(v int64) *QueryUploadInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *QueryUploadInfoRequest) SetResourceOwnerAccount(v string) *QueryUploadInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *QueryUploadInfoRequest) SetResourceOwnerId(v int64) *QueryUploadInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *QueryUploadInfoRequest) SetCustomerId(v int64) *QueryUploadInfoRequest {
  s.CustomerId = &v
  return s
}

func (s *QueryUploadInfoRequest) SetTranscodeGroupId(v string) *QueryUploadInfoRequest {
  s.TranscodeGroupId = &v
  return s
}

func (s *QueryUploadInfoRequest) SetStorageLocation(v string) *QueryUploadInfoRequest {
  s.StorageLocation = &v
  return s
}

func (s *QueryUploadInfoRequest) SetLiveRegionId(v string) *QueryUploadInfoRequest {
  s.LiveRegionId = &v
  return s
}

func (s *QueryUploadInfoRequest) SetComposeTranscodeGroupId(v string) *QueryUploadInfoRequest {
  s.ComposeTranscodeGroupId = &v
  return s
}

type QueryUploadInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Bucket *string `json:"Bucket" xml:"Bucket" require:"true"`
  Endpoint *string `json:"Endpoint" xml:"Endpoint" require:"true"`
  FileDir *string `json:"FileDir" xml:"FileDir" require:"true"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId" require:"true"`
}

func (s QueryUploadInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s QueryUploadInfoResponse) GoString() string {
  return s.String()
}

func (s *QueryUploadInfoResponse) SetRequestId(v string) *QueryUploadInfoResponse {
  s.RequestId = &v
  return s
}

func (s *QueryUploadInfoResponse) SetBucket(v string) *QueryUploadInfoResponse {
  s.Bucket = &v
  return s
}

func (s *QueryUploadInfoResponse) SetEndpoint(v string) *QueryUploadInfoResponse {
  s.Endpoint = &v
  return s
}

func (s *QueryUploadInfoResponse) SetFileDir(v string) *QueryUploadInfoResponse {
  s.FileDir = &v
  return s
}

func (s *QueryUploadInfoResponse) SetResourceOwnerId(v int64) *QueryUploadInfoResponse {
  s.ResourceOwnerId = &v
  return s
}

type FaceRegistrationRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  PersonName *string `json:"PersonName" xml:"PersonName" require:"true"`
  PersonId *string `json:"PersonId" xml:"PersonId"`
  PersonLibrary *string `json:"PersonLibrary" xml:"PersonLibrary"`
  Category *string `json:"Category" xml:"Category"`
  ImageIds *string `json:"ImageIds" xml:"ImageIds"`
}

func (s FaceRegistrationRequest) String() string {
  return tea.Prettify(s)
}

func (s FaceRegistrationRequest) GoString() string {
  return s.String()
}

func (s *FaceRegistrationRequest) SetAccessKeyId(v string) *FaceRegistrationRequest {
  s.AccessKeyId = &v
  return s
}

func (s *FaceRegistrationRequest) SetOwnerId(v string) *FaceRegistrationRequest {
  s.OwnerId = &v
  return s
}

func (s *FaceRegistrationRequest) SetResourceOwnerId(v string) *FaceRegistrationRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *FaceRegistrationRequest) SetResourceOwnerAccount(v string) *FaceRegistrationRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *FaceRegistrationRequest) SetOwnerAccount(v string) *FaceRegistrationRequest {
  s.OwnerAccount = &v
  return s
}

func (s *FaceRegistrationRequest) SetPersonName(v string) *FaceRegistrationRequest {
  s.PersonName = &v
  return s
}

func (s *FaceRegistrationRequest) SetPersonId(v string) *FaceRegistrationRequest {
  s.PersonId = &v
  return s
}

func (s *FaceRegistrationRequest) SetPersonLibrary(v string) *FaceRegistrationRequest {
  s.PersonLibrary = &v
  return s
}

func (s *FaceRegistrationRequest) SetCategory(v string) *FaceRegistrationRequest {
  s.Category = &v
  return s
}

func (s *FaceRegistrationRequest) SetImageIds(v string) *FaceRegistrationRequest {
  s.ImageIds = &v
  return s
}

type FaceRegistrationResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  RegisteredPerson *FaceRegistrationResponseRegisteredPerson `json:"RegisteredPerson" xml:"RegisteredPerson" require:"true" type:"Struct"`
  NonExistImageIds *FaceRegistrationResponseNonExistImageIds `json:"NonExistImageIds" xml:"NonExistImageIds" require:"true" type:"Struct"`
}

func (s FaceRegistrationResponse) String() string {
  return tea.Prettify(s)
}

func (s FaceRegistrationResponse) GoString() string {
  return s.String()
}

func (s *FaceRegistrationResponse) SetRequestId(v string) *FaceRegistrationResponse {
  s.RequestId = &v
  return s
}

func (s *FaceRegistrationResponse) SetRegisteredPerson(v *FaceRegistrationResponseRegisteredPerson) *FaceRegistrationResponse {
  s.RegisteredPerson = v
  return s
}

func (s *FaceRegistrationResponse) SetNonExistImageIds(v *FaceRegistrationResponseNonExistImageIds) *FaceRegistrationResponse {
  s.NonExistImageIds = v
  return s
}

type FaceRegistrationResponseRegisteredPerson struct {
  PersonId *string `json:"PersonId" xml:"PersonId" require:"true"`
  PersonName *string `json:"PersonName" xml:"PersonName" require:"true"`
  Faces *FaceRegistrationResponseRegisteredPersonFaces `json:"Faces" xml:"Faces" require:"true" type:"Struct"`
}

func (s FaceRegistrationResponseRegisteredPerson) String() string {
  return tea.Prettify(s)
}

func (s FaceRegistrationResponseRegisteredPerson) GoString() string {
  return s.String()
}

func (s *FaceRegistrationResponseRegisteredPerson) SetPersonId(v string) *FaceRegistrationResponseRegisteredPerson {
  s.PersonId = &v
  return s
}

func (s *FaceRegistrationResponseRegisteredPerson) SetPersonName(v string) *FaceRegistrationResponseRegisteredPerson {
  s.PersonName = &v
  return s
}

func (s *FaceRegistrationResponseRegisteredPerson) SetFaces(v *FaceRegistrationResponseRegisteredPersonFaces) *FaceRegistrationResponseRegisteredPerson {
  s.Faces = v
  return s
}

type FaceRegistrationResponseRegisteredPersonFaces struct {
  Face []*FaceRegistrationResponseRegisteredPersonFacesFace `json:"Face" xml:"Face" require:"true" type:"Repeated"`
}

func (s FaceRegistrationResponseRegisteredPersonFaces) String() string {
  return tea.Prettify(s)
}

func (s FaceRegistrationResponseRegisteredPersonFaces) GoString() string {
  return s.String()
}

func (s *FaceRegistrationResponseRegisteredPersonFaces) SetFace(v []*FaceRegistrationResponseRegisteredPersonFacesFace) *FaceRegistrationResponseRegisteredPersonFaces {
  s.Face = v
  return s
}

type FaceRegistrationResponseRegisteredPersonFacesFace struct     {
  ImageId *string `json:"ImageId" xml:"ImageId" require:"true"`
  Quality *string `json:"Quality" xml:"Quality" require:"true"`
  Target *string `json:"Target" xml:"Target" require:"true"`
}

func (s FaceRegistrationResponseRegisteredPersonFacesFace) String() string {
  return tea.Prettify(s)
}

func (s FaceRegistrationResponseRegisteredPersonFacesFace) GoString() string {
  return s.String()
}

func (s *FaceRegistrationResponseRegisteredPersonFacesFace) SetImageId(v string) *FaceRegistrationResponseRegisteredPersonFacesFace {
  s.ImageId = &v
  return s
}

func (s *FaceRegistrationResponseRegisteredPersonFacesFace) SetQuality(v string) *FaceRegistrationResponseRegisteredPersonFacesFace {
  s.Quality = &v
  return s
}

func (s *FaceRegistrationResponseRegisteredPersonFacesFace) SetTarget(v string) *FaceRegistrationResponseRegisteredPersonFacesFace {
  s.Target = &v
  return s
}

type FaceRegistrationResponseNonExistImageIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s FaceRegistrationResponseNonExistImageIds) String() string {
  return tea.Prettify(s)
}

func (s FaceRegistrationResponseNonExistImageIds) GoString() string {
  return s.String()
}

func (s *FaceRegistrationResponseNonExistImageIds) SetString(v []*string) *FaceRegistrationResponseNonExistImageIds {
  s.String = v
  return s
}

type ListAIJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  JobIds *string `json:"JobIds" xml:"JobIds" require:"true"`
}

func (s ListAIJobRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAIJobRequest) GoString() string {
  return s.String()
}

func (s *ListAIJobRequest) SetAccessKeyId(v string) *ListAIJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAIJobRequest) SetOwnerId(v string) *ListAIJobRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAIJobRequest) SetResourceOwnerId(v string) *ListAIJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAIJobRequest) SetResourceOwnerAccount(v string) *ListAIJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAIJobRequest) SetOwnerAccount(v string) *ListAIJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *ListAIJobRequest) SetJobIds(v string) *ListAIJobRequest {
  s.JobIds = &v
  return s
}

type ListAIJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIJobList *ListAIJobResponseAIJobList `json:"AIJobList" xml:"AIJobList" require:"true" type:"Struct"`
  NonExistAIJobIds *ListAIJobResponseNonExistAIJobIds `json:"NonExistAIJobIds" xml:"NonExistAIJobIds" require:"true" type:"Struct"`
}

func (s ListAIJobResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAIJobResponse) GoString() string {
  return s.String()
}

func (s *ListAIJobResponse) SetRequestId(v string) *ListAIJobResponse {
  s.RequestId = &v
  return s
}

func (s *ListAIJobResponse) SetAIJobList(v *ListAIJobResponseAIJobList) *ListAIJobResponse {
  s.AIJobList = v
  return s
}

func (s *ListAIJobResponse) SetNonExistAIJobIds(v *ListAIJobResponseNonExistAIJobIds) *ListAIJobResponse {
  s.NonExistAIJobIds = v
  return s
}

type ListAIJobResponseAIJobList struct {
  AIJob []*ListAIJobResponseAIJobListAIJob `json:"AIJob" xml:"AIJob" require:"true" type:"Repeated"`
}

func (s ListAIJobResponseAIJobList) String() string {
  return tea.Prettify(s)
}

func (s ListAIJobResponseAIJobList) GoString() string {
  return s.String()
}

func (s *ListAIJobResponseAIJobList) SetAIJob(v []*ListAIJobResponseAIJobListAIJob) *ListAIJobResponseAIJobList {
  s.AIJob = v
  return s
}

type ListAIJobResponseAIJobListAIJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  CompleteTime *string `json:"CompleteTime" xml:"CompleteTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s ListAIJobResponseAIJobListAIJob) String() string {
  return tea.Prettify(s)
}

func (s ListAIJobResponseAIJobListAIJob) GoString() string {
  return s.String()
}

func (s *ListAIJobResponseAIJobListAIJob) SetJobId(v string) *ListAIJobResponseAIJobListAIJob {
  s.JobId = &v
  return s
}

func (s *ListAIJobResponseAIJobListAIJob) SetMediaId(v string) *ListAIJobResponseAIJobListAIJob {
  s.MediaId = &v
  return s
}

func (s *ListAIJobResponseAIJobListAIJob) SetType(v string) *ListAIJobResponseAIJobListAIJob {
  s.Type = &v
  return s
}

func (s *ListAIJobResponseAIJobListAIJob) SetStatus(v string) *ListAIJobResponseAIJobListAIJob {
  s.Status = &v
  return s
}

func (s *ListAIJobResponseAIJobListAIJob) SetCode(v string) *ListAIJobResponseAIJobListAIJob {
  s.Code = &v
  return s
}

func (s *ListAIJobResponseAIJobListAIJob) SetMessage(v string) *ListAIJobResponseAIJobListAIJob {
  s.Message = &v
  return s
}

func (s *ListAIJobResponseAIJobListAIJob) SetCreationTime(v string) *ListAIJobResponseAIJobListAIJob {
  s.CreationTime = &v
  return s
}

func (s *ListAIJobResponseAIJobListAIJob) SetCompleteTime(v string) *ListAIJobResponseAIJobListAIJob {
  s.CompleteTime = &v
  return s
}

func (s *ListAIJobResponseAIJobListAIJob) SetData(v string) *ListAIJobResponseAIJobListAIJob {
  s.Data = &v
  return s
}

type ListAIJobResponseNonExistAIJobIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s ListAIJobResponseNonExistAIJobIds) String() string {
  return tea.Prettify(s)
}

func (s ListAIJobResponseNonExistAIJobIds) GoString() string {
  return s.String()
}

func (s *ListAIJobResponseNonExistAIJobIds) SetString(v []*string) *ListAIJobResponseNonExistAIJobIds {
  s.String = v
  return s
}

type SubmitAIJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Types *string `json:"Types" xml:"Types"`
  Config *string `json:"Config" xml:"Config"`
  UserData *string `json:"UserData" xml:"UserData"`
  MediaType *string `json:"MediaType" xml:"MediaType"`
}

func (s SubmitAIJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitAIJobRequest) SetAccessKeyId(v string) *SubmitAIJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitAIJobRequest) SetOwnerId(v string) *SubmitAIJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitAIJobRequest) SetResourceOwnerId(v string) *SubmitAIJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitAIJobRequest) SetResourceOwnerAccount(v string) *SubmitAIJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitAIJobRequest) SetOwnerAccount(v string) *SubmitAIJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SubmitAIJobRequest) SetMediaId(v string) *SubmitAIJobRequest {
  s.MediaId = &v
  return s
}

func (s *SubmitAIJobRequest) SetTypes(v string) *SubmitAIJobRequest {
  s.Types = &v
  return s
}

func (s *SubmitAIJobRequest) SetConfig(v string) *SubmitAIJobRequest {
  s.Config = &v
  return s
}

func (s *SubmitAIJobRequest) SetUserData(v string) *SubmitAIJobRequest {
  s.UserData = &v
  return s
}

func (s *SubmitAIJobRequest) SetMediaType(v string) *SubmitAIJobRequest {
  s.MediaType = &v
  return s
}

type SubmitAIJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIJobList *SubmitAIJobResponseAIJobList `json:"AIJobList" xml:"AIJobList" require:"true" type:"Struct"`
}

func (s SubmitAIJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitAIJobResponse) SetRequestId(v string) *SubmitAIJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitAIJobResponse) SetAIJobList(v *SubmitAIJobResponseAIJobList) *SubmitAIJobResponse {
  s.AIJobList = v
  return s
}

type SubmitAIJobResponseAIJobList struct {
  AIJob []*SubmitAIJobResponseAIJobListAIJob `json:"AIJob" xml:"AIJob" require:"true" type:"Repeated"`
}

func (s SubmitAIJobResponseAIJobList) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIJobResponseAIJobList) GoString() string {
  return s.String()
}

func (s *SubmitAIJobResponseAIJobList) SetAIJob(v []*SubmitAIJobResponseAIJobListAIJob) *SubmitAIJobResponseAIJobList {
  s.AIJob = v
  return s
}

type SubmitAIJobResponseAIJobListAIJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s SubmitAIJobResponseAIJobListAIJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIJobResponseAIJobListAIJob) GoString() string {
  return s.String()
}

func (s *SubmitAIJobResponseAIJobListAIJob) SetJobId(v string) *SubmitAIJobResponseAIJobListAIJob {
  s.JobId = &v
  return s
}

func (s *SubmitAIJobResponseAIJobListAIJob) SetType(v string) *SubmitAIJobResponseAIJobListAIJob {
  s.Type = &v
  return s
}

func (s *SubmitAIJobResponseAIJobListAIJob) SetMediaId(v string) *SubmitAIJobResponseAIJobListAIJob {
  s.MediaId = &v
  return s
}

func (s *SubmitAIJobResponseAIJobListAIJob) SetStatus(v string) *SubmitAIJobResponseAIJobListAIJob {
  s.Status = &v
  return s
}

func (s *SubmitAIJobResponseAIJobListAIJob) SetCode(v string) *SubmitAIJobResponseAIJobListAIJob {
  s.Code = &v
  return s
}

func (s *SubmitAIJobResponseAIJobListAIJob) SetMessage(v string) *SubmitAIJobResponseAIJobListAIJob {
  s.Message = &v
  return s
}

func (s *SubmitAIJobResponseAIJobListAIJob) SetCreationTime(v string) *SubmitAIJobResponseAIJobListAIJob {
  s.CreationTime = &v
  return s
}

func (s *SubmitAIJobResponseAIJobListAIJob) SetData(v string) *SubmitAIJobResponseAIJobListAIJob {
  s.Data = &v
  return s
}

type GetImageInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ImageId *string `json:"ImageId" xml:"ImageId" require:"true"`
  AuthTimeout *int64 `json:"AuthTimeout" xml:"AuthTimeout"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s GetImageInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetImageInfoRequest) GoString() string {
  return s.String()
}

func (s *GetImageInfoRequest) SetAccessKeyId(v string) *GetImageInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetImageInfoRequest) SetOwnerId(v int64) *GetImageInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetImageInfoRequest) SetResourceOwnerAccount(v string) *GetImageInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetImageInfoRequest) SetResourceOwnerId(v int64) *GetImageInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetImageInfoRequest) SetImageId(v string) *GetImageInfoRequest {
  s.ImageId = &v
  return s
}

func (s *GetImageInfoRequest) SetAuthTimeout(v int64) *GetImageInfoRequest {
  s.AuthTimeout = &v
  return s
}

func (s *GetImageInfoRequest) SetResourceRealOwnerId(v int64) *GetImageInfoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type GetImageInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  ImageInfo *GetImageInfoResponseImageInfo `json:"ImageInfo" xml:"ImageInfo" require:"true" type:"Struct"`
}

func (s GetImageInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetImageInfoResponse) GoString() string {
  return s.String()
}

func (s *GetImageInfoResponse) SetRequestId(v string) *GetImageInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetImageInfoResponse) SetImageInfo(v *GetImageInfoResponseImageInfo) *GetImageInfoResponse {
  s.ImageInfo = v
  return s
}

type GetImageInfoResponseImageInfo struct {
  ImageId *string `json:"ImageId" xml:"ImageId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ImageType *string `json:"ImageType" xml:"ImageType" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  URL *string `json:"URL" xml:"URL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
  RegionId *string `json:"RegionId" xml:"RegionId" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  Mezzanine *GetImageInfoResponseImageInfoMezzanine `json:"Mezzanine" xml:"Mezzanine" require:"true" type:"Struct"`
}

func (s GetImageInfoResponseImageInfo) String() string {
  return tea.Prettify(s)
}

func (s GetImageInfoResponseImageInfo) GoString() string {
  return s.String()
}

func (s *GetImageInfoResponseImageInfo) SetImageId(v string) *GetImageInfoResponseImageInfo {
  s.ImageId = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetTitle(v string) *GetImageInfoResponseImageInfo {
  s.Title = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetCreationTime(v string) *GetImageInfoResponseImageInfo {
  s.CreationTime = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetImageType(v string) *GetImageInfoResponseImageInfo {
  s.ImageType = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetTags(v string) *GetImageInfoResponseImageInfo {
  s.Tags = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetURL(v string) *GetImageInfoResponseImageInfo {
  s.URL = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetCateId(v int) *GetImageInfoResponseImageInfo {
  s.CateId = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetCateName(v string) *GetImageInfoResponseImageInfo {
  s.CateName = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetDescription(v string) *GetImageInfoResponseImageInfo {
  s.Description = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetStorageLocation(v string) *GetImageInfoResponseImageInfo {
  s.StorageLocation = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetRegionId(v string) *GetImageInfoResponseImageInfo {
  s.RegionId = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetModificationTime(v string) *GetImageInfoResponseImageInfo {
  s.ModificationTime = &v
  return s
}

func (s *GetImageInfoResponseImageInfo) SetMezzanine(v *GetImageInfoResponseImageInfoMezzanine) *GetImageInfoResponseImageInfo {
  s.Mezzanine = v
  return s
}

type GetImageInfoResponseImageInfoMezzanine struct {
  FileURL *string `json:"FileURL" xml:"FileURL" require:"true"`
  OriginalFileName *string `json:"OriginalFileName" xml:"OriginalFileName" require:"true"`
  FileSize *int64 `json:"FileSize" xml:"FileSize" require:"true"`
  Width *int `json:"Width" xml:"Width" require:"true"`
  Height *int `json:"Height" xml:"Height" require:"true"`
}

func (s GetImageInfoResponseImageInfoMezzanine) String() string {
  return tea.Prettify(s)
}

func (s GetImageInfoResponseImageInfoMezzanine) GoString() string {
  return s.String()
}

func (s *GetImageInfoResponseImageInfoMezzanine) SetFileURL(v string) *GetImageInfoResponseImageInfoMezzanine {
  s.FileURL = &v
  return s
}

func (s *GetImageInfoResponseImageInfoMezzanine) SetOriginalFileName(v string) *GetImageInfoResponseImageInfoMezzanine {
  s.OriginalFileName = &v
  return s
}

func (s *GetImageInfoResponseImageInfoMezzanine) SetFileSize(v int64) *GetImageInfoResponseImageInfoMezzanine {
  s.FileSize = &v
  return s
}

func (s *GetImageInfoResponseImageInfoMezzanine) SetWidth(v int) *GetImageInfoResponseImageInfoMezzanine {
  s.Width = &v
  return s
}

func (s *GetImageInfoResponseImageInfoMezzanine) SetHeight(v int) *GetImageInfoResponseImageInfoMezzanine {
  s.Height = &v
  return s
}

type UpdateWatermarkInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  WatermarkType *string `json:"WatermarkType" xml:"WatermarkType" require:"true"`
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  MediaFileId *string `json:"MediaFileId" xml:"MediaFileId"`
  WatermarkName *string `json:"WatermarkName" xml:"WatermarkName"`
}

func (s UpdateWatermarkInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateWatermarkInfoRequest) GoString() string {
  return s.String()
}

func (s *UpdateWatermarkInfoRequest) SetAccessKeyId(v string) *UpdateWatermarkInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateWatermarkInfoRequest) SetOwnerId(v int64) *UpdateWatermarkInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateWatermarkInfoRequest) SetResourceOwnerAccount(v string) *UpdateWatermarkInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateWatermarkInfoRequest) SetResourceOwnerId(v int64) *UpdateWatermarkInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateWatermarkInfoRequest) SetWatermarkType(v string) *UpdateWatermarkInfoRequest {
  s.WatermarkType = &v
  return s
}

func (s *UpdateWatermarkInfoRequest) SetWatermarkConfig(v string) *UpdateWatermarkInfoRequest {
  s.WatermarkConfig = &v
  return s
}

func (s *UpdateWatermarkInfoRequest) SetWatermarkId(v string) *UpdateWatermarkInfoRequest {
  s.WatermarkId = &v
  return s
}

func (s *UpdateWatermarkInfoRequest) SetMediaFileId(v string) *UpdateWatermarkInfoRequest {
  s.MediaFileId = &v
  return s
}

func (s *UpdateWatermarkInfoRequest) SetWatermarkName(v string) *UpdateWatermarkInfoRequest {
  s.WatermarkName = &v
  return s
}

type UpdateWatermarkInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s UpdateWatermarkInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateWatermarkInfoResponse) GoString() string {
  return s.String()
}

func (s *UpdateWatermarkInfoResponse) SetRequestId(v string) *UpdateWatermarkInfoResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateWatermarkInfoResponse) SetResult(v bool) *UpdateWatermarkInfoResponse {
  s.Result = &v
  return s
}

type UpdateWatermarkGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  WatermarkGroupId *string `json:"WatermarkGroupId" xml:"WatermarkGroupId" require:"true"`
  WatermarkGroupName *string `json:"WatermarkGroupName" xml:"WatermarkGroupName"`
  IsDefault *bool `json:"IsDefault" xml:"IsDefault"`
}

func (s UpdateWatermarkGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateWatermarkGroupRequest) GoString() string {
  return s.String()
}

func (s *UpdateWatermarkGroupRequest) SetAccessKeyId(v string) *UpdateWatermarkGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateWatermarkGroupRequest) SetOwnerId(v string) *UpdateWatermarkGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateWatermarkGroupRequest) SetResourceOwnerId(v string) *UpdateWatermarkGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateWatermarkGroupRequest) SetResourceOwnerAccount(v string) *UpdateWatermarkGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateWatermarkGroupRequest) SetOwnerAccount(v string) *UpdateWatermarkGroupRequest {
  s.OwnerAccount = &v
  return s
}

func (s *UpdateWatermarkGroupRequest) SetWatermarkGroupId(v string) *UpdateWatermarkGroupRequest {
  s.WatermarkGroupId = &v
  return s
}

func (s *UpdateWatermarkGroupRequest) SetWatermarkGroupName(v string) *UpdateWatermarkGroupRequest {
  s.WatermarkGroupName = &v
  return s
}

func (s *UpdateWatermarkGroupRequest) SetIsDefault(v bool) *UpdateWatermarkGroupRequest {
  s.IsDefault = &v
  return s
}

type UpdateWatermarkGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateWatermarkGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateWatermarkGroupResponse) GoString() string {
  return s.String()
}

func (s *UpdateWatermarkGroupResponse) SetRequestId(v string) *UpdateWatermarkGroupResponse {
  s.RequestId = &v
  return s
}

type ListWatermarkInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  WatermarkType *string `json:"WatermarkType" xml:"WatermarkType" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  PageNo *string `json:"PageNo" xml:"PageNo"`
  PageSize *string `json:"PageSize" xml:"PageSize"`
}

func (s ListWatermarkInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s ListWatermarkInfoRequest) GoString() string {
  return s.String()
}

func (s *ListWatermarkInfoRequest) SetAccessKeyId(v string) *ListWatermarkInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListWatermarkInfoRequest) SetOwnerId(v int64) *ListWatermarkInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *ListWatermarkInfoRequest) SetResourceOwnerAccount(v string) *ListWatermarkInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListWatermarkInfoRequest) SetResourceOwnerId(v int64) *ListWatermarkInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListWatermarkInfoRequest) SetWatermarkType(v string) *ListWatermarkInfoRequest {
  s.WatermarkType = &v
  return s
}

func (s *ListWatermarkInfoRequest) SetStartTime(v string) *ListWatermarkInfoRequest {
  s.StartTime = &v
  return s
}

func (s *ListWatermarkInfoRequest) SetEndTime(v string) *ListWatermarkInfoRequest {
  s.EndTime = &v
  return s
}

func (s *ListWatermarkInfoRequest) SetPageNo(v string) *ListWatermarkInfoRequest {
  s.PageNo = &v
  return s
}

func (s *ListWatermarkInfoRequest) SetPageSize(v string) *ListWatermarkInfoRequest {
  s.PageSize = &v
  return s
}

type ListWatermarkInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  WatermarkInfos *ListWatermarkInfoResponseWatermarkInfos `json:"WatermarkInfos" xml:"WatermarkInfos" require:"true" type:"Struct"`
}

func (s ListWatermarkInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s ListWatermarkInfoResponse) GoString() string {
  return s.String()
}

func (s *ListWatermarkInfoResponse) SetRequestId(v string) *ListWatermarkInfoResponse {
  s.RequestId = &v
  return s
}

func (s *ListWatermarkInfoResponse) SetWatermarkInfos(v *ListWatermarkInfoResponseWatermarkInfos) *ListWatermarkInfoResponse {
  s.WatermarkInfos = v
  return s
}

type ListWatermarkInfoResponseWatermarkInfos struct {
  WatermarkInfo []*ListWatermarkInfoResponseWatermarkInfosWatermarkInfo `json:"WatermarkInfo" xml:"WatermarkInfo" require:"true" type:"Repeated"`
}

func (s ListWatermarkInfoResponseWatermarkInfos) String() string {
  return tea.Prettify(s)
}

func (s ListWatermarkInfoResponseWatermarkInfos) GoString() string {
  return s.String()
}

func (s *ListWatermarkInfoResponseWatermarkInfos) SetWatermarkInfo(v []*ListWatermarkInfoResponseWatermarkInfosWatermarkInfo) *ListWatermarkInfoResponseWatermarkInfos {
  s.WatermarkInfo = v
  return s
}

type ListWatermarkInfoResponseWatermarkInfosWatermarkInfo struct     {
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  WatermarkType *string `json:"WatermarkType" xml:"WatermarkType" require:"true"`
  WatermarkName *string `json:"WatermarkName" xml:"WatermarkName" require:"true"`
  WatermarkFileUrl *string `json:"WatermarkFileUrl" xml:"WatermarkFileUrl" require:"true"`
}

func (s ListWatermarkInfoResponseWatermarkInfosWatermarkInfo) String() string {
  return tea.Prettify(s)
}

func (s ListWatermarkInfoResponseWatermarkInfosWatermarkInfo) GoString() string {
  return s.String()
}

func (s *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo) SetWatermarkConfig(v string) *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo {
  s.WatermarkConfig = &v
  return s
}

func (s *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo) SetWatermarkId(v string) *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo {
  s.WatermarkId = &v
  return s
}

func (s *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo) SetWatermarkType(v string) *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo {
  s.WatermarkType = &v
  return s
}

func (s *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo) SetWatermarkName(v string) *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo {
  s.WatermarkName = &v
  return s
}

func (s *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo) SetWatermarkFileUrl(v string) *ListWatermarkInfoResponseWatermarkInfosWatermarkInfo {
  s.WatermarkFileUrl = &v
  return s
}

type ListCompanionresourceInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CompanionResourceType *string `json:"CompanionResourceType" xml:"CompanionResourceType" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  PageNo *string `json:"PageNo" xml:"PageNo"`
  PageSize *string `json:"PageSize" xml:"PageSize"`
}

func (s ListCompanionresourceInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s ListCompanionresourceInfoRequest) GoString() string {
  return s.String()
}

func (s *ListCompanionresourceInfoRequest) SetAccessKeyId(v string) *ListCompanionresourceInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListCompanionresourceInfoRequest) SetOwnerId(v int64) *ListCompanionresourceInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *ListCompanionresourceInfoRequest) SetResourceOwnerAccount(v string) *ListCompanionresourceInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListCompanionresourceInfoRequest) SetResourceOwnerId(v int64) *ListCompanionresourceInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListCompanionresourceInfoRequest) SetCompanionResourceType(v string) *ListCompanionresourceInfoRequest {
  s.CompanionResourceType = &v
  return s
}

func (s *ListCompanionresourceInfoRequest) SetStartTime(v string) *ListCompanionresourceInfoRequest {
  s.StartTime = &v
  return s
}

func (s *ListCompanionresourceInfoRequest) SetEndTime(v string) *ListCompanionresourceInfoRequest {
  s.EndTime = &v
  return s
}

func (s *ListCompanionresourceInfoRequest) SetPageNo(v string) *ListCompanionresourceInfoRequest {
  s.PageNo = &v
  return s
}

func (s *ListCompanionresourceInfoRequest) SetPageSize(v string) *ListCompanionresourceInfoRequest {
  s.PageSize = &v
  return s
}

type ListCompanionresourceInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  CompanionResourceInfos *ListCompanionresourceInfoResponseCompanionResourceInfos `json:"CompanionResourceInfos" xml:"CompanionResourceInfos" require:"true" type:"Struct"`
}

func (s ListCompanionresourceInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s ListCompanionresourceInfoResponse) GoString() string {
  return s.String()
}

func (s *ListCompanionresourceInfoResponse) SetRequestId(v string) *ListCompanionresourceInfoResponse {
  s.RequestId = &v
  return s
}

func (s *ListCompanionresourceInfoResponse) SetCompanionResourceInfos(v *ListCompanionresourceInfoResponseCompanionResourceInfos) *ListCompanionresourceInfoResponse {
  s.CompanionResourceInfos = v
  return s
}

type ListCompanionresourceInfoResponseCompanionResourceInfos struct {
  CompanionResourceInfo []*ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo `json:"CompanionResourceInfo" xml:"CompanionResourceInfo" require:"true" type:"Repeated"`
}

func (s ListCompanionresourceInfoResponseCompanionResourceInfos) String() string {
  return tea.Prettify(s)
}

func (s ListCompanionresourceInfoResponseCompanionResourceInfos) GoString() string {
  return s.String()
}

func (s *ListCompanionresourceInfoResponseCompanionResourceInfos) SetCompanionResourceInfo(v []*ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) *ListCompanionresourceInfoResponseCompanionResourceInfos {
  s.CompanionResourceInfo = v
  return s
}

type ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo struct     {
  CompanionResourceId *string `json:"CompanionResourceId" xml:"CompanionResourceId" require:"true"`
  CompanionResourceType *string `json:"CompanionResourceType" xml:"CompanionResourceType" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  MediaFileUrl *string `json:"MediaFileUrl" xml:"MediaFileUrl" require:"true"`
  ResourceName *string `json:"ResourceName" xml:"ResourceName" require:"true"`
  ResourceTags *string `json:"ResourceTags" xml:"ResourceTags" require:"true"`
  CompanionResourceConfig *string `json:"CompanionResourceConfig" xml:"CompanionResourceConfig" require:"true"`
}

func (s ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) String() string {
  return tea.Prettify(s)
}

func (s ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) GoString() string {
  return s.String()
}

func (s *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) SetCompanionResourceId(v string) *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo {
  s.CompanionResourceId = &v
  return s
}

func (s *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) SetCompanionResourceType(v string) *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo {
  s.CompanionResourceType = &v
  return s
}

func (s *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) SetCreationTime(v string) *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo {
  s.CreationTime = &v
  return s
}

func (s *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) SetMediaFileUrl(v string) *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo {
  s.MediaFileUrl = &v
  return s
}

func (s *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) SetResourceName(v string) *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo {
  s.ResourceName = &v
  return s
}

func (s *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) SetResourceTags(v string) *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo {
  s.ResourceTags = &v
  return s
}

func (s *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo) SetCompanionResourceConfig(v string) *ListCompanionresourceInfoResponseCompanionResourceInfosCompanionResourceInfo {
  s.CompanionResourceConfig = &v
  return s
}

type GetWatermarkInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
}

func (s GetWatermarkInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkInfoRequest) GoString() string {
  return s.String()
}

func (s *GetWatermarkInfoRequest) SetAccessKeyId(v string) *GetWatermarkInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetWatermarkInfoRequest) SetOwnerId(v int64) *GetWatermarkInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetWatermarkInfoRequest) SetResourceOwnerAccount(v string) *GetWatermarkInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetWatermarkInfoRequest) SetResourceOwnerId(v int64) *GetWatermarkInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetWatermarkInfoRequest) SetWatermarkId(v string) *GetWatermarkInfoRequest {
  s.WatermarkId = &v
  return s
}

type GetWatermarkInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  WatermarkInfo *GetWatermarkInfoResponseWatermarkInfo `json:"WatermarkInfo" xml:"WatermarkInfo" require:"true" type:"Struct"`
}

func (s GetWatermarkInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkInfoResponse) GoString() string {
  return s.String()
}

func (s *GetWatermarkInfoResponse) SetRequestId(v string) *GetWatermarkInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetWatermarkInfoResponse) SetWatermarkInfo(v *GetWatermarkInfoResponseWatermarkInfo) *GetWatermarkInfoResponse {
  s.WatermarkInfo = v
  return s
}

type GetWatermarkInfoResponseWatermarkInfo struct {
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  WatermarkType *string `json:"WatermarkType" xml:"WatermarkType" require:"true"`
  WatermarkName *string `json:"WatermarkName" xml:"WatermarkName" require:"true"`
  WatermarkFileUrl *string `json:"WatermarkFileUrl" xml:"WatermarkFileUrl" require:"true"`
}

func (s GetWatermarkInfoResponseWatermarkInfo) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkInfoResponseWatermarkInfo) GoString() string {
  return s.String()
}

func (s *GetWatermarkInfoResponseWatermarkInfo) SetWatermarkConfig(v string) *GetWatermarkInfoResponseWatermarkInfo {
  s.WatermarkConfig = &v
  return s
}

func (s *GetWatermarkInfoResponseWatermarkInfo) SetWatermarkId(v string) *GetWatermarkInfoResponseWatermarkInfo {
  s.WatermarkId = &v
  return s
}

func (s *GetWatermarkInfoResponseWatermarkInfo) SetWatermarkType(v string) *GetWatermarkInfoResponseWatermarkInfo {
  s.WatermarkType = &v
  return s
}

func (s *GetWatermarkInfoResponseWatermarkInfo) SetWatermarkName(v string) *GetWatermarkInfoResponseWatermarkInfo {
  s.WatermarkName = &v
  return s
}

func (s *GetWatermarkInfoResponseWatermarkInfo) SetWatermarkFileUrl(v string) *GetWatermarkInfoResponseWatermarkInfo {
  s.WatermarkFileUrl = &v
  return s
}

type GetWatermarkGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  PageNo *int64 `json:"PageNo" xml:"PageNo"`
  PageSize *int64 `json:"PageSize" xml:"PageSize"`
}

func (s GetWatermarkGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkGroupRequest) GoString() string {
  return s.String()
}

func (s *GetWatermarkGroupRequest) SetAccessKeyId(v string) *GetWatermarkGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetWatermarkGroupRequest) SetOwnerId(v string) *GetWatermarkGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *GetWatermarkGroupRequest) SetResourceOwnerId(v string) *GetWatermarkGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetWatermarkGroupRequest) SetResourceOwnerAccount(v string) *GetWatermarkGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetWatermarkGroupRequest) SetOwnerAccount(v string) *GetWatermarkGroupRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetWatermarkGroupRequest) SetPageNo(v int64) *GetWatermarkGroupRequest {
  s.PageNo = &v
  return s
}

func (s *GetWatermarkGroupRequest) SetPageSize(v int64) *GetWatermarkGroupRequest {
  s.PageSize = &v
  return s
}

type GetWatermarkGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Total *string `json:"Total" xml:"Total" require:"true"`
  WatermarkGroupList *GetWatermarkGroupResponseWatermarkGroupList `json:"WatermarkGroupList" xml:"WatermarkGroupList" require:"true" type:"Struct"`
}

func (s GetWatermarkGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkGroupResponse) GoString() string {
  return s.String()
}

func (s *GetWatermarkGroupResponse) SetRequestId(v string) *GetWatermarkGroupResponse {
  s.RequestId = &v
  return s
}

func (s *GetWatermarkGroupResponse) SetTotal(v string) *GetWatermarkGroupResponse {
  s.Total = &v
  return s
}

func (s *GetWatermarkGroupResponse) SetWatermarkGroupList(v *GetWatermarkGroupResponseWatermarkGroupList) *GetWatermarkGroupResponse {
  s.WatermarkGroupList = v
  return s
}

type GetWatermarkGroupResponseWatermarkGroupList struct {
  WatermarkGroup []*GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup `json:"WatermarkGroup" xml:"WatermarkGroup" require:"true" type:"Repeated"`
}

func (s GetWatermarkGroupResponseWatermarkGroupList) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkGroupResponseWatermarkGroupList) GoString() string {
  return s.String()
}

func (s *GetWatermarkGroupResponseWatermarkGroupList) SetWatermarkGroup(v []*GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup) *GetWatermarkGroupResponseWatermarkGroupList {
  s.WatermarkGroup = v
  return s
}

type GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup struct     {
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  WatermarkGroupId *string `json:"WatermarkGroupId" xml:"WatermarkGroupId" require:"true"`
  WatermarkFileURL *string `json:"WatermarkFileURL" xml:"WatermarkFileURL" require:"true"`
  WatermarkType *string `json:"WatermarkType" xml:"WatermarkType" require:"true"`
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig" require:"true"`
}

func (s GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup) GoString() string {
  return s.String()
}

func (s *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup) SetWatermarkId(v string) *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup {
  s.WatermarkId = &v
  return s
}

func (s *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup) SetWatermarkGroupId(v string) *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup {
  s.WatermarkGroupId = &v
  return s
}

func (s *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup) SetWatermarkFileURL(v string) *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup {
  s.WatermarkFileURL = &v
  return s
}

func (s *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup) SetWatermarkType(v string) *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup {
  s.WatermarkType = &v
  return s
}

func (s *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup) SetWatermarkConfig(v string) *GetWatermarkGroupResponseWatermarkGroupListWatermarkGroup {
  s.WatermarkConfig = &v
  return s
}

type GetCompanionresourceInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CompanionResourceId *string `json:"CompanionResourceId" xml:"CompanionResourceId" require:"true"`
}

func (s GetCompanionresourceInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCompanionresourceInfoRequest) GoString() string {
  return s.String()
}

func (s *GetCompanionresourceInfoRequest) SetAccessKeyId(v string) *GetCompanionresourceInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetCompanionresourceInfoRequest) SetOwnerId(v int64) *GetCompanionresourceInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCompanionresourceInfoRequest) SetResourceOwnerAccount(v string) *GetCompanionresourceInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCompanionresourceInfoRequest) SetResourceOwnerId(v int64) *GetCompanionresourceInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetCompanionresourceInfoRequest) SetCompanionResourceId(v string) *GetCompanionresourceInfoRequest {
  s.CompanionResourceId = &v
  return s
}

type GetCompanionresourceInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  CompanionResourceInfo *GetCompanionresourceInfoResponseCompanionResourceInfo `json:"CompanionResourceInfo" xml:"CompanionResourceInfo" require:"true" type:"Struct"`
}

func (s GetCompanionresourceInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCompanionresourceInfoResponse) GoString() string {
  return s.String()
}

func (s *GetCompanionresourceInfoResponse) SetRequestId(v string) *GetCompanionresourceInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetCompanionresourceInfoResponse) SetCompanionResourceInfo(v *GetCompanionresourceInfoResponseCompanionResourceInfo) *GetCompanionresourceInfoResponse {
  s.CompanionResourceInfo = v
  return s
}

type GetCompanionresourceInfoResponseCompanionResourceInfo struct {
  CompanionResourceId *string `json:"CompanionResourceId" xml:"CompanionResourceId" require:"true"`
  CompanionResourceType *string `json:"CompanionResourceType" xml:"CompanionResourceType" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  MediaFileUrl *string `json:"MediaFileUrl" xml:"MediaFileUrl" require:"true"`
  ResourceName *string `json:"ResourceName" xml:"ResourceName" require:"true"`
  ResourceTags *string `json:"ResourceTags" xml:"ResourceTags" require:"true"`
  CompanionResourceConfig *string `json:"CompanionResourceConfig" xml:"CompanionResourceConfig" require:"true"`
}

func (s GetCompanionresourceInfoResponseCompanionResourceInfo) String() string {
  return tea.Prettify(s)
}

func (s GetCompanionresourceInfoResponseCompanionResourceInfo) GoString() string {
  return s.String()
}

func (s *GetCompanionresourceInfoResponseCompanionResourceInfo) SetCompanionResourceId(v string) *GetCompanionresourceInfoResponseCompanionResourceInfo {
  s.CompanionResourceId = &v
  return s
}

func (s *GetCompanionresourceInfoResponseCompanionResourceInfo) SetCompanionResourceType(v string) *GetCompanionresourceInfoResponseCompanionResourceInfo {
  s.CompanionResourceType = &v
  return s
}

func (s *GetCompanionresourceInfoResponseCompanionResourceInfo) SetCreationTime(v string) *GetCompanionresourceInfoResponseCompanionResourceInfo {
  s.CreationTime = &v
  return s
}

func (s *GetCompanionresourceInfoResponseCompanionResourceInfo) SetMediaFileUrl(v string) *GetCompanionresourceInfoResponseCompanionResourceInfo {
  s.MediaFileUrl = &v
  return s
}

func (s *GetCompanionresourceInfoResponseCompanionResourceInfo) SetResourceName(v string) *GetCompanionresourceInfoResponseCompanionResourceInfo {
  s.ResourceName = &v
  return s
}

func (s *GetCompanionresourceInfoResponseCompanionResourceInfo) SetResourceTags(v string) *GetCompanionresourceInfoResponseCompanionResourceInfo {
  s.ResourceTags = &v
  return s
}

func (s *GetCompanionresourceInfoResponseCompanionResourceInfo) SetCompanionResourceConfig(v string) *GetCompanionresourceInfoResponseCompanionResourceInfo {
  s.CompanionResourceConfig = &v
  return s
}

type DeleteWatermarkRelationRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  WatermarkGroupId *string `json:"WatermarkGroupId" xml:"WatermarkGroupId" require:"true"`
  WatermarkIds *string `json:"WatermarkIds" xml:"WatermarkIds" require:"true"`
}

func (s DeleteWatermarkRelationRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteWatermarkRelationRequest) GoString() string {
  return s.String()
}

func (s *DeleteWatermarkRelationRequest) SetAccessKeyId(v string) *DeleteWatermarkRelationRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteWatermarkRelationRequest) SetOwnerId(v string) *DeleteWatermarkRelationRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteWatermarkRelationRequest) SetResourceOwnerId(v string) *DeleteWatermarkRelationRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteWatermarkRelationRequest) SetResourceOwnerAccount(v string) *DeleteWatermarkRelationRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteWatermarkRelationRequest) SetOwnerAccount(v string) *DeleteWatermarkRelationRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteWatermarkRelationRequest) SetWatermarkGroupId(v string) *DeleteWatermarkRelationRequest {
  s.WatermarkGroupId = &v
  return s
}

func (s *DeleteWatermarkRelationRequest) SetWatermarkIds(v string) *DeleteWatermarkRelationRequest {
  s.WatermarkIds = &v
  return s
}

type DeleteWatermarkRelationResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteWatermarkRelationResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteWatermarkRelationResponse) GoString() string {
  return s.String()
}

func (s *DeleteWatermarkRelationResponse) SetRequestId(v string) *DeleteWatermarkRelationResponse {
  s.RequestId = &v
  return s
}

type DeleteWatermarkInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  WatermarkIds *string `json:"WatermarkIds" xml:"WatermarkIds" require:"true"`
  DelEmptyGroup *string `json:"DelEmptyGroup" xml:"DelEmptyGroup"`
}

func (s DeleteWatermarkInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteWatermarkInfoRequest) GoString() string {
  return s.String()
}

func (s *DeleteWatermarkInfoRequest) SetAccessKeyId(v string) *DeleteWatermarkInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteWatermarkInfoRequest) SetOwnerId(v int64) *DeleteWatermarkInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteWatermarkInfoRequest) SetResourceOwnerAccount(v string) *DeleteWatermarkInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteWatermarkInfoRequest) SetResourceOwnerId(v int64) *DeleteWatermarkInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteWatermarkInfoRequest) SetWatermarkIds(v string) *DeleteWatermarkInfoRequest {
  s.WatermarkIds = &v
  return s
}

func (s *DeleteWatermarkInfoRequest) SetDelEmptyGroup(v string) *DeleteWatermarkInfoRequest {
  s.DelEmptyGroup = &v
  return s
}

type DeleteWatermarkInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s DeleteWatermarkInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteWatermarkInfoResponse) GoString() string {
  return s.String()
}

func (s *DeleteWatermarkInfoResponse) SetRequestId(v string) *DeleteWatermarkInfoResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteWatermarkInfoResponse) SetResult(v bool) *DeleteWatermarkInfoResponse {
  s.Result = &v
  return s
}

type DeleteWatermarkGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  WatermarkGroupId *string `json:"WatermarkGroupId" xml:"WatermarkGroupId" require:"true"`
}

func (s DeleteWatermarkGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteWatermarkGroupRequest) GoString() string {
  return s.String()
}

func (s *DeleteWatermarkGroupRequest) SetAccessKeyId(v string) *DeleteWatermarkGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteWatermarkGroupRequest) SetOwnerId(v string) *DeleteWatermarkGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteWatermarkGroupRequest) SetResourceOwnerId(v string) *DeleteWatermarkGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteWatermarkGroupRequest) SetResourceOwnerAccount(v string) *DeleteWatermarkGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteWatermarkGroupRequest) SetOwnerAccount(v string) *DeleteWatermarkGroupRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteWatermarkGroupRequest) SetWatermarkGroupId(v string) *DeleteWatermarkGroupRequest {
  s.WatermarkGroupId = &v
  return s
}

type DeleteWatermarkGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteWatermarkGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteWatermarkGroupResponse) GoString() string {
  return s.String()
}

func (s *DeleteWatermarkGroupResponse) SetRequestId(v string) *DeleteWatermarkGroupResponse {
  s.RequestId = &v
  return s
}

type DeleteCompanionresourceInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CompanionResourceIds *string `json:"CompanionResourceIds" xml:"CompanionResourceIds" require:"true"`
}

func (s DeleteCompanionresourceInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteCompanionresourceInfoRequest) GoString() string {
  return s.String()
}

func (s *DeleteCompanionresourceInfoRequest) SetAccessKeyId(v string) *DeleteCompanionresourceInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteCompanionresourceInfoRequest) SetOwnerId(v int64) *DeleteCompanionresourceInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteCompanionresourceInfoRequest) SetResourceOwnerAccount(v string) *DeleteCompanionresourceInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteCompanionresourceInfoRequest) SetResourceOwnerId(v int64) *DeleteCompanionresourceInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteCompanionresourceInfoRequest) SetCompanionResourceIds(v string) *DeleteCompanionresourceInfoRequest {
  s.CompanionResourceIds = &v
  return s
}

type DeleteCompanionresourceInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s DeleteCompanionresourceInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteCompanionresourceInfoResponse) GoString() string {
  return s.String()
}

func (s *DeleteCompanionresourceInfoResponse) SetRequestId(v string) *DeleteCompanionresourceInfoResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteCompanionresourceInfoResponse) SetResult(v bool) *DeleteCompanionresourceInfoResponse {
  s.Result = &v
  return s
}

type CreateUploadMediaFileRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  BusinessType *string `json:"BusinessType" xml:"BusinessType" require:"true"`
  FileExtension *string `json:"FileExtension" xml:"FileExtension" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId"`
  UserData *string `json:"UserData" xml:"UserData"`
}

func (s CreateUploadMediaFileRequest) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadMediaFileRequest) GoString() string {
  return s.String()
}

func (s *CreateUploadMediaFileRequest) SetAccessKeyId(v string) *CreateUploadMediaFileRequest {
  s.AccessKeyId = &v
  return s
}

func (s *CreateUploadMediaFileRequest) SetOwnerId(v int64) *CreateUploadMediaFileRequest {
  s.OwnerId = &v
  return s
}

func (s *CreateUploadMediaFileRequest) SetResourceOwnerAccount(v string) *CreateUploadMediaFileRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *CreateUploadMediaFileRequest) SetResourceOwnerId(v int64) *CreateUploadMediaFileRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *CreateUploadMediaFileRequest) SetBusinessType(v string) *CreateUploadMediaFileRequest {
  s.BusinessType = &v
  return s
}

func (s *CreateUploadMediaFileRequest) SetFileExtension(v string) *CreateUploadMediaFileRequest {
  s.FileExtension = &v
  return s
}

func (s *CreateUploadMediaFileRequest) SetMediaId(v string) *CreateUploadMediaFileRequest {
  s.MediaId = &v
  return s
}

func (s *CreateUploadMediaFileRequest) SetUserData(v string) *CreateUploadMediaFileRequest {
  s.UserData = &v
  return s
}

type CreateUploadMediaFileResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaFileInfo *CreateUploadMediaFileResponseMediaFileInfo `json:"MediaFileInfo" xml:"MediaFileInfo" require:"true" type:"Struct"`
}

func (s CreateUploadMediaFileResponse) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadMediaFileResponse) GoString() string {
  return s.String()
}

func (s *CreateUploadMediaFileResponse) SetRequestId(v string) *CreateUploadMediaFileResponse {
  s.RequestId = &v
  return s
}

func (s *CreateUploadMediaFileResponse) SetMediaFileInfo(v *CreateUploadMediaFileResponseMediaFileInfo) *CreateUploadMediaFileResponse {
  s.MediaFileInfo = v
  return s
}

type CreateUploadMediaFileResponseMediaFileInfo struct {
  MediaFileId *string `json:"MediaFileId" xml:"MediaFileId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  UserData *string `json:"UserData" xml:"UserData" require:"true"`
  MediaFilePath *string `json:"MediaFilePath" xml:"MediaFilePath" require:"true"`
  MediaFileAuth *string `json:"MediaFileAuth" xml:"MediaFileAuth" require:"true"`
  MediaFileURL *string `json:"MediaFileURL" xml:"MediaFileURL" require:"true"`
}

func (s CreateUploadMediaFileResponseMediaFileInfo) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadMediaFileResponseMediaFileInfo) GoString() string {
  return s.String()
}

func (s *CreateUploadMediaFileResponseMediaFileInfo) SetMediaFileId(v string) *CreateUploadMediaFileResponseMediaFileInfo {
  s.MediaFileId = &v
  return s
}

func (s *CreateUploadMediaFileResponseMediaFileInfo) SetMediaId(v string) *CreateUploadMediaFileResponseMediaFileInfo {
  s.MediaId = &v
  return s
}

func (s *CreateUploadMediaFileResponseMediaFileInfo) SetUserData(v string) *CreateUploadMediaFileResponseMediaFileInfo {
  s.UserData = &v
  return s
}

func (s *CreateUploadMediaFileResponseMediaFileInfo) SetMediaFilePath(v string) *CreateUploadMediaFileResponseMediaFileInfo {
  s.MediaFilePath = &v
  return s
}

func (s *CreateUploadMediaFileResponseMediaFileInfo) SetMediaFileAuth(v string) *CreateUploadMediaFileResponseMediaFileInfo {
  s.MediaFileAuth = &v
  return s
}

func (s *CreateUploadMediaFileResponseMediaFileInfo) SetMediaFileURL(v string) *CreateUploadMediaFileResponseMediaFileInfo {
  s.MediaFileURL = &v
  return s
}

type AddWatermarkRelationRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  WatermarkGroupId *string `json:"WatermarkGroupId" xml:"WatermarkGroupId" require:"true"`
  WatermarkIds *string `json:"WatermarkIds" xml:"WatermarkIds" require:"true"`
}

func (s AddWatermarkRelationRequest) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkRelationRequest) GoString() string {
  return s.String()
}

func (s *AddWatermarkRelationRequest) SetAccessKeyId(v string) *AddWatermarkRelationRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddWatermarkRelationRequest) SetOwnerId(v string) *AddWatermarkRelationRequest {
  s.OwnerId = &v
  return s
}

func (s *AddWatermarkRelationRequest) SetResourceOwnerId(v string) *AddWatermarkRelationRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddWatermarkRelationRequest) SetResourceOwnerAccount(v string) *AddWatermarkRelationRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddWatermarkRelationRequest) SetOwnerAccount(v string) *AddWatermarkRelationRequest {
  s.OwnerAccount = &v
  return s
}

func (s *AddWatermarkRelationRequest) SetWatermarkGroupId(v string) *AddWatermarkRelationRequest {
  s.WatermarkGroupId = &v
  return s
}

func (s *AddWatermarkRelationRequest) SetWatermarkIds(v string) *AddWatermarkRelationRequest {
  s.WatermarkIds = &v
  return s
}

type AddWatermarkRelationResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddWatermarkRelationResponse) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkRelationResponse) GoString() string {
  return s.String()
}

func (s *AddWatermarkRelationResponse) SetRequestId(v string) *AddWatermarkRelationResponse {
  s.RequestId = &v
  return s
}

type AddWatermarkInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  WatermarkType *string `json:"WatermarkType" xml:"WatermarkType" require:"true"`
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig" require:"true"`
  WatermarkName *string `json:"WatermarkName" xml:"WatermarkName"`
  MediaFileId *string `json:"MediaFileId" xml:"MediaFileId"`
}

func (s AddWatermarkInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkInfoRequest) GoString() string {
  return s.String()
}

func (s *AddWatermarkInfoRequest) SetAccessKeyId(v string) *AddWatermarkInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddWatermarkInfoRequest) SetOwnerId(v int64) *AddWatermarkInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *AddWatermarkInfoRequest) SetResourceOwnerAccount(v string) *AddWatermarkInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddWatermarkInfoRequest) SetResourceOwnerId(v int64) *AddWatermarkInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddWatermarkInfoRequest) SetWatermarkType(v string) *AddWatermarkInfoRequest {
  s.WatermarkType = &v
  return s
}

func (s *AddWatermarkInfoRequest) SetWatermarkConfig(v string) *AddWatermarkInfoRequest {
  s.WatermarkConfig = &v
  return s
}

func (s *AddWatermarkInfoRequest) SetWatermarkName(v string) *AddWatermarkInfoRequest {
  s.WatermarkName = &v
  return s
}

func (s *AddWatermarkInfoRequest) SetMediaFileId(v string) *AddWatermarkInfoRequest {
  s.MediaFileId = &v
  return s
}

type AddWatermarkInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
}

func (s AddWatermarkInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkInfoResponse) GoString() string {
  return s.String()
}

func (s *AddWatermarkInfoResponse) SetRequestId(v string) *AddWatermarkInfoResponse {
  s.RequestId = &v
  return s
}

func (s *AddWatermarkInfoResponse) SetResult(v bool) *AddWatermarkInfoResponse {
  s.Result = &v
  return s
}

func (s *AddWatermarkInfoResponse) SetWatermarkId(v string) *AddWatermarkInfoResponse {
  s.WatermarkId = &v
  return s
}

type AddWatermarkGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  WatermarkGroupName *string `json:"WatermarkGroupName" xml:"WatermarkGroupName" require:"true"`
}

func (s AddWatermarkGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkGroupRequest) GoString() string {
  return s.String()
}

func (s *AddWatermarkGroupRequest) SetAccessKeyId(v string) *AddWatermarkGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddWatermarkGroupRequest) SetOwnerId(v string) *AddWatermarkGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *AddWatermarkGroupRequest) SetResourceOwnerId(v string) *AddWatermarkGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddWatermarkGroupRequest) SetResourceOwnerAccount(v string) *AddWatermarkGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddWatermarkGroupRequest) SetOwnerAccount(v string) *AddWatermarkGroupRequest {
  s.OwnerAccount = &v
  return s
}

func (s *AddWatermarkGroupRequest) SetWatermarkGroupName(v string) *AddWatermarkGroupRequest {
  s.WatermarkGroupName = &v
  return s
}

type AddWatermarkGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddWatermarkGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkGroupResponse) GoString() string {
  return s.String()
}

func (s *AddWatermarkGroupResponse) SetRequestId(v string) *AddWatermarkGroupResponse {
  s.RequestId = &v
  return s
}

type AddCompanionresourceInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  MediaFileId *string `json:"MediaFileId" xml:"MediaFileId" require:"true"`
  CompanionResourceType *string `json:"CompanionResourceType" xml:"CompanionResourceType" require:"true"`
  CompanionResourceConfig *string `json:"CompanionResourceConfig" xml:"CompanionResourceConfig" require:"true"`
  ResourceName *string `json:"ResourceName" xml:"ResourceName"`
  ResourceTags *string `json:"ResourceTags" xml:"ResourceTags"`
}

func (s AddCompanionresourceInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s AddCompanionresourceInfoRequest) GoString() string {
  return s.String()
}

func (s *AddCompanionresourceInfoRequest) SetAccessKeyId(v string) *AddCompanionresourceInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddCompanionresourceInfoRequest) SetOwnerId(v int64) *AddCompanionresourceInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *AddCompanionresourceInfoRequest) SetResourceOwnerAccount(v string) *AddCompanionresourceInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddCompanionresourceInfoRequest) SetResourceOwnerId(v int64) *AddCompanionresourceInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddCompanionresourceInfoRequest) SetMediaFileId(v string) *AddCompanionresourceInfoRequest {
  s.MediaFileId = &v
  return s
}

func (s *AddCompanionresourceInfoRequest) SetCompanionResourceType(v string) *AddCompanionresourceInfoRequest {
  s.CompanionResourceType = &v
  return s
}

func (s *AddCompanionresourceInfoRequest) SetCompanionResourceConfig(v string) *AddCompanionresourceInfoRequest {
  s.CompanionResourceConfig = &v
  return s
}

func (s *AddCompanionresourceInfoRequest) SetResourceName(v string) *AddCompanionresourceInfoRequest {
  s.ResourceName = &v
  return s
}

func (s *AddCompanionresourceInfoRequest) SetResourceTags(v string) *AddCompanionresourceInfoRequest {
  s.ResourceTags = &v
  return s
}

type AddCompanionresourceInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
  CompanionresourceId *string `json:"CompanionresourceId" xml:"CompanionresourceId" require:"true"`
}

func (s AddCompanionresourceInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s AddCompanionresourceInfoResponse) GoString() string {
  return s.String()
}

func (s *AddCompanionresourceInfoResponse) SetRequestId(v string) *AddCompanionresourceInfoResponse {
  s.RequestId = &v
  return s
}

func (s *AddCompanionresourceInfoResponse) SetResult(v bool) *AddCompanionresourceInfoResponse {
  s.Result = &v
  return s
}

func (s *AddCompanionresourceInfoResponse) SetCompanionresourceId(v string) *AddCompanionresourceInfoResponse {
  s.CompanionresourceId = &v
  return s
}

type OpenVodServiceRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s OpenVodServiceRequest) String() string {
  return tea.Prettify(s)
}

func (s OpenVodServiceRequest) GoString() string {
  return s.String()
}

func (s *OpenVodServiceRequest) SetAccessKeyId(v string) *OpenVodServiceRequest {
  s.AccessKeyId = &v
  return s
}

func (s *OpenVodServiceRequest) SetOwnerId(v string) *OpenVodServiceRequest {
  s.OwnerId = &v
  return s
}

func (s *OpenVodServiceRequest) SetResourceOwnerId(v string) *OpenVodServiceRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *OpenVodServiceRequest) SetResourceOwnerAccount(v string) *OpenVodServiceRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *OpenVodServiceRequest) SetOwnerAccount(v string) *OpenVodServiceRequest {
  s.OwnerAccount = &v
  return s
}

type OpenVodServiceResponse struct {
  RequestId *string `json:"requestId" xml:"requestId" require:"true"`
  Success *bool `json:"success" xml:"success" require:"true"`
  Code *string `json:"code" xml:"code" require:"true"`
  Message *string `json:"message" xml:"message" require:"true"`
}

func (s OpenVodServiceResponse) String() string {
  return tea.Prettify(s)
}

func (s OpenVodServiceResponse) GoString() string {
  return s.String()
}

func (s *OpenVodServiceResponse) SetRequestId(v string) *OpenVodServiceResponse {
  s.RequestId = &v
  return s
}

func (s *OpenVodServiceResponse) SetSuccess(v bool) *OpenVodServiceResponse {
  s.Success = &v
  return s
}

func (s *OpenVodServiceResponse) SetCode(v string) *OpenVodServiceResponse {
  s.Code = &v
  return s
}

func (s *OpenVodServiceResponse) SetMessage(v string) *OpenVodServiceResponse {
  s.Message = &v
  return s
}

type SubmitAIVideoCategoryJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  AIVideoCategoryConfig *string `json:"AIVideoCategoryConfig" xml:"AIVideoCategoryConfig"`
  UserData *string `json:"UserData" xml:"UserData"`
}

func (s SubmitAIVideoCategoryJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoCategoryJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoCategoryJobRequest) SetAccessKeyId(v string) *SubmitAIVideoCategoryJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitAIVideoCategoryJobRequest) SetOwnerId(v string) *SubmitAIVideoCategoryJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitAIVideoCategoryJobRequest) SetResourceOwnerId(v string) *SubmitAIVideoCategoryJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitAIVideoCategoryJobRequest) SetResourceOwnerAccount(v string) *SubmitAIVideoCategoryJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitAIVideoCategoryJobRequest) SetOwnerAccount(v string) *SubmitAIVideoCategoryJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SubmitAIVideoCategoryJobRequest) SetMediaId(v string) *SubmitAIVideoCategoryJobRequest {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoCategoryJobRequest) SetAIVideoCategoryConfig(v string) *SubmitAIVideoCategoryJobRequest {
  s.AIVideoCategoryConfig = &v
  return s
}

func (s *SubmitAIVideoCategoryJobRequest) SetUserData(v string) *SubmitAIVideoCategoryJobRequest {
  s.UserData = &v
  return s
}

type SubmitAIVideoCategoryJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoCategoryJob *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob `json:"AIVideoCategoryJob" xml:"AIVideoCategoryJob" require:"true" type:"Struct"`
}

func (s SubmitAIVideoCategoryJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoCategoryJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoCategoryJobResponse) SetRequestId(v string) *SubmitAIVideoCategoryJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitAIVideoCategoryJobResponse) SetAIVideoCategoryJob(v *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) *SubmitAIVideoCategoryJobResponse {
  s.AIVideoCategoryJob = v
  return s
}

type SubmitAIVideoCategoryJobResponseAIVideoCategoryJob struct {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) SetJobId(v string) *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob {
  s.JobId = &v
  return s
}

func (s *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) SetMediaId(v string) *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) SetStatus(v string) *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob {
  s.Status = &v
  return s
}

func (s *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) SetCode(v string) *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob {
  s.Code = &v
  return s
}

func (s *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) SetMessage(v string) *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob {
  s.Message = &v
  return s
}

func (s *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) SetCreationTime(v string) *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob {
  s.CreationTime = &v
  return s
}

func (s *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob) SetData(v string) *SubmitAIVideoCategoryJobResponseAIVideoCategoryJob {
  s.Data = &v
  return s
}

type ListAIVideoCategoryJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  AIVideoCategoryJobIds *string `json:"AIVideoCategoryJobIds" xml:"AIVideoCategoryJobIds" require:"true"`
}

func (s ListAIVideoCategoryJobRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCategoryJobRequest) GoString() string {
  return s.String()
}

func (s *ListAIVideoCategoryJobRequest) SetAccessKeyId(v string) *ListAIVideoCategoryJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAIVideoCategoryJobRequest) SetOwnerId(v string) *ListAIVideoCategoryJobRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAIVideoCategoryJobRequest) SetResourceOwnerId(v string) *ListAIVideoCategoryJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAIVideoCategoryJobRequest) SetResourceOwnerAccount(v string) *ListAIVideoCategoryJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAIVideoCategoryJobRequest) SetOwnerAccount(v string) *ListAIVideoCategoryJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *ListAIVideoCategoryJobRequest) SetAIVideoCategoryJobIds(v string) *ListAIVideoCategoryJobRequest {
  s.AIVideoCategoryJobIds = &v
  return s
}

type ListAIVideoCategoryJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoCategoryJobList *ListAIVideoCategoryJobResponseAIVideoCategoryJobList `json:"AIVideoCategoryJobList" xml:"AIVideoCategoryJobList" require:"true" type:"Struct"`
  NonExistAIVideoCategoryJobIds *ListAIVideoCategoryJobResponseNonExistAIVideoCategoryJobIds `json:"NonExistAIVideoCategoryJobIds" xml:"NonExistAIVideoCategoryJobIds" require:"true" type:"Struct"`
}

func (s ListAIVideoCategoryJobResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCategoryJobResponse) GoString() string {
  return s.String()
}

func (s *ListAIVideoCategoryJobResponse) SetRequestId(v string) *ListAIVideoCategoryJobResponse {
  s.RequestId = &v
  return s
}

func (s *ListAIVideoCategoryJobResponse) SetAIVideoCategoryJobList(v *ListAIVideoCategoryJobResponseAIVideoCategoryJobList) *ListAIVideoCategoryJobResponse {
  s.AIVideoCategoryJobList = v
  return s
}

func (s *ListAIVideoCategoryJobResponse) SetNonExistAIVideoCategoryJobIds(v *ListAIVideoCategoryJobResponseNonExistAIVideoCategoryJobIds) *ListAIVideoCategoryJobResponse {
  s.NonExistAIVideoCategoryJobIds = v
  return s
}

type ListAIVideoCategoryJobResponseAIVideoCategoryJobList struct {
  AIVideoCategoryJob []*ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob `json:"AIVideoCategoryJob" xml:"AIVideoCategoryJob" require:"true" type:"Repeated"`
}

func (s ListAIVideoCategoryJobResponseAIVideoCategoryJobList) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCategoryJobResponseAIVideoCategoryJobList) GoString() string {
  return s.String()
}

func (s *ListAIVideoCategoryJobResponseAIVideoCategoryJobList) SetAIVideoCategoryJob(v []*ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) *ListAIVideoCategoryJobResponseAIVideoCategoryJobList {
  s.AIVideoCategoryJob = v
  return s
}

type ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) GoString() string {
  return s.String()
}

func (s *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) SetJobId(v string) *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob {
  s.JobId = &v
  return s
}

func (s *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) SetMediaId(v string) *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob {
  s.MediaId = &v
  return s
}

func (s *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) SetStatus(v string) *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob {
  s.Status = &v
  return s
}

func (s *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) SetCode(v string) *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob {
  s.Code = &v
  return s
}

func (s *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) SetMessage(v string) *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob {
  s.Message = &v
  return s
}

func (s *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) SetCreationTime(v string) *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob {
  s.CreationTime = &v
  return s
}

func (s *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob) SetData(v string) *ListAIVideoCategoryJobResponseAIVideoCategoryJobListAIVideoCategoryJob {
  s.Data = &v
  return s
}

type ListAIVideoCategoryJobResponseNonExistAIVideoCategoryJobIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s ListAIVideoCategoryJobResponseNonExistAIVideoCategoryJobIds) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCategoryJobResponseNonExistAIVideoCategoryJobIds) GoString() string {
  return s.String()
}

func (s *ListAIVideoCategoryJobResponseNonExistAIVideoCategoryJobIds) SetString(v []*string) *ListAIVideoCategoryJobResponseNonExistAIVideoCategoryJobIds {
  s.String = v
  return s
}

type CreateOrderRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s CreateOrderRequest) String() string {
  return tea.Prettify(s)
}

func (s CreateOrderRequest) GoString() string {
  return s.String()
}

func (s *CreateOrderRequest) SetAccessKeyId(v string) *CreateOrderRequest {
  s.AccessKeyId = &v
  return s
}

func (s *CreateOrderRequest) SetOwnerId(v string) *CreateOrderRequest {
  s.OwnerId = &v
  return s
}

func (s *CreateOrderRequest) SetResourceOwnerId(v string) *CreateOrderRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *CreateOrderRequest) SetResourceOwnerAccount(v string) *CreateOrderRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *CreateOrderRequest) SetOwnerAccount(v string) *CreateOrderRequest {
  s.OwnerAccount = &v
  return s
}

type CreateOrderResponse struct {
  RequestId *string `json:"requestId" xml:"requestId" require:"true"`
  Success *bool `json:"success" xml:"success" require:"true"`
  Code *string `json:"code" xml:"code" require:"true"`
  Message *string `json:"message" xml:"message" require:"true"`
}

func (s CreateOrderResponse) String() string {
  return tea.Prettify(s)
}

func (s CreateOrderResponse) GoString() string {
  return s.String()
}

func (s *CreateOrderResponse) SetRequestId(v string) *CreateOrderResponse {
  s.RequestId = &v
  return s
}

func (s *CreateOrderResponse) SetSuccess(v bool) *CreateOrderResponse {
  s.Success = &v
  return s
}

func (s *CreateOrderResponse) SetCode(v string) *CreateOrderResponse {
  s.Code = &v
  return s
}

func (s *CreateOrderResponse) SetMessage(v string) *CreateOrderResponse {
  s.Message = &v
  return s
}

type GetBatchPlayInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  VideoIds *string `json:"VideoIds" xml:"VideoIds" require:"true"`
  Formats *string `json:"Formats" xml:"Formats"`
  AuthTimeout *int64 `json:"AuthTimeout" xml:"AuthTimeout"`
  Rand *string `json:"Rand" xml:"Rand"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo"`
  Channel *string `json:"Channel" xml:"Channel"`
  PlayerVersion *string `json:"PlayerVersion" xml:"PlayerVersion"`
  OutputType *string `json:"OutputType" xml:"OutputType"`
  StreamType *string `json:"StreamType" xml:"StreamType"`
  ReAuthInfo *string `json:"ReAuthInfo" xml:"ReAuthInfo"`
}

func (s GetBatchPlayInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetBatchPlayInfoRequest) GoString() string {
  return s.String()
}

func (s *GetBatchPlayInfoRequest) SetAccessKeyId(v string) *GetBatchPlayInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetOwnerId(v int64) *GetBatchPlayInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetResourceOwnerAccount(v string) *GetBatchPlayInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetResourceOwnerId(v int64) *GetBatchPlayInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetResourceRealOwnerId(v int64) *GetBatchPlayInfoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetVideoIds(v string) *GetBatchPlayInfoRequest {
  s.VideoIds = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetFormats(v string) *GetBatchPlayInfoRequest {
  s.Formats = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetAuthTimeout(v int64) *GetBatchPlayInfoRequest {
  s.AuthTimeout = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetRand(v string) *GetBatchPlayInfoRequest {
  s.Rand = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetAuthInfo(v string) *GetBatchPlayInfoRequest {
  s.AuthInfo = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetChannel(v string) *GetBatchPlayInfoRequest {
  s.Channel = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetPlayerVersion(v string) *GetBatchPlayInfoRequest {
  s.PlayerVersion = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetOutputType(v string) *GetBatchPlayInfoRequest {
  s.OutputType = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetStreamType(v string) *GetBatchPlayInfoRequest {
  s.StreamType = &v
  return s
}

func (s *GetBatchPlayInfoRequest) SetReAuthInfo(v string) *GetBatchPlayInfoRequest {
  s.ReAuthInfo = &v
  return s
}

type GetBatchPlayInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  BatchPlayInfoList []*GetBatchPlayInfoResponseBatchPlayInfoList `json:"BatchPlayInfoList" xml:"BatchPlayInfoList" require:"true" type:"Repeated"`
}

func (s GetBatchPlayInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetBatchPlayInfoResponse) GoString() string {
  return s.String()
}

func (s *GetBatchPlayInfoResponse) SetRequestId(v string) *GetBatchPlayInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetBatchPlayInfoResponse) SetBatchPlayInfoList(v []*GetBatchPlayInfoResponseBatchPlayInfoList) *GetBatchPlayInfoResponse {
  s.BatchPlayInfoList = v
  return s
}

type GetBatchPlayInfoResponseBatchPlayInfoList struct     {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  ErrorCode *string `json:"ErrorCode" xml:"ErrorCode" require:"true"`
  ErrorMessage *string `json:"ErrorMessage" xml:"ErrorMessage" require:"true"`
  HttpStatusCode *int64 `json:"HttpStatusCode" xml:"HttpStatusCode" require:"true"`
  PlayInfoList []*GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList `json:"PlayInfoList" xml:"PlayInfoList" require:"true" type:"Repeated"`
}

func (s GetBatchPlayInfoResponseBatchPlayInfoList) String() string {
  return tea.Prettify(s)
}

func (s GetBatchPlayInfoResponseBatchPlayInfoList) GoString() string {
  return s.String()
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoList) SetVideoId(v string) *GetBatchPlayInfoResponseBatchPlayInfoList {
  s.VideoId = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoList) SetErrorCode(v string) *GetBatchPlayInfoResponseBatchPlayInfoList {
  s.ErrorCode = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoList) SetErrorMessage(v string) *GetBatchPlayInfoResponseBatchPlayInfoList {
  s.ErrorMessage = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoList) SetHttpStatusCode(v int64) *GetBatchPlayInfoResponseBatchPlayInfoList {
  s.HttpStatusCode = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoList) SetPlayInfoList(v []*GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) *GetBatchPlayInfoResponseBatchPlayInfoList {
  s.PlayInfoList = v
  return s
}

type GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList struct     {
  Width *int64 `json:"Width" xml:"Width" require:"true"`
  Height *int64 `json:"Height" xml:"Height" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  PlayURL *string `json:"PlayURL" xml:"PlayURL" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Encrypt *int64 `json:"Encrypt" xml:"Encrypt" require:"true"`
  Plaintext *string `json:"Plaintext" xml:"Plaintext" require:"true"`
  Complexity *string `json:"Complexity" xml:"Complexity" require:"true"`
  StreamType *string `json:"StreamType" xml:"StreamType" require:"true"`
  Rand *string `json:"Rand" xml:"Rand" require:"true"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) String() string {
  return tea.Prettify(s)
}

func (s GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) GoString() string {
  return s.String()
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetWidth(v int64) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Width = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetHeight(v int64) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Height = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetSize(v int64) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Size = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetPlayURL(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.PlayURL = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetBitrate(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Bitrate = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetDefinition(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Definition = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetDuration(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Duration = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetFormat(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Format = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetFps(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Fps = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetEncrypt(v int64) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Encrypt = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetPlaintext(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Plaintext = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetComplexity(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Complexity = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetStreamType(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.StreamType = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetRand(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.Rand = &v
  return s
}

func (s *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList) SetJobId(v string) *GetBatchPlayInfoResponseBatchPlayInfoListPlayInfoList {
  s.JobId = &v
  return s
}

type SubmitAIVideoTerrorismRecogJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  AIVideoTerrorismRecogConfig *string `json:"AIVideoTerrorismRecogConfig" xml:"AIVideoTerrorismRecogConfig"`
  UserData *string `json:"UserData" xml:"UserData"`
}

func (s SubmitAIVideoTerrorismRecogJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoTerrorismRecogJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoTerrorismRecogJobRequest) SetAccessKeyId(v string) *SubmitAIVideoTerrorismRecogJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobRequest) SetOwnerId(v string) *SubmitAIVideoTerrorismRecogJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobRequest) SetResourceOwnerId(v string) *SubmitAIVideoTerrorismRecogJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobRequest) SetResourceOwnerAccount(v string) *SubmitAIVideoTerrorismRecogJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobRequest) SetOwnerAccount(v string) *SubmitAIVideoTerrorismRecogJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobRequest) SetMediaId(v string) *SubmitAIVideoTerrorismRecogJobRequest {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobRequest) SetAIVideoTerrorismRecogConfig(v string) *SubmitAIVideoTerrorismRecogJobRequest {
  s.AIVideoTerrorismRecogConfig = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobRequest) SetUserData(v string) *SubmitAIVideoTerrorismRecogJobRequest {
  s.UserData = &v
  return s
}

type SubmitAIVideoTerrorismRecogJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoTerrorismRecogJob *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob `json:"AIVideoTerrorismRecogJob" xml:"AIVideoTerrorismRecogJob" require:"true" type:"Struct"`
}

func (s SubmitAIVideoTerrorismRecogJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoTerrorismRecogJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoTerrorismRecogJobResponse) SetRequestId(v string) *SubmitAIVideoTerrorismRecogJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobResponse) SetAIVideoTerrorismRecogJob(v *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) *SubmitAIVideoTerrorismRecogJobResponse {
  s.AIVideoTerrorismRecogJob = v
  return s
}

type SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob struct {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) SetJobId(v string) *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob {
  s.JobId = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) SetMediaId(v string) *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) SetStatus(v string) *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob {
  s.Status = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) SetCode(v string) *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob {
  s.Code = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) SetMessage(v string) *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob {
  s.Message = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) SetCreationTime(v string) *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob {
  s.CreationTime = &v
  return s
}

func (s *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob) SetData(v string) *SubmitAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJob {
  s.Data = &v
  return s
}

type SubmitAIVideoCensorJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  AIVideoCensorConfig *string `json:"AIVideoCensorConfig" xml:"AIVideoCensorConfig"`
  UserData *string `json:"UserData" xml:"UserData"`
}

func (s SubmitAIVideoCensorJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoCensorJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoCensorJobRequest) SetAccessKeyId(v string) *SubmitAIVideoCensorJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitAIVideoCensorJobRequest) SetOwnerId(v string) *SubmitAIVideoCensorJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitAIVideoCensorJobRequest) SetResourceOwnerId(v string) *SubmitAIVideoCensorJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitAIVideoCensorJobRequest) SetResourceOwnerAccount(v string) *SubmitAIVideoCensorJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitAIVideoCensorJobRequest) SetOwnerAccount(v string) *SubmitAIVideoCensorJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SubmitAIVideoCensorJobRequest) SetMediaId(v string) *SubmitAIVideoCensorJobRequest {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoCensorJobRequest) SetAIVideoCensorConfig(v string) *SubmitAIVideoCensorJobRequest {
  s.AIVideoCensorConfig = &v
  return s
}

func (s *SubmitAIVideoCensorJobRequest) SetUserData(v string) *SubmitAIVideoCensorJobRequest {
  s.UserData = &v
  return s
}

type SubmitAIVideoCensorJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoCensorJob *SubmitAIVideoCensorJobResponseAIVideoCensorJob `json:"AIVideoCensorJob" xml:"AIVideoCensorJob" require:"true" type:"Struct"`
}

func (s SubmitAIVideoCensorJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoCensorJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoCensorJobResponse) SetRequestId(v string) *SubmitAIVideoCensorJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitAIVideoCensorJobResponse) SetAIVideoCensorJob(v *SubmitAIVideoCensorJobResponseAIVideoCensorJob) *SubmitAIVideoCensorJobResponse {
  s.AIVideoCensorJob = v
  return s
}

type SubmitAIVideoCensorJobResponseAIVideoCensorJob struct {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s SubmitAIVideoCensorJobResponseAIVideoCensorJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoCensorJobResponseAIVideoCensorJob) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoCensorJobResponseAIVideoCensorJob) SetJobId(v string) *SubmitAIVideoCensorJobResponseAIVideoCensorJob {
  s.JobId = &v
  return s
}

func (s *SubmitAIVideoCensorJobResponseAIVideoCensorJob) SetMediaId(v string) *SubmitAIVideoCensorJobResponseAIVideoCensorJob {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoCensorJobResponseAIVideoCensorJob) SetStatus(v string) *SubmitAIVideoCensorJobResponseAIVideoCensorJob {
  s.Status = &v
  return s
}

func (s *SubmitAIVideoCensorJobResponseAIVideoCensorJob) SetCode(v string) *SubmitAIVideoCensorJobResponseAIVideoCensorJob {
  s.Code = &v
  return s
}

func (s *SubmitAIVideoCensorJobResponseAIVideoCensorJob) SetMessage(v string) *SubmitAIVideoCensorJobResponseAIVideoCensorJob {
  s.Message = &v
  return s
}

func (s *SubmitAIVideoCensorJobResponseAIVideoCensorJob) SetCreationTime(v string) *SubmitAIVideoCensorJobResponseAIVideoCensorJob {
  s.CreationTime = &v
  return s
}

func (s *SubmitAIVideoCensorJobResponseAIVideoCensorJob) SetData(v string) *SubmitAIVideoCensorJobResponseAIVideoCensorJob {
  s.Data = &v
  return s
}

type ListAIVideoTerrorismRecogJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  AIVideoTerrorismRecogJobIds *string `json:"AIVideoTerrorismRecogJobIds" xml:"AIVideoTerrorismRecogJobIds" require:"true"`
}

func (s ListAIVideoTerrorismRecogJobRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoTerrorismRecogJobRequest) GoString() string {
  return s.String()
}

func (s *ListAIVideoTerrorismRecogJobRequest) SetAccessKeyId(v string) *ListAIVideoTerrorismRecogJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobRequest) SetOwnerId(v string) *ListAIVideoTerrorismRecogJobRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobRequest) SetResourceOwnerId(v string) *ListAIVideoTerrorismRecogJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobRequest) SetResourceOwnerAccount(v string) *ListAIVideoTerrorismRecogJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobRequest) SetOwnerAccount(v string) *ListAIVideoTerrorismRecogJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobRequest) SetAIVideoTerrorismRecogJobIds(v string) *ListAIVideoTerrorismRecogJobRequest {
  s.AIVideoTerrorismRecogJobIds = &v
  return s
}

type ListAIVideoTerrorismRecogJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoTerrorismRecogJobList *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobList `json:"AIVideoTerrorismRecogJobList" xml:"AIVideoTerrorismRecogJobList" require:"true" type:"Struct"`
  NonExistTerrorismRecogJobIds *ListAIVideoTerrorismRecogJobResponseNonExistTerrorismRecogJobIds `json:"NonExistTerrorismRecogJobIds" xml:"NonExistTerrorismRecogJobIds" require:"true" type:"Struct"`
}

func (s ListAIVideoTerrorismRecogJobResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoTerrorismRecogJobResponse) GoString() string {
  return s.String()
}

func (s *ListAIVideoTerrorismRecogJobResponse) SetRequestId(v string) *ListAIVideoTerrorismRecogJobResponse {
  s.RequestId = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobResponse) SetAIVideoTerrorismRecogJobList(v *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobList) *ListAIVideoTerrorismRecogJobResponse {
  s.AIVideoTerrorismRecogJobList = v
  return s
}

func (s *ListAIVideoTerrorismRecogJobResponse) SetNonExistTerrorismRecogJobIds(v *ListAIVideoTerrorismRecogJobResponseNonExistTerrorismRecogJobIds) *ListAIVideoTerrorismRecogJobResponse {
  s.NonExistTerrorismRecogJobIds = v
  return s
}

type ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobList struct {
  AIVideoTerrorismRecogJob []*ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob `json:"AIVideoTerrorismRecogJob" xml:"AIVideoTerrorismRecogJob" require:"true" type:"Repeated"`
}

func (s ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobList) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobList) GoString() string {
  return s.String()
}

func (s *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobList) SetAIVideoTerrorismRecogJob(v []*ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobList {
  s.AIVideoTerrorismRecogJob = v
  return s
}

type ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) GoString() string {
  return s.String()
}

func (s *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) SetJobId(v string) *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob {
  s.JobId = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) SetMediaId(v string) *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob {
  s.MediaId = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) SetStatus(v string) *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob {
  s.Status = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) SetCode(v string) *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob {
  s.Code = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) SetMessage(v string) *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob {
  s.Message = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) SetCreationTime(v string) *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob {
  s.CreationTime = &v
  return s
}

func (s *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob) SetData(v string) *ListAIVideoTerrorismRecogJobResponseAIVideoTerrorismRecogJobListAIVideoTerrorismRecogJob {
  s.Data = &v
  return s
}

type ListAIVideoTerrorismRecogJobResponseNonExistTerrorismRecogJobIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s ListAIVideoTerrorismRecogJobResponseNonExistTerrorismRecogJobIds) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoTerrorismRecogJobResponseNonExistTerrorismRecogJobIds) GoString() string {
  return s.String()
}

func (s *ListAIVideoTerrorismRecogJobResponseNonExistTerrorismRecogJobIds) SetString(v []*string) *ListAIVideoTerrorismRecogJobResponseNonExistTerrorismRecogJobIds {
  s.String = v
  return s
}

type ListAIVideoCensorJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  AIVideoCensorJobIds *string `json:"AIVideoCensorJobIds" xml:"AIVideoCensorJobIds" require:"true"`
}

func (s ListAIVideoCensorJobRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCensorJobRequest) GoString() string {
  return s.String()
}

func (s *ListAIVideoCensorJobRequest) SetAccessKeyId(v string) *ListAIVideoCensorJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAIVideoCensorJobRequest) SetOwnerId(v string) *ListAIVideoCensorJobRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAIVideoCensorJobRequest) SetResourceOwnerId(v string) *ListAIVideoCensorJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAIVideoCensorJobRequest) SetResourceOwnerAccount(v string) *ListAIVideoCensorJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAIVideoCensorJobRequest) SetOwnerAccount(v string) *ListAIVideoCensorJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *ListAIVideoCensorJobRequest) SetAIVideoCensorJobIds(v string) *ListAIVideoCensorJobRequest {
  s.AIVideoCensorJobIds = &v
  return s
}

type ListAIVideoCensorJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoCensorJobList *ListAIVideoCensorJobResponseAIVideoCensorJobList `json:"AIVideoCensorJobList" xml:"AIVideoCensorJobList" require:"true" type:"Struct"`
  NonExistAIVideoCensorJobIds *ListAIVideoCensorJobResponseNonExistAIVideoCensorJobIds `json:"NonExistAIVideoCensorJobIds" xml:"NonExistAIVideoCensorJobIds" require:"true" type:"Struct"`
}

func (s ListAIVideoCensorJobResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCensorJobResponse) GoString() string {
  return s.String()
}

func (s *ListAIVideoCensorJobResponse) SetRequestId(v string) *ListAIVideoCensorJobResponse {
  s.RequestId = &v
  return s
}

func (s *ListAIVideoCensorJobResponse) SetAIVideoCensorJobList(v *ListAIVideoCensorJobResponseAIVideoCensorJobList) *ListAIVideoCensorJobResponse {
  s.AIVideoCensorJobList = v
  return s
}

func (s *ListAIVideoCensorJobResponse) SetNonExistAIVideoCensorJobIds(v *ListAIVideoCensorJobResponseNonExistAIVideoCensorJobIds) *ListAIVideoCensorJobResponse {
  s.NonExistAIVideoCensorJobIds = v
  return s
}

type ListAIVideoCensorJobResponseAIVideoCensorJobList struct {
  AIVideoCensorJob []*ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob `json:"AIVideoCensorJob" xml:"AIVideoCensorJob" require:"true" type:"Repeated"`
}

func (s ListAIVideoCensorJobResponseAIVideoCensorJobList) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCensorJobResponseAIVideoCensorJobList) GoString() string {
  return s.String()
}

func (s *ListAIVideoCensorJobResponseAIVideoCensorJobList) SetAIVideoCensorJob(v []*ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) *ListAIVideoCensorJobResponseAIVideoCensorJobList {
  s.AIVideoCensorJob = v
  return s
}

type ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) GoString() string {
  return s.String()
}

func (s *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) SetJobId(v string) *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob {
  s.JobId = &v
  return s
}

func (s *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) SetMediaId(v string) *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob {
  s.MediaId = &v
  return s
}

func (s *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) SetStatus(v string) *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob {
  s.Status = &v
  return s
}

func (s *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) SetCode(v string) *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob {
  s.Code = &v
  return s
}

func (s *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) SetMessage(v string) *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob {
  s.Message = &v
  return s
}

func (s *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) SetCreationTime(v string) *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob {
  s.CreationTime = &v
  return s
}

func (s *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob) SetData(v string) *ListAIVideoCensorJobResponseAIVideoCensorJobListAIVideoCensorJob {
  s.Data = &v
  return s
}

type ListAIVideoCensorJobResponseNonExistAIVideoCensorJobIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s ListAIVideoCensorJobResponseNonExistAIVideoCensorJobIds) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCensorJobResponseNonExistAIVideoCensorJobIds) GoString() string {
  return s.String()
}

func (s *ListAIVideoCensorJobResponseNonExistAIVideoCensorJobIds) SetString(v []*string) *ListAIVideoCensorJobResponseNonExistAIVideoCensorJobIds {
  s.String = v
  return s
}

type DeleteStreamRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  JobIds *string `json:"JobIds" xml:"JobIds" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s DeleteStreamRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteStreamRequest) GoString() string {
  return s.String()
}

func (s *DeleteStreamRequest) SetOwnerId(v int64) *DeleteStreamRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteStreamRequest) SetResourceOwnerAccount(v string) *DeleteStreamRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteStreamRequest) SetResourceOwnerId(v int64) *DeleteStreamRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteStreamRequest) SetJobIds(v string) *DeleteStreamRequest {
  s.JobIds = &v
  return s
}

func (s *DeleteStreamRequest) SetVideoId(v string) *DeleteStreamRequest {
  s.VideoId = &v
  return s
}

type DeleteStreamResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteStreamResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteStreamResponse) GoString() string {
  return s.String()
}

func (s *DeleteStreamResponse) SetRequestId(v string) *DeleteStreamResponse {
  s.RequestId = &v
  return s
}

type SubmitSnapshotJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  SpecifiedOffsetTime *int64 `json:"SpecifiedOffsetTime" xml:"SpecifiedOffsetTime"`
  Width *string `json:"Width" xml:"Width"`
  Height *string `json:"Height" xml:"Height"`
  Count *int64 `json:"Count" xml:"Count"`
  Interval *int64 `json:"Interval" xml:"Interval"`
  SpriteSnapshotConfig *string `json:"SpriteSnapshotConfig" xml:"SpriteSnapshotConfig"`
  SnapshotTemplateId *string `json:"SnapshotTemplateId" xml:"SnapshotTemplateId"`
}

func (s SubmitSnapshotJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitSnapshotJobRequest) SetAccessKeyId(v string) *SubmitSnapshotJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetOwnerId(v int64) *SubmitSnapshotJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetResourceOwnerAccount(v string) *SubmitSnapshotJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetResourceOwnerId(v int64) *SubmitSnapshotJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetVideoId(v string) *SubmitSnapshotJobRequest {
  s.VideoId = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetSpecifiedOffsetTime(v int64) *SubmitSnapshotJobRequest {
  s.SpecifiedOffsetTime = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetWidth(v string) *SubmitSnapshotJobRequest {
  s.Width = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetHeight(v string) *SubmitSnapshotJobRequest {
  s.Height = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetCount(v int64) *SubmitSnapshotJobRequest {
  s.Count = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetInterval(v int64) *SubmitSnapshotJobRequest {
  s.Interval = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetSpriteSnapshotConfig(v string) *SubmitSnapshotJobRequest {
  s.SpriteSnapshotConfig = &v
  return s
}

func (s *SubmitSnapshotJobRequest) SetSnapshotTemplateId(v string) *SubmitSnapshotJobRequest {
  s.SnapshotTemplateId = &v
  return s
}

type SubmitSnapshotJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  SnapshotJob *SubmitSnapshotJobResponseSnapshotJob `json:"SnapshotJob" xml:"SnapshotJob" require:"true" type:"Struct"`
}

func (s SubmitSnapshotJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitSnapshotJobResponse) SetRequestId(v string) *SubmitSnapshotJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitSnapshotJobResponse) SetSnapshotJob(v *SubmitSnapshotJobResponseSnapshotJob) *SubmitSnapshotJobResponse {
  s.SnapshotJob = v
  return s
}

type SubmitSnapshotJobResponseSnapshotJob struct {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s SubmitSnapshotJobResponseSnapshotJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseSnapshotJob) GoString() string {
  return s.String()
}

func (s *SubmitSnapshotJobResponseSnapshotJob) SetJobId(v string) *SubmitSnapshotJobResponseSnapshotJob {
  s.JobId = &v
  return s
}

type DescribeDomainFlowDataRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  TimeMerge *string `json:"TimeMerge" xml:"TimeMerge"`
  Interval *string `json:"Interval" xml:"Interval"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn"`
}

func (s DescribeDomainFlowDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainFlowDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeDomainFlowDataRequest) SetAccessKeyId(v string) *DescribeDomainFlowDataRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetOwnerId(v string) *DescribeDomainFlowDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetResourceOwnerId(v string) *DescribeDomainFlowDataRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetResourceOwnerAccount(v string) *DescribeDomainFlowDataRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetOwnerAccount(v string) *DescribeDomainFlowDataRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetDomainName(v string) *DescribeDomainFlowDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetStartTime(v string) *DescribeDomainFlowDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetEndTime(v string) *DescribeDomainFlowDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetTimeMerge(v string) *DescribeDomainFlowDataRequest {
  s.TimeMerge = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetInterval(v string) *DescribeDomainFlowDataRequest {
  s.Interval = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetLocationNameEn(v string) *DescribeDomainFlowDataRequest {
  s.LocationNameEn = &v
  return s
}

func (s *DescribeDomainFlowDataRequest) SetIspNameEn(v string) *DescribeDomainFlowDataRequest {
  s.IspNameEn = &v
  return s
}

type DescribeDomainFlowDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  FlowDataPerInterval *DescribeDomainFlowDataResponseFlowDataPerInterval `json:"FlowDataPerInterval" xml:"FlowDataPerInterval" require:"true" type:"Struct"`
}

func (s DescribeDomainFlowDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainFlowDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeDomainFlowDataResponse) SetRequestId(v string) *DescribeDomainFlowDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeDomainFlowDataResponse) SetDomainName(v string) *DescribeDomainFlowDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeDomainFlowDataResponse) SetDataInterval(v string) *DescribeDomainFlowDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeDomainFlowDataResponse) SetStartTime(v string) *DescribeDomainFlowDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeDomainFlowDataResponse) SetEndTime(v string) *DescribeDomainFlowDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeDomainFlowDataResponse) SetFlowDataPerInterval(v *DescribeDomainFlowDataResponseFlowDataPerInterval) *DescribeDomainFlowDataResponse {
  s.FlowDataPerInterval = v
  return s
}

type DescribeDomainFlowDataResponseFlowDataPerInterval struct {
  DataModule []*DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeDomainFlowDataResponseFlowDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainFlowDataResponseFlowDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeDomainFlowDataResponseFlowDataPerInterval) SetDataModule(v []*DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) *DescribeDomainFlowDataResponseFlowDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
  DomesticValue *string `json:"DomesticValue" xml:"DomesticValue" require:"true"`
  OverseasValue *string `json:"OverseasValue" xml:"OverseasValue" require:"true"`
  DynamicValue *string `json:"DynamicValue" xml:"DynamicValue" require:"true"`
  DynamicDomesticValue *string `json:"DynamicDomesticValue" xml:"DynamicDomesticValue" require:"true"`
  DynamicOverseasValue *string `json:"DynamicOverseasValue" xml:"DynamicOverseasValue" require:"true"`
  StaticValue *string `json:"StaticValue" xml:"StaticValue" require:"true"`
  StaticDomesticValue *string `json:"StaticDomesticValue" xml:"StaticDomesticValue" require:"true"`
  StaticOverseasValue *string `json:"StaticOverseasValue" xml:"StaticOverseasValue" require:"true"`
}

func (s DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetValue(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.Value = &v
  return s
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetDomesticValue(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.DomesticValue = &v
  return s
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetOverseasValue(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.OverseasValue = &v
  return s
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetDynamicValue(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.DynamicValue = &v
  return s
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetDynamicDomesticValue(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.DynamicDomesticValue = &v
  return s
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetDynamicOverseasValue(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.DynamicOverseasValue = &v
  return s
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetStaticValue(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.StaticValue = &v
  return s
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetStaticDomesticValue(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.StaticDomesticValue = &v
  return s
}

func (s *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule) SetStaticOverseasValue(v string) *DescribeDomainFlowDataResponseFlowDataPerIntervalDataModule {
  s.StaticOverseasValue = &v
  return s
}

type DescribeDomainBpsDataRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  TimeMerge *string `json:"TimeMerge" xml:"TimeMerge"`
  Interval *string `json:"Interval" xml:"Interval"`
  LocationNameEn *string `json:"LocationNameEn" xml:"LocationNameEn"`
  IspNameEn *string `json:"IspNameEn" xml:"IspNameEn"`
}

func (s DescribeDomainBpsDataRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainBpsDataRequest) GoString() string {
  return s.String()
}

func (s *DescribeDomainBpsDataRequest) SetAccessKeyId(v string) *DescribeDomainBpsDataRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetOwnerId(v string) *DescribeDomainBpsDataRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetResourceOwnerId(v string) *DescribeDomainBpsDataRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetResourceOwnerAccount(v string) *DescribeDomainBpsDataRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetOwnerAccount(v string) *DescribeDomainBpsDataRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetDomainName(v string) *DescribeDomainBpsDataRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetStartTime(v string) *DescribeDomainBpsDataRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetEndTime(v string) *DescribeDomainBpsDataRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetTimeMerge(v string) *DescribeDomainBpsDataRequest {
  s.TimeMerge = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetInterval(v string) *DescribeDomainBpsDataRequest {
  s.Interval = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetLocationNameEn(v string) *DescribeDomainBpsDataRequest {
  s.LocationNameEn = &v
  return s
}

func (s *DescribeDomainBpsDataRequest) SetIspNameEn(v string) *DescribeDomainBpsDataRequest {
  s.IspNameEn = &v
  return s
}

type DescribeDomainBpsDataResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  DataInterval *string `json:"DataInterval" xml:"DataInterval" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  BpsDataPerInterval *DescribeDomainBpsDataResponseBpsDataPerInterval `json:"BpsDataPerInterval" xml:"BpsDataPerInterval" require:"true" type:"Struct"`
  SupplyBpsDatas *DescribeDomainBpsDataResponseSupplyBpsDatas `json:"SupplyBpsDatas" xml:"SupplyBpsDatas" require:"true" type:"Struct"`
}

func (s DescribeDomainBpsDataResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainBpsDataResponse) GoString() string {
  return s.String()
}

func (s *DescribeDomainBpsDataResponse) SetRequestId(v string) *DescribeDomainBpsDataResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeDomainBpsDataResponse) SetDomainName(v string) *DescribeDomainBpsDataResponse {
  s.DomainName = &v
  return s
}

func (s *DescribeDomainBpsDataResponse) SetDataInterval(v string) *DescribeDomainBpsDataResponse {
  s.DataInterval = &v
  return s
}

func (s *DescribeDomainBpsDataResponse) SetStartTime(v string) *DescribeDomainBpsDataResponse {
  s.StartTime = &v
  return s
}

func (s *DescribeDomainBpsDataResponse) SetEndTime(v string) *DescribeDomainBpsDataResponse {
  s.EndTime = &v
  return s
}

func (s *DescribeDomainBpsDataResponse) SetBpsDataPerInterval(v *DescribeDomainBpsDataResponseBpsDataPerInterval) *DescribeDomainBpsDataResponse {
  s.BpsDataPerInterval = v
  return s
}

func (s *DescribeDomainBpsDataResponse) SetSupplyBpsDatas(v *DescribeDomainBpsDataResponseSupplyBpsDatas) *DescribeDomainBpsDataResponse {
  s.SupplyBpsDatas = v
  return s
}

type DescribeDomainBpsDataResponseBpsDataPerInterval struct {
  DataModule []*DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeDomainBpsDataResponseBpsDataPerInterval) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainBpsDataResponseBpsDataPerInterval) GoString() string {
  return s.String()
}

func (s *DescribeDomainBpsDataResponseBpsDataPerInterval) SetDataModule(v []*DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) *DescribeDomainBpsDataResponseBpsDataPerInterval {
  s.DataModule = v
  return s
}

type DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
  DomesticValue *string `json:"DomesticValue" xml:"DomesticValue" require:"true"`
  OverseasValue *string `json:"OverseasValue" xml:"OverseasValue" require:"true"`
  L2Value *string `json:"L2Value" xml:"L2Value" require:"true"`
  DomesticL2Value *string `json:"DomesticL2Value" xml:"DomesticL2Value" require:"true"`
  OverseasL2Value *string `json:"OverseasL2Value" xml:"OverseasL2Value" require:"true"`
  DynamicValue *int64 `json:"DynamicValue" xml:"DynamicValue" require:"true"`
  DynamicDomesticValue *string `json:"DynamicDomesticValue" xml:"DynamicDomesticValue" require:"true"`
  DynamicOverseasValue *string `json:"DynamicOverseasValue" xml:"DynamicOverseasValue" require:"true"`
  StaticValue *string `json:"StaticValue" xml:"StaticValue" require:"true"`
  StaticDomesticValue *string `json:"StaticDomesticValue" xml:"StaticDomesticValue" require:"true"`
  StaticOverseasValue *string `json:"StaticOverseasValue" xml:"StaticOverseasValue" require:"true"`
}

func (s DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) GoString() string {
  return s.String()
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetTimeStamp(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetValue(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.Value = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetDomesticValue(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.DomesticValue = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetOverseasValue(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.OverseasValue = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetL2Value(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.L2Value = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetDomesticL2Value(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.DomesticL2Value = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetOverseasL2Value(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.OverseasL2Value = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetDynamicValue(v int64) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.DynamicValue = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetDynamicDomesticValue(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.DynamicDomesticValue = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetDynamicOverseasValue(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.DynamicOverseasValue = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetStaticValue(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.StaticValue = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetStaticDomesticValue(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.StaticDomesticValue = &v
  return s
}

func (s *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule) SetStaticOverseasValue(v string) *DescribeDomainBpsDataResponseBpsDataPerIntervalDataModule {
  s.StaticOverseasValue = &v
  return s
}

type DescribeDomainBpsDataResponseSupplyBpsDatas struct {
  DataModule []*DescribeDomainBpsDataResponseSupplyBpsDatasDataModule `json:"DataModule" xml:"DataModule" require:"true" type:"Repeated"`
}

func (s DescribeDomainBpsDataResponseSupplyBpsDatas) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainBpsDataResponseSupplyBpsDatas) GoString() string {
  return s.String()
}

func (s *DescribeDomainBpsDataResponseSupplyBpsDatas) SetDataModule(v []*DescribeDomainBpsDataResponseSupplyBpsDatasDataModule) *DescribeDomainBpsDataResponseSupplyBpsDatas {
  s.DataModule = v
  return s
}

type DescribeDomainBpsDataResponseSupplyBpsDatasDataModule struct     {
  TimeStamp *string `json:"TimeStamp" xml:"TimeStamp" require:"true"`
  Value *string `json:"Value" xml:"Value" require:"true"`
}

func (s DescribeDomainBpsDataResponseSupplyBpsDatasDataModule) String() string {
  return tea.Prettify(s)
}

func (s DescribeDomainBpsDataResponseSupplyBpsDatasDataModule) GoString() string {
  return s.String()
}

func (s *DescribeDomainBpsDataResponseSupplyBpsDatasDataModule) SetTimeStamp(v string) *DescribeDomainBpsDataResponseSupplyBpsDatasDataModule {
  s.TimeStamp = &v
  return s
}

func (s *DescribeDomainBpsDataResponseSupplyBpsDatasDataModule) SetValue(v string) *DescribeDomainBpsDataResponseSupplyBpsDatasDataModule {
  s.Value = &v
  return s
}

type DescribeCdnDomainLogsRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  LogDay *string `json:"LogDay" xml:"LogDay"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  PageSize *int64 `json:"PageSize" xml:"PageSize"`
  PageNo *int64 `json:"PageNo" xml:"PageNo"`
}

func (s DescribeCdnDomainLogsRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeCdnDomainLogsRequest) GoString() string {
  return s.String()
}

func (s *DescribeCdnDomainLogsRequest) SetAccessKeyId(v string) *DescribeCdnDomainLogsRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetOwnerId(v string) *DescribeCdnDomainLogsRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetResourceOwnerId(v string) *DescribeCdnDomainLogsRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetResourceOwnerAccount(v string) *DescribeCdnDomainLogsRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetOwnerAccount(v string) *DescribeCdnDomainLogsRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetDomainName(v string) *DescribeCdnDomainLogsRequest {
  s.DomainName = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetLogDay(v string) *DescribeCdnDomainLogsRequest {
  s.LogDay = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetStartTime(v string) *DescribeCdnDomainLogsRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetEndTime(v string) *DescribeCdnDomainLogsRequest {
  s.EndTime = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetPageSize(v int64) *DescribeCdnDomainLogsRequest {
  s.PageSize = &v
  return s
}

func (s *DescribeCdnDomainLogsRequest) SetPageNo(v int64) *DescribeCdnDomainLogsRequest {
  s.PageNo = &v
  return s
}

type DescribeCdnDomainLogsResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PageNo *int64 `json:"PageNo" xml:"PageNo" require:"true"`
  PageSize *int64 `json:"PageSize" xml:"PageSize" require:"true"`
  Total *int64 `json:"Total" xml:"Total" require:"true"`
  DomainLogModel *DescribeCdnDomainLogsResponseDomainLogModel `json:"DomainLogModel" xml:"DomainLogModel" require:"true" type:"Struct"`
}

func (s DescribeCdnDomainLogsResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeCdnDomainLogsResponse) GoString() string {
  return s.String()
}

func (s *DescribeCdnDomainLogsResponse) SetRequestId(v string) *DescribeCdnDomainLogsResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeCdnDomainLogsResponse) SetPageNo(v int64) *DescribeCdnDomainLogsResponse {
  s.PageNo = &v
  return s
}

func (s *DescribeCdnDomainLogsResponse) SetPageSize(v int64) *DescribeCdnDomainLogsResponse {
  s.PageSize = &v
  return s
}

func (s *DescribeCdnDomainLogsResponse) SetTotal(v int64) *DescribeCdnDomainLogsResponse {
  s.Total = &v
  return s
}

func (s *DescribeCdnDomainLogsResponse) SetDomainLogModel(v *DescribeCdnDomainLogsResponseDomainLogModel) *DescribeCdnDomainLogsResponse {
  s.DomainLogModel = v
  return s
}

type DescribeCdnDomainLogsResponseDomainLogModel struct {
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  DomainLogDetails *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetails `json:"DomainLogDetails" xml:"DomainLogDetails" require:"true" type:"Struct"`
}

func (s DescribeCdnDomainLogsResponseDomainLogModel) String() string {
  return tea.Prettify(s)
}

func (s DescribeCdnDomainLogsResponseDomainLogModel) GoString() string {
  return s.String()
}

func (s *DescribeCdnDomainLogsResponseDomainLogModel) SetDomainName(v string) *DescribeCdnDomainLogsResponseDomainLogModel {
  s.DomainName = &v
  return s
}

func (s *DescribeCdnDomainLogsResponseDomainLogModel) SetDomainLogDetails(v *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetails) *DescribeCdnDomainLogsResponseDomainLogModel {
  s.DomainLogDetails = v
  return s
}

type DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetails struct {
  DomainLogDetail []*DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail `json:"DomainLogDetail" xml:"DomainLogDetail" require:"true" type:"Repeated"`
}

func (s DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetails) String() string {
  return tea.Prettify(s)
}

func (s DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetails) GoString() string {
  return s.String()
}

func (s *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetails) SetDomainLogDetail(v []*DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail) *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetails {
  s.DomainLogDetail = v
  return s
}

type DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail struct     {
  LogPath *string `json:"LogPath" xml:"LogPath" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
  LogSize *int64 `json:"LogSize" xml:"LogSize" require:"true"`
  LogName *string `json:"LogName" xml:"LogName" require:"true"`
}

func (s DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail) String() string {
  return tea.Prettify(s)
}

func (s DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail) GoString() string {
  return s.String()
}

func (s *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail) SetLogPath(v string) *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail {
  s.LogPath = &v
  return s
}

func (s *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail) SetStartTime(v string) *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail {
  s.StartTime = &v
  return s
}

func (s *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail) SetEndTime(v string) *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail {
  s.EndTime = &v
  return s
}

func (s *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail) SetLogSize(v int64) *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail {
  s.LogSize = &v
  return s
}

func (s *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail) SetLogName(v string) *DescribeCdnDomainLogsResponseDomainLogModelDomainLogDetailsDomainLogDetail {
  s.LogName = &v
  return s
}

type SubmitAIVideoSummaryJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  AIVideoSummaryConfig *string `json:"AIVideoSummaryConfig" xml:"AIVideoSummaryConfig"`
  UserData *string `json:"UserData" xml:"UserData"`
}

func (s SubmitAIVideoSummaryJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoSummaryJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoSummaryJobRequest) SetAccessKeyId(v string) *SubmitAIVideoSummaryJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitAIVideoSummaryJobRequest) SetOwnerId(v string) *SubmitAIVideoSummaryJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitAIVideoSummaryJobRequest) SetResourceOwnerId(v string) *SubmitAIVideoSummaryJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitAIVideoSummaryJobRequest) SetResourceOwnerAccount(v string) *SubmitAIVideoSummaryJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitAIVideoSummaryJobRequest) SetOwnerAccount(v string) *SubmitAIVideoSummaryJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SubmitAIVideoSummaryJobRequest) SetMediaId(v string) *SubmitAIVideoSummaryJobRequest {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoSummaryJobRequest) SetAIVideoSummaryConfig(v string) *SubmitAIVideoSummaryJobRequest {
  s.AIVideoSummaryConfig = &v
  return s
}

func (s *SubmitAIVideoSummaryJobRequest) SetUserData(v string) *SubmitAIVideoSummaryJobRequest {
  s.UserData = &v
  return s
}

type SubmitAIVideoSummaryJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoSummaryJob *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob `json:"AIVideoSummaryJob" xml:"AIVideoSummaryJob" require:"true" type:"Struct"`
}

func (s SubmitAIVideoSummaryJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoSummaryJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoSummaryJobResponse) SetRequestId(v string) *SubmitAIVideoSummaryJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitAIVideoSummaryJobResponse) SetAIVideoSummaryJob(v *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) *SubmitAIVideoSummaryJobResponse {
  s.AIVideoSummaryJob = v
  return s
}

type SubmitAIVideoSummaryJobResponseAIVideoSummaryJob struct {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) SetJobId(v string) *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob {
  s.JobId = &v
  return s
}

func (s *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) SetMediaId(v string) *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) SetStatus(v string) *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob {
  s.Status = &v
  return s
}

func (s *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) SetCode(v string) *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob {
  s.Code = &v
  return s
}

func (s *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) SetMessage(v string) *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob {
  s.Message = &v
  return s
}

func (s *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) SetCreationTime(v string) *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob {
  s.CreationTime = &v
  return s
}

func (s *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob) SetData(v string) *SubmitAIVideoSummaryJobResponseAIVideoSummaryJob {
  s.Data = &v
  return s
}

type ListAIVideoSummaryJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  AIVideoSummaryJobIds *string `json:"AIVideoSummaryJobIds" xml:"AIVideoSummaryJobIds" require:"true"`
}

func (s ListAIVideoSummaryJobRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoSummaryJobRequest) GoString() string {
  return s.String()
}

func (s *ListAIVideoSummaryJobRequest) SetAccessKeyId(v string) *ListAIVideoSummaryJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAIVideoSummaryJobRequest) SetOwnerId(v string) *ListAIVideoSummaryJobRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAIVideoSummaryJobRequest) SetResourceOwnerId(v string) *ListAIVideoSummaryJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAIVideoSummaryJobRequest) SetResourceOwnerAccount(v string) *ListAIVideoSummaryJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAIVideoSummaryJobRequest) SetOwnerAccount(v string) *ListAIVideoSummaryJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *ListAIVideoSummaryJobRequest) SetAIVideoSummaryJobIds(v string) *ListAIVideoSummaryJobRequest {
  s.AIVideoSummaryJobIds = &v
  return s
}

type ListAIVideoSummaryJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoSummaryJobList *ListAIVideoSummaryJobResponseAIVideoSummaryJobList `json:"AIVideoSummaryJobList" xml:"AIVideoSummaryJobList" require:"true" type:"Struct"`
  NonExistAIVideoSummaryJobIds *ListAIVideoSummaryJobResponseNonExistAIVideoSummaryJobIds `json:"NonExistAIVideoSummaryJobIds" xml:"NonExistAIVideoSummaryJobIds" require:"true" type:"Struct"`
}

func (s ListAIVideoSummaryJobResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoSummaryJobResponse) GoString() string {
  return s.String()
}

func (s *ListAIVideoSummaryJobResponse) SetRequestId(v string) *ListAIVideoSummaryJobResponse {
  s.RequestId = &v
  return s
}

func (s *ListAIVideoSummaryJobResponse) SetAIVideoSummaryJobList(v *ListAIVideoSummaryJobResponseAIVideoSummaryJobList) *ListAIVideoSummaryJobResponse {
  s.AIVideoSummaryJobList = v
  return s
}

func (s *ListAIVideoSummaryJobResponse) SetNonExistAIVideoSummaryJobIds(v *ListAIVideoSummaryJobResponseNonExistAIVideoSummaryJobIds) *ListAIVideoSummaryJobResponse {
  s.NonExistAIVideoSummaryJobIds = v
  return s
}

type ListAIVideoSummaryJobResponseAIVideoSummaryJobList struct {
  AIVideoSummaryJob []*ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob `json:"AIVideoSummaryJob" xml:"AIVideoSummaryJob" require:"true" type:"Repeated"`
}

func (s ListAIVideoSummaryJobResponseAIVideoSummaryJobList) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoSummaryJobResponseAIVideoSummaryJobList) GoString() string {
  return s.String()
}

func (s *ListAIVideoSummaryJobResponseAIVideoSummaryJobList) SetAIVideoSummaryJob(v []*ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) *ListAIVideoSummaryJobResponseAIVideoSummaryJobList {
  s.AIVideoSummaryJob = v
  return s
}

type ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) GoString() string {
  return s.String()
}

func (s *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) SetJobId(v string) *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob {
  s.JobId = &v
  return s
}

func (s *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) SetMediaId(v string) *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob {
  s.MediaId = &v
  return s
}

func (s *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) SetStatus(v string) *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob {
  s.Status = &v
  return s
}

func (s *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) SetCode(v string) *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob {
  s.Code = &v
  return s
}

func (s *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) SetMessage(v string) *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob {
  s.Message = &v
  return s
}

func (s *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) SetCreationTime(v string) *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob {
  s.CreationTime = &v
  return s
}

func (s *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob) SetData(v string) *ListAIVideoSummaryJobResponseAIVideoSummaryJobListAIVideoSummaryJob {
  s.Data = &v
  return s
}

type ListAIVideoSummaryJobResponseNonExistAIVideoSummaryJobIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s ListAIVideoSummaryJobResponseNonExistAIVideoSummaryJobIds) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoSummaryJobResponseNonExistAIVideoSummaryJobIds) GoString() string {
  return s.String()
}

func (s *ListAIVideoSummaryJobResponseNonExistAIVideoSummaryJobIds) SetString(v []*string) *ListAIVideoSummaryJobResponseNonExistAIVideoSummaryJobIds {
  s.String = v
  return s
}

type DescribeUserVvTopByDayRequest struct {
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  VideoType *string `json:"VideoType" xml:"VideoType" require:"true"`
  Bizdate *string `json:"Bizdate" xml:"Bizdate" require:"true"`
}

func (s DescribeUserVvTopByDayRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvTopByDayRequest) GoString() string {
  return s.String()
}

func (s *DescribeUserVvTopByDayRequest) SetSecurityToken(v string) *DescribeUserVvTopByDayRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeUserVvTopByDayRequest) SetOwnerId(v int64) *DescribeUserVvTopByDayRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeUserVvTopByDayRequest) SetVideoType(v string) *DescribeUserVvTopByDayRequest {
  s.VideoType = &v
  return s
}

func (s *DescribeUserVvTopByDayRequest) SetBizdate(v string) *DescribeUserVvTopByDayRequest {
  s.Bizdate = &v
  return s
}

type DescribeUserVvTopByDayResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UserPlayStatisticsInfos *DescribeUserVvTopByDayResponseUserPlayStatisticsInfos `json:"UserPlayStatisticsInfos" xml:"UserPlayStatisticsInfos" require:"true" type:"Struct"`
}

func (s DescribeUserVvTopByDayResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvTopByDayResponse) GoString() string {
  return s.String()
}

func (s *DescribeUserVvTopByDayResponse) SetRequestId(v string) *DescribeUserVvTopByDayResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeUserVvTopByDayResponse) SetUserPlayStatisticsInfos(v *DescribeUserVvTopByDayResponseUserPlayStatisticsInfos) *DescribeUserVvTopByDayResponse {
  s.UserPlayStatisticsInfos = v
  return s
}

type DescribeUserVvTopByDayResponseUserPlayStatisticsInfos struct {
  UserPlayStatisticsInfo []*DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo `json:"UserPlayStatisticsInfo" xml:"UserPlayStatisticsInfo" require:"true" type:"Repeated"`
}

func (s DescribeUserVvTopByDayResponseUserPlayStatisticsInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvTopByDayResponseUserPlayStatisticsInfos) GoString() string {
  return s.String()
}

func (s *DescribeUserVvTopByDayResponseUserPlayStatisticsInfos) SetUserPlayStatisticsInfo(v []*DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) *DescribeUserVvTopByDayResponseUserPlayStatisticsInfos {
  s.UserPlayStatisticsInfo = v
  return s
}

type DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo struct     {
  Count *string `json:"Count" xml:"Count" require:"true"`
  Videoid *string `json:"Videoid" xml:"Videoid" require:"true"`
  VideoName *string `json:"VideoName" xml:"VideoName" require:"true"`
}

func (s DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) GoString() string {
  return s.String()
}

func (s *DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetCount(v string) *DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Count = &v
  return s
}

func (s *DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetVideoid(v string) *DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Videoid = &v
  return s
}

func (s *DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetVideoName(v string) *DescribeUserVvTopByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.VideoName = &v
  return s
}

type DescribeUserVvByVideoidRequest struct {
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  Videoid *string `json:"Videoid" xml:"Videoid" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s DescribeUserVvByVideoidRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvByVideoidRequest) GoString() string {
  return s.String()
}

func (s *DescribeUserVvByVideoidRequest) SetSecurityToken(v string) *DescribeUserVvByVideoidRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeUserVvByVideoidRequest) SetOwnerId(v int64) *DescribeUserVvByVideoidRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeUserVvByVideoidRequest) SetVideoid(v string) *DescribeUserVvByVideoidRequest {
  s.Videoid = &v
  return s
}

func (s *DescribeUserVvByVideoidRequest) SetStartTime(v string) *DescribeUserVvByVideoidRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeUserVvByVideoidRequest) SetEndTime(v string) *DescribeUserVvByVideoidRequest {
  s.EndTime = &v
  return s
}

type DescribeUserVvByVideoidResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UserPlayStatisticsInfos *DescribeUserVvByVideoidResponseUserPlayStatisticsInfos `json:"UserPlayStatisticsInfos" xml:"UserPlayStatisticsInfos" require:"true" type:"Struct"`
}

func (s DescribeUserVvByVideoidResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvByVideoidResponse) GoString() string {
  return s.String()
}

func (s *DescribeUserVvByVideoidResponse) SetRequestId(v string) *DescribeUserVvByVideoidResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeUserVvByVideoidResponse) SetUserPlayStatisticsInfos(v *DescribeUserVvByVideoidResponseUserPlayStatisticsInfos) *DescribeUserVvByVideoidResponse {
  s.UserPlayStatisticsInfos = v
  return s
}

type DescribeUserVvByVideoidResponseUserPlayStatisticsInfos struct {
  UserPlayStatisticsInfo []*DescribeUserVvByVideoidResponseUserPlayStatisticsInfosUserPlayStatisticsInfo `json:"UserPlayStatisticsInfo" xml:"UserPlayStatisticsInfo" require:"true" type:"Repeated"`
}

func (s DescribeUserVvByVideoidResponseUserPlayStatisticsInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvByVideoidResponseUserPlayStatisticsInfos) GoString() string {
  return s.String()
}

func (s *DescribeUserVvByVideoidResponseUserPlayStatisticsInfos) SetUserPlayStatisticsInfo(v []*DescribeUserVvByVideoidResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) *DescribeUserVvByVideoidResponseUserPlayStatisticsInfos {
  s.UserPlayStatisticsInfo = v
  return s
}

type DescribeUserVvByVideoidResponseUserPlayStatisticsInfosUserPlayStatisticsInfo struct     {
  Date *string `json:"Date" xml:"Date" require:"true"`
  All *string `json:"All" xml:"All" require:"true"`
}

func (s DescribeUserVvByVideoidResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvByVideoidResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) GoString() string {
  return s.String()
}

func (s *DescribeUserVvByVideoidResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetDate(v string) *DescribeUserVvByVideoidResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Date = &v
  return s
}

func (s *DescribeUserVvByVideoidResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetAll(v string) *DescribeUserVvByVideoidResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.All = &v
  return s
}

type DescribeUserVvByDayRequest struct {
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  VideoType *string `json:"VideoType" xml:"VideoType" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s DescribeUserVvByDayRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvByDayRequest) GoString() string {
  return s.String()
}

func (s *DescribeUserVvByDayRequest) SetSecurityToken(v string) *DescribeUserVvByDayRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeUserVvByDayRequest) SetOwnerId(v int64) *DescribeUserVvByDayRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeUserVvByDayRequest) SetVideoType(v string) *DescribeUserVvByDayRequest {
  s.VideoType = &v
  return s
}

func (s *DescribeUserVvByDayRequest) SetStartTime(v string) *DescribeUserVvByDayRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeUserVvByDayRequest) SetEndTime(v string) *DescribeUserVvByDayRequest {
  s.EndTime = &v
  return s
}

type DescribeUserVvByDayResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UserPlayStatisticsInfos *DescribeUserVvByDayResponseUserPlayStatisticsInfos `json:"UserPlayStatisticsInfos" xml:"UserPlayStatisticsInfos" require:"true" type:"Struct"`
}

func (s DescribeUserVvByDayResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvByDayResponse) GoString() string {
  return s.String()
}

func (s *DescribeUserVvByDayResponse) SetRequestId(v string) *DescribeUserVvByDayResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeUserVvByDayResponse) SetUserPlayStatisticsInfos(v *DescribeUserVvByDayResponseUserPlayStatisticsInfos) *DescribeUserVvByDayResponse {
  s.UserPlayStatisticsInfos = v
  return s
}

type DescribeUserVvByDayResponseUserPlayStatisticsInfos struct {
  UserPlayStatisticsInfo []*DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo `json:"UserPlayStatisticsInfo" xml:"UserPlayStatisticsInfo" require:"true" type:"Repeated"`
}

func (s DescribeUserVvByDayResponseUserPlayStatisticsInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvByDayResponseUserPlayStatisticsInfos) GoString() string {
  return s.String()
}

func (s *DescribeUserVvByDayResponseUserPlayStatisticsInfos) SetUserPlayStatisticsInfo(v []*DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) *DescribeUserVvByDayResponseUserPlayStatisticsInfos {
  s.UserPlayStatisticsInfo = v
  return s
}

type DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo struct     {
  Date *string `json:"Date" xml:"Date" require:"true"`
  Android *string `json:"Android" xml:"Android" require:"true"`
  Ios *string `json:"Ios" xml:"Ios" require:"true"`
  H5 *string `json:"H5" xml:"H5" require:"true"`
  Flash *string `json:"Flash" xml:"Flash" require:"true"`
}

func (s DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) GoString() string {
  return s.String()
}

func (s *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetDate(v string) *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Date = &v
  return s
}

func (s *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetAndroid(v string) *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Android = &v
  return s
}

func (s *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetIos(v string) *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Ios = &v
  return s
}

func (s *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetH5(v string) *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.H5 = &v
  return s
}

func (s *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetFlash(v string) *DescribeUserVvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Flash = &v
  return s
}

type DescribeUserUvByDayRequest struct {
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  VideoType *string `json:"VideoType" xml:"VideoType" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s DescribeUserUvByDayRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserUvByDayRequest) GoString() string {
  return s.String()
}

func (s *DescribeUserUvByDayRequest) SetSecurityToken(v string) *DescribeUserUvByDayRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeUserUvByDayRequest) SetOwnerId(v int64) *DescribeUserUvByDayRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeUserUvByDayRequest) SetVideoType(v string) *DescribeUserUvByDayRequest {
  s.VideoType = &v
  return s
}

func (s *DescribeUserUvByDayRequest) SetStartTime(v string) *DescribeUserUvByDayRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeUserUvByDayRequest) SetEndTime(v string) *DescribeUserUvByDayRequest {
  s.EndTime = &v
  return s
}

type DescribeUserUvByDayResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UserPlayStatisticsInfos *DescribeUserUvByDayResponseUserPlayStatisticsInfos `json:"UserPlayStatisticsInfos" xml:"UserPlayStatisticsInfos" require:"true" type:"Struct"`
}

func (s DescribeUserUvByDayResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserUvByDayResponse) GoString() string {
  return s.String()
}

func (s *DescribeUserUvByDayResponse) SetRequestId(v string) *DescribeUserUvByDayResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeUserUvByDayResponse) SetUserPlayStatisticsInfos(v *DescribeUserUvByDayResponseUserPlayStatisticsInfos) *DescribeUserUvByDayResponse {
  s.UserPlayStatisticsInfos = v
  return s
}

type DescribeUserUvByDayResponseUserPlayStatisticsInfos struct {
  UserPlayStatisticsInfo []*DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo `json:"UserPlayStatisticsInfo" xml:"UserPlayStatisticsInfo" require:"true" type:"Repeated"`
}

func (s DescribeUserUvByDayResponseUserPlayStatisticsInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserUvByDayResponseUserPlayStatisticsInfos) GoString() string {
  return s.String()
}

func (s *DescribeUserUvByDayResponseUserPlayStatisticsInfos) SetUserPlayStatisticsInfo(v []*DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) *DescribeUserUvByDayResponseUserPlayStatisticsInfos {
  s.UserPlayStatisticsInfo = v
  return s
}

type DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo struct     {
  Date *string `json:"Date" xml:"Date" require:"true"`
  Android *string `json:"Android" xml:"Android" require:"true"`
  Ios *string `json:"Ios" xml:"Ios" require:"true"`
  H5 *string `json:"H5" xml:"H5" require:"true"`
  Flash *string `json:"Flash" xml:"Flash" require:"true"`
}

func (s DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) GoString() string {
  return s.String()
}

func (s *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetDate(v string) *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Date = &v
  return s
}

func (s *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetAndroid(v string) *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Android = &v
  return s
}

func (s *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetIos(v string) *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Ios = &v
  return s
}

func (s *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetH5(v string) *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.H5 = &v
  return s
}

func (s *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetFlash(v string) *DescribeUserUvByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Flash = &v
  return s
}

type DescribeUserTimeRangeByDayRequest struct {
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  VideoType *string `json:"VideoType" xml:"VideoType" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s DescribeUserTimeRangeByDayRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserTimeRangeByDayRequest) GoString() string {
  return s.String()
}

func (s *DescribeUserTimeRangeByDayRequest) SetSecurityToken(v string) *DescribeUserTimeRangeByDayRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeUserTimeRangeByDayRequest) SetOwnerId(v int64) *DescribeUserTimeRangeByDayRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeUserTimeRangeByDayRequest) SetVideoType(v string) *DescribeUserTimeRangeByDayRequest {
  s.VideoType = &v
  return s
}

func (s *DescribeUserTimeRangeByDayRequest) SetStartTime(v string) *DescribeUserTimeRangeByDayRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeUserTimeRangeByDayRequest) SetEndTime(v string) *DescribeUserTimeRangeByDayRequest {
  s.EndTime = &v
  return s
}

type DescribeUserTimeRangeByDayResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UserPlayStatisticsInfos *DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfos `json:"UserPlayStatisticsInfos" xml:"UserPlayStatisticsInfos" require:"true" type:"Struct"`
}

func (s DescribeUserTimeRangeByDayResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserTimeRangeByDayResponse) GoString() string {
  return s.String()
}

func (s *DescribeUserTimeRangeByDayResponse) SetRequestId(v string) *DescribeUserTimeRangeByDayResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeUserTimeRangeByDayResponse) SetUserPlayStatisticsInfos(v *DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfos) *DescribeUserTimeRangeByDayResponse {
  s.UserPlayStatisticsInfos = v
  return s
}

type DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfos struct {
  UserPlayStatisticsInfo []*DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo `json:"UserPlayStatisticsInfo" xml:"UserPlayStatisticsInfo" require:"true" type:"Repeated"`
}

func (s DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfos) GoString() string {
  return s.String()
}

func (s *DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfos) SetUserPlayStatisticsInfo(v []*DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) *DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfos {
  s.UserPlayStatisticsInfo = v
  return s
}

type DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo struct     {
  Date *string `json:"Date" xml:"Date" require:"true"`
  All *string `json:"All" xml:"All" require:"true"`
}

func (s DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) GoString() string {
  return s.String()
}

func (s *DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetDate(v string) *DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Date = &v
  return s
}

func (s *DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetAll(v string) *DescribeUserTimeRangeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.All = &v
  return s
}

type DescribeUserAvgTimeByDayRequest struct {
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  VideoType *string `json:"VideoType" xml:"VideoType" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s DescribeUserAvgTimeByDayRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserAvgTimeByDayRequest) GoString() string {
  return s.String()
}

func (s *DescribeUserAvgTimeByDayRequest) SetSecurityToken(v string) *DescribeUserAvgTimeByDayRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeUserAvgTimeByDayRequest) SetOwnerId(v int64) *DescribeUserAvgTimeByDayRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeUserAvgTimeByDayRequest) SetVideoType(v string) *DescribeUserAvgTimeByDayRequest {
  s.VideoType = &v
  return s
}

func (s *DescribeUserAvgTimeByDayRequest) SetStartTime(v string) *DescribeUserAvgTimeByDayRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeUserAvgTimeByDayRequest) SetEndTime(v string) *DescribeUserAvgTimeByDayRequest {
  s.EndTime = &v
  return s
}

type DescribeUserAvgTimeByDayResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UserPlayStatisticsInfos *DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfos `json:"UserPlayStatisticsInfos" xml:"UserPlayStatisticsInfos" require:"true" type:"Struct"`
}

func (s DescribeUserAvgTimeByDayResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserAvgTimeByDayResponse) GoString() string {
  return s.String()
}

func (s *DescribeUserAvgTimeByDayResponse) SetRequestId(v string) *DescribeUserAvgTimeByDayResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeUserAvgTimeByDayResponse) SetUserPlayStatisticsInfos(v *DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfos) *DescribeUserAvgTimeByDayResponse {
  s.UserPlayStatisticsInfos = v
  return s
}

type DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfos struct {
  UserPlayStatisticsInfo []*DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo `json:"UserPlayStatisticsInfo" xml:"UserPlayStatisticsInfo" require:"true" type:"Repeated"`
}

func (s DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfos) GoString() string {
  return s.String()
}

func (s *DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfos) SetUserPlayStatisticsInfo(v []*DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) *DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfos {
  s.UserPlayStatisticsInfo = v
  return s
}

type DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo struct     {
  Date *string `json:"Date" xml:"Date" require:"true"`
  All *string `json:"All" xml:"All" require:"true"`
}

func (s DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) GoString() string {
  return s.String()
}

func (s *DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetDate(v string) *DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Date = &v
  return s
}

func (s *DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetAll(v string) *DescribeUserAvgTimeByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.All = &v
  return s
}

type DescribeUserAvgCountByDayRequest struct {
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  VideoType *string `json:"VideoType" xml:"VideoType" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *string `json:"EndTime" xml:"EndTime" require:"true"`
}

func (s DescribeUserAvgCountByDayRequest) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserAvgCountByDayRequest) GoString() string {
  return s.String()
}

func (s *DescribeUserAvgCountByDayRequest) SetSecurityToken(v string) *DescribeUserAvgCountByDayRequest {
  s.SecurityToken = &v
  return s
}

func (s *DescribeUserAvgCountByDayRequest) SetOwnerId(v int64) *DescribeUserAvgCountByDayRequest {
  s.OwnerId = &v
  return s
}

func (s *DescribeUserAvgCountByDayRequest) SetVideoType(v string) *DescribeUserAvgCountByDayRequest {
  s.VideoType = &v
  return s
}

func (s *DescribeUserAvgCountByDayRequest) SetStartTime(v string) *DescribeUserAvgCountByDayRequest {
  s.StartTime = &v
  return s
}

func (s *DescribeUserAvgCountByDayRequest) SetEndTime(v string) *DescribeUserAvgCountByDayRequest {
  s.EndTime = &v
  return s
}

type DescribeUserAvgCountByDayResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UserPlayStatisticsInfos *DescribeUserAvgCountByDayResponseUserPlayStatisticsInfos `json:"UserPlayStatisticsInfos" xml:"UserPlayStatisticsInfos" require:"true" type:"Struct"`
}

func (s DescribeUserAvgCountByDayResponse) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserAvgCountByDayResponse) GoString() string {
  return s.String()
}

func (s *DescribeUserAvgCountByDayResponse) SetRequestId(v string) *DescribeUserAvgCountByDayResponse {
  s.RequestId = &v
  return s
}

func (s *DescribeUserAvgCountByDayResponse) SetUserPlayStatisticsInfos(v *DescribeUserAvgCountByDayResponseUserPlayStatisticsInfos) *DescribeUserAvgCountByDayResponse {
  s.UserPlayStatisticsInfos = v
  return s
}

type DescribeUserAvgCountByDayResponseUserPlayStatisticsInfos struct {
  UserPlayStatisticsInfo []*DescribeUserAvgCountByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo `json:"UserPlayStatisticsInfo" xml:"UserPlayStatisticsInfo" require:"true" type:"Repeated"`
}

func (s DescribeUserAvgCountByDayResponseUserPlayStatisticsInfos) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserAvgCountByDayResponseUserPlayStatisticsInfos) GoString() string {
  return s.String()
}

func (s *DescribeUserAvgCountByDayResponseUserPlayStatisticsInfos) SetUserPlayStatisticsInfo(v []*DescribeUserAvgCountByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) *DescribeUserAvgCountByDayResponseUserPlayStatisticsInfos {
  s.UserPlayStatisticsInfo = v
  return s
}

type DescribeUserAvgCountByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo struct     {
  Date *string `json:"Date" xml:"Date" require:"true"`
  All *string `json:"All" xml:"All" require:"true"`
}

func (s DescribeUserAvgCountByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) String() string {
  return tea.Prettify(s)
}

func (s DescribeUserAvgCountByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) GoString() string {
  return s.String()
}

func (s *DescribeUserAvgCountByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetDate(v string) *DescribeUserAvgCountByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.Date = &v
  return s
}

func (s *DescribeUserAvgCountByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo) SetAll(v string) *DescribeUserAvgCountByDayResponseUserPlayStatisticsInfosUserPlayStatisticsInfo {
  s.All = &v
  return s
}

type SetDefaultTemplateGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
}

func (s SetDefaultTemplateGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultTemplateGroupRequest) GoString() string {
  return s.String()
}

func (s *SetDefaultTemplateGroupRequest) SetAccessKeyId(v string) *SetDefaultTemplateGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetDefaultTemplateGroupRequest) SetOwnerId(v int64) *SetDefaultTemplateGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *SetDefaultTemplateGroupRequest) SetResourceOwnerAccount(v string) *SetDefaultTemplateGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetDefaultTemplateGroupRequest) SetResourceOwnerId(v int64) *SetDefaultTemplateGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetDefaultTemplateGroupRequest) SetGroupId(v string) *SetDefaultTemplateGroupRequest {
  s.GroupId = &v
  return s
}

type SetDefaultTemplateGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s SetDefaultTemplateGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultTemplateGroupResponse) GoString() string {
  return s.String()
}

func (s *SetDefaultTemplateGroupResponse) SetRequestId(v string) *SetDefaultTemplateGroupResponse {
  s.RequestId = &v
  return s
}

func (s *SetDefaultTemplateGroupResponse) SetResult(v bool) *SetDefaultTemplateGroupResponse {
  s.Result = &v
  return s
}

type SubmitAIASRJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  AIASRConfig *string `json:"AIASRConfig" xml:"AIASRConfig"`
  UserData *string `json:"UserData" xml:"UserData"`
}

func (s SubmitAIASRJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIASRJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitAIASRJobRequest) SetAccessKeyId(v string) *SubmitAIASRJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitAIASRJobRequest) SetOwnerId(v string) *SubmitAIASRJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitAIASRJobRequest) SetResourceOwnerId(v string) *SubmitAIASRJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitAIASRJobRequest) SetResourceOwnerAccount(v string) *SubmitAIASRJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitAIASRJobRequest) SetOwnerAccount(v string) *SubmitAIASRJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SubmitAIASRJobRequest) SetMediaId(v string) *SubmitAIASRJobRequest {
  s.MediaId = &v
  return s
}

func (s *SubmitAIASRJobRequest) SetAIASRConfig(v string) *SubmitAIASRJobRequest {
  s.AIASRConfig = &v
  return s
}

func (s *SubmitAIASRJobRequest) SetUserData(v string) *SubmitAIASRJobRequest {
  s.UserData = &v
  return s
}

type SubmitAIASRJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIASRJob *SubmitAIASRJobResponseAIASRJob `json:"AIASRJob" xml:"AIASRJob" require:"true" type:"Struct"`
}

func (s SubmitAIASRJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIASRJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitAIASRJobResponse) SetRequestId(v string) *SubmitAIASRJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitAIASRJobResponse) SetAIASRJob(v *SubmitAIASRJobResponseAIASRJob) *SubmitAIASRJobResponse {
  s.AIASRJob = v
  return s
}

type SubmitAIASRJobResponseAIASRJob struct {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s SubmitAIASRJobResponseAIASRJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIASRJobResponseAIASRJob) GoString() string {
  return s.String()
}

func (s *SubmitAIASRJobResponseAIASRJob) SetJobId(v string) *SubmitAIASRJobResponseAIASRJob {
  s.JobId = &v
  return s
}

func (s *SubmitAIASRJobResponseAIASRJob) SetMediaId(v string) *SubmitAIASRJobResponseAIASRJob {
  s.MediaId = &v
  return s
}

func (s *SubmitAIASRJobResponseAIASRJob) SetStatus(v string) *SubmitAIASRJobResponseAIASRJob {
  s.Status = &v
  return s
}

func (s *SubmitAIASRJobResponseAIASRJob) SetCode(v string) *SubmitAIASRJobResponseAIASRJob {
  s.Code = &v
  return s
}

func (s *SubmitAIASRJobResponseAIASRJob) SetMessage(v string) *SubmitAIASRJobResponseAIASRJob {
  s.Message = &v
  return s
}

func (s *SubmitAIASRJobResponseAIASRJob) SetCreationTime(v string) *SubmitAIASRJobResponseAIASRJob {
  s.CreationTime = &v
  return s
}

func (s *SubmitAIASRJobResponseAIASRJob) SetData(v string) *SubmitAIASRJobResponseAIASRJob {
  s.Data = &v
  return s
}

type ListAIASRJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  AIASRJobIds *string `json:"AIASRJobIds" xml:"AIASRJobIds" require:"true"`
}

func (s ListAIASRJobRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAIASRJobRequest) GoString() string {
  return s.String()
}

func (s *ListAIASRJobRequest) SetAccessKeyId(v string) *ListAIASRJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAIASRJobRequest) SetOwnerId(v string) *ListAIASRJobRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAIASRJobRequest) SetResourceOwnerId(v string) *ListAIASRJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAIASRJobRequest) SetResourceOwnerAccount(v string) *ListAIASRJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAIASRJobRequest) SetOwnerAccount(v string) *ListAIASRJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *ListAIASRJobRequest) SetAIASRJobIds(v string) *ListAIASRJobRequest {
  s.AIASRJobIds = &v
  return s
}

type ListAIASRJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIASRJobList *ListAIASRJobResponseAIASRJobList `json:"AIASRJobList" xml:"AIASRJobList" require:"true" type:"Struct"`
  NonExistAIASRJobIds *ListAIASRJobResponseNonExistAIASRJobIds `json:"NonExistAIASRJobIds" xml:"NonExistAIASRJobIds" require:"true" type:"Struct"`
}

func (s ListAIASRJobResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAIASRJobResponse) GoString() string {
  return s.String()
}

func (s *ListAIASRJobResponse) SetRequestId(v string) *ListAIASRJobResponse {
  s.RequestId = &v
  return s
}

func (s *ListAIASRJobResponse) SetAIASRJobList(v *ListAIASRJobResponseAIASRJobList) *ListAIASRJobResponse {
  s.AIASRJobList = v
  return s
}

func (s *ListAIASRJobResponse) SetNonExistAIASRJobIds(v *ListAIASRJobResponseNonExistAIASRJobIds) *ListAIASRJobResponse {
  s.NonExistAIASRJobIds = v
  return s
}

type ListAIASRJobResponseAIASRJobList struct {
  AIASRJob []*ListAIASRJobResponseAIASRJobListAIASRJob `json:"AIASRJob" xml:"AIASRJob" require:"true" type:"Repeated"`
}

func (s ListAIASRJobResponseAIASRJobList) String() string {
  return tea.Prettify(s)
}

func (s ListAIASRJobResponseAIASRJobList) GoString() string {
  return s.String()
}

func (s *ListAIASRJobResponseAIASRJobList) SetAIASRJob(v []*ListAIASRJobResponseAIASRJobListAIASRJob) *ListAIASRJobResponseAIASRJobList {
  s.AIASRJob = v
  return s
}

type ListAIASRJobResponseAIASRJobListAIASRJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s ListAIASRJobResponseAIASRJobListAIASRJob) String() string {
  return tea.Prettify(s)
}

func (s ListAIASRJobResponseAIASRJobListAIASRJob) GoString() string {
  return s.String()
}

func (s *ListAIASRJobResponseAIASRJobListAIASRJob) SetJobId(v string) *ListAIASRJobResponseAIASRJobListAIASRJob {
  s.JobId = &v
  return s
}

func (s *ListAIASRJobResponseAIASRJobListAIASRJob) SetMediaId(v string) *ListAIASRJobResponseAIASRJobListAIASRJob {
  s.MediaId = &v
  return s
}

func (s *ListAIASRJobResponseAIASRJobListAIASRJob) SetStatus(v string) *ListAIASRJobResponseAIASRJobListAIASRJob {
  s.Status = &v
  return s
}

func (s *ListAIASRJobResponseAIASRJobListAIASRJob) SetCode(v string) *ListAIASRJobResponseAIASRJobListAIASRJob {
  s.Code = &v
  return s
}

func (s *ListAIASRJobResponseAIASRJobListAIASRJob) SetMessage(v string) *ListAIASRJobResponseAIASRJobListAIASRJob {
  s.Message = &v
  return s
}

func (s *ListAIASRJobResponseAIASRJobListAIASRJob) SetCreationTime(v string) *ListAIASRJobResponseAIASRJobListAIASRJob {
  s.CreationTime = &v
  return s
}

func (s *ListAIASRJobResponseAIASRJobListAIASRJob) SetData(v string) *ListAIASRJobResponseAIASRJobListAIASRJob {
  s.Data = &v
  return s
}

type ListAIASRJobResponseNonExistAIASRJobIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s ListAIASRJobResponseNonExistAIASRJobIds) String() string {
  return tea.Prettify(s)
}

func (s ListAIASRJobResponseNonExistAIASRJobIds) GoString() string {
  return s.String()
}

func (s *ListAIASRJobResponseNonExistAIASRJobIds) SetString(v []*string) *ListAIASRJobResponseNonExistAIASRJobIds {
  s.String = v
  return s
}

type GetMezzanineInfoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  AuthTimeout *int64 `json:"AuthTimeout" xml:"AuthTimeout"`
  OutputType *string `json:"OutputType" xml:"OutputType"`
  AdditionType *string `json:"AdditionType" xml:"AdditionType"`
}

func (s GetMezzanineInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMezzanineInfoRequest) GoString() string {
  return s.String()
}

func (s *GetMezzanineInfoRequest) SetOwnerId(v int64) *GetMezzanineInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMezzanineInfoRequest) SetResourceOwnerAccount(v string) *GetMezzanineInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMezzanineInfoRequest) SetResourceOwnerId(v int64) *GetMezzanineInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMezzanineInfoRequest) SetResourceRealOwnerId(v int64) *GetMezzanineInfoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetMezzanineInfoRequest) SetVideoId(v string) *GetMezzanineInfoRequest {
  s.VideoId = &v
  return s
}

func (s *GetMezzanineInfoRequest) SetAuthTimeout(v int64) *GetMezzanineInfoRequest {
  s.AuthTimeout = &v
  return s
}

func (s *GetMezzanineInfoRequest) SetOutputType(v string) *GetMezzanineInfoRequest {
  s.OutputType = &v
  return s
}

func (s *GetMezzanineInfoRequest) SetAdditionType(v string) *GetMezzanineInfoRequest {
  s.AdditionType = &v
  return s
}

type GetMezzanineInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Mezzanine *GetMezzanineInfoResponseMezzanine `json:"Mezzanine" xml:"Mezzanine" require:"true" type:"Struct"`
}

func (s GetMezzanineInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMezzanineInfoResponse) GoString() string {
  return s.String()
}

func (s *GetMezzanineInfoResponse) SetRequestId(v string) *GetMezzanineInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetMezzanineInfoResponse) SetMezzanine(v *GetMezzanineInfoResponseMezzanine) *GetMezzanineInfoResponse {
  s.Mezzanine = v
  return s
}

type GetMezzanineInfoResponseMezzanine struct {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Height *int64 `json:"Height" xml:"Height" require:"true"`
  Width *int64 `json:"Width" xml:"Width" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  FileURL *string `json:"FileURL" xml:"FileURL" require:"true"`
  FileName *string `json:"FileName" xml:"FileName" require:"true"`
  CRC64 *string `json:"CRC64" xml:"CRC64" require:"true"`
  PreprocessStatus *string `json:"PreprocessStatus" xml:"PreprocessStatus" require:"true"`
  OutputType *string `json:"OutputType" xml:"OutputType" require:"true"`
  AudioStreamList []*GetMezzanineInfoResponseMezzanineAudioStreamList `json:"AudioStreamList" xml:"AudioStreamList" require:"true" type:"Repeated"`
  VideoStreamList []*GetMezzanineInfoResponseMezzanineVideoStreamList `json:"VideoStreamList" xml:"VideoStreamList" require:"true" type:"Repeated"`
}

func (s GetMezzanineInfoResponseMezzanine) String() string {
  return tea.Prettify(s)
}

func (s GetMezzanineInfoResponseMezzanine) GoString() string {
  return s.String()
}

func (s *GetMezzanineInfoResponseMezzanine) SetVideoId(v string) *GetMezzanineInfoResponseMezzanine {
  s.VideoId = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetBitrate(v string) *GetMezzanineInfoResponseMezzanine {
  s.Bitrate = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetCreationTime(v string) *GetMezzanineInfoResponseMezzanine {
  s.CreationTime = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetDuration(v string) *GetMezzanineInfoResponseMezzanine {
  s.Duration = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetFps(v string) *GetMezzanineInfoResponseMezzanine {
  s.Fps = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetHeight(v int64) *GetMezzanineInfoResponseMezzanine {
  s.Height = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetWidth(v int64) *GetMezzanineInfoResponseMezzanine {
  s.Width = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetSize(v int64) *GetMezzanineInfoResponseMezzanine {
  s.Size = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetStatus(v string) *GetMezzanineInfoResponseMezzanine {
  s.Status = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetFileURL(v string) *GetMezzanineInfoResponseMezzanine {
  s.FileURL = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetFileName(v string) *GetMezzanineInfoResponseMezzanine {
  s.FileName = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetCRC64(v string) *GetMezzanineInfoResponseMezzanine {
  s.CRC64 = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetPreprocessStatus(v string) *GetMezzanineInfoResponseMezzanine {
  s.PreprocessStatus = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetOutputType(v string) *GetMezzanineInfoResponseMezzanine {
  s.OutputType = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetAudioStreamList(v []*GetMezzanineInfoResponseMezzanineAudioStreamList) *GetMezzanineInfoResponseMezzanine {
  s.AudioStreamList = v
  return s
}

func (s *GetMezzanineInfoResponseMezzanine) SetVideoStreamList(v []*GetMezzanineInfoResponseMezzanineVideoStreamList) *GetMezzanineInfoResponseMezzanine {
  s.VideoStreamList = v
  return s
}

type GetMezzanineInfoResponseMezzanineAudioStreamList struct     {
  Index *string `json:"Index" xml:"Index" require:"true"`
  CodecName *string `json:"CodecName" xml:"CodecName" require:"true"`
  CodecLongName *string `json:"CodecLongName" xml:"CodecLongName" require:"true"`
  CodecTimeBase *string `json:"CodecTimeBase" xml:"CodecTimeBase" require:"true"`
  CodecTagString *string `json:"CodecTagString" xml:"CodecTagString" require:"true"`
  CodecTag *string `json:"CodecTag" xml:"CodecTag" require:"true"`
  SampleFmt *string `json:"SampleFmt" xml:"SampleFmt" require:"true"`
  SampleRate *string `json:"SampleRate" xml:"SampleRate" require:"true"`
  Channels *string `json:"Channels" xml:"Channels" require:"true"`
  ChannelLayout *string `json:"ChannelLayout" xml:"ChannelLayout" require:"true"`
  Timebase *string `json:"Timebase" xml:"Timebase" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  NumFrames *string `json:"NumFrames" xml:"NumFrames" require:"true"`
  Lang *string `json:"Lang" xml:"Lang" require:"true"`
}

func (s GetMezzanineInfoResponseMezzanineAudioStreamList) String() string {
  return tea.Prettify(s)
}

func (s GetMezzanineInfoResponseMezzanineAudioStreamList) GoString() string {
  return s.String()
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetIndex(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.Index = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetCodecName(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.CodecName = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetCodecLongName(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.CodecLongName = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetCodecTimeBase(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.CodecTimeBase = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetCodecTagString(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.CodecTagString = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetCodecTag(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.CodecTag = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetSampleFmt(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.SampleFmt = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetSampleRate(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.SampleRate = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetChannels(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.Channels = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetChannelLayout(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.ChannelLayout = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetTimebase(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.Timebase = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetStartTime(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.StartTime = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetDuration(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.Duration = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetBitrate(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.Bitrate = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetNumFrames(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.NumFrames = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineAudioStreamList) SetLang(v string) *GetMezzanineInfoResponseMezzanineAudioStreamList {
  s.Lang = &v
  return s
}

type GetMezzanineInfoResponseMezzanineVideoStreamList struct     {
  Index *string `json:"Index" xml:"Index" require:"true"`
  CodecName *string `json:"CodecName" xml:"CodecName" require:"true"`
  CodecLongName *string `json:"CodecLongName" xml:"CodecLongName" require:"true"`
  Profile *string `json:"Profile" xml:"Profile" require:"true"`
  CodecTimeBase *string `json:"CodecTimeBase" xml:"CodecTimeBase" require:"true"`
  CodecTagString *string `json:"CodecTagString" xml:"CodecTagString" require:"true"`
  CodecTag *string `json:"CodecTag" xml:"CodecTag" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  HasBFrames *string `json:"HasBFrames" xml:"HasBFrames" require:"true"`
  Sar *string `json:"Sar" xml:"Sar" require:"true"`
  Dar *string `json:"Dar" xml:"Dar" require:"true"`
  PixFmt *string `json:"PixFmt" xml:"PixFmt" require:"true"`
  Level *string `json:"Level" xml:"Level" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  AvgFPS *string `json:"AvgFPS" xml:"AvgFPS" require:"true"`
  Timebase *string `json:"Timebase" xml:"Timebase" require:"true"`
  StartTime *string `json:"StartTime" xml:"StartTime" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  NumFrames *string `json:"NumFrames" xml:"NumFrames" require:"true"`
  Lang *string `json:"Lang" xml:"Lang" require:"true"`
}

func (s GetMezzanineInfoResponseMezzanineVideoStreamList) String() string {
  return tea.Prettify(s)
}

func (s GetMezzanineInfoResponseMezzanineVideoStreamList) GoString() string {
  return s.String()
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetIndex(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Index = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetCodecName(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.CodecName = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetCodecLongName(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.CodecLongName = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetProfile(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Profile = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetCodecTimeBase(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.CodecTimeBase = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetCodecTagString(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.CodecTagString = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetCodecTag(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.CodecTag = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetWidth(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Width = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetHeight(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Height = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetHasBFrames(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.HasBFrames = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetSar(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Sar = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetDar(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Dar = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetPixFmt(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.PixFmt = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetLevel(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Level = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetFps(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Fps = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetAvgFPS(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.AvgFPS = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetTimebase(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Timebase = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetStartTime(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.StartTime = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetDuration(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Duration = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetNumFrames(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.NumFrames = &v
  return s
}

func (s *GetMezzanineInfoResponseMezzanineVideoStreamList) SetLang(v string) *GetMezzanineInfoResponseMezzanineVideoStreamList {
  s.Lang = &v
  return s
}

type UpdateTemplateGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
  ToNeedTranscode *string `json:"ToNeedTranscode" xml:"ToNeedTranscode"`
}

func (s UpdateTemplateGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateTemplateGroupRequest) GoString() string {
  return s.String()
}

func (s *UpdateTemplateGroupRequest) SetAccessKeyId(v string) *UpdateTemplateGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateTemplateGroupRequest) SetOwnerId(v int64) *UpdateTemplateGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateTemplateGroupRequest) SetResourceOwnerAccount(v string) *UpdateTemplateGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateTemplateGroupRequest) SetResourceOwnerId(v int64) *UpdateTemplateGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateTemplateGroupRequest) SetName(v string) *UpdateTemplateGroupRequest {
  s.Name = &v
  return s
}

func (s *UpdateTemplateGroupRequest) SetGroupId(v string) *UpdateTemplateGroupRequest {
  s.GroupId = &v
  return s
}

func (s *UpdateTemplateGroupRequest) SetToNeedTranscode(v string) *UpdateTemplateGroupRequest {
  s.ToNeedTranscode = &v
  return s
}

type UpdateTemplateGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s UpdateTemplateGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateTemplateGroupResponse) GoString() string {
  return s.String()
}

func (s *UpdateTemplateGroupResponse) SetRequestId(v string) *UpdateTemplateGroupResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateTemplateGroupResponse) SetResult(v bool) *UpdateTemplateGroupResponse {
  s.Result = &v
  return s
}

type UpdateCustomTemplateAndGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  Configs *string `json:"Configs" xml:"Configs"`
}

func (s UpdateCustomTemplateAndGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateCustomTemplateAndGroupRequest) GoString() string {
  return s.String()
}

func (s *UpdateCustomTemplateAndGroupRequest) SetAccessKeyId(v string) *UpdateCustomTemplateAndGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateCustomTemplateAndGroupRequest) SetOwnerId(v int64) *UpdateCustomTemplateAndGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateCustomTemplateAndGroupRequest) SetResourceOwnerAccount(v string) *UpdateCustomTemplateAndGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateCustomTemplateAndGroupRequest) SetResourceOwnerId(v int64) *UpdateCustomTemplateAndGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateCustomTemplateAndGroupRequest) SetResourceRealOwnerId(v int64) *UpdateCustomTemplateAndGroupRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *UpdateCustomTemplateAndGroupRequest) SetConfigs(v string) *UpdateCustomTemplateAndGroupRequest {
  s.Configs = &v
  return s
}

type UpdateCustomTemplateAndGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s UpdateCustomTemplateAndGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateCustomTemplateAndGroupResponse) GoString() string {
  return s.String()
}

func (s *UpdateCustomTemplateAndGroupResponse) SetRequestId(v string) *UpdateCustomTemplateAndGroupResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateCustomTemplateAndGroupResponse) SetResult(v bool) *UpdateCustomTemplateAndGroupResponse {
  s.Result = &v
  return s
}

type UpdateCustomTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  GroupId *string `json:"GroupId" xml:"GroupId"`
  Video *string `json:"Video" xml:"Video" require:"true"`
  Audio *string `json:"Audio" xml:"Audio" require:"true"`
  TransConfig *string `json:"TransConfig" xml:"TransConfig"`
  MuxConfig *string `json:"MuxConfig" xml:"MuxConfig"`
  Container *string `json:"Container" xml:"Container" require:"true"`
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  UseWaterMark *string `json:"UseWaterMark" xml:"UseWaterMark"`
  Encrypt *string `json:"Encrypt" xml:"Encrypt"`
  Condition *string `json:"Condition" xml:"Condition"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  NarrowBand *string `json:"NarrowBand" xml:"NarrowBand"`
}

func (s UpdateCustomTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateCustomTemplateRequest) GoString() string {
  return s.String()
}

func (s *UpdateCustomTemplateRequest) SetAccessKeyId(v string) *UpdateCustomTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetOwnerId(v int64) *UpdateCustomTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetResourceOwnerAccount(v string) *UpdateCustomTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetResourceOwnerId(v int64) *UpdateCustomTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetGroupId(v string) *UpdateCustomTemplateRequest {
  s.GroupId = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetVideo(v string) *UpdateCustomTemplateRequest {
  s.Video = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetAudio(v string) *UpdateCustomTemplateRequest {
  s.Audio = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetTransConfig(v string) *UpdateCustomTemplateRequest {
  s.TransConfig = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetMuxConfig(v string) *UpdateCustomTemplateRequest {
  s.MuxConfig = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetContainer(v string) *UpdateCustomTemplateRequest {
  s.Container = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetDefinition(v string) *UpdateCustomTemplateRequest {
  s.Definition = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetUseWaterMark(v string) *UpdateCustomTemplateRequest {
  s.UseWaterMark = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetEncrypt(v string) *UpdateCustomTemplateRequest {
  s.Encrypt = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetCondition(v string) *UpdateCustomTemplateRequest {
  s.Condition = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetTemplateId(v string) *UpdateCustomTemplateRequest {
  s.TemplateId = &v
  return s
}

func (s *UpdateCustomTemplateRequest) SetNarrowBand(v string) *UpdateCustomTemplateRequest {
  s.NarrowBand = &v
  return s
}

type UpdateCustomTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s UpdateCustomTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateCustomTemplateResponse) GoString() string {
  return s.String()
}

func (s *UpdateCustomTemplateResponse) SetRequestId(v string) *UpdateCustomTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateCustomTemplateResponse) SetResult(v bool) *UpdateCustomTemplateResponse {
  s.Result = &v
  return s
}

type ListTemplateGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  IsContainsTemplates *bool `json:"IsContainsTemplates" xml:"IsContainsTemplates"`
}

func (s ListTemplateGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s ListTemplateGroupRequest) GoString() string {
  return s.String()
}

func (s *ListTemplateGroupRequest) SetAccessKeyId(v string) *ListTemplateGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListTemplateGroupRequest) SetOwnerId(v int64) *ListTemplateGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *ListTemplateGroupRequest) SetResourceOwnerAccount(v string) *ListTemplateGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListTemplateGroupRequest) SetResourceOwnerId(v int64) *ListTemplateGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListTemplateGroupRequest) SetResourceRealOwnerId(v int64) *ListTemplateGroupRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *ListTemplateGroupRequest) SetIsContainsTemplates(v bool) *ListTemplateGroupRequest {
  s.IsContainsTemplates = &v
  return s
}

type ListTemplateGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TemplateGroups *ListTemplateGroupResponseTemplateGroups `json:"TemplateGroups" xml:"TemplateGroups" require:"true" type:"Struct"`
}

func (s ListTemplateGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s ListTemplateGroupResponse) GoString() string {
  return s.String()
}

func (s *ListTemplateGroupResponse) SetRequestId(v string) *ListTemplateGroupResponse {
  s.RequestId = &v
  return s
}

func (s *ListTemplateGroupResponse) SetTemplateGroups(v *ListTemplateGroupResponseTemplateGroups) *ListTemplateGroupResponse {
  s.TemplateGroups = v
  return s
}

type ListTemplateGroupResponseTemplateGroups struct {
  TemplateGroup []*ListTemplateGroupResponseTemplateGroupsTemplateGroup `json:"TemplateGroup" xml:"TemplateGroup" require:"true" type:"Repeated"`
}

func (s ListTemplateGroupResponseTemplateGroups) String() string {
  return tea.Prettify(s)
}

func (s ListTemplateGroupResponseTemplateGroups) GoString() string {
  return s.String()
}

func (s *ListTemplateGroupResponseTemplateGroups) SetTemplateGroup(v []*ListTemplateGroupResponseTemplateGroupsTemplateGroup) *ListTemplateGroupResponseTemplateGroups {
  s.TemplateGroup = v
  return s
}

type ListTemplateGroupResponseTemplateGroupsTemplateGroup struct     {
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
  DefaultGroup *string `json:"DefaultGroup" xml:"DefaultGroup" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  GroupSymbol *string `json:"GroupSymbol" xml:"GroupSymbol" require:"true"`
  GroupType *string `json:"GroupType" xml:"GroupType" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  TranscodeMode *string `json:"TranscodeMode" xml:"TranscodeMode" require:"true"`
  IsLocked *string `json:"IsLocked" xml:"IsLocked" require:"true"`
}

func (s ListTemplateGroupResponseTemplateGroupsTemplateGroup) String() string {
  return tea.Prettify(s)
}

func (s ListTemplateGroupResponseTemplateGroupsTemplateGroup) GoString() string {
  return s.String()
}

func (s *ListTemplateGroupResponseTemplateGroupsTemplateGroup) SetGroupId(v string) *ListTemplateGroupResponseTemplateGroupsTemplateGroup {
  s.GroupId = &v
  return s
}

func (s *ListTemplateGroupResponseTemplateGroupsTemplateGroup) SetDefaultGroup(v string) *ListTemplateGroupResponseTemplateGroupsTemplateGroup {
  s.DefaultGroup = &v
  return s
}

func (s *ListTemplateGroupResponseTemplateGroupsTemplateGroup) SetStatus(v string) *ListTemplateGroupResponseTemplateGroupsTemplateGroup {
  s.Status = &v
  return s
}

func (s *ListTemplateGroupResponseTemplateGroupsTemplateGroup) SetGroupSymbol(v string) *ListTemplateGroupResponseTemplateGroupsTemplateGroup {
  s.GroupSymbol = &v
  return s
}

func (s *ListTemplateGroupResponseTemplateGroupsTemplateGroup) SetGroupType(v string) *ListTemplateGroupResponseTemplateGroupsTemplateGroup {
  s.GroupType = &v
  return s
}

func (s *ListTemplateGroupResponseTemplateGroupsTemplateGroup) SetName(v string) *ListTemplateGroupResponseTemplateGroupsTemplateGroup {
  s.Name = &v
  return s
}

func (s *ListTemplateGroupResponseTemplateGroupsTemplateGroup) SetTranscodeMode(v string) *ListTemplateGroupResponseTemplateGroupsTemplateGroup {
  s.TranscodeMode = &v
  return s
}

func (s *ListTemplateGroupResponseTemplateGroupsTemplateGroup) SetIsLocked(v string) *ListTemplateGroupResponseTemplateGroupsTemplateGroup {
  s.IsLocked = &v
  return s
}

type ListCustomTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
}

func (s ListCustomTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateRequest) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateRequest) SetAccessKeyId(v string) *ListCustomTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListCustomTemplateRequest) SetOwnerId(v int64) *ListCustomTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *ListCustomTemplateRequest) SetResourceOwnerAccount(v string) *ListCustomTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListCustomTemplateRequest) SetResourceOwnerId(v int64) *ListCustomTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListCustomTemplateRequest) SetGroupId(v string) *ListCustomTemplateRequest {
  s.GroupId = &v
  return s
}

type ListCustomTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Templates *ListCustomTemplateResponseTemplates `json:"Templates" xml:"Templates" require:"true" type:"Struct"`
}

func (s ListCustomTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateResponse) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateResponse) SetRequestId(v string) *ListCustomTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *ListCustomTemplateResponse) SetTemplates(v *ListCustomTemplateResponseTemplates) *ListCustomTemplateResponse {
  s.Templates = v
  return s
}

type ListCustomTemplateResponseTemplates struct {
  Template []*ListCustomTemplateResponseTemplatesTemplate `json:"Template" xml:"Template" require:"true" type:"Repeated"`
}

func (s ListCustomTemplateResponseTemplates) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateResponseTemplates) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateResponseTemplates) SetTemplate(v []*ListCustomTemplateResponseTemplatesTemplate) *ListCustomTemplateResponseTemplates {
  s.Template = v
  return s
}

type ListCustomTemplateResponseTemplatesTemplate struct     {
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  Condition *string `json:"Condition" xml:"Condition" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  UserWaterMark *string `json:"UserWaterMark" xml:"UserWaterMark" require:"true"`
  NarrowBand *string `json:"NarrowBand" xml:"NarrowBand" require:"true"`
  Encrypt *string `json:"Encrypt" xml:"Encrypt" require:"true"`
  Video *ListCustomTemplateResponseTemplatesTemplateVideo `json:"Video" xml:"Video" require:"true" type:"Struct"`
  Audio *ListCustomTemplateResponseTemplatesTemplateAudio `json:"Audio" xml:"Audio" require:"true" type:"Struct"`
  Container *ListCustomTemplateResponseTemplatesTemplateContainer `json:"Container" xml:"Container" require:"true" type:"Struct"`
  TransConfig *ListCustomTemplateResponseTemplatesTemplateTransConfig `json:"TransConfig" xml:"TransConfig" require:"true" type:"Struct"`
  MuxConfig *ListCustomTemplateResponseTemplatesTemplateMuxConfig `json:"MuxConfig" xml:"MuxConfig" require:"true" type:"Struct"`
}

func (s ListCustomTemplateResponseTemplatesTemplate) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateResponseTemplatesTemplate) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetDefinition(v string) *ListCustomTemplateResponseTemplatesTemplate {
  s.Definition = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetCondition(v string) *ListCustomTemplateResponseTemplatesTemplate {
  s.Condition = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetTemplateId(v string) *ListCustomTemplateResponseTemplatesTemplate {
  s.TemplateId = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetStatus(v string) *ListCustomTemplateResponseTemplatesTemplate {
  s.Status = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetUserWaterMark(v string) *ListCustomTemplateResponseTemplatesTemplate {
  s.UserWaterMark = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetNarrowBand(v string) *ListCustomTemplateResponseTemplatesTemplate {
  s.NarrowBand = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetEncrypt(v string) *ListCustomTemplateResponseTemplatesTemplate {
  s.Encrypt = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetVideo(v *ListCustomTemplateResponseTemplatesTemplateVideo) *ListCustomTemplateResponseTemplatesTemplate {
  s.Video = v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetAudio(v *ListCustomTemplateResponseTemplatesTemplateAudio) *ListCustomTemplateResponseTemplatesTemplate {
  s.Audio = v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetContainer(v *ListCustomTemplateResponseTemplatesTemplateContainer) *ListCustomTemplateResponseTemplatesTemplate {
  s.Container = v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetTransConfig(v *ListCustomTemplateResponseTemplatesTemplateTransConfig) *ListCustomTemplateResponseTemplatesTemplate {
  s.TransConfig = v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplate) SetMuxConfig(v *ListCustomTemplateResponseTemplatesTemplateMuxConfig) *ListCustomTemplateResponseTemplatesTemplate {
  s.MuxConfig = v
  return s
}

type ListCustomTemplateResponseTemplatesTemplateVideo struct {
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Profile *string `json:"Profile" xml:"Profile" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Crf *string `json:"Crf" xml:"Crf" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Gop *string `json:"Gop" xml:"Gop" require:"true"`
  Preset *string `json:"Preset" xml:"Preset" require:"true"`
  ScanMode *string `json:"ScanMode" xml:"ScanMode" require:"true"`
  PixFmt *string `json:"PixFmt" xml:"PixFmt" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
  Crop *string `json:"Crop" xml:"Crop" require:"true"`
  Pad *string `json:"Pad" xml:"Pad" require:"true"`
}

func (s ListCustomTemplateResponseTemplatesTemplateVideo) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateResponseTemplatesTemplateVideo) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetCodec(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Codec = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetProfile(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Profile = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetBitrate(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Bitrate = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetCrf(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Crf = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetWidth(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Width = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetHeight(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Height = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetFps(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Fps = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetGop(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Gop = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetPreset(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Preset = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetScanMode(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.ScanMode = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetPixFmt(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.PixFmt = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetRemove(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Remove = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetCrop(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Crop = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateVideo) SetPad(v string) *ListCustomTemplateResponseTemplatesTemplateVideo {
  s.Pad = &v
  return s
}

type ListCustomTemplateResponseTemplatesTemplateAudio struct {
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Profile *string `json:"Profile" xml:"Profile" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Samplerate *string `json:"Samplerate" xml:"Samplerate" require:"true"`
  Channels *string `json:"Channels" xml:"Channels" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
}

func (s ListCustomTemplateResponseTemplatesTemplateAudio) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateResponseTemplatesTemplateAudio) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateResponseTemplatesTemplateAudio) SetCodec(v string) *ListCustomTemplateResponseTemplatesTemplateAudio {
  s.Codec = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateAudio) SetProfile(v string) *ListCustomTemplateResponseTemplatesTemplateAudio {
  s.Profile = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateAudio) SetBitrate(v string) *ListCustomTemplateResponseTemplatesTemplateAudio {
  s.Bitrate = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateAudio) SetSamplerate(v string) *ListCustomTemplateResponseTemplatesTemplateAudio {
  s.Samplerate = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateAudio) SetChannels(v string) *ListCustomTemplateResponseTemplatesTemplateAudio {
  s.Channels = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateAudio) SetRemove(v string) *ListCustomTemplateResponseTemplatesTemplateAudio {
  s.Remove = &v
  return s
}

type ListCustomTemplateResponseTemplatesTemplateContainer struct {
  Format *string `json:"Format" xml:"Format" require:"true"`
}

func (s ListCustomTemplateResponseTemplatesTemplateContainer) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateResponseTemplatesTemplateContainer) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateResponseTemplatesTemplateContainer) SetFormat(v string) *ListCustomTemplateResponseTemplatesTemplateContainer {
  s.Format = &v
  return s
}

type ListCustomTemplateResponseTemplatesTemplateTransConfig struct {
  TransMode *string `json:"TransMode" xml:"TransMode" require:"true"`
  IsCheckReso *string `json:"IsCheckReso" xml:"IsCheckReso" require:"true"`
  IsCheckResoFail *string `json:"IsCheckResoFail" xml:"IsCheckResoFail" require:"true"`
  IsCheckVideoBitrate *string `json:"IsCheckVideoBitrate" xml:"IsCheckVideoBitrate" require:"true"`
  IsCheckAudioBitrate *string `json:"IsCheckAudioBitrate" xml:"IsCheckAudioBitrate" require:"true"`
  IsCheckAudioBitrateFail *string `json:"isCheckAudioBitrateFail" xml:"isCheckAudioBitrateFail" require:"true"`
  IsCheckVideoBitrateFail *string `json:"isCheckVideoBitrateFail" xml:"isCheckVideoBitrateFail" require:"true"`
}

func (s ListCustomTemplateResponseTemplatesTemplateTransConfig) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateResponseTemplatesTemplateTransConfig) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateResponseTemplatesTemplateTransConfig) SetTransMode(v string) *ListCustomTemplateResponseTemplatesTemplateTransConfig {
  s.TransMode = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateTransConfig) SetIsCheckReso(v string) *ListCustomTemplateResponseTemplatesTemplateTransConfig {
  s.IsCheckReso = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateTransConfig) SetIsCheckResoFail(v string) *ListCustomTemplateResponseTemplatesTemplateTransConfig {
  s.IsCheckResoFail = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateTransConfig) SetIsCheckVideoBitrate(v string) *ListCustomTemplateResponseTemplatesTemplateTransConfig {
  s.IsCheckVideoBitrate = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateTransConfig) SetIsCheckAudioBitrate(v string) *ListCustomTemplateResponseTemplatesTemplateTransConfig {
  s.IsCheckAudioBitrate = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *ListCustomTemplateResponseTemplatesTemplateTransConfig {
  s.IsCheckAudioBitrateFail = &v
  return s
}

func (s *ListCustomTemplateResponseTemplatesTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *ListCustomTemplateResponseTemplatesTemplateTransConfig {
  s.IsCheckVideoBitrateFail = &v
  return s
}

type ListCustomTemplateResponseTemplatesTemplateMuxConfig struct {
  Segment *ListCustomTemplateResponseTemplatesTemplateMuxConfigSegment `json:"Segment" xml:"Segment" require:"true" type:"Struct"`
}

func (s ListCustomTemplateResponseTemplatesTemplateMuxConfig) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateResponseTemplatesTemplateMuxConfig) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateResponseTemplatesTemplateMuxConfig) SetSegment(v *ListCustomTemplateResponseTemplatesTemplateMuxConfigSegment) *ListCustomTemplateResponseTemplatesTemplateMuxConfig {
  s.Segment = v
  return s
}

type ListCustomTemplateResponseTemplatesTemplateMuxConfigSegment struct {
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
}

func (s ListCustomTemplateResponseTemplatesTemplateMuxConfigSegment) String() string {
  return tea.Prettify(s)
}

func (s ListCustomTemplateResponseTemplatesTemplateMuxConfigSegment) GoString() string {
  return s.String()
}

func (s *ListCustomTemplateResponseTemplatesTemplateMuxConfigSegment) SetDuration(v string) *ListCustomTemplateResponseTemplatesTemplateMuxConfigSegment {
  s.Duration = &v
  return s
}

type InitSystemTemplateGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  UserId *int64 `json:"UserId" xml:"UserId" require:"true"`
}

func (s InitSystemTemplateGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s InitSystemTemplateGroupRequest) GoString() string {
  return s.String()
}

func (s *InitSystemTemplateGroupRequest) SetAccessKeyId(v string) *InitSystemTemplateGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *InitSystemTemplateGroupRequest) SetOwnerId(v int64) *InitSystemTemplateGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *InitSystemTemplateGroupRequest) SetResourceOwnerAccount(v string) *InitSystemTemplateGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *InitSystemTemplateGroupRequest) SetResourceOwnerId(v int64) *InitSystemTemplateGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *InitSystemTemplateGroupRequest) SetUserId(v int64) *InitSystemTemplateGroupRequest {
  s.UserId = &v
  return s
}

type InitSystemTemplateGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s InitSystemTemplateGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s InitSystemTemplateGroupResponse) GoString() string {
  return s.String()
}

func (s *InitSystemTemplateGroupResponse) SetRequestId(v string) *InitSystemTemplateGroupResponse {
  s.RequestId = &v
  return s
}

func (s *InitSystemTemplateGroupResponse) SetResult(v bool) *InitSystemTemplateGroupResponse {
  s.Result = &v
  return s
}

type InitCustomerWorkFlowRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  UserId *int64 `json:"UserId" xml:"UserId" require:"true"`
  FlushConfig *bool `json:"FlushConfig" xml:"FlushConfig"`
}

func (s InitCustomerWorkFlowRequest) String() string {
  return tea.Prettify(s)
}

func (s InitCustomerWorkFlowRequest) GoString() string {
  return s.String()
}

func (s *InitCustomerWorkFlowRequest) SetAccessKeyId(v string) *InitCustomerWorkFlowRequest {
  s.AccessKeyId = &v
  return s
}

func (s *InitCustomerWorkFlowRequest) SetOwnerId(v int64) *InitCustomerWorkFlowRequest {
  s.OwnerId = &v
  return s
}

func (s *InitCustomerWorkFlowRequest) SetResourceOwnerAccount(v string) *InitCustomerWorkFlowRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *InitCustomerWorkFlowRequest) SetResourceOwnerId(v int64) *InitCustomerWorkFlowRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *InitCustomerWorkFlowRequest) SetUserId(v int64) *InitCustomerWorkFlowRequest {
  s.UserId = &v
  return s
}

func (s *InitCustomerWorkFlowRequest) SetFlushConfig(v bool) *InitCustomerWorkFlowRequest {
  s.FlushConfig = &v
  return s
}

type InitCustomerWorkFlowResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s InitCustomerWorkFlowResponse) String() string {
  return tea.Prettify(s)
}

func (s InitCustomerWorkFlowResponse) GoString() string {
  return s.String()
}

func (s *InitCustomerWorkFlowResponse) SetRequestId(v string) *InitCustomerWorkFlowResponse {
  s.RequestId = &v
  return s
}

func (s *InitCustomerWorkFlowResponse) SetResult(v bool) *InitCustomerWorkFlowResponse {
  s.Result = &v
  return s
}

type InitCustomerWithSystemTemplateAndGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  UserId *int64 `json:"UserId" xml:"UserId" require:"true"`
  GroupId *string `json:"GroupId" xml:"GroupId"`
  WorkFlowId *string `json:"WorkFlowId" xml:"WorkFlowId"`
}

func (s InitCustomerWithSystemTemplateAndGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s InitCustomerWithSystemTemplateAndGroupRequest) GoString() string {
  return s.String()
}

func (s *InitCustomerWithSystemTemplateAndGroupRequest) SetAccessKeyId(v string) *InitCustomerWithSystemTemplateAndGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *InitCustomerWithSystemTemplateAndGroupRequest) SetOwnerId(v int64) *InitCustomerWithSystemTemplateAndGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *InitCustomerWithSystemTemplateAndGroupRequest) SetResourceOwnerAccount(v string) *InitCustomerWithSystemTemplateAndGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *InitCustomerWithSystemTemplateAndGroupRequest) SetResourceOwnerId(v int64) *InitCustomerWithSystemTemplateAndGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *InitCustomerWithSystemTemplateAndGroupRequest) SetUserId(v int64) *InitCustomerWithSystemTemplateAndGroupRequest {
  s.UserId = &v
  return s
}

func (s *InitCustomerWithSystemTemplateAndGroupRequest) SetGroupId(v string) *InitCustomerWithSystemTemplateAndGroupRequest {
  s.GroupId = &v
  return s
}

func (s *InitCustomerWithSystemTemplateAndGroupRequest) SetWorkFlowId(v string) *InitCustomerWithSystemTemplateAndGroupRequest {
  s.WorkFlowId = &v
  return s
}

type InitCustomerWithSystemTemplateAndGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s InitCustomerWithSystemTemplateAndGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s InitCustomerWithSystemTemplateAndGroupResponse) GoString() string {
  return s.String()
}

func (s *InitCustomerWithSystemTemplateAndGroupResponse) SetRequestId(v string) *InitCustomerWithSystemTemplateAndGroupResponse {
  s.RequestId = &v
  return s
}

func (s *InitCustomerWithSystemTemplateAndGroupResponse) SetResult(v bool) *InitCustomerWithSystemTemplateAndGroupResponse {
  s.Result = &v
  return s
}

type GetTemplateGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
}

func (s GetTemplateGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupRequest) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupRequest) SetAccessKeyId(v string) *GetTemplateGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetTemplateGroupRequest) SetOwnerId(v int64) *GetTemplateGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *GetTemplateGroupRequest) SetResourceOwnerAccount(v string) *GetTemplateGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetTemplateGroupRequest) SetResourceOwnerId(v int64) *GetTemplateGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetTemplateGroupRequest) SetResourceRealOwnerId(v int64) *GetTemplateGroupRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetTemplateGroupRequest) SetGroupId(v string) *GetTemplateGroupRequest {
  s.GroupId = &v
  return s
}

type GetTemplateGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TemplateGroup *GetTemplateGroupResponseTemplateGroup `json:"TemplateGroup" xml:"TemplateGroup" require:"true" type:"Struct"`
}

func (s GetTemplateGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponse) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponse) SetRequestId(v string) *GetTemplateGroupResponse {
  s.RequestId = &v
  return s
}

func (s *GetTemplateGroupResponse) SetTemplateGroup(v *GetTemplateGroupResponseTemplateGroup) *GetTemplateGroupResponse {
  s.TemplateGroup = v
  return s
}

type GetTemplateGroupResponseTemplateGroup struct {
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
  DefaultGroup *string `json:"DefaultGroup" xml:"DefaultGroup" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  GroupType *string `json:"GroupType" xml:"GroupType" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  TranscodeMode *string `json:"TranscodeMode" xml:"TranscodeMode" require:"true"`
  GroupSymbol *string `json:"GroupSymbol" xml:"GroupSymbol" require:"true"`
  IsLocked *string `json:"IsLocked" xml:"IsLocked" require:"true"`
  Templates *GetTemplateGroupResponseTemplateGroupTemplates `json:"Templates" xml:"Templates" require:"true" type:"Struct"`
}

func (s GetTemplateGroupResponseTemplateGroup) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponseTemplateGroup) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponseTemplateGroup) SetGroupId(v string) *GetTemplateGroupResponseTemplateGroup {
  s.GroupId = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroup) SetDefaultGroup(v string) *GetTemplateGroupResponseTemplateGroup {
  s.DefaultGroup = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroup) SetStatus(v string) *GetTemplateGroupResponseTemplateGroup {
  s.Status = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroup) SetGroupType(v string) *GetTemplateGroupResponseTemplateGroup {
  s.GroupType = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroup) SetName(v string) *GetTemplateGroupResponseTemplateGroup {
  s.Name = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroup) SetTranscodeMode(v string) *GetTemplateGroupResponseTemplateGroup {
  s.TranscodeMode = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroup) SetGroupSymbol(v string) *GetTemplateGroupResponseTemplateGroup {
  s.GroupSymbol = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroup) SetIsLocked(v string) *GetTemplateGroupResponseTemplateGroup {
  s.IsLocked = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroup) SetTemplates(v *GetTemplateGroupResponseTemplateGroupTemplates) *GetTemplateGroupResponseTemplateGroup {
  s.Templates = v
  return s
}

type GetTemplateGroupResponseTemplateGroupTemplates struct {
  Template []*GetTemplateGroupResponseTemplateGroupTemplatesTemplate `json:"Template" xml:"Template" require:"true" type:"Repeated"`
}

func (s GetTemplateGroupResponseTemplateGroupTemplates) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponseTemplateGroupTemplates) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponseTemplateGroupTemplates) SetTemplate(v []*GetTemplateGroupResponseTemplateGroupTemplatesTemplate) *GetTemplateGroupResponseTemplateGroupTemplates {
  s.Template = v
  return s
}

type GetTemplateGroupResponseTemplateGroupTemplatesTemplate struct     {
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  MediaDefinition *string `json:"MediaDefinition" xml:"MediaDefinition" require:"true"`
  Condition *string `json:"Condition" xml:"Condition" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  UserWaterMark *string `json:"UserWaterMark" xml:"UserWaterMark" require:"true"`
  UseWaterMark *string `json:"UseWaterMark" xml:"UseWaterMark" require:"true"`
  NarrowBand *string `json:"NarrowBand" xml:"NarrowBand" require:"true"`
  Encrypt *string `json:"Encrypt" xml:"Encrypt" require:"true"`
  IsLocked *string `json:"IsLocked" xml:"IsLocked" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Video *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo `json:"Video" xml:"Video" require:"true" type:"Struct"`
  Audio *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio `json:"Audio" xml:"Audio" require:"true" type:"Struct"`
  Container *GetTemplateGroupResponseTemplateGroupTemplatesTemplateContainer `json:"Container" xml:"Container" require:"true" type:"Struct"`
  TransConfig *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig `json:"TransConfig" xml:"TransConfig" require:"true" type:"Struct"`
  MuxConfig *GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfig `json:"MuxConfig" xml:"MuxConfig" require:"true" type:"Struct"`
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplate) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplate) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetDefinition(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.Definition = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetMediaDefinition(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.MediaDefinition = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetCondition(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.Condition = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetTemplateId(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.TemplateId = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetStatus(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.Status = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetUserWaterMark(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.UserWaterMark = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetUseWaterMark(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.UseWaterMark = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetNarrowBand(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.NarrowBand = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetEncrypt(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.Encrypt = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetIsLocked(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.IsLocked = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetName(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.Name = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetVideo(v *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.Video = v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetAudio(v *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.Audio = v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetContainer(v *GetTemplateGroupResponseTemplateGroupTemplatesTemplateContainer) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.Container = v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetTransConfig(v *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.TransConfig = v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplate) SetMuxConfig(v *GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfig) *GetTemplateGroupResponseTemplateGroupTemplatesTemplate {
  s.MuxConfig = v
  return s
}

type GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo struct {
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Profile *string `json:"Profile" xml:"Profile" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Crf *string `json:"Crf" xml:"Crf" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Gop *string `json:"Gop" xml:"Gop" require:"true"`
  Preset *string `json:"Preset" xml:"Preset" require:"true"`
  ScanMode *string `json:"ScanMode" xml:"ScanMode" require:"true"`
  PixFmt *string `json:"PixFmt" xml:"PixFmt" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
  Crop *string `json:"Crop" xml:"Crop" require:"true"`
  Pad *string `json:"Pad" xml:"Pad" require:"true"`
  LongShortMode *string `json:"LongShortMode" xml:"LongShortMode" require:"true"`
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetCodec(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Codec = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetProfile(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Profile = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetBitrate(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Bitrate = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetCrf(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Crf = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetWidth(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Width = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetHeight(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Height = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetFps(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Fps = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetGop(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Gop = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetPreset(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Preset = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetScanMode(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.ScanMode = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetPixFmt(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.PixFmt = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetRemove(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Remove = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetCrop(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Crop = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetPad(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.Pad = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo) SetLongShortMode(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateVideo {
  s.LongShortMode = &v
  return s
}

type GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio struct {
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Profile *string `json:"Profile" xml:"Profile" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Samplerate *string `json:"Samplerate" xml:"Samplerate" require:"true"`
  Channels *string `json:"Channels" xml:"Channels" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio) SetCodec(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio {
  s.Codec = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio) SetProfile(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio {
  s.Profile = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio) SetBitrate(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio {
  s.Bitrate = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio) SetSamplerate(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio {
  s.Samplerate = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio) SetChannels(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio {
  s.Channels = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio) SetRemove(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateAudio {
  s.Remove = &v
  return s
}

type GetTemplateGroupResponseTemplateGroupTemplatesTemplateContainer struct {
  Format *string `json:"Format" xml:"Format" require:"true"`
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateContainer) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateContainer) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateContainer) SetFormat(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateContainer {
  s.Format = &v
  return s
}

type GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig struct {
  TransMode *string `json:"TransMode" xml:"TransMode" require:"true"`
  IsCheckReso *string `json:"IsCheckReso" xml:"IsCheckReso" require:"true"`
  IsCheckResoFail *string `json:"IsCheckResoFail" xml:"IsCheckResoFail" require:"true"`
  IsCheckVideoBitrate *string `json:"IsCheckVideoBitrate" xml:"IsCheckVideoBitrate" require:"true"`
  IsCheckAudioBitrate *string `json:"IsCheckAudioBitrate" xml:"IsCheckAudioBitrate" require:"true"`
  IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail" xml:"IsCheckAudioBitrateFail" require:"true"`
  IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail" xml:"IsCheckVideoBitrateFail" require:"true"`
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) SetTransMode(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig {
  s.TransMode = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) SetIsCheckReso(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig {
  s.IsCheckReso = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) SetIsCheckResoFail(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig {
  s.IsCheckResoFail = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) SetIsCheckVideoBitrate(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig {
  s.IsCheckVideoBitrate = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) SetIsCheckAudioBitrate(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig {
  s.IsCheckAudioBitrate = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig {
  s.IsCheckAudioBitrateFail = &v
  return s
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateTransConfig {
  s.IsCheckVideoBitrateFail = &v
  return s
}

type GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfig struct {
  Segment *GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfigSegment `json:"Segment" xml:"Segment" require:"true" type:"Struct"`
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfig) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfig) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfig) SetSegment(v *GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfigSegment) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfig {
  s.Segment = v
  return s
}

type GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfigSegment struct {
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfigSegment) String() string {
  return tea.Prettify(s)
}

func (s GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfigSegment) GoString() string {
  return s.String()
}

func (s *GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfigSegment) SetDuration(v string) *GetTemplateGroupResponseTemplateGroupTemplatesTemplateMuxConfigSegment {
  s.Duration = &v
  return s
}

type GetCustomTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s GetCustomTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCustomTemplateRequest) GoString() string {
  return s.String()
}

func (s *GetCustomTemplateRequest) SetAccessKeyId(v string) *GetCustomTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetCustomTemplateRequest) SetOwnerId(v int64) *GetCustomTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCustomTemplateRequest) SetResourceOwnerAccount(v string) *GetCustomTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCustomTemplateRequest) SetResourceOwnerId(v int64) *GetCustomTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetCustomTemplateRequest) SetTemplateId(v string) *GetCustomTemplateRequest {
  s.TemplateId = &v
  return s
}

type GetCustomTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Template *GetCustomTemplateResponseTemplate `json:"Template" xml:"Template" require:"true" type:"Struct"`
}

func (s GetCustomTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCustomTemplateResponse) GoString() string {
  return s.String()
}

func (s *GetCustomTemplateResponse) SetRequestId(v string) *GetCustomTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *GetCustomTemplateResponse) SetTemplate(v *GetCustomTemplateResponseTemplate) *GetCustomTemplateResponse {
  s.Template = v
  return s
}

type GetCustomTemplateResponseTemplate struct {
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  Condition *string `json:"Condition" xml:"Condition" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  UserWaterMark *string `json:"UserWaterMark" xml:"UserWaterMark" require:"true"`
  NarrowBand *string `json:"NarrowBand" xml:"NarrowBand" require:"true"`
  Encrypt *string `json:"Encrypt" xml:"Encrypt" require:"true"`
  Video *GetCustomTemplateResponseTemplateVideo `json:"Video" xml:"Video" require:"true" type:"Struct"`
  Audio *GetCustomTemplateResponseTemplateAudio `json:"Audio" xml:"Audio" require:"true" type:"Struct"`
  Container *GetCustomTemplateResponseTemplateContainer `json:"Container" xml:"Container" require:"true" type:"Struct"`
  TransConfig *GetCustomTemplateResponseTemplateTransConfig `json:"TransConfig" xml:"TransConfig" require:"true" type:"Struct"`
  MuxConfig *GetCustomTemplateResponseTemplateMuxConfig `json:"MuxConfig" xml:"MuxConfig" require:"true" type:"Struct"`
}

func (s GetCustomTemplateResponseTemplate) String() string {
  return tea.Prettify(s)
}

func (s GetCustomTemplateResponseTemplate) GoString() string {
  return s.String()
}

func (s *GetCustomTemplateResponseTemplate) SetDefinition(v string) *GetCustomTemplateResponseTemplate {
  s.Definition = &v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetCondition(v string) *GetCustomTemplateResponseTemplate {
  s.Condition = &v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetTemplateId(v string) *GetCustomTemplateResponseTemplate {
  s.TemplateId = &v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetStatus(v string) *GetCustomTemplateResponseTemplate {
  s.Status = &v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetUserWaterMark(v string) *GetCustomTemplateResponseTemplate {
  s.UserWaterMark = &v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetNarrowBand(v string) *GetCustomTemplateResponseTemplate {
  s.NarrowBand = &v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetEncrypt(v string) *GetCustomTemplateResponseTemplate {
  s.Encrypt = &v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetVideo(v *GetCustomTemplateResponseTemplateVideo) *GetCustomTemplateResponseTemplate {
  s.Video = v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetAudio(v *GetCustomTemplateResponseTemplateAudio) *GetCustomTemplateResponseTemplate {
  s.Audio = v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetContainer(v *GetCustomTemplateResponseTemplateContainer) *GetCustomTemplateResponseTemplate {
  s.Container = v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetTransConfig(v *GetCustomTemplateResponseTemplateTransConfig) *GetCustomTemplateResponseTemplate {
  s.TransConfig = v
  return s
}

func (s *GetCustomTemplateResponseTemplate) SetMuxConfig(v *GetCustomTemplateResponseTemplateMuxConfig) *GetCustomTemplateResponseTemplate {
  s.MuxConfig = v
  return s
}

type GetCustomTemplateResponseTemplateVideo struct {
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Profile *string `json:"Profile" xml:"Profile" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Crf *string `json:"Crf" xml:"Crf" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Gop *string `json:"Gop" xml:"Gop" require:"true"`
  Preset *string `json:"Preset" xml:"Preset" require:"true"`
  ScanMode *string `json:"ScanMode" xml:"ScanMode" require:"true"`
  PixFmt *string `json:"PixFmt" xml:"PixFmt" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
  Crop *string `json:"Crop" xml:"Crop" require:"true"`
  Pad *string `json:"Pad" xml:"Pad" require:"true"`
}

func (s GetCustomTemplateResponseTemplateVideo) String() string {
  return tea.Prettify(s)
}

func (s GetCustomTemplateResponseTemplateVideo) GoString() string {
  return s.String()
}

func (s *GetCustomTemplateResponseTemplateVideo) SetCodec(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Codec = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetProfile(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Profile = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetBitrate(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Bitrate = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetCrf(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Crf = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetWidth(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Width = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetHeight(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Height = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetFps(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Fps = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetGop(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Gop = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetPreset(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Preset = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetScanMode(v string) *GetCustomTemplateResponseTemplateVideo {
  s.ScanMode = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetPixFmt(v string) *GetCustomTemplateResponseTemplateVideo {
  s.PixFmt = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetRemove(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Remove = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetCrop(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Crop = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateVideo) SetPad(v string) *GetCustomTemplateResponseTemplateVideo {
  s.Pad = &v
  return s
}

type GetCustomTemplateResponseTemplateAudio struct {
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Profile *string `json:"Profile" xml:"Profile" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Samplerate *string `json:"Samplerate" xml:"Samplerate" require:"true"`
  Channels *string `json:"Channels" xml:"Channels" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
}

func (s GetCustomTemplateResponseTemplateAudio) String() string {
  return tea.Prettify(s)
}

func (s GetCustomTemplateResponseTemplateAudio) GoString() string {
  return s.String()
}

func (s *GetCustomTemplateResponseTemplateAudio) SetCodec(v string) *GetCustomTemplateResponseTemplateAudio {
  s.Codec = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateAudio) SetProfile(v string) *GetCustomTemplateResponseTemplateAudio {
  s.Profile = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateAudio) SetBitrate(v string) *GetCustomTemplateResponseTemplateAudio {
  s.Bitrate = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateAudio) SetSamplerate(v string) *GetCustomTemplateResponseTemplateAudio {
  s.Samplerate = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateAudio) SetChannels(v string) *GetCustomTemplateResponseTemplateAudio {
  s.Channels = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateAudio) SetRemove(v string) *GetCustomTemplateResponseTemplateAudio {
  s.Remove = &v
  return s
}

type GetCustomTemplateResponseTemplateContainer struct {
  Format *string `json:"Format" xml:"Format" require:"true"`
}

func (s GetCustomTemplateResponseTemplateContainer) String() string {
  return tea.Prettify(s)
}

func (s GetCustomTemplateResponseTemplateContainer) GoString() string {
  return s.String()
}

func (s *GetCustomTemplateResponseTemplateContainer) SetFormat(v string) *GetCustomTemplateResponseTemplateContainer {
  s.Format = &v
  return s
}

type GetCustomTemplateResponseTemplateTransConfig struct {
  TransMode *string `json:"TransMode" xml:"TransMode" require:"true"`
  IsCheckReso *string `json:"IsCheckReso" xml:"IsCheckReso" require:"true"`
  IsCheckResoFail *string `json:"IsCheckResoFail" xml:"IsCheckResoFail" require:"true"`
  IsCheckVideoBitrate *string `json:"IsCheckVideoBitrate" xml:"IsCheckVideoBitrate" require:"true"`
  IsCheckAudioBitrate *string `json:"IsCheckAudioBitrate" xml:"IsCheckAudioBitrate" require:"true"`
  IsCheckAudioBitrateFail *string `json:"isCheckAudioBitrateFail" xml:"isCheckAudioBitrateFail" require:"true"`
  IsCheckVideoBitrateFail *string `json:"isCheckVideoBitrateFail" xml:"isCheckVideoBitrateFail" require:"true"`
}

func (s GetCustomTemplateResponseTemplateTransConfig) String() string {
  return tea.Prettify(s)
}

func (s GetCustomTemplateResponseTemplateTransConfig) GoString() string {
  return s.String()
}

func (s *GetCustomTemplateResponseTemplateTransConfig) SetTransMode(v string) *GetCustomTemplateResponseTemplateTransConfig {
  s.TransMode = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateTransConfig) SetIsCheckReso(v string) *GetCustomTemplateResponseTemplateTransConfig {
  s.IsCheckReso = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateTransConfig) SetIsCheckResoFail(v string) *GetCustomTemplateResponseTemplateTransConfig {
  s.IsCheckResoFail = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateTransConfig) SetIsCheckVideoBitrate(v string) *GetCustomTemplateResponseTemplateTransConfig {
  s.IsCheckVideoBitrate = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateTransConfig) SetIsCheckAudioBitrate(v string) *GetCustomTemplateResponseTemplateTransConfig {
  s.IsCheckAudioBitrate = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *GetCustomTemplateResponseTemplateTransConfig {
  s.IsCheckAudioBitrateFail = &v
  return s
}

func (s *GetCustomTemplateResponseTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *GetCustomTemplateResponseTemplateTransConfig {
  s.IsCheckVideoBitrateFail = &v
  return s
}

type GetCustomTemplateResponseTemplateMuxConfig struct {
  Segment *GetCustomTemplateResponseTemplateMuxConfigSegment `json:"Segment" xml:"Segment" require:"true" type:"Struct"`
}

func (s GetCustomTemplateResponseTemplateMuxConfig) String() string {
  return tea.Prettify(s)
}

func (s GetCustomTemplateResponseTemplateMuxConfig) GoString() string {
  return s.String()
}

func (s *GetCustomTemplateResponseTemplateMuxConfig) SetSegment(v *GetCustomTemplateResponseTemplateMuxConfigSegment) *GetCustomTemplateResponseTemplateMuxConfig {
  s.Segment = v
  return s
}

type GetCustomTemplateResponseTemplateMuxConfigSegment struct {
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
}

func (s GetCustomTemplateResponseTemplateMuxConfigSegment) String() string {
  return tea.Prettify(s)
}

func (s GetCustomTemplateResponseTemplateMuxConfigSegment) GoString() string {
  return s.String()
}

func (s *GetCustomTemplateResponseTemplateMuxConfigSegment) SetDuration(v string) *GetCustomTemplateResponseTemplateMuxConfigSegment {
  s.Duration = &v
  return s
}

type DeleteTemplateGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  GroupId *string `json:"GroupId" xml:"GroupId" require:"true"`
}

func (s DeleteTemplateGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteTemplateGroupRequest) GoString() string {
  return s.String()
}

func (s *DeleteTemplateGroupRequest) SetAccessKeyId(v string) *DeleteTemplateGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteTemplateGroupRequest) SetOwnerId(v int64) *DeleteTemplateGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteTemplateGroupRequest) SetResourceOwnerAccount(v string) *DeleteTemplateGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteTemplateGroupRequest) SetResourceOwnerId(v int64) *DeleteTemplateGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteTemplateGroupRequest) SetGroupId(v string) *DeleteTemplateGroupRequest {
  s.GroupId = &v
  return s
}

type DeleteTemplateGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s DeleteTemplateGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteTemplateGroupResponse) GoString() string {
  return s.String()
}

func (s *DeleteTemplateGroupResponse) SetRequestId(v string) *DeleteTemplateGroupResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteTemplateGroupResponse) SetResult(v bool) *DeleteTemplateGroupResponse {
  s.Result = &v
  return s
}

type DeleteInitCustomTemplateInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  UserId *string `json:"UserId" xml:"UserId" require:"true"`
}

func (s DeleteInitCustomTemplateInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteInitCustomTemplateInfoRequest) GoString() string {
  return s.String()
}

func (s *DeleteInitCustomTemplateInfoRequest) SetAccessKeyId(v string) *DeleteInitCustomTemplateInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteInitCustomTemplateInfoRequest) SetOwnerId(v int64) *DeleteInitCustomTemplateInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteInitCustomTemplateInfoRequest) SetResourceOwnerAccount(v string) *DeleteInitCustomTemplateInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteInitCustomTemplateInfoRequest) SetResourceOwnerId(v int64) *DeleteInitCustomTemplateInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteInitCustomTemplateInfoRequest) SetUserId(v string) *DeleteInitCustomTemplateInfoRequest {
  s.UserId = &v
  return s
}

type DeleteInitCustomTemplateInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s DeleteInitCustomTemplateInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteInitCustomTemplateInfoResponse) GoString() string {
  return s.String()
}

func (s *DeleteInitCustomTemplateInfoResponse) SetRequestId(v string) *DeleteInitCustomTemplateInfoResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteInitCustomTemplateInfoResponse) SetResult(v bool) *DeleteInitCustomTemplateInfoResponse {
  s.Result = &v
  return s
}

type DeleteCustomTemplateAndGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  UserId *string `json:"UserId" xml:"UserId" require:"true"`
}

func (s DeleteCustomTemplateAndGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteCustomTemplateAndGroupRequest) GoString() string {
  return s.String()
}

func (s *DeleteCustomTemplateAndGroupRequest) SetAccessKeyId(v string) *DeleteCustomTemplateAndGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteCustomTemplateAndGroupRequest) SetOwnerId(v int64) *DeleteCustomTemplateAndGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteCustomTemplateAndGroupRequest) SetResourceOwnerAccount(v string) *DeleteCustomTemplateAndGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteCustomTemplateAndGroupRequest) SetResourceOwnerId(v int64) *DeleteCustomTemplateAndGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteCustomTemplateAndGroupRequest) SetUserId(v string) *DeleteCustomTemplateAndGroupRequest {
  s.UserId = &v
  return s
}

type DeleteCustomTemplateAndGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s DeleteCustomTemplateAndGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteCustomTemplateAndGroupResponse) GoString() string {
  return s.String()
}

func (s *DeleteCustomTemplateAndGroupResponse) SetRequestId(v string) *DeleteCustomTemplateAndGroupResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteCustomTemplateAndGroupResponse) SetResult(v bool) *DeleteCustomTemplateAndGroupResponse {
  s.Result = &v
  return s
}

type DeleteCustomTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  GroupId *string `json:"GroupId" xml:"GroupId"`
  TemplateIds *string `json:"TemplateIds" xml:"TemplateIds" require:"true"`
}

func (s DeleteCustomTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteCustomTemplateRequest) GoString() string {
  return s.String()
}

func (s *DeleteCustomTemplateRequest) SetAccessKeyId(v string) *DeleteCustomTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteCustomTemplateRequest) SetOwnerId(v int64) *DeleteCustomTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteCustomTemplateRequest) SetResourceOwnerAccount(v string) *DeleteCustomTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteCustomTemplateRequest) SetResourceOwnerId(v int64) *DeleteCustomTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteCustomTemplateRequest) SetGroupId(v string) *DeleteCustomTemplateRequest {
  s.GroupId = &v
  return s
}

func (s *DeleteCustomTemplateRequest) SetTemplateIds(v string) *DeleteCustomTemplateRequest {
  s.TemplateIds = &v
  return s
}

type DeleteCustomTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s DeleteCustomTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteCustomTemplateResponse) GoString() string {
  return s.String()
}

func (s *DeleteCustomTemplateResponse) SetRequestId(v string) *DeleteCustomTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteCustomTemplateResponse) SetResult(v bool) *DeleteCustomTemplateResponse {
  s.Result = &v
  return s
}

type AddTemplateGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  ToNeedTranscode *string `json:"ToNeedTranscode" xml:"ToNeedTranscode" require:"true"`
}

func (s AddTemplateGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s AddTemplateGroupRequest) GoString() string {
  return s.String()
}

func (s *AddTemplateGroupRequest) SetAccessKeyId(v string) *AddTemplateGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddTemplateGroupRequest) SetOwnerId(v int64) *AddTemplateGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *AddTemplateGroupRequest) SetResourceOwnerAccount(v string) *AddTemplateGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddTemplateGroupRequest) SetResourceOwnerId(v int64) *AddTemplateGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddTemplateGroupRequest) SetName(v string) *AddTemplateGroupRequest {
  s.Name = &v
  return s
}

func (s *AddTemplateGroupRequest) SetToNeedTranscode(v string) *AddTemplateGroupRequest {
  s.ToNeedTranscode = &v
  return s
}

type AddTemplateGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s AddTemplateGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s AddTemplateGroupResponse) GoString() string {
  return s.String()
}

func (s *AddTemplateGroupResponse) SetRequestId(v string) *AddTemplateGroupResponse {
  s.RequestId = &v
  return s
}

func (s *AddTemplateGroupResponse) SetResult(v bool) *AddTemplateGroupResponse {
  s.Result = &v
  return s
}

type AddCustomTemplateAndGroupRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  Configs *string `json:"Configs" xml:"Configs"`
}

func (s AddCustomTemplateAndGroupRequest) String() string {
  return tea.Prettify(s)
}

func (s AddCustomTemplateAndGroupRequest) GoString() string {
  return s.String()
}

func (s *AddCustomTemplateAndGroupRequest) SetAccessKeyId(v string) *AddCustomTemplateAndGroupRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddCustomTemplateAndGroupRequest) SetOwnerId(v int64) *AddCustomTemplateAndGroupRequest {
  s.OwnerId = &v
  return s
}

func (s *AddCustomTemplateAndGroupRequest) SetResourceOwnerAccount(v string) *AddCustomTemplateAndGroupRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddCustomTemplateAndGroupRequest) SetResourceOwnerId(v int64) *AddCustomTemplateAndGroupRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddCustomTemplateAndGroupRequest) SetResourceRealOwnerId(v int64) *AddCustomTemplateAndGroupRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *AddCustomTemplateAndGroupRequest) SetConfigs(v string) *AddCustomTemplateAndGroupRequest {
  s.Configs = &v
  return s
}

type AddCustomTemplateAndGroupResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
  TemplateGroup *AddCustomTemplateAndGroupResponseTemplateGroup `json:"TemplateGroup" xml:"TemplateGroup" require:"true" type:"Struct"`
}

func (s AddCustomTemplateAndGroupResponse) String() string {
  return tea.Prettify(s)
}

func (s AddCustomTemplateAndGroupResponse) GoString() string {
  return s.String()
}

func (s *AddCustomTemplateAndGroupResponse) SetRequestId(v string) *AddCustomTemplateAndGroupResponse {
  s.RequestId = &v
  return s
}

func (s *AddCustomTemplateAndGroupResponse) SetResult(v bool) *AddCustomTemplateAndGroupResponse {
  s.Result = &v
  return s
}

func (s *AddCustomTemplateAndGroupResponse) SetTemplateGroup(v *AddCustomTemplateAndGroupResponseTemplateGroup) *AddCustomTemplateAndGroupResponse {
  s.TemplateGroup = v
  return s
}

type AddCustomTemplateAndGroupResponseTemplateGroup struct {
  TemplateGroupId *string `json:"TemplateGroupId" xml:"TemplateGroupId" require:"true"`
}

func (s AddCustomTemplateAndGroupResponseTemplateGroup) String() string {
  return tea.Prettify(s)
}

func (s AddCustomTemplateAndGroupResponseTemplateGroup) GoString() string {
  return s.String()
}

func (s *AddCustomTemplateAndGroupResponseTemplateGroup) SetTemplateGroupId(v string) *AddCustomTemplateAndGroupResponseTemplateGroup {
  s.TemplateGroupId = &v
  return s
}

type AddCustomTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  GroupId *string `json:"GroupId" xml:"GroupId"`
  Video *string `json:"Video" xml:"Video" require:"true"`
  Audio *string `json:"Audio" xml:"Audio" require:"true"`
  TransConfig *string `json:"TransConfig" xml:"TransConfig"`
  MuxConfig *string `json:"MuxConfig" xml:"MuxConfig"`
  Container *string `json:"Container" xml:"Container" require:"true"`
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  UseWaterMark *string `json:"UseWaterMark" xml:"UseWaterMark"`
  Encrypt *string `json:"Encrypt" xml:"Encrypt"`
  Condition *string `json:"Condition" xml:"Condition"`
  NarrowBand *string `json:"NarrowBand" xml:"NarrowBand"`
}

func (s AddCustomTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s AddCustomTemplateRequest) GoString() string {
  return s.String()
}

func (s *AddCustomTemplateRequest) SetAccessKeyId(v string) *AddCustomTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddCustomTemplateRequest) SetOwnerId(v int64) *AddCustomTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *AddCustomTemplateRequest) SetResourceOwnerAccount(v string) *AddCustomTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddCustomTemplateRequest) SetResourceOwnerId(v int64) *AddCustomTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddCustomTemplateRequest) SetGroupId(v string) *AddCustomTemplateRequest {
  s.GroupId = &v
  return s
}

func (s *AddCustomTemplateRequest) SetVideo(v string) *AddCustomTemplateRequest {
  s.Video = &v
  return s
}

func (s *AddCustomTemplateRequest) SetAudio(v string) *AddCustomTemplateRequest {
  s.Audio = &v
  return s
}

func (s *AddCustomTemplateRequest) SetTransConfig(v string) *AddCustomTemplateRequest {
  s.TransConfig = &v
  return s
}

func (s *AddCustomTemplateRequest) SetMuxConfig(v string) *AddCustomTemplateRequest {
  s.MuxConfig = &v
  return s
}

func (s *AddCustomTemplateRequest) SetContainer(v string) *AddCustomTemplateRequest {
  s.Container = &v
  return s
}

func (s *AddCustomTemplateRequest) SetDefinition(v string) *AddCustomTemplateRequest {
  s.Definition = &v
  return s
}

func (s *AddCustomTemplateRequest) SetUseWaterMark(v string) *AddCustomTemplateRequest {
  s.UseWaterMark = &v
  return s
}

func (s *AddCustomTemplateRequest) SetEncrypt(v string) *AddCustomTemplateRequest {
  s.Encrypt = &v
  return s
}

func (s *AddCustomTemplateRequest) SetCondition(v string) *AddCustomTemplateRequest {
  s.Condition = &v
  return s
}

func (s *AddCustomTemplateRequest) SetNarrowBand(v string) *AddCustomTemplateRequest {
  s.NarrowBand = &v
  return s
}

type AddCustomTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s AddCustomTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s AddCustomTemplateResponse) GoString() string {
  return s.String()
}

func (s *AddCustomTemplateResponse) SetRequestId(v string) *AddCustomTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *AddCustomTemplateResponse) SetResult(v bool) *AddCustomTemplateResponse {
  s.Result = &v
  return s
}

type SubmitAIVideoPornRecogJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  AIVideoPornRecogConfig *string `json:"AIVideoPornRecogConfig" xml:"AIVideoPornRecogConfig"`
  UserData *string `json:"UserData" xml:"UserData"`
}

func (s SubmitAIVideoPornRecogJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoPornRecogJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoPornRecogJobRequest) SetAccessKeyId(v string) *SubmitAIVideoPornRecogJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobRequest) SetOwnerId(v string) *SubmitAIVideoPornRecogJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobRequest) SetResourceOwnerId(v string) *SubmitAIVideoPornRecogJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobRequest) SetResourceOwnerAccount(v string) *SubmitAIVideoPornRecogJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobRequest) SetOwnerAccount(v string) *SubmitAIVideoPornRecogJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobRequest) SetMediaId(v string) *SubmitAIVideoPornRecogJobRequest {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobRequest) SetAIVideoPornRecogConfig(v string) *SubmitAIVideoPornRecogJobRequest {
  s.AIVideoPornRecogConfig = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobRequest) SetUserData(v string) *SubmitAIVideoPornRecogJobRequest {
  s.UserData = &v
  return s
}

type SubmitAIVideoPornRecogJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoPornRecogJob *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob `json:"AIVideoPornRecogJob" xml:"AIVideoPornRecogJob" require:"true" type:"Struct"`
}

func (s SubmitAIVideoPornRecogJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoPornRecogJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoPornRecogJobResponse) SetRequestId(v string) *SubmitAIVideoPornRecogJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobResponse) SetAIVideoPornRecogJob(v *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) *SubmitAIVideoPornRecogJobResponse {
  s.AIVideoPornRecogJob = v
  return s
}

type SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob struct {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) SetJobId(v string) *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob {
  s.JobId = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) SetMediaId(v string) *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) SetStatus(v string) *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob {
  s.Status = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) SetCode(v string) *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob {
  s.Code = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) SetMessage(v string) *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob {
  s.Message = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) SetCreationTime(v string) *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob {
  s.CreationTime = &v
  return s
}

func (s *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob) SetData(v string) *SubmitAIVideoPornRecogJobResponseAIVideoPornRecogJob {
  s.Data = &v
  return s
}

type ListAIVideoPornRecogJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  AIVideoPornRecogJobIds *string `json:"AIVideoPornRecogJobIds" xml:"AIVideoPornRecogJobIds" require:"true"`
}

func (s ListAIVideoPornRecogJobRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoPornRecogJobRequest) GoString() string {
  return s.String()
}

func (s *ListAIVideoPornRecogJobRequest) SetAccessKeyId(v string) *ListAIVideoPornRecogJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAIVideoPornRecogJobRequest) SetOwnerId(v string) *ListAIVideoPornRecogJobRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAIVideoPornRecogJobRequest) SetResourceOwnerId(v string) *ListAIVideoPornRecogJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAIVideoPornRecogJobRequest) SetResourceOwnerAccount(v string) *ListAIVideoPornRecogJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAIVideoPornRecogJobRequest) SetOwnerAccount(v string) *ListAIVideoPornRecogJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *ListAIVideoPornRecogJobRequest) SetAIVideoPornRecogJobIds(v string) *ListAIVideoPornRecogJobRequest {
  s.AIVideoPornRecogJobIds = &v
  return s
}

type ListAIVideoPornRecogJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoPornRecogJobList *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobList `json:"AIVideoPornRecogJobList" xml:"AIVideoPornRecogJobList" require:"true" type:"Struct"`
  NonExistPornRecogJobIds *ListAIVideoPornRecogJobResponseNonExistPornRecogJobIds `json:"NonExistPornRecogJobIds" xml:"NonExistPornRecogJobIds" require:"true" type:"Struct"`
}

func (s ListAIVideoPornRecogJobResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoPornRecogJobResponse) GoString() string {
  return s.String()
}

func (s *ListAIVideoPornRecogJobResponse) SetRequestId(v string) *ListAIVideoPornRecogJobResponse {
  s.RequestId = &v
  return s
}

func (s *ListAIVideoPornRecogJobResponse) SetAIVideoPornRecogJobList(v *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobList) *ListAIVideoPornRecogJobResponse {
  s.AIVideoPornRecogJobList = v
  return s
}

func (s *ListAIVideoPornRecogJobResponse) SetNonExistPornRecogJobIds(v *ListAIVideoPornRecogJobResponseNonExistPornRecogJobIds) *ListAIVideoPornRecogJobResponse {
  s.NonExistPornRecogJobIds = v
  return s
}

type ListAIVideoPornRecogJobResponseAIVideoPornRecogJobList struct {
  AIVideoPornRecogJob []*ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob `json:"AIVideoPornRecogJob" xml:"AIVideoPornRecogJob" require:"true" type:"Repeated"`
}

func (s ListAIVideoPornRecogJobResponseAIVideoPornRecogJobList) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoPornRecogJobResponseAIVideoPornRecogJobList) GoString() string {
  return s.String()
}

func (s *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobList) SetAIVideoPornRecogJob(v []*ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobList {
  s.AIVideoPornRecogJob = v
  return s
}

type ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) GoString() string {
  return s.String()
}

func (s *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) SetJobId(v string) *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob {
  s.JobId = &v
  return s
}

func (s *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) SetMediaId(v string) *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob {
  s.MediaId = &v
  return s
}

func (s *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) SetStatus(v string) *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob {
  s.Status = &v
  return s
}

func (s *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) SetCode(v string) *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob {
  s.Code = &v
  return s
}

func (s *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) SetMessage(v string) *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob {
  s.Message = &v
  return s
}

func (s *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) SetCreationTime(v string) *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob {
  s.CreationTime = &v
  return s
}

func (s *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob) SetData(v string) *ListAIVideoPornRecogJobResponseAIVideoPornRecogJobListAIVideoPornRecogJob {
  s.Data = &v
  return s
}

type ListAIVideoPornRecogJobResponseNonExistPornRecogJobIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s ListAIVideoPornRecogJobResponseNonExistPornRecogJobIds) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoPornRecogJobResponseNonExistPornRecogJobIds) GoString() string {
  return s.String()
}

func (s *ListAIVideoPornRecogJobResponseNonExistPornRecogJobIds) SetString(v []*string) *ListAIVideoPornRecogJobResponseNonExistPornRecogJobIds {
  s.String = v
  return s
}

type SubmitAIVideoCoverJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  AIVideoCoverConfig *string `json:"AIVideoCoverConfig" xml:"AIVideoCoverConfig"`
  UserData *string `json:"UserData" xml:"UserData"`
}

func (s SubmitAIVideoCoverJobRequest) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoCoverJobRequest) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoCoverJobRequest) SetAccessKeyId(v string) *SubmitAIVideoCoverJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SubmitAIVideoCoverJobRequest) SetOwnerId(v string) *SubmitAIVideoCoverJobRequest {
  s.OwnerId = &v
  return s
}

func (s *SubmitAIVideoCoverJobRequest) SetResourceOwnerId(v string) *SubmitAIVideoCoverJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SubmitAIVideoCoverJobRequest) SetResourceOwnerAccount(v string) *SubmitAIVideoCoverJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SubmitAIVideoCoverJobRequest) SetOwnerAccount(v string) *SubmitAIVideoCoverJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SubmitAIVideoCoverJobRequest) SetMediaId(v string) *SubmitAIVideoCoverJobRequest {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoCoverJobRequest) SetAIVideoCoverConfig(v string) *SubmitAIVideoCoverJobRequest {
  s.AIVideoCoverConfig = &v
  return s
}

func (s *SubmitAIVideoCoverJobRequest) SetUserData(v string) *SubmitAIVideoCoverJobRequest {
  s.UserData = &v
  return s
}

type SubmitAIVideoCoverJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoCoverJob *SubmitAIVideoCoverJobResponseAIVideoCoverJob `json:"AIVideoCoverJob" xml:"AIVideoCoverJob" require:"true" type:"Struct"`
}

func (s SubmitAIVideoCoverJobResponse) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoCoverJobResponse) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoCoverJobResponse) SetRequestId(v string) *SubmitAIVideoCoverJobResponse {
  s.RequestId = &v
  return s
}

func (s *SubmitAIVideoCoverJobResponse) SetAIVideoCoverJob(v *SubmitAIVideoCoverJobResponseAIVideoCoverJob) *SubmitAIVideoCoverJobResponse {
  s.AIVideoCoverJob = v
  return s
}

type SubmitAIVideoCoverJobResponseAIVideoCoverJob struct {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s SubmitAIVideoCoverJobResponseAIVideoCoverJob) String() string {
  return tea.Prettify(s)
}

func (s SubmitAIVideoCoverJobResponseAIVideoCoverJob) GoString() string {
  return s.String()
}

func (s *SubmitAIVideoCoverJobResponseAIVideoCoverJob) SetJobId(v string) *SubmitAIVideoCoverJobResponseAIVideoCoverJob {
  s.JobId = &v
  return s
}

func (s *SubmitAIVideoCoverJobResponseAIVideoCoverJob) SetMediaId(v string) *SubmitAIVideoCoverJobResponseAIVideoCoverJob {
  s.MediaId = &v
  return s
}

func (s *SubmitAIVideoCoverJobResponseAIVideoCoverJob) SetStatus(v string) *SubmitAIVideoCoverJobResponseAIVideoCoverJob {
  s.Status = &v
  return s
}

func (s *SubmitAIVideoCoverJobResponseAIVideoCoverJob) SetCode(v string) *SubmitAIVideoCoverJobResponseAIVideoCoverJob {
  s.Code = &v
  return s
}

func (s *SubmitAIVideoCoverJobResponseAIVideoCoverJob) SetMessage(v string) *SubmitAIVideoCoverJobResponseAIVideoCoverJob {
  s.Message = &v
  return s
}

func (s *SubmitAIVideoCoverJobResponseAIVideoCoverJob) SetCreationTime(v string) *SubmitAIVideoCoverJobResponseAIVideoCoverJob {
  s.CreationTime = &v
  return s
}

func (s *SubmitAIVideoCoverJobResponseAIVideoCoverJob) SetData(v string) *SubmitAIVideoCoverJobResponseAIVideoCoverJob {
  s.Data = &v
  return s
}

type ListAIVideoCoverJobRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  AIVideoCoverJobIds *string `json:"AIVideoCoverJobIds" xml:"AIVideoCoverJobIds" require:"true"`
}

func (s ListAIVideoCoverJobRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCoverJobRequest) GoString() string {
  return s.String()
}

func (s *ListAIVideoCoverJobRequest) SetAccessKeyId(v string) *ListAIVideoCoverJobRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAIVideoCoverJobRequest) SetOwnerId(v string) *ListAIVideoCoverJobRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAIVideoCoverJobRequest) SetResourceOwnerId(v string) *ListAIVideoCoverJobRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAIVideoCoverJobRequest) SetResourceOwnerAccount(v string) *ListAIVideoCoverJobRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAIVideoCoverJobRequest) SetOwnerAccount(v string) *ListAIVideoCoverJobRequest {
  s.OwnerAccount = &v
  return s
}

func (s *ListAIVideoCoverJobRequest) SetAIVideoCoverJobIds(v string) *ListAIVideoCoverJobRequest {
  s.AIVideoCoverJobIds = &v
  return s
}

type ListAIVideoCoverJobResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AIVideoCoverJobList *ListAIVideoCoverJobResponseAIVideoCoverJobList `json:"AIVideoCoverJobList" xml:"AIVideoCoverJobList" require:"true" type:"Struct"`
  NonExistAIVideoCoverJobIds *ListAIVideoCoverJobResponseNonExistAIVideoCoverJobIds `json:"NonExistAIVideoCoverJobIds" xml:"NonExistAIVideoCoverJobIds" require:"true" type:"Struct"`
}

func (s ListAIVideoCoverJobResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCoverJobResponse) GoString() string {
  return s.String()
}

func (s *ListAIVideoCoverJobResponse) SetRequestId(v string) *ListAIVideoCoverJobResponse {
  s.RequestId = &v
  return s
}

func (s *ListAIVideoCoverJobResponse) SetAIVideoCoverJobList(v *ListAIVideoCoverJobResponseAIVideoCoverJobList) *ListAIVideoCoverJobResponse {
  s.AIVideoCoverJobList = v
  return s
}

func (s *ListAIVideoCoverJobResponse) SetNonExistAIVideoCoverJobIds(v *ListAIVideoCoverJobResponseNonExistAIVideoCoverJobIds) *ListAIVideoCoverJobResponse {
  s.NonExistAIVideoCoverJobIds = v
  return s
}

type ListAIVideoCoverJobResponseAIVideoCoverJobList struct {
  AIVideoCoverJob []*ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob `json:"AIVideoCoverJob" xml:"AIVideoCoverJob" require:"true" type:"Repeated"`
}

func (s ListAIVideoCoverJobResponseAIVideoCoverJobList) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCoverJobResponseAIVideoCoverJobList) GoString() string {
  return s.String()
}

func (s *ListAIVideoCoverJobResponseAIVideoCoverJobList) SetAIVideoCoverJob(v []*ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) *ListAIVideoCoverJobResponseAIVideoCoverJobList {
  s.AIVideoCoverJob = v
  return s
}

type ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob struct     {
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Code *string `json:"Code" xml:"Code" require:"true"`
  Message *string `json:"Message" xml:"Message" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Data *string `json:"Data" xml:"Data" require:"true"`
}

func (s ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) GoString() string {
  return s.String()
}

func (s *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) SetJobId(v string) *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob {
  s.JobId = &v
  return s
}

func (s *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) SetMediaId(v string) *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob {
  s.MediaId = &v
  return s
}

func (s *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) SetStatus(v string) *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob {
  s.Status = &v
  return s
}

func (s *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) SetCode(v string) *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob {
  s.Code = &v
  return s
}

func (s *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) SetMessage(v string) *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob {
  s.Message = &v
  return s
}

func (s *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) SetCreationTime(v string) *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob {
  s.CreationTime = &v
  return s
}

func (s *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob) SetData(v string) *ListAIVideoCoverJobResponseAIVideoCoverJobListAIVideoCoverJob {
  s.Data = &v
  return s
}

type ListAIVideoCoverJobResponseNonExistAIVideoCoverJobIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s ListAIVideoCoverJobResponseNonExistAIVideoCoverJobIds) String() string {
  return tea.Prettify(s)
}

func (s ListAIVideoCoverJobResponseNonExistAIVideoCoverJobIds) GoString() string {
  return s.String()
}

func (s *ListAIVideoCoverJobResponseNonExistAIVideoCoverJobIds) SetString(v []*string) *ListAIVideoCoverJobResponseNonExistAIVideoCoverJobIds {
  s.String = v
  return s
}

type DeleteAudioTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s DeleteAudioTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteAudioTemplateRequest) GoString() string {
  return s.String()
}

func (s *DeleteAudioTemplateRequest) SetAccessKeyId(v string) *DeleteAudioTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteAudioTemplateRequest) SetOwnerId(v int64) *DeleteAudioTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteAudioTemplateRequest) SetResourceOwnerAccount(v string) *DeleteAudioTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteAudioTemplateRequest) SetResourceOwnerId(v int64) *DeleteAudioTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteAudioTemplateRequest) SetTemplateId(v string) *DeleteAudioTemplateRequest {
  s.TemplateId = &v
  return s
}

type DeleteAudioTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s DeleteAudioTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteAudioTemplateResponse) GoString() string {
  return s.String()
}

func (s *DeleteAudioTemplateResponse) SetRequestId(v string) *DeleteAudioTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteAudioTemplateResponse) SetResult(v bool) *DeleteAudioTemplateResponse {
  s.Result = &v
  return s
}

type DeleteAudioConfigRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
}

func (s DeleteAudioConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteAudioConfigRequest) GoString() string {
  return s.String()
}

func (s *DeleteAudioConfigRequest) SetAccessKeyId(v string) *DeleteAudioConfigRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteAudioConfigRequest) SetOwnerId(v int64) *DeleteAudioConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteAudioConfigRequest) SetResourceOwnerAccount(v string) *DeleteAudioConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteAudioConfigRequest) SetResourceOwnerId(v int64) *DeleteAudioConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

type DeleteAudioConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s DeleteAudioConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteAudioConfigResponse) GoString() string {
  return s.String()
}

func (s *DeleteAudioConfigResponse) SetRequestId(v string) *DeleteAudioConfigResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteAudioConfigResponse) SetResult(v bool) *DeleteAudioConfigResponse {
  s.Result = &v
  return s
}

type AddOriginTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
}

func (s AddOriginTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s AddOriginTemplateRequest) GoString() string {
  return s.String()
}

func (s *AddOriginTemplateRequest) SetAccessKeyId(v string) *AddOriginTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddOriginTemplateRequest) SetOwnerId(v int64) *AddOriginTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *AddOriginTemplateRequest) SetResourceOwnerAccount(v string) *AddOriginTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddOriginTemplateRequest) SetResourceOwnerId(v int64) *AddOriginTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

type AddOriginTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddOriginTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s AddOriginTemplateResponse) GoString() string {
  return s.String()
}

func (s *AddOriginTemplateResponse) SetRequestId(v string) *AddOriginTemplateResponse {
  s.RequestId = &v
  return s
}

type UpdateMaterialStatusRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MaterialIds *string `json:"MaterialIds" xml:"MaterialIds" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s UpdateMaterialStatusRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateMaterialStatusRequest) GoString() string {
  return s.String()
}

func (s *UpdateMaterialStatusRequest) SetAccessKeyId(v string) *UpdateMaterialStatusRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateMaterialStatusRequest) SetOwnerId(v string) *UpdateMaterialStatusRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateMaterialStatusRequest) SetResourceOwnerId(v string) *UpdateMaterialStatusRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateMaterialStatusRequest) SetResourceOwnerAccount(v string) *UpdateMaterialStatusRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateMaterialStatusRequest) SetOwnerAccount(v string) *UpdateMaterialStatusRequest {
  s.OwnerAccount = &v
  return s
}

func (s *UpdateMaterialStatusRequest) SetMaterialIds(v string) *UpdateMaterialStatusRequest {
  s.MaterialIds = &v
  return s
}

func (s *UpdateMaterialStatusRequest) SetStatus(v string) *UpdateMaterialStatusRequest {
  s.Status = &v
  return s
}

type UpdateMaterialStatusResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateMaterialStatusResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateMaterialStatusResponse) GoString() string {
  return s.String()
}

func (s *UpdateMaterialStatusResponse) SetRequestId(v string) *UpdateMaterialStatusResponse {
  s.RequestId = &v
  return s
}

type UpdateMaterialRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
  Title *string `json:"Title" xml:"Title"`
  Description *string `json:"Description" xml:"Description"`
  Tags *string `json:"Tags" xml:"Tags"`
  CoverUrl *string `json:"CoverUrl" xml:"CoverUrl"`
  CateId *int `json:"CateId" xml:"CateId"`
}

func (s UpdateMaterialRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateMaterialRequest) GoString() string {
  return s.String()
}

func (s *UpdateMaterialRequest) SetAccessKeyId(v string) *UpdateMaterialRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateMaterialRequest) SetOwnerId(v string) *UpdateMaterialRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateMaterialRequest) SetResourceOwnerId(v string) *UpdateMaterialRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateMaterialRequest) SetResourceOwnerAccount(v string) *UpdateMaterialRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateMaterialRequest) SetOwnerAccount(v string) *UpdateMaterialRequest {
  s.OwnerAccount = &v
  return s
}

func (s *UpdateMaterialRequest) SetMaterialId(v string) *UpdateMaterialRequest {
  s.MaterialId = &v
  return s
}

func (s *UpdateMaterialRequest) SetTitle(v string) *UpdateMaterialRequest {
  s.Title = &v
  return s
}

func (s *UpdateMaterialRequest) SetDescription(v string) *UpdateMaterialRequest {
  s.Description = &v
  return s
}

func (s *UpdateMaterialRequest) SetTags(v string) *UpdateMaterialRequest {
  s.Tags = &v
  return s
}

func (s *UpdateMaterialRequest) SetCoverUrl(v string) *UpdateMaterialRequest {
  s.CoverUrl = &v
  return s
}

func (s *UpdateMaterialRequest) SetCateId(v int) *UpdateMaterialRequest {
  s.CateId = &v
  return s
}

type UpdateMaterialResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Material *UpdateMaterialResponseMaterial `json:"Material" xml:"Material" require:"true" type:"Struct"`
}

func (s UpdateMaterialResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateMaterialResponse) GoString() string {
  return s.String()
}

func (s *UpdateMaterialResponse) SetRequestId(v string) *UpdateMaterialResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateMaterialResponse) SetMaterial(v *UpdateMaterialResponseMaterial) *UpdateMaterialResponse {
  s.Material = v
  return s
}

type UpdateMaterialResponseMaterial struct {
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  Snapshots *UpdateMaterialResponseMaterialSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
  Tiles *UpdateMaterialResponseMaterialTiles `json:"Tiles" xml:"Tiles" require:"true" type:"Struct"`
}

func (s UpdateMaterialResponseMaterial) String() string {
  return tea.Prettify(s)
}

func (s UpdateMaterialResponseMaterial) GoString() string {
  return s.String()
}

func (s *UpdateMaterialResponseMaterial) SetMaterialId(v string) *UpdateMaterialResponseMaterial {
  s.MaterialId = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetTitle(v string) *UpdateMaterialResponseMaterial {
  s.Title = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetTags(v string) *UpdateMaterialResponseMaterial {
  s.Tags = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetStatus(v string) *UpdateMaterialResponseMaterial {
  s.Status = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetSize(v int64) *UpdateMaterialResponseMaterial {
  s.Size = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetDuration(v float32) *UpdateMaterialResponseMaterial {
  s.Duration = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetDescription(v string) *UpdateMaterialResponseMaterial {
  s.Description = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetCustomerId(v int64) *UpdateMaterialResponseMaterial {
  s.CustomerId = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetCreateTime(v string) *UpdateMaterialResponseMaterial {
  s.CreateTime = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetModifyTime(v string) *UpdateMaterialResponseMaterial {
  s.ModifyTime = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetCoverURL(v string) *UpdateMaterialResponseMaterial {
  s.CoverURL = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetCateId(v int) *UpdateMaterialResponseMaterial {
  s.CateId = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetCateName(v string) *UpdateMaterialResponseMaterial {
  s.CateName = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetSource(v string) *UpdateMaterialResponseMaterial {
  s.Source = &v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetSnapshots(v *UpdateMaterialResponseMaterialSnapshots) *UpdateMaterialResponseMaterial {
  s.Snapshots = v
  return s
}

func (s *UpdateMaterialResponseMaterial) SetTiles(v *UpdateMaterialResponseMaterialTiles) *UpdateMaterialResponseMaterial {
  s.Tiles = v
  return s
}

type UpdateMaterialResponseMaterialSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s UpdateMaterialResponseMaterialSnapshots) String() string {
  return tea.Prettify(s)
}

func (s UpdateMaterialResponseMaterialSnapshots) GoString() string {
  return s.String()
}

func (s *UpdateMaterialResponseMaterialSnapshots) SetSnapshot(v []*string) *UpdateMaterialResponseMaterialSnapshots {
  s.Snapshot = v
  return s
}

type UpdateMaterialResponseMaterialTiles struct {
  Tile []*string `json:"Tile" xml:"Tile" require:"true" type:"Repeated"`
}

func (s UpdateMaterialResponseMaterialTiles) String() string {
  return tea.Prettify(s)
}

func (s UpdateMaterialResponseMaterialTiles) GoString() string {
  return s.String()
}

func (s *UpdateMaterialResponseMaterialTiles) SetTile(v []*string) *UpdateMaterialResponseMaterialTiles {
  s.Tile = v
  return s
}

type UpdateEditingProjectStatusRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ProjectIds *string `json:"ProjectIds" xml:"ProjectIds" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s UpdateEditingProjectStatusRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateEditingProjectStatusRequest) GoString() string {
  return s.String()
}

func (s *UpdateEditingProjectStatusRequest) SetAccessKeyId(v string) *UpdateEditingProjectStatusRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateEditingProjectStatusRequest) SetOwnerId(v string) *UpdateEditingProjectStatusRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateEditingProjectStatusRequest) SetResourceOwnerId(v string) *UpdateEditingProjectStatusRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateEditingProjectStatusRequest) SetResourceOwnerAccount(v string) *UpdateEditingProjectStatusRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateEditingProjectStatusRequest) SetOwnerAccount(v string) *UpdateEditingProjectStatusRequest {
  s.OwnerAccount = &v
  return s
}

func (s *UpdateEditingProjectStatusRequest) SetProjectIds(v string) *UpdateEditingProjectStatusRequest {
  s.ProjectIds = &v
  return s
}

func (s *UpdateEditingProjectStatusRequest) SetStatus(v string) *UpdateEditingProjectStatusRequest {
  s.Status = &v
  return s
}

type UpdateEditingProjectStatusResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateEditingProjectStatusResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateEditingProjectStatusResponse) GoString() string {
  return s.String()
}

func (s *UpdateEditingProjectStatusResponse) SetRequestId(v string) *UpdateEditingProjectStatusResponse {
  s.RequestId = &v
  return s
}

type UpdateEditingProjectRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
  Title *string `json:"Title" xml:"Title"`
  Timeline *string `json:"Timeline" xml:"Timeline"`
  Description *string `json:"Description" xml:"Description"`
  CoverUrl *string `json:"CoverUrl" xml:"CoverUrl"`
  Duration *float32 `json:"Duration" xml:"Duration"`
}

func (s UpdateEditingProjectRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateEditingProjectRequest) GoString() string {
  return s.String()
}

func (s *UpdateEditingProjectRequest) SetAccessKeyId(v string) *UpdateEditingProjectRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetOwnerId(v string) *UpdateEditingProjectRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetResourceOwnerId(v string) *UpdateEditingProjectRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetResourceOwnerAccount(v string) *UpdateEditingProjectRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetOwnerAccount(v string) *UpdateEditingProjectRequest {
  s.OwnerAccount = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetProjectId(v string) *UpdateEditingProjectRequest {
  s.ProjectId = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetTitle(v string) *UpdateEditingProjectRequest {
  s.Title = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetTimeline(v string) *UpdateEditingProjectRequest {
  s.Timeline = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetDescription(v string) *UpdateEditingProjectRequest {
  s.Description = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetCoverUrl(v string) *UpdateEditingProjectRequest {
  s.CoverUrl = &v
  return s
}

func (s *UpdateEditingProjectRequest) SetDuration(v float32) *UpdateEditingProjectRequest {
  s.Duration = &v
  return s
}

type UpdateEditingProjectResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Project *UpdateEditingProjectResponseProject `json:"Project" xml:"Project" require:"true" type:"Struct"`
}

func (s UpdateEditingProjectResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateEditingProjectResponse) GoString() string {
  return s.String()
}

func (s *UpdateEditingProjectResponse) SetRequestId(v string) *UpdateEditingProjectResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateEditingProjectResponse) SetProject(v *UpdateEditingProjectResponseProject) *UpdateEditingProjectResponse {
  s.Project = v
  return s
}

type UpdateEditingProjectResponseProject struct {
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Timeline *string `json:"Timeline" xml:"Timeline" require:"true"`
  ProducedMediaId *string `json:"ProducedMediaId" xml:"ProducedMediaId" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  CoverUrl *string `json:"CoverUrl" xml:"CoverUrl" require:"true"`
}

func (s UpdateEditingProjectResponseProject) String() string {
  return tea.Prettify(s)
}

func (s UpdateEditingProjectResponseProject) GoString() string {
  return s.String()
}

func (s *UpdateEditingProjectResponseProject) SetProjectId(v string) *UpdateEditingProjectResponseProject {
  s.ProjectId = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetCreateTime(v string) *UpdateEditingProjectResponseProject {
  s.CreateTime = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetModifyTime(v string) *UpdateEditingProjectResponseProject {
  s.ModifyTime = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetCustomerId(v string) *UpdateEditingProjectResponseProject {
  s.CustomerId = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetStatus(v string) *UpdateEditingProjectResponseProject {
  s.Status = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetDescription(v string) *UpdateEditingProjectResponseProject {
  s.Description = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetTitle(v string) *UpdateEditingProjectResponseProject {
  s.Title = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetTimeline(v string) *UpdateEditingProjectResponseProject {
  s.Timeline = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetProducedMediaId(v string) *UpdateEditingProjectResponseProject {
  s.ProducedMediaId = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetDuration(v float32) *UpdateEditingProjectResponseProject {
  s.Duration = &v
  return s
}

func (s *UpdateEditingProjectResponseProject) SetCoverUrl(v string) *UpdateEditingProjectResponseProject {
  s.CoverUrl = &v
  return s
}

type SyncMaterialRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoIds *string `json:"VideoIds" xml:"VideoIds" require:"true"`
}

func (s SyncMaterialRequest) String() string {
  return tea.Prettify(s)
}

func (s SyncMaterialRequest) GoString() string {
  return s.String()
}

func (s *SyncMaterialRequest) SetAccessKeyId(v string) *SyncMaterialRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SyncMaterialRequest) SetOwnerId(v int64) *SyncMaterialRequest {
  s.OwnerId = &v
  return s
}

func (s *SyncMaterialRequest) SetResourceOwnerAccount(v string) *SyncMaterialRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SyncMaterialRequest) SetResourceOwnerId(v int64) *SyncMaterialRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SyncMaterialRequest) SetVideoIds(v string) *SyncMaterialRequest {
  s.VideoIds = &v
  return s
}

type SyncMaterialResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  SuccessVideoIds *SyncMaterialResponseSuccessVideoIds `json:"SuccessVideoIds" xml:"SuccessVideoIds" require:"true" type:"Struct"`
  FailedVideoIds *SyncMaterialResponseFailedVideoIds `json:"FailedVideoIds" xml:"FailedVideoIds" require:"true" type:"Struct"`
}

func (s SyncMaterialResponse) String() string {
  return tea.Prettify(s)
}

func (s SyncMaterialResponse) GoString() string {
  return s.String()
}

func (s *SyncMaterialResponse) SetRequestId(v string) *SyncMaterialResponse {
  s.RequestId = &v
  return s
}

func (s *SyncMaterialResponse) SetSuccessVideoIds(v *SyncMaterialResponseSuccessVideoIds) *SyncMaterialResponse {
  s.SuccessVideoIds = v
  return s
}

func (s *SyncMaterialResponse) SetFailedVideoIds(v *SyncMaterialResponseFailedVideoIds) *SyncMaterialResponse {
  s.FailedVideoIds = v
  return s
}

type SyncMaterialResponseSuccessVideoIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s SyncMaterialResponseSuccessVideoIds) String() string {
  return tea.Prettify(s)
}

func (s SyncMaterialResponseSuccessVideoIds) GoString() string {
  return s.String()
}

func (s *SyncMaterialResponseSuccessVideoIds) SetString(v []*string) *SyncMaterialResponseSuccessVideoIds {
  s.String = v
  return s
}

type SyncMaterialResponseFailedVideoIds struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s SyncMaterialResponseFailedVideoIds) String() string {
  return tea.Prettify(s)
}

func (s SyncMaterialResponseFailedVideoIds) GoString() string {
  return s.String()
}

func (s *SyncMaterialResponseFailedVideoIds) SetString(v []*string) *SyncMaterialResponseFailedVideoIds {
  s.String = v
  return s
}

type SetEditingProjectMaterialsRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
  MaterialIds *string `json:"MaterialIds" xml:"MaterialIds" require:"true"`
}

func (s SetEditingProjectMaterialsRequest) String() string {
  return tea.Prettify(s)
}

func (s SetEditingProjectMaterialsRequest) GoString() string {
  return s.String()
}

func (s *SetEditingProjectMaterialsRequest) SetAccessKeyId(v string) *SetEditingProjectMaterialsRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetEditingProjectMaterialsRequest) SetOwnerId(v string) *SetEditingProjectMaterialsRequest {
  s.OwnerId = &v
  return s
}

func (s *SetEditingProjectMaterialsRequest) SetResourceOwnerId(v string) *SetEditingProjectMaterialsRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetEditingProjectMaterialsRequest) SetResourceOwnerAccount(v string) *SetEditingProjectMaterialsRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetEditingProjectMaterialsRequest) SetOwnerAccount(v string) *SetEditingProjectMaterialsRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SetEditingProjectMaterialsRequest) SetProjectId(v string) *SetEditingProjectMaterialsRequest {
  s.ProjectId = &v
  return s
}

func (s *SetEditingProjectMaterialsRequest) SetMaterialIds(v string) *SetEditingProjectMaterialsRequest {
  s.MaterialIds = &v
  return s
}

type SetEditingProjectMaterialsResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MaterialList *SetEditingProjectMaterialsResponseMaterialList `json:"MaterialList" xml:"MaterialList" require:"true" type:"Struct"`
}

func (s SetEditingProjectMaterialsResponse) String() string {
  return tea.Prettify(s)
}

func (s SetEditingProjectMaterialsResponse) GoString() string {
  return s.String()
}

func (s *SetEditingProjectMaterialsResponse) SetRequestId(v string) *SetEditingProjectMaterialsResponse {
  s.RequestId = &v
  return s
}

func (s *SetEditingProjectMaterialsResponse) SetMaterialList(v *SetEditingProjectMaterialsResponseMaterialList) *SetEditingProjectMaterialsResponse {
  s.MaterialList = v
  return s
}

type SetEditingProjectMaterialsResponseMaterialList struct {
  Material []*SetEditingProjectMaterialsResponseMaterialListMaterial `json:"Material" xml:"Material" require:"true" type:"Repeated"`
}

func (s SetEditingProjectMaterialsResponseMaterialList) String() string {
  return tea.Prettify(s)
}

func (s SetEditingProjectMaterialsResponseMaterialList) GoString() string {
  return s.String()
}

func (s *SetEditingProjectMaterialsResponseMaterialList) SetMaterial(v []*SetEditingProjectMaterialsResponseMaterialListMaterial) *SetEditingProjectMaterialsResponseMaterialList {
  s.Material = v
  return s
}

type SetEditingProjectMaterialsResponseMaterialListMaterial struct     {
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Snapshots *SetEditingProjectMaterialsResponseMaterialListMaterialSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
  Tiles *SetEditingProjectMaterialsResponseMaterialListMaterialTiles `json:"Tiles" xml:"Tiles" require:"true" type:"Struct"`
}

func (s SetEditingProjectMaterialsResponseMaterialListMaterial) String() string {
  return tea.Prettify(s)
}

func (s SetEditingProjectMaterialsResponseMaterialListMaterial) GoString() string {
  return s.String()
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetMaterialId(v string) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.MaterialId = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetTitle(v string) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Title = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetTags(v string) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Tags = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetStatus(v string) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Status = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetSize(v int64) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Size = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetDuration(v float32) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Duration = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetDescription(v string) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Description = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetCustomerId(v int64) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CustomerId = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetCreateTime(v string) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CreateTime = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetModifyTime(v string) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.ModifyTime = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetCoverURL(v string) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CoverURL = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetCateId(v int) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CateId = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetCateName(v string) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CateName = &v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetSnapshots(v *SetEditingProjectMaterialsResponseMaterialListMaterialSnapshots) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Snapshots = v
  return s
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterial) SetTiles(v *SetEditingProjectMaterialsResponseMaterialListMaterialTiles) *SetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Tiles = v
  return s
}

type SetEditingProjectMaterialsResponseMaterialListMaterialSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s SetEditingProjectMaterialsResponseMaterialListMaterialSnapshots) String() string {
  return tea.Prettify(s)
}

func (s SetEditingProjectMaterialsResponseMaterialListMaterialSnapshots) GoString() string {
  return s.String()
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterialSnapshots) SetSnapshot(v []*string) *SetEditingProjectMaterialsResponseMaterialListMaterialSnapshots {
  s.Snapshot = v
  return s
}

type SetEditingProjectMaterialsResponseMaterialListMaterialTiles struct {
  Tile []*string `json:"Tile" xml:"Tile" require:"true" type:"Repeated"`
}

func (s SetEditingProjectMaterialsResponseMaterialListMaterialTiles) String() string {
  return tea.Prettify(s)
}

func (s SetEditingProjectMaterialsResponseMaterialListMaterialTiles) GoString() string {
  return s.String()
}

func (s *SetEditingProjectMaterialsResponseMaterialListMaterialTiles) SetTile(v []*string) *SetEditingProjectMaterialsResponseMaterialListMaterialTiles {
  s.Tile = v
  return s
}

type SearchMaterialRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  CateId *int `json:"CateId" xml:"CateId"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  Status *string `json:"Status" xml:"Status"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  Type *string `json:"Type" xml:"Type"`
  Source *string `json:"Source" xml:"Source"`
  Title *string `json:"Title" xml:"Title"`
}

func (s SearchMaterialRequest) String() string {
  return tea.Prettify(s)
}

func (s SearchMaterialRequest) GoString() string {
  return s.String()
}

func (s *SearchMaterialRequest) SetAccessKeyId(v string) *SearchMaterialRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SearchMaterialRequest) SetOwnerId(v string) *SearchMaterialRequest {
  s.OwnerId = &v
  return s
}

func (s *SearchMaterialRequest) SetResourceOwnerId(v string) *SearchMaterialRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SearchMaterialRequest) SetResourceOwnerAccount(v string) *SearchMaterialRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SearchMaterialRequest) SetOwnerAccount(v string) *SearchMaterialRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SearchMaterialRequest) SetCateId(v int) *SearchMaterialRequest {
  s.CateId = &v
  return s
}

func (s *SearchMaterialRequest) SetEndTime(v string) *SearchMaterialRequest {
  s.EndTime = &v
  return s
}

func (s *SearchMaterialRequest) SetStartTime(v string) *SearchMaterialRequest {
  s.StartTime = &v
  return s
}

func (s *SearchMaterialRequest) SetStatus(v string) *SearchMaterialRequest {
  s.Status = &v
  return s
}

func (s *SearchMaterialRequest) SetPageNo(v int) *SearchMaterialRequest {
  s.PageNo = &v
  return s
}

func (s *SearchMaterialRequest) SetPageSize(v int) *SearchMaterialRequest {
  s.PageSize = &v
  return s
}

func (s *SearchMaterialRequest) SetSortBy(v string) *SearchMaterialRequest {
  s.SortBy = &v
  return s
}

func (s *SearchMaterialRequest) SetType(v string) *SearchMaterialRequest {
  s.Type = &v
  return s
}

func (s *SearchMaterialRequest) SetSource(v string) *SearchMaterialRequest {
  s.Source = &v
  return s
}

func (s *SearchMaterialRequest) SetTitle(v string) *SearchMaterialRequest {
  s.Title = &v
  return s
}

type SearchMaterialResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Total *int `json:"Total" xml:"Total" require:"true"`
  MaterialList *SearchMaterialResponseMaterialList `json:"MaterialList" xml:"MaterialList" require:"true" type:"Struct"`
}

func (s SearchMaterialResponse) String() string {
  return tea.Prettify(s)
}

func (s SearchMaterialResponse) GoString() string {
  return s.String()
}

func (s *SearchMaterialResponse) SetRequestId(v string) *SearchMaterialResponse {
  s.RequestId = &v
  return s
}

func (s *SearchMaterialResponse) SetTotal(v int) *SearchMaterialResponse {
  s.Total = &v
  return s
}

func (s *SearchMaterialResponse) SetMaterialList(v *SearchMaterialResponseMaterialList) *SearchMaterialResponse {
  s.MaterialList = v
  return s
}

type SearchMaterialResponseMaterialList struct {
  Material []*SearchMaterialResponseMaterialListMaterial `json:"Material" xml:"Material" require:"true" type:"Repeated"`
}

func (s SearchMaterialResponseMaterialList) String() string {
  return tea.Prettify(s)
}

func (s SearchMaterialResponseMaterialList) GoString() string {
  return s.String()
}

func (s *SearchMaterialResponseMaterialList) SetMaterial(v []*SearchMaterialResponseMaterialListMaterial) *SearchMaterialResponseMaterialList {
  s.Material = v
  return s
}

type SearchMaterialResponseMaterialListMaterial struct     {
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  Snapshots *SearchMaterialResponseMaterialListMaterialSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
  Tiles *SearchMaterialResponseMaterialListMaterialTiles `json:"Tiles" xml:"Tiles" require:"true" type:"Struct"`
}

func (s SearchMaterialResponseMaterialListMaterial) String() string {
  return tea.Prettify(s)
}

func (s SearchMaterialResponseMaterialListMaterial) GoString() string {
  return s.String()
}

func (s *SearchMaterialResponseMaterialListMaterial) SetMaterialId(v string) *SearchMaterialResponseMaterialListMaterial {
  s.MaterialId = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetTitle(v string) *SearchMaterialResponseMaterialListMaterial {
  s.Title = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetTags(v string) *SearchMaterialResponseMaterialListMaterial {
  s.Tags = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetStatus(v string) *SearchMaterialResponseMaterialListMaterial {
  s.Status = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetSize(v int64) *SearchMaterialResponseMaterialListMaterial {
  s.Size = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetDuration(v float32) *SearchMaterialResponseMaterialListMaterial {
  s.Duration = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetDescription(v string) *SearchMaterialResponseMaterialListMaterial {
  s.Description = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetCustomerId(v int64) *SearchMaterialResponseMaterialListMaterial {
  s.CustomerId = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetCreateTime(v string) *SearchMaterialResponseMaterialListMaterial {
  s.CreateTime = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetModifyTime(v string) *SearchMaterialResponseMaterialListMaterial {
  s.ModifyTime = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetCoverURL(v string) *SearchMaterialResponseMaterialListMaterial {
  s.CoverURL = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetCateId(v int) *SearchMaterialResponseMaterialListMaterial {
  s.CateId = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetCateName(v string) *SearchMaterialResponseMaterialListMaterial {
  s.CateName = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetSource(v string) *SearchMaterialResponseMaterialListMaterial {
  s.Source = &v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetSnapshots(v *SearchMaterialResponseMaterialListMaterialSnapshots) *SearchMaterialResponseMaterialListMaterial {
  s.Snapshots = v
  return s
}

func (s *SearchMaterialResponseMaterialListMaterial) SetTiles(v *SearchMaterialResponseMaterialListMaterialTiles) *SearchMaterialResponseMaterialListMaterial {
  s.Tiles = v
  return s
}

type SearchMaterialResponseMaterialListMaterialSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s SearchMaterialResponseMaterialListMaterialSnapshots) String() string {
  return tea.Prettify(s)
}

func (s SearchMaterialResponseMaterialListMaterialSnapshots) GoString() string {
  return s.String()
}

func (s *SearchMaterialResponseMaterialListMaterialSnapshots) SetSnapshot(v []*string) *SearchMaterialResponseMaterialListMaterialSnapshots {
  s.Snapshot = v
  return s
}

type SearchMaterialResponseMaterialListMaterialTiles struct {
  Tile []*string `json:"Tile" xml:"Tile" require:"true" type:"Repeated"`
}

func (s SearchMaterialResponseMaterialListMaterialTiles) String() string {
  return tea.Prettify(s)
}

func (s SearchMaterialResponseMaterialListMaterialTiles) GoString() string {
  return s.String()
}

func (s *SearchMaterialResponseMaterialListMaterialTiles) SetTile(v []*string) *SearchMaterialResponseMaterialListMaterialTiles {
  s.Tile = v
  return s
}

type SearchEditingProjectRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  Status *string `json:"Status" xml:"Status"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  Title *string `json:"Title" xml:"Title"`
}

func (s SearchEditingProjectRequest) String() string {
  return tea.Prettify(s)
}

func (s SearchEditingProjectRequest) GoString() string {
  return s.String()
}

func (s *SearchEditingProjectRequest) SetAccessKeyId(v string) *SearchEditingProjectRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SearchEditingProjectRequest) SetOwnerId(v string) *SearchEditingProjectRequest {
  s.OwnerId = &v
  return s
}

func (s *SearchEditingProjectRequest) SetResourceOwnerId(v string) *SearchEditingProjectRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SearchEditingProjectRequest) SetResourceOwnerAccount(v string) *SearchEditingProjectRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SearchEditingProjectRequest) SetOwnerAccount(v string) *SearchEditingProjectRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SearchEditingProjectRequest) SetEndTime(v string) *SearchEditingProjectRequest {
  s.EndTime = &v
  return s
}

func (s *SearchEditingProjectRequest) SetStartTime(v string) *SearchEditingProjectRequest {
  s.StartTime = &v
  return s
}

func (s *SearchEditingProjectRequest) SetStatus(v string) *SearchEditingProjectRequest {
  s.Status = &v
  return s
}

func (s *SearchEditingProjectRequest) SetPageNo(v int) *SearchEditingProjectRequest {
  s.PageNo = &v
  return s
}

func (s *SearchEditingProjectRequest) SetPageSize(v int) *SearchEditingProjectRequest {
  s.PageSize = &v
  return s
}

func (s *SearchEditingProjectRequest) SetSortBy(v string) *SearchEditingProjectRequest {
  s.SortBy = &v
  return s
}

func (s *SearchEditingProjectRequest) SetTitle(v string) *SearchEditingProjectRequest {
  s.Title = &v
  return s
}

type SearchEditingProjectResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Total *int `json:"Total" xml:"Total" require:"true"`
  ProjectList *SearchEditingProjectResponseProjectList `json:"ProjectList" xml:"ProjectList" require:"true" type:"Struct"`
}

func (s SearchEditingProjectResponse) String() string {
  return tea.Prettify(s)
}

func (s SearchEditingProjectResponse) GoString() string {
  return s.String()
}

func (s *SearchEditingProjectResponse) SetRequestId(v string) *SearchEditingProjectResponse {
  s.RequestId = &v
  return s
}

func (s *SearchEditingProjectResponse) SetTotal(v int) *SearchEditingProjectResponse {
  s.Total = &v
  return s
}

func (s *SearchEditingProjectResponse) SetProjectList(v *SearchEditingProjectResponseProjectList) *SearchEditingProjectResponse {
  s.ProjectList = v
  return s
}

type SearchEditingProjectResponseProjectList struct {
  Project []*SearchEditingProjectResponseProjectListProject `json:"Project" xml:"Project" require:"true" type:"Repeated"`
}

func (s SearchEditingProjectResponseProjectList) String() string {
  return tea.Prettify(s)
}

func (s SearchEditingProjectResponseProjectList) GoString() string {
  return s.String()
}

func (s *SearchEditingProjectResponseProjectList) SetProject(v []*SearchEditingProjectResponseProjectListProject) *SearchEditingProjectResponseProjectList {
  s.Project = v
  return s
}

type SearchEditingProjectResponseProjectListProject struct     {
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  ProducedMediaId *string `json:"ProducedMediaId" xml:"ProducedMediaId" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  CoverUrl *string `json:"CoverUrl" xml:"CoverUrl" require:"true"`
}

func (s SearchEditingProjectResponseProjectListProject) String() string {
  return tea.Prettify(s)
}

func (s SearchEditingProjectResponseProjectListProject) GoString() string {
  return s.String()
}

func (s *SearchEditingProjectResponseProjectListProject) SetProjectId(v string) *SearchEditingProjectResponseProjectListProject {
  s.ProjectId = &v
  return s
}

func (s *SearchEditingProjectResponseProjectListProject) SetCreateTime(v string) *SearchEditingProjectResponseProjectListProject {
  s.CreateTime = &v
  return s
}

func (s *SearchEditingProjectResponseProjectListProject) SetModifyTime(v string) *SearchEditingProjectResponseProjectListProject {
  s.ModifyTime = &v
  return s
}

func (s *SearchEditingProjectResponseProjectListProject) SetCustomerId(v string) *SearchEditingProjectResponseProjectListProject {
  s.CustomerId = &v
  return s
}

func (s *SearchEditingProjectResponseProjectListProject) SetStatus(v string) *SearchEditingProjectResponseProjectListProject {
  s.Status = &v
  return s
}

func (s *SearchEditingProjectResponseProjectListProject) SetDescription(v string) *SearchEditingProjectResponseProjectListProject {
  s.Description = &v
  return s
}

func (s *SearchEditingProjectResponseProjectListProject) SetTitle(v string) *SearchEditingProjectResponseProjectListProject {
  s.Title = &v
  return s
}

func (s *SearchEditingProjectResponseProjectListProject) SetProducedMediaId(v string) *SearchEditingProjectResponseProjectListProject {
  s.ProducedMediaId = &v
  return s
}

func (s *SearchEditingProjectResponseProjectListProject) SetDuration(v float32) *SearchEditingProjectResponseProjectListProject {
  s.Duration = &v
  return s
}

func (s *SearchEditingProjectResponseProjectListProject) SetCoverUrl(v string) *SearchEditingProjectResponseProjectListProject {
  s.CoverUrl = &v
  return s
}

type RefreshUploadMaterialTokenRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
}

func (s RefreshUploadMaterialTokenRequest) String() string {
  return tea.Prettify(s)
}

func (s RefreshUploadMaterialTokenRequest) GoString() string {
  return s.String()
}

func (s *RefreshUploadMaterialTokenRequest) SetAccessKeyId(v string) *RefreshUploadMaterialTokenRequest {
  s.AccessKeyId = &v
  return s
}

func (s *RefreshUploadMaterialTokenRequest) SetOwnerId(v int64) *RefreshUploadMaterialTokenRequest {
  s.OwnerId = &v
  return s
}

func (s *RefreshUploadMaterialTokenRequest) SetResourceOwnerAccount(v string) *RefreshUploadMaterialTokenRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *RefreshUploadMaterialTokenRequest) SetResourceOwnerId(v int64) *RefreshUploadMaterialTokenRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *RefreshUploadMaterialTokenRequest) SetMaterialId(v string) *RefreshUploadMaterialTokenRequest {
  s.MaterialId = &v
  return s
}

type RefreshUploadMaterialTokenResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UploadAuth *string `json:"UploadAuth" xml:"UploadAuth" require:"true"`
}

func (s RefreshUploadMaterialTokenResponse) String() string {
  return tea.Prettify(s)
}

func (s RefreshUploadMaterialTokenResponse) GoString() string {
  return s.String()
}

func (s *RefreshUploadMaterialTokenResponse) SetRequestId(v string) *RefreshUploadMaterialTokenResponse {
  s.RequestId = &v
  return s
}

func (s *RefreshUploadMaterialTokenResponse) SetUploadAuth(v string) *RefreshUploadMaterialTokenResponse {
  s.UploadAuth = &v
  return s
}

type ProduceEditingProjectVideoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
}

func (s ProduceEditingProjectVideoRequest) String() string {
  return tea.Prettify(s)
}

func (s ProduceEditingProjectVideoRequest) GoString() string {
  return s.String()
}

func (s *ProduceEditingProjectVideoRequest) SetAccessKeyId(v string) *ProduceEditingProjectVideoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ProduceEditingProjectVideoRequest) SetOwnerId(v int64) *ProduceEditingProjectVideoRequest {
  s.OwnerId = &v
  return s
}

func (s *ProduceEditingProjectVideoRequest) SetResourceOwnerAccount(v string) *ProduceEditingProjectVideoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ProduceEditingProjectVideoRequest) SetResourceOwnerId(v int64) *ProduceEditingProjectVideoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ProduceEditingProjectVideoRequest) SetProjectId(v string) *ProduceEditingProjectVideoRequest {
  s.ProjectId = &v
  return s
}

type ProduceEditingProjectVideoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
}

func (s ProduceEditingProjectVideoResponse) String() string {
  return tea.Prettify(s)
}

func (s ProduceEditingProjectVideoResponse) GoString() string {
  return s.String()
}

func (s *ProduceEditingProjectVideoResponse) SetRequestId(v string) *ProduceEditingProjectVideoResponse {
  s.RequestId = &v
  return s
}

func (s *ProduceEditingProjectVideoResponse) SetMediaId(v string) *ProduceEditingProjectVideoResponse {
  s.MediaId = &v
  return s
}

type GetMaterialListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  CateId *int `json:"CateId" xml:"CateId"`
  Status *string `json:"Status" xml:"Status"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  Type *string `json:"Type" xml:"Type"`
  Source *string `json:"Source" xml:"Source"`
}

func (s GetMaterialListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialListRequest) GoString() string {
  return s.String()
}

func (s *GetMaterialListRequest) SetAccessKeyId(v string) *GetMaterialListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMaterialListRequest) SetOwnerId(v string) *GetMaterialListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMaterialListRequest) SetResourceOwnerId(v string) *GetMaterialListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMaterialListRequest) SetResourceOwnerAccount(v string) *GetMaterialListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMaterialListRequest) SetOwnerAccount(v string) *GetMaterialListRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetMaterialListRequest) SetCateId(v int) *GetMaterialListRequest {
  s.CateId = &v
  return s
}

func (s *GetMaterialListRequest) SetStatus(v string) *GetMaterialListRequest {
  s.Status = &v
  return s
}

func (s *GetMaterialListRequest) SetPageNo(v int) *GetMaterialListRequest {
  s.PageNo = &v
  return s
}

func (s *GetMaterialListRequest) SetPageSize(v int) *GetMaterialListRequest {
  s.PageSize = &v
  return s
}

func (s *GetMaterialListRequest) SetSortBy(v string) *GetMaterialListRequest {
  s.SortBy = &v
  return s
}

func (s *GetMaterialListRequest) SetType(v string) *GetMaterialListRequest {
  s.Type = &v
  return s
}

func (s *GetMaterialListRequest) SetSource(v string) *GetMaterialListRequest {
  s.Source = &v
  return s
}

type GetMaterialListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MaterialList *GetMaterialListResponseMaterialList `json:"MaterialList" xml:"MaterialList" require:"true" type:"Struct"`
}

func (s GetMaterialListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialListResponse) GoString() string {
  return s.String()
}

func (s *GetMaterialListResponse) SetRequestId(v string) *GetMaterialListResponse {
  s.RequestId = &v
  return s
}

func (s *GetMaterialListResponse) SetMaterialList(v *GetMaterialListResponseMaterialList) *GetMaterialListResponse {
  s.MaterialList = v
  return s
}

type GetMaterialListResponseMaterialList struct {
  Material []*GetMaterialListResponseMaterialListMaterial `json:"Material" xml:"Material" require:"true" type:"Repeated"`
}

func (s GetMaterialListResponseMaterialList) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialListResponseMaterialList) GoString() string {
  return s.String()
}

func (s *GetMaterialListResponseMaterialList) SetMaterial(v []*GetMaterialListResponseMaterialListMaterial) *GetMaterialListResponseMaterialList {
  s.Material = v
  return s
}

type GetMaterialListResponseMaterialListMaterial struct     {
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  Snapshots *GetMaterialListResponseMaterialListMaterialSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
  Tiles *GetMaterialListResponseMaterialListMaterialTiles `json:"Tiles" xml:"Tiles" require:"true" type:"Struct"`
}

func (s GetMaterialListResponseMaterialListMaterial) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialListResponseMaterialListMaterial) GoString() string {
  return s.String()
}

func (s *GetMaterialListResponseMaterialListMaterial) SetMaterialId(v string) *GetMaterialListResponseMaterialListMaterial {
  s.MaterialId = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetTitle(v string) *GetMaterialListResponseMaterialListMaterial {
  s.Title = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetTags(v string) *GetMaterialListResponseMaterialListMaterial {
  s.Tags = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetStatus(v string) *GetMaterialListResponseMaterialListMaterial {
  s.Status = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetSize(v int64) *GetMaterialListResponseMaterialListMaterial {
  s.Size = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetDuration(v float32) *GetMaterialListResponseMaterialListMaterial {
  s.Duration = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetDescription(v string) *GetMaterialListResponseMaterialListMaterial {
  s.Description = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetCustomerId(v int64) *GetMaterialListResponseMaterialListMaterial {
  s.CustomerId = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetCreateTime(v string) *GetMaterialListResponseMaterialListMaterial {
  s.CreateTime = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetModifyTime(v string) *GetMaterialListResponseMaterialListMaterial {
  s.ModifyTime = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetCoverURL(v string) *GetMaterialListResponseMaterialListMaterial {
  s.CoverURL = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetCateId(v int) *GetMaterialListResponseMaterialListMaterial {
  s.CateId = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetCateName(v string) *GetMaterialListResponseMaterialListMaterial {
  s.CateName = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetSource(v string) *GetMaterialListResponseMaterialListMaterial {
  s.Source = &v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetSnapshots(v *GetMaterialListResponseMaterialListMaterialSnapshots) *GetMaterialListResponseMaterialListMaterial {
  s.Snapshots = v
  return s
}

func (s *GetMaterialListResponseMaterialListMaterial) SetTiles(v *GetMaterialListResponseMaterialListMaterialTiles) *GetMaterialListResponseMaterialListMaterial {
  s.Tiles = v
  return s
}

type GetMaterialListResponseMaterialListMaterialSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s GetMaterialListResponseMaterialListMaterialSnapshots) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialListResponseMaterialListMaterialSnapshots) GoString() string {
  return s.String()
}

func (s *GetMaterialListResponseMaterialListMaterialSnapshots) SetSnapshot(v []*string) *GetMaterialListResponseMaterialListMaterialSnapshots {
  s.Snapshot = v
  return s
}

type GetMaterialListResponseMaterialListMaterialTiles struct {
  Tile []*string `json:"Tile" xml:"Tile" require:"true" type:"Repeated"`
}

func (s GetMaterialListResponseMaterialListMaterialTiles) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialListResponseMaterialListMaterialTiles) GoString() string {
  return s.String()
}

func (s *GetMaterialListResponseMaterialListMaterialTiles) SetTile(v []*string) *GetMaterialListResponseMaterialListMaterialTiles {
  s.Tile = v
  return s
}

type GetMaterialRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
}

func (s GetMaterialRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialRequest) GoString() string {
  return s.String()
}

func (s *GetMaterialRequest) SetAccessKeyId(v string) *GetMaterialRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMaterialRequest) SetOwnerId(v int64) *GetMaterialRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMaterialRequest) SetResourceOwnerAccount(v string) *GetMaterialRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMaterialRequest) SetResourceOwnerId(v int64) *GetMaterialRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMaterialRequest) SetMaterialId(v string) *GetMaterialRequest {
  s.MaterialId = &v
  return s
}

type GetMaterialResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Material *GetMaterialResponseMaterial `json:"Material" xml:"Material" require:"true" type:"Struct"`
}

func (s GetMaterialResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialResponse) GoString() string {
  return s.String()
}

func (s *GetMaterialResponse) SetRequestId(v string) *GetMaterialResponse {
  s.RequestId = &v
  return s
}

func (s *GetMaterialResponse) SetMaterial(v *GetMaterialResponseMaterial) *GetMaterialResponse {
  s.Material = v
  return s
}

type GetMaterialResponseMaterial struct {
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  Snapshots *GetMaterialResponseMaterialSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
  Tiles *GetMaterialResponseMaterialTiles `json:"Tiles" xml:"Tiles" require:"true" type:"Struct"`
}

func (s GetMaterialResponseMaterial) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialResponseMaterial) GoString() string {
  return s.String()
}

func (s *GetMaterialResponseMaterial) SetMaterialId(v string) *GetMaterialResponseMaterial {
  s.MaterialId = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetTitle(v string) *GetMaterialResponseMaterial {
  s.Title = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetTags(v string) *GetMaterialResponseMaterial {
  s.Tags = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetStatus(v string) *GetMaterialResponseMaterial {
  s.Status = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetSize(v int64) *GetMaterialResponseMaterial {
  s.Size = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetDuration(v float32) *GetMaterialResponseMaterial {
  s.Duration = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetDescription(v string) *GetMaterialResponseMaterial {
  s.Description = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetCustomerId(v int64) *GetMaterialResponseMaterial {
  s.CustomerId = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetCreateTime(v string) *GetMaterialResponseMaterial {
  s.CreateTime = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetModifyTime(v string) *GetMaterialResponseMaterial {
  s.ModifyTime = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetCoverURL(v string) *GetMaterialResponseMaterial {
  s.CoverURL = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetCateId(v int) *GetMaterialResponseMaterial {
  s.CateId = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetCateName(v string) *GetMaterialResponseMaterial {
  s.CateName = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetSource(v string) *GetMaterialResponseMaterial {
  s.Source = &v
  return s
}

func (s *GetMaterialResponseMaterial) SetSnapshots(v *GetMaterialResponseMaterialSnapshots) *GetMaterialResponseMaterial {
  s.Snapshots = v
  return s
}

func (s *GetMaterialResponseMaterial) SetTiles(v *GetMaterialResponseMaterialTiles) *GetMaterialResponseMaterial {
  s.Tiles = v
  return s
}

type GetMaterialResponseMaterialSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s GetMaterialResponseMaterialSnapshots) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialResponseMaterialSnapshots) GoString() string {
  return s.String()
}

func (s *GetMaterialResponseMaterialSnapshots) SetSnapshot(v []*string) *GetMaterialResponseMaterialSnapshots {
  s.Snapshot = v
  return s
}

type GetMaterialResponseMaterialTiles struct {
  Tile []*string `json:"Tile" xml:"Tile" require:"true" type:"Repeated"`
}

func (s GetMaterialResponseMaterialTiles) String() string {
  return tea.Prettify(s)
}

func (s GetMaterialResponseMaterialTiles) GoString() string {
  return s.String()
}

func (s *GetMaterialResponseMaterialTiles) SetTile(v []*string) *GetMaterialResponseMaterialTiles {
  s.Tile = v
  return s
}

type GetEditingProjectMaterialsRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
}

func (s GetEditingProjectMaterialsRequest) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsRequest) GoString() string {
  return s.String()
}

func (s *GetEditingProjectMaterialsRequest) SetAccessKeyId(v string) *GetEditingProjectMaterialsRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetEditingProjectMaterialsRequest) SetOwnerId(v string) *GetEditingProjectMaterialsRequest {
  s.OwnerId = &v
  return s
}

func (s *GetEditingProjectMaterialsRequest) SetResourceOwnerId(v string) *GetEditingProjectMaterialsRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetEditingProjectMaterialsRequest) SetResourceOwnerAccount(v string) *GetEditingProjectMaterialsRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetEditingProjectMaterialsRequest) SetOwnerAccount(v string) *GetEditingProjectMaterialsRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetEditingProjectMaterialsRequest) SetProjectId(v string) *GetEditingProjectMaterialsRequest {
  s.ProjectId = &v
  return s
}

func (s *GetEditingProjectMaterialsRequest) SetType(v string) *GetEditingProjectMaterialsRequest {
  s.Type = &v
  return s
}

type GetEditingProjectMaterialsResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MaterialList *GetEditingProjectMaterialsResponseMaterialList `json:"MaterialList" xml:"MaterialList" require:"true" type:"Struct"`
}

func (s GetEditingProjectMaterialsResponse) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponse) GoString() string {
  return s.String()
}

func (s *GetEditingProjectMaterialsResponse) SetRequestId(v string) *GetEditingProjectMaterialsResponse {
  s.RequestId = &v
  return s
}

func (s *GetEditingProjectMaterialsResponse) SetMaterialList(v *GetEditingProjectMaterialsResponseMaterialList) *GetEditingProjectMaterialsResponse {
  s.MaterialList = v
  return s
}

type GetEditingProjectMaterialsResponseMaterialList struct {
  Material []*GetEditingProjectMaterialsResponseMaterialListMaterial `json:"Material" xml:"Material" require:"true" type:"Repeated"`
}

func (s GetEditingProjectMaterialsResponseMaterialList) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseMaterialList) GoString() string {
  return s.String()
}

func (s *GetEditingProjectMaterialsResponseMaterialList) SetMaterial(v []*GetEditingProjectMaterialsResponseMaterialListMaterial) *GetEditingProjectMaterialsResponseMaterialList {
  s.Material = v
  return s
}

type GetEditingProjectMaterialsResponseMaterialListMaterial struct     {
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  SpriteConfig *string `json:"SpriteConfig" xml:"SpriteConfig" require:"true"`
  Snapshots *GetEditingProjectMaterialsResponseMaterialListMaterialSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
  Tiles *GetEditingProjectMaterialsResponseMaterialListMaterialTiles `json:"Tiles" xml:"Tiles" require:"true" type:"Struct"`
}

func (s GetEditingProjectMaterialsResponseMaterialListMaterial) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseMaterialListMaterial) GoString() string {
  return s.String()
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetMaterialId(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.MaterialId = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetTitle(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Title = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetTags(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Tags = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetStatus(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Status = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetSize(v int64) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Size = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetDuration(v float32) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Duration = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetDescription(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Description = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetCustomerId(v int64) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CustomerId = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetCreateTime(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CreateTime = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetModifyTime(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.ModifyTime = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetCoverURL(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CoverURL = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetCateId(v int) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CateId = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetCateName(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.CateName = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetSource(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Source = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetSpriteConfig(v string) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.SpriteConfig = &v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetSnapshots(v *GetEditingProjectMaterialsResponseMaterialListMaterialSnapshots) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Snapshots = v
  return s
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterial) SetTiles(v *GetEditingProjectMaterialsResponseMaterialListMaterialTiles) *GetEditingProjectMaterialsResponseMaterialListMaterial {
  s.Tiles = v
  return s
}

type GetEditingProjectMaterialsResponseMaterialListMaterialSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s GetEditingProjectMaterialsResponseMaterialListMaterialSnapshots) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseMaterialListMaterialSnapshots) GoString() string {
  return s.String()
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterialSnapshots) SetSnapshot(v []*string) *GetEditingProjectMaterialsResponseMaterialListMaterialSnapshots {
  s.Snapshot = v
  return s
}

type GetEditingProjectMaterialsResponseMaterialListMaterialTiles struct {
  Tile []*string `json:"Tile" xml:"Tile" require:"true" type:"Repeated"`
}

func (s GetEditingProjectMaterialsResponseMaterialListMaterialTiles) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseMaterialListMaterialTiles) GoString() string {
  return s.String()
}

func (s *GetEditingProjectMaterialsResponseMaterialListMaterialTiles) SetTile(v []*string) *GetEditingProjectMaterialsResponseMaterialListMaterialTiles {
  s.Tile = v
  return s
}

type GetEditingProjectListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Status *string `json:"Status" xml:"Status"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
}

func (s GetEditingProjectListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectListRequest) GoString() string {
  return s.String()
}

func (s *GetEditingProjectListRequest) SetAccessKeyId(v string) *GetEditingProjectListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetEditingProjectListRequest) SetOwnerId(v string) *GetEditingProjectListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetEditingProjectListRequest) SetResourceOwnerId(v string) *GetEditingProjectListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetEditingProjectListRequest) SetResourceOwnerAccount(v string) *GetEditingProjectListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetEditingProjectListRequest) SetOwnerAccount(v string) *GetEditingProjectListRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetEditingProjectListRequest) SetStatus(v string) *GetEditingProjectListRequest {
  s.Status = &v
  return s
}

func (s *GetEditingProjectListRequest) SetPageNo(v int) *GetEditingProjectListRequest {
  s.PageNo = &v
  return s
}

func (s *GetEditingProjectListRequest) SetPageSize(v int) *GetEditingProjectListRequest {
  s.PageSize = &v
  return s
}

func (s *GetEditingProjectListRequest) SetSortBy(v string) *GetEditingProjectListRequest {
  s.SortBy = &v
  return s
}

type GetEditingProjectListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  ProjectList *GetEditingProjectListResponseProjectList `json:"ProjectList" xml:"ProjectList" require:"true" type:"Struct"`
}

func (s GetEditingProjectListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectListResponse) GoString() string {
  return s.String()
}

func (s *GetEditingProjectListResponse) SetRequestId(v string) *GetEditingProjectListResponse {
  s.RequestId = &v
  return s
}

func (s *GetEditingProjectListResponse) SetProjectList(v *GetEditingProjectListResponseProjectList) *GetEditingProjectListResponse {
  s.ProjectList = v
  return s
}

type GetEditingProjectListResponseProjectList struct {
  Project []*GetEditingProjectListResponseProjectListProject `json:"Project" xml:"Project" require:"true" type:"Repeated"`
}

func (s GetEditingProjectListResponseProjectList) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectListResponseProjectList) GoString() string {
  return s.String()
}

func (s *GetEditingProjectListResponseProjectList) SetProject(v []*GetEditingProjectListResponseProjectListProject) *GetEditingProjectListResponseProjectList {
  s.Project = v
  return s
}

type GetEditingProjectListResponseProjectListProject struct     {
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  ProducedMediaId *string `json:"ProducedMediaId" xml:"ProducedMediaId" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  CoverUrl *string `json:"CoverUrl" xml:"CoverUrl" require:"true"`
}

func (s GetEditingProjectListResponseProjectListProject) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectListResponseProjectListProject) GoString() string {
  return s.String()
}

func (s *GetEditingProjectListResponseProjectListProject) SetProjectId(v string) *GetEditingProjectListResponseProjectListProject {
  s.ProjectId = &v
  return s
}

func (s *GetEditingProjectListResponseProjectListProject) SetCreateTime(v string) *GetEditingProjectListResponseProjectListProject {
  s.CreateTime = &v
  return s
}

func (s *GetEditingProjectListResponseProjectListProject) SetModifyTime(v string) *GetEditingProjectListResponseProjectListProject {
  s.ModifyTime = &v
  return s
}

func (s *GetEditingProjectListResponseProjectListProject) SetCustomerId(v string) *GetEditingProjectListResponseProjectListProject {
  s.CustomerId = &v
  return s
}

func (s *GetEditingProjectListResponseProjectListProject) SetStatus(v string) *GetEditingProjectListResponseProjectListProject {
  s.Status = &v
  return s
}

func (s *GetEditingProjectListResponseProjectListProject) SetDescription(v string) *GetEditingProjectListResponseProjectListProject {
  s.Description = &v
  return s
}

func (s *GetEditingProjectListResponseProjectListProject) SetTitle(v string) *GetEditingProjectListResponseProjectListProject {
  s.Title = &v
  return s
}

func (s *GetEditingProjectListResponseProjectListProject) SetProducedMediaId(v string) *GetEditingProjectListResponseProjectListProject {
  s.ProducedMediaId = &v
  return s
}

func (s *GetEditingProjectListResponseProjectListProject) SetDuration(v float32) *GetEditingProjectListResponseProjectListProject {
  s.Duration = &v
  return s
}

func (s *GetEditingProjectListResponseProjectListProject) SetCoverUrl(v string) *GetEditingProjectListResponseProjectListProject {
  s.CoverUrl = &v
  return s
}

type GetEditingProjectRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
}

func (s GetEditingProjectRequest) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectRequest) GoString() string {
  return s.String()
}

func (s *GetEditingProjectRequest) SetAccessKeyId(v string) *GetEditingProjectRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetEditingProjectRequest) SetOwnerId(v string) *GetEditingProjectRequest {
  s.OwnerId = &v
  return s
}

func (s *GetEditingProjectRequest) SetResourceOwnerId(v string) *GetEditingProjectRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetEditingProjectRequest) SetResourceOwnerAccount(v string) *GetEditingProjectRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetEditingProjectRequest) SetOwnerAccount(v string) *GetEditingProjectRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetEditingProjectRequest) SetProjectId(v string) *GetEditingProjectRequest {
  s.ProjectId = &v
  return s
}

type GetEditingProjectResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Project *GetEditingProjectResponseProject `json:"Project" xml:"Project" require:"true" type:"Struct"`
}

func (s GetEditingProjectResponse) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectResponse) GoString() string {
  return s.String()
}

func (s *GetEditingProjectResponse) SetRequestId(v string) *GetEditingProjectResponse {
  s.RequestId = &v
  return s
}

func (s *GetEditingProjectResponse) SetProject(v *GetEditingProjectResponseProject) *GetEditingProjectResponse {
  s.Project = v
  return s
}

type GetEditingProjectResponseProject struct {
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Timeline *string `json:"Timeline" xml:"Timeline" require:"true"`
  ProducedMediaId *string `json:"ProducedMediaId" xml:"ProducedMediaId" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  CoverUrl *string `json:"CoverUrl" xml:"CoverUrl" require:"true"`
}

func (s GetEditingProjectResponseProject) String() string {
  return tea.Prettify(s)
}

func (s GetEditingProjectResponseProject) GoString() string {
  return s.String()
}

func (s *GetEditingProjectResponseProject) SetProjectId(v string) *GetEditingProjectResponseProject {
  s.ProjectId = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetCreateTime(v string) *GetEditingProjectResponseProject {
  s.CreateTime = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetModifyTime(v string) *GetEditingProjectResponseProject {
  s.ModifyTime = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetCustomerId(v string) *GetEditingProjectResponseProject {
  s.CustomerId = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetStatus(v string) *GetEditingProjectResponseProject {
  s.Status = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetDescription(v string) *GetEditingProjectResponseProject {
  s.Description = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetTitle(v string) *GetEditingProjectResponseProject {
  s.Title = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetTimeline(v string) *GetEditingProjectResponseProject {
  s.Timeline = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetProducedMediaId(v string) *GetEditingProjectResponseProject {
  s.ProducedMediaId = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetDuration(v float32) *GetEditingProjectResponseProject {
  s.Duration = &v
  return s
}

func (s *GetEditingProjectResponseProject) SetCoverUrl(v string) *GetEditingProjectResponseProject {
  s.CoverUrl = &v
  return s
}

type DeleteMaterialRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MaterialIds *string `json:"MaterialIds" xml:"MaterialIds" require:"true"`
  Force *bool `json:"Force" xml:"Force"`
}

func (s DeleteMaterialRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteMaterialRequest) GoString() string {
  return s.String()
}

func (s *DeleteMaterialRequest) SetAccessKeyId(v string) *DeleteMaterialRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteMaterialRequest) SetOwnerId(v string) *DeleteMaterialRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteMaterialRequest) SetResourceOwnerId(v string) *DeleteMaterialRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteMaterialRequest) SetResourceOwnerAccount(v string) *DeleteMaterialRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteMaterialRequest) SetOwnerAccount(v string) *DeleteMaterialRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteMaterialRequest) SetMaterialIds(v string) *DeleteMaterialRequest {
  s.MaterialIds = &v
  return s
}

func (s *DeleteMaterialRequest) SetForce(v bool) *DeleteMaterialRequest {
  s.Force = &v
  return s
}

type DeleteMaterialResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteMaterialResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteMaterialResponse) GoString() string {
  return s.String()
}

func (s *DeleteMaterialResponse) SetRequestId(v string) *DeleteMaterialResponse {
  s.RequestId = &v
  return s
}

type DeleteEditingProjectRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ProjectIds *string `json:"ProjectIds" xml:"ProjectIds" require:"true"`
}

func (s DeleteEditingProjectRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteEditingProjectRequest) GoString() string {
  return s.String()
}

func (s *DeleteEditingProjectRequest) SetAccessKeyId(v string) *DeleteEditingProjectRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteEditingProjectRequest) SetOwnerId(v string) *DeleteEditingProjectRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteEditingProjectRequest) SetResourceOwnerId(v string) *DeleteEditingProjectRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteEditingProjectRequest) SetResourceOwnerAccount(v string) *DeleteEditingProjectRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteEditingProjectRequest) SetOwnerAccount(v string) *DeleteEditingProjectRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteEditingProjectRequest) SetProjectIds(v string) *DeleteEditingProjectRequest {
  s.ProjectIds = &v
  return s
}

type DeleteEditingProjectResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteEditingProjectResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteEditingProjectResponse) GoString() string {
  return s.String()
}

func (s *DeleteEditingProjectResponse) SetRequestId(v string) *DeleteEditingProjectResponse {
  s.RequestId = &v
  return s
}

type CreateUploadMaterialRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL"`
  Description *string `json:"Description" xml:"Description"`
  FileName *string `json:"FileName" xml:"FileName" require:"true"`
  FileSize *int64 `json:"FileSize" xml:"FileSize" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime"`
  CateId *int `json:"CateId" xml:"CateId"`
  Tags *string `json:"Tags" xml:"Tags"`
}

func (s CreateUploadMaterialRequest) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadMaterialRequest) GoString() string {
  return s.String()
}

func (s *CreateUploadMaterialRequest) SetAccessKeyId(v string) *CreateUploadMaterialRequest {
  s.AccessKeyId = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetOwnerId(v int64) *CreateUploadMaterialRequest {
  s.OwnerId = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetResourceOwnerAccount(v string) *CreateUploadMaterialRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetResourceOwnerId(v int64) *CreateUploadMaterialRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetCoverURL(v string) *CreateUploadMaterialRequest {
  s.CoverURL = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetDescription(v string) *CreateUploadMaterialRequest {
  s.Description = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetFileName(v string) *CreateUploadMaterialRequest {
  s.FileName = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetFileSize(v int64) *CreateUploadMaterialRequest {
  s.FileSize = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetTitle(v string) *CreateUploadMaterialRequest {
  s.Title = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetCreateTime(v string) *CreateUploadMaterialRequest {
  s.CreateTime = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetCateId(v int) *CreateUploadMaterialRequest {
  s.CateId = &v
  return s
}

func (s *CreateUploadMaterialRequest) SetTags(v string) *CreateUploadMaterialRequest {
  s.Tags = &v
  return s
}

type CreateUploadMaterialResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MaterialId *string `json:"MaterialId" xml:"MaterialId" require:"true"`
  UploadAddress *string `json:"UploadAddress" xml:"UploadAddress" require:"true"`
  UploadAuth *string `json:"UploadAuth" xml:"UploadAuth" require:"true"`
}

func (s CreateUploadMaterialResponse) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadMaterialResponse) GoString() string {
  return s.String()
}

func (s *CreateUploadMaterialResponse) SetRequestId(v string) *CreateUploadMaterialResponse {
  s.RequestId = &v
  return s
}

func (s *CreateUploadMaterialResponse) SetMaterialId(v string) *CreateUploadMaterialResponse {
  s.MaterialId = &v
  return s
}

func (s *CreateUploadMaterialResponse) SetUploadAddress(v string) *CreateUploadMaterialResponse {
  s.UploadAddress = &v
  return s
}

func (s *CreateUploadMaterialResponse) SetUploadAuth(v string) *CreateUploadMaterialResponse {
  s.UploadAuth = &v
  return s
}

type AddEditingProjectRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Description *string `json:"Description" xml:"Description"`
  Timeline *string `json:"Timeline" xml:"Timeline"`
  CoverUrl *string `json:"CoverUrl" xml:"CoverUrl"`
  Duration *float32 `json:"Duration" xml:"Duration"`
}

func (s AddEditingProjectRequest) String() string {
  return tea.Prettify(s)
}

func (s AddEditingProjectRequest) GoString() string {
  return s.String()
}

func (s *AddEditingProjectRequest) SetAccessKeyId(v string) *AddEditingProjectRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddEditingProjectRequest) SetOwnerId(v string) *AddEditingProjectRequest {
  s.OwnerId = &v
  return s
}

func (s *AddEditingProjectRequest) SetResourceOwnerId(v string) *AddEditingProjectRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddEditingProjectRequest) SetResourceOwnerAccount(v string) *AddEditingProjectRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddEditingProjectRequest) SetOwnerAccount(v string) *AddEditingProjectRequest {
  s.OwnerAccount = &v
  return s
}

func (s *AddEditingProjectRequest) SetTitle(v string) *AddEditingProjectRequest {
  s.Title = &v
  return s
}

func (s *AddEditingProjectRequest) SetDescription(v string) *AddEditingProjectRequest {
  s.Description = &v
  return s
}

func (s *AddEditingProjectRequest) SetTimeline(v string) *AddEditingProjectRequest {
  s.Timeline = &v
  return s
}

func (s *AddEditingProjectRequest) SetCoverUrl(v string) *AddEditingProjectRequest {
  s.CoverUrl = &v
  return s
}

func (s *AddEditingProjectRequest) SetDuration(v float32) *AddEditingProjectRequest {
  s.Duration = &v
  return s
}

type AddEditingProjectResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Project *AddEditingProjectResponseProject `json:"Project" xml:"Project" require:"true" type:"Struct"`
}

func (s AddEditingProjectResponse) String() string {
  return tea.Prettify(s)
}

func (s AddEditingProjectResponse) GoString() string {
  return s.String()
}

func (s *AddEditingProjectResponse) SetRequestId(v string) *AddEditingProjectResponse {
  s.RequestId = &v
  return s
}

func (s *AddEditingProjectResponse) SetProject(v *AddEditingProjectResponseProject) *AddEditingProjectResponse {
  s.Project = v
  return s
}

type AddEditingProjectResponseProject struct {
  ProjectId *string `json:"ProjectId" xml:"ProjectId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
}

func (s AddEditingProjectResponseProject) String() string {
  return tea.Prettify(s)
}

func (s AddEditingProjectResponseProject) GoString() string {
  return s.String()
}

func (s *AddEditingProjectResponseProject) SetProjectId(v string) *AddEditingProjectResponseProject {
  s.ProjectId = &v
  return s
}

func (s *AddEditingProjectResponseProject) SetCreateTime(v string) *AddEditingProjectResponseProject {
  s.CreateTime = &v
  return s
}

func (s *AddEditingProjectResponseProject) SetModifyTime(v string) *AddEditingProjectResponseProject {
  s.ModifyTime = &v
  return s
}

func (s *AddEditingProjectResponseProject) SetCustomerId(v string) *AddEditingProjectResponseProject {
  s.CustomerId = &v
  return s
}

func (s *AddEditingProjectResponseProject) SetStatus(v string) *AddEditingProjectResponseProject {
  s.Status = &v
  return s
}

func (s *AddEditingProjectResponseProject) SetDescription(v string) *AddEditingProjectResponseProject {
  s.Description = &v
  return s
}

func (s *AddEditingProjectResponseProject) SetTitle(v string) *AddEditingProjectResponseProject {
  s.Title = &v
  return s
}

type GetCategoriesRequest struct {
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  CateId *int64 `json:"CateId" xml:"CateId"`
  PageNo *int64 `json:"PageNo" xml:"PageNo"`
  PageSize *int64 `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  Type *string `json:"Type" xml:"Type"`
}

func (s GetCategoriesRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCategoriesRequest) GoString() string {
  return s.String()
}

func (s *GetCategoriesRequest) SetOwnerId(v string) *GetCategoriesRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCategoriesRequest) SetResourceOwnerId(v string) *GetCategoriesRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetCategoriesRequest) SetResourceOwnerAccount(v string) *GetCategoriesRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCategoriesRequest) SetOwnerAccount(v string) *GetCategoriesRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetCategoriesRequest) SetResourceRealOwnerId(v int64) *GetCategoriesRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetCategoriesRequest) SetCateId(v int64) *GetCategoriesRequest {
  s.CateId = &v
  return s
}

func (s *GetCategoriesRequest) SetPageNo(v int64) *GetCategoriesRequest {
  s.PageNo = &v
  return s
}

func (s *GetCategoriesRequest) SetPageSize(v int64) *GetCategoriesRequest {
  s.PageSize = &v
  return s
}

func (s *GetCategoriesRequest) SetSortBy(v string) *GetCategoriesRequest {
  s.SortBy = &v
  return s
}

func (s *GetCategoriesRequest) SetType(v string) *GetCategoriesRequest {
  s.Type = &v
  return s
}

type GetCategoriesResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  SubTotal *int64 `json:"SubTotal" xml:"SubTotal" require:"true"`
  SubCategories *GetCategoriesResponseSubCategories `json:"SubCategories" xml:"SubCategories" require:"true" type:"Struct"`
  Category *GetCategoriesResponseCategory `json:"Category" xml:"Category" require:"true" type:"Struct"`
}

func (s GetCategoriesResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCategoriesResponse) GoString() string {
  return s.String()
}

func (s *GetCategoriesResponse) SetRequestId(v string) *GetCategoriesResponse {
  s.RequestId = &v
  return s
}

func (s *GetCategoriesResponse) SetSubTotal(v int64) *GetCategoriesResponse {
  s.SubTotal = &v
  return s
}

func (s *GetCategoriesResponse) SetSubCategories(v *GetCategoriesResponseSubCategories) *GetCategoriesResponse {
  s.SubCategories = v
  return s
}

func (s *GetCategoriesResponse) SetCategory(v *GetCategoriesResponseCategory) *GetCategoriesResponse {
  s.Category = v
  return s
}

type GetCategoriesResponseSubCategories struct {
  Category []*GetCategoriesResponseSubCategoriesCategory `json:"Category" xml:"Category" require:"true" type:"Repeated"`
}

func (s GetCategoriesResponseSubCategories) String() string {
  return tea.Prettify(s)
}

func (s GetCategoriesResponseSubCategories) GoString() string {
  return s.String()
}

func (s *GetCategoriesResponseSubCategories) SetCategory(v []*GetCategoriesResponseSubCategoriesCategory) *GetCategoriesResponseSubCategories {
  s.Category = v
  return s
}

type GetCategoriesResponseSubCategoriesCategory struct     {
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Level *int64 `json:"Level" xml:"Level" require:"true"`
  ParentId *int64 `json:"ParentId" xml:"ParentId" require:"true"`
  SubTotal *int64 `json:"SubTotal" xml:"SubTotal" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
}

func (s GetCategoriesResponseSubCategoriesCategory) String() string {
  return tea.Prettify(s)
}

func (s GetCategoriesResponseSubCategoriesCategory) GoString() string {
  return s.String()
}

func (s *GetCategoriesResponseSubCategoriesCategory) SetCateId(v int64) *GetCategoriesResponseSubCategoriesCategory {
  s.CateId = &v
  return s
}

func (s *GetCategoriesResponseSubCategoriesCategory) SetCateName(v string) *GetCategoriesResponseSubCategoriesCategory {
  s.CateName = &v
  return s
}

func (s *GetCategoriesResponseSubCategoriesCategory) SetLevel(v int64) *GetCategoriesResponseSubCategoriesCategory {
  s.Level = &v
  return s
}

func (s *GetCategoriesResponseSubCategoriesCategory) SetParentId(v int64) *GetCategoriesResponseSubCategoriesCategory {
  s.ParentId = &v
  return s
}

func (s *GetCategoriesResponseSubCategoriesCategory) SetSubTotal(v int64) *GetCategoriesResponseSubCategoriesCategory {
  s.SubTotal = &v
  return s
}

func (s *GetCategoriesResponseSubCategoriesCategory) SetType(v string) *GetCategoriesResponseSubCategoriesCategory {
  s.Type = &v
  return s
}

type GetCategoriesResponseCategory struct {
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Level *int64 `json:"Level" xml:"Level" require:"true"`
  ParentId *int64 `json:"ParentId" xml:"ParentId" require:"true"`
  GrandId *int64 `json:"GrandId" xml:"GrandId" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
}

func (s GetCategoriesResponseCategory) String() string {
  return tea.Prettify(s)
}

func (s GetCategoriesResponseCategory) GoString() string {
  return s.String()
}

func (s *GetCategoriesResponseCategory) SetCateId(v int64) *GetCategoriesResponseCategory {
  s.CateId = &v
  return s
}

func (s *GetCategoriesResponseCategory) SetCateName(v string) *GetCategoriesResponseCategory {
  s.CateName = &v
  return s
}

func (s *GetCategoriesResponseCategory) SetLevel(v int64) *GetCategoriesResponseCategory {
  s.Level = &v
  return s
}

func (s *GetCategoriesResponseCategory) SetParentId(v int64) *GetCategoriesResponseCategory {
  s.ParentId = &v
  return s
}

func (s *GetCategoriesResponseCategory) SetGrandId(v int64) *GetCategoriesResponseCategory {
  s.GrandId = &v
  return s
}

func (s *GetCategoriesResponseCategory) SetType(v string) *GetCategoriesResponseCategory {
  s.Type = &v
  return s
}

type UpdateCategoryRequest struct {
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
}

func (s UpdateCategoryRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateCategoryRequest) GoString() string {
  return s.String()
}

func (s *UpdateCategoryRequest) SetOwnerId(v string) *UpdateCategoryRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateCategoryRequest) SetResourceOwnerId(v string) *UpdateCategoryRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateCategoryRequest) SetResourceOwnerAccount(v string) *UpdateCategoryRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateCategoryRequest) SetOwnerAccount(v string) *UpdateCategoryRequest {
  s.OwnerAccount = &v
  return s
}

func (s *UpdateCategoryRequest) SetCateName(v string) *UpdateCategoryRequest {
  s.CateName = &v
  return s
}

func (s *UpdateCategoryRequest) SetCateId(v int64) *UpdateCategoryRequest {
  s.CateId = &v
  return s
}

type UpdateCategoryResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateCategoryResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateCategoryResponse) GoString() string {
  return s.String()
}

func (s *UpdateCategoryResponse) SetRequestId(v string) *UpdateCategoryResponse {
  s.RequestId = &v
  return s
}

type GetAudioTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s GetAudioTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s GetAudioTemplateRequest) GoString() string {
  return s.String()
}

func (s *GetAudioTemplateRequest) SetAccessKeyId(v string) *GetAudioTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetAudioTemplateRequest) SetOwnerId(v int64) *GetAudioTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *GetAudioTemplateRequest) SetResourceOwnerAccount(v string) *GetAudioTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetAudioTemplateRequest) SetResourceOwnerId(v int64) *GetAudioTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetAudioTemplateRequest) SetTemplateId(v string) *GetAudioTemplateRequest {
  s.TemplateId = &v
  return s
}

type GetAudioTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Audio *GetAudioTemplateResponseAudio `json:"Audio" xml:"Audio" require:"true" type:"Struct"`
}

func (s GetAudioTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s GetAudioTemplateResponse) GoString() string {
  return s.String()
}

func (s *GetAudioTemplateResponse) SetRequestId(v string) *GetAudioTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *GetAudioTemplateResponse) SetAudio(v *GetAudioTemplateResponseAudio) *GetAudioTemplateResponse {
  s.Audio = v
  return s
}

type GetAudioTemplateResponseAudio struct {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Channeles *string `json:"Channeles" xml:"Channeles" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
}

func (s GetAudioTemplateResponseAudio) String() string {
  return tea.Prettify(s)
}

func (s GetAudioTemplateResponseAudio) GoString() string {
  return s.String()
}

func (s *GetAudioTemplateResponseAudio) SetTemplateId(v string) *GetAudioTemplateResponseAudio {
  s.TemplateId = &v
  return s
}

func (s *GetAudioTemplateResponseAudio) SetCodec(v string) *GetAudioTemplateResponseAudio {
  s.Codec = &v
  return s
}

func (s *GetAudioTemplateResponseAudio) SetBitrate(v string) *GetAudioTemplateResponseAudio {
  s.Bitrate = &v
  return s
}

func (s *GetAudioTemplateResponseAudio) SetChanneles(v string) *GetAudioTemplateResponseAudio {
  s.Channeles = &v
  return s
}

func (s *GetAudioTemplateResponseAudio) SetRemove(v string) *GetAudioTemplateResponseAudio {
  s.Remove = &v
  return s
}

func (s *GetAudioTemplateResponseAudio) SetName(v string) *GetAudioTemplateResponseAudio {
  s.Name = &v
  return s
}

func (s *GetAudioTemplateResponseAudio) SetFormat(v string) *GetAudioTemplateResponseAudio {
  s.Format = &v
  return s
}

func (s *GetAudioTemplateResponseAudio) SetStatus(v string) *GetAudioTemplateResponseAudio {
  s.Status = &v
  return s
}

func (s *GetAudioTemplateResponseAudio) SetType(v string) *GetAudioTemplateResponseAudio {
  s.Type = &v
  return s
}

func (s *GetAudioTemplateResponseAudio) SetIsDefault(v string) *GetAudioTemplateResponseAudio {
  s.IsDefault = &v
  return s
}

type ListAudioTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
}

func (s ListAudioTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAudioTemplateRequest) GoString() string {
  return s.String()
}

func (s *ListAudioTemplateRequest) SetAccessKeyId(v string) *ListAudioTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAudioTemplateRequest) SetOwnerId(v int64) *ListAudioTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAudioTemplateRequest) SetResourceOwnerAccount(v string) *ListAudioTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAudioTemplateRequest) SetResourceOwnerId(v int64) *ListAudioTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

type ListAudioTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Audios *ListAudioTemplateResponseAudios `json:"Audios" xml:"Audios" require:"true" type:"Struct"`
}

func (s ListAudioTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAudioTemplateResponse) GoString() string {
  return s.String()
}

func (s *ListAudioTemplateResponse) SetRequestId(v string) *ListAudioTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *ListAudioTemplateResponse) SetAudios(v *ListAudioTemplateResponseAudios) *ListAudioTemplateResponse {
  s.Audios = v
  return s
}

type ListAudioTemplateResponseAudios struct {
  Audio []*ListAudioTemplateResponseAudiosAudio `json:"Audio" xml:"Audio" require:"true" type:"Repeated"`
}

func (s ListAudioTemplateResponseAudios) String() string {
  return tea.Prettify(s)
}

func (s ListAudioTemplateResponseAudios) GoString() string {
  return s.String()
}

func (s *ListAudioTemplateResponseAudios) SetAudio(v []*ListAudioTemplateResponseAudiosAudio) *ListAudioTemplateResponseAudios {
  s.Audio = v
  return s
}

type ListAudioTemplateResponseAudiosAudio struct     {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Channeles *string `json:"Channeles" xml:"Channeles" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
}

func (s ListAudioTemplateResponseAudiosAudio) String() string {
  return tea.Prettify(s)
}

func (s ListAudioTemplateResponseAudiosAudio) GoString() string {
  return s.String()
}

func (s *ListAudioTemplateResponseAudiosAudio) SetTemplateId(v string) *ListAudioTemplateResponseAudiosAudio {
  s.TemplateId = &v
  return s
}

func (s *ListAudioTemplateResponseAudiosAudio) SetCodec(v string) *ListAudioTemplateResponseAudiosAudio {
  s.Codec = &v
  return s
}

func (s *ListAudioTemplateResponseAudiosAudio) SetBitrate(v string) *ListAudioTemplateResponseAudiosAudio {
  s.Bitrate = &v
  return s
}

func (s *ListAudioTemplateResponseAudiosAudio) SetChanneles(v string) *ListAudioTemplateResponseAudiosAudio {
  s.Channeles = &v
  return s
}

func (s *ListAudioTemplateResponseAudiosAudio) SetRemove(v string) *ListAudioTemplateResponseAudiosAudio {
  s.Remove = &v
  return s
}

func (s *ListAudioTemplateResponseAudiosAudio) SetName(v string) *ListAudioTemplateResponseAudiosAudio {
  s.Name = &v
  return s
}

func (s *ListAudioTemplateResponseAudiosAudio) SetFormat(v string) *ListAudioTemplateResponseAudiosAudio {
  s.Format = &v
  return s
}

func (s *ListAudioTemplateResponseAudiosAudio) SetStatus(v string) *ListAudioTemplateResponseAudiosAudio {
  s.Status = &v
  return s
}

func (s *ListAudioTemplateResponseAudiosAudio) SetType(v string) *ListAudioTemplateResponseAudiosAudio {
  s.Type = &v
  return s
}

func (s *ListAudioTemplateResponseAudiosAudio) SetIsDefault(v string) *ListAudioTemplateResponseAudiosAudio {
  s.IsDefault = &v
  return s
}

type ListAudioConfigRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
}

func (s ListAudioConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAudioConfigRequest) GoString() string {
  return s.String()
}

func (s *ListAudioConfigRequest) SetAccessKeyId(v string) *ListAudioConfigRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAudioConfigRequest) SetOwnerId(v int64) *ListAudioConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAudioConfigRequest) SetResourceOwnerAccount(v string) *ListAudioConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAudioConfigRequest) SetResourceOwnerId(v int64) *ListAudioConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

type ListAudioConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Configs *ListAudioConfigResponseConfigs `json:"Configs" xml:"Configs" require:"true" type:"Struct"`
}

func (s ListAudioConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAudioConfigResponse) GoString() string {
  return s.String()
}

func (s *ListAudioConfigResponse) SetRequestId(v string) *ListAudioConfigResponse {
  s.RequestId = &v
  return s
}

func (s *ListAudioConfigResponse) SetConfigs(v *ListAudioConfigResponseConfigs) *ListAudioConfigResponse {
  s.Configs = v
  return s
}

type ListAudioConfigResponseConfigs struct {
  Config []*ListAudioConfigResponseConfigsConfig `json:"Config" xml:"Config" require:"true" type:"Repeated"`
}

func (s ListAudioConfigResponseConfigs) String() string {
  return tea.Prettify(s)
}

func (s ListAudioConfigResponseConfigs) GoString() string {
  return s.String()
}

func (s *ListAudioConfigResponseConfigs) SetConfig(v []*ListAudioConfigResponseConfigsConfig) *ListAudioConfigResponseConfigs {
  s.Config = v
  return s
}

type ListAudioConfigResponseConfigsConfig struct     {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s ListAudioConfigResponseConfigsConfig) String() string {
  return tea.Prettify(s)
}

func (s ListAudioConfigResponseConfigsConfig) GoString() string {
  return s.String()
}

func (s *ListAudioConfigResponseConfigsConfig) SetTemplateId(v string) *ListAudioConfigResponseConfigsConfig {
  s.TemplateId = &v
  return s
}

func (s *ListAudioConfigResponseConfigsConfig) SetStatus(v string) *ListAudioConfigResponseConfigsConfig {
  s.Status = &v
  return s
}

type RefreshMaterialWorkFlowRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
}

func (s RefreshMaterialWorkFlowRequest) String() string {
  return tea.Prettify(s)
}

func (s RefreshMaterialWorkFlowRequest) GoString() string {
  return s.String()
}

func (s *RefreshMaterialWorkFlowRequest) SetAccessKeyId(v string) *RefreshMaterialWorkFlowRequest {
  s.AccessKeyId = &v
  return s
}

func (s *RefreshMaterialWorkFlowRequest) SetOwnerId(v int64) *RefreshMaterialWorkFlowRequest {
  s.OwnerId = &v
  return s
}

func (s *RefreshMaterialWorkFlowRequest) SetResourceOwnerAccount(v string) *RefreshMaterialWorkFlowRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *RefreshMaterialWorkFlowRequest) SetResourceOwnerId(v int64) *RefreshMaterialWorkFlowRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *RefreshMaterialWorkFlowRequest) SetCustomerId(v string) *RefreshMaterialWorkFlowRequest {
  s.CustomerId = &v
  return s
}

type RefreshMaterialWorkFlowResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s RefreshMaterialWorkFlowResponse) String() string {
  return tea.Prettify(s)
}

func (s RefreshMaterialWorkFlowResponse) GoString() string {
  return s.String()
}

func (s *RefreshMaterialWorkFlowResponse) SetRequestId(v string) *RefreshMaterialWorkFlowResponse {
  s.RequestId = &v
  return s
}

func (s *RefreshMaterialWorkFlowResponse) SetResult(v bool) *RefreshMaterialWorkFlowResponse {
  s.Result = &v
  return s
}

type UpdateAudioConfigRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateIds *string `json:"TemplateIds" xml:"TemplateIds" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s UpdateAudioConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateAudioConfigRequest) GoString() string {
  return s.String()
}

func (s *UpdateAudioConfigRequest) SetAccessKeyId(v string) *UpdateAudioConfigRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateAudioConfigRequest) SetOwnerId(v int64) *UpdateAudioConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateAudioConfigRequest) SetResourceOwnerAccount(v string) *UpdateAudioConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateAudioConfigRequest) SetResourceOwnerId(v int64) *UpdateAudioConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateAudioConfigRequest) SetTemplateIds(v string) *UpdateAudioConfigRequest {
  s.TemplateIds = &v
  return s
}

func (s *UpdateAudioConfigRequest) SetStatus(v string) *UpdateAudioConfigRequest {
  s.Status = &v
  return s
}

type UpdateAudioConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Configs *UpdateAudioConfigResponseConfigs `json:"Configs" xml:"Configs" require:"true" type:"Struct"`
}

func (s UpdateAudioConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateAudioConfigResponse) GoString() string {
  return s.String()
}

func (s *UpdateAudioConfigResponse) SetRequestId(v string) *UpdateAudioConfigResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateAudioConfigResponse) SetConfigs(v *UpdateAudioConfigResponseConfigs) *UpdateAudioConfigResponse {
  s.Configs = v
  return s
}

type UpdateAudioConfigResponseConfigs struct {
  Config []*UpdateAudioConfigResponseConfigsConfig `json:"Config" xml:"Config" require:"true" type:"Repeated"`
}

func (s UpdateAudioConfigResponseConfigs) String() string {
  return tea.Prettify(s)
}

func (s UpdateAudioConfigResponseConfigs) GoString() string {
  return s.String()
}

func (s *UpdateAudioConfigResponseConfigs) SetConfig(v []*UpdateAudioConfigResponseConfigsConfig) *UpdateAudioConfigResponseConfigs {
  s.Config = v
  return s
}

type UpdateAudioConfigResponseConfigsConfig struct     {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s UpdateAudioConfigResponseConfigsConfig) String() string {
  return tea.Prettify(s)
}

func (s UpdateAudioConfigResponseConfigsConfig) GoString() string {
  return s.String()
}

func (s *UpdateAudioConfigResponseConfigsConfig) SetTemplateId(v string) *UpdateAudioConfigResponseConfigsConfig {
  s.TemplateId = &v
  return s
}

func (s *UpdateAudioConfigResponseConfigsConfig) SetStatus(v string) *UpdateAudioConfigResponseConfigsConfig {
  s.Status = &v
  return s
}

type UpdateAudioTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Channel *string `json:"Channel" xml:"Channel"`
  Remove *string `json:"Remove" xml:"Remove"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Muxer *string `json:"Muxer" xml:"Muxer" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
}

func (s UpdateAudioTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateAudioTemplateRequest) GoString() string {
  return s.String()
}

func (s *UpdateAudioTemplateRequest) SetAccessKeyId(v string) *UpdateAudioTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetOwnerId(v int64) *UpdateAudioTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetResourceOwnerAccount(v string) *UpdateAudioTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetResourceOwnerId(v int64) *UpdateAudioTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetCodec(v string) *UpdateAudioTemplateRequest {
  s.Codec = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetBitrate(v string) *UpdateAudioTemplateRequest {
  s.Bitrate = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetChannel(v string) *UpdateAudioTemplateRequest {
  s.Channel = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetRemove(v string) *UpdateAudioTemplateRequest {
  s.Remove = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetName(v string) *UpdateAudioTemplateRequest {
  s.Name = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetMuxer(v string) *UpdateAudioTemplateRequest {
  s.Muxer = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetStatus(v string) *UpdateAudioTemplateRequest {
  s.Status = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetType(v string) *UpdateAudioTemplateRequest {
  s.Type = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetIsDefault(v string) *UpdateAudioTemplateRequest {
  s.IsDefault = &v
  return s
}

func (s *UpdateAudioTemplateRequest) SetTemplateId(v string) *UpdateAudioTemplateRequest {
  s.TemplateId = &v
  return s
}

type UpdateAudioTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Audio *UpdateAudioTemplateResponseAudio `json:"Audio" xml:"Audio" require:"true" type:"Struct"`
}

func (s UpdateAudioTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateAudioTemplateResponse) GoString() string {
  return s.String()
}

func (s *UpdateAudioTemplateResponse) SetRequestId(v string) *UpdateAudioTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateAudioTemplateResponse) SetAudio(v *UpdateAudioTemplateResponseAudio) *UpdateAudioTemplateResponse {
  s.Audio = v
  return s
}

type UpdateAudioTemplateResponseAudio struct {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Channeles *string `json:"Channeles" xml:"Channeles" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
}

func (s UpdateAudioTemplateResponseAudio) String() string {
  return tea.Prettify(s)
}

func (s UpdateAudioTemplateResponseAudio) GoString() string {
  return s.String()
}

func (s *UpdateAudioTemplateResponseAudio) SetTemplateId(v string) *UpdateAudioTemplateResponseAudio {
  s.TemplateId = &v
  return s
}

func (s *UpdateAudioTemplateResponseAudio) SetCodec(v string) *UpdateAudioTemplateResponseAudio {
  s.Codec = &v
  return s
}

func (s *UpdateAudioTemplateResponseAudio) SetBitrate(v string) *UpdateAudioTemplateResponseAudio {
  s.Bitrate = &v
  return s
}

func (s *UpdateAudioTemplateResponseAudio) SetChanneles(v string) *UpdateAudioTemplateResponseAudio {
  s.Channeles = &v
  return s
}

func (s *UpdateAudioTemplateResponseAudio) SetRemove(v string) *UpdateAudioTemplateResponseAudio {
  s.Remove = &v
  return s
}

func (s *UpdateAudioTemplateResponseAudio) SetName(v string) *UpdateAudioTemplateResponseAudio {
  s.Name = &v
  return s
}

func (s *UpdateAudioTemplateResponseAudio) SetFormat(v string) *UpdateAudioTemplateResponseAudio {
  s.Format = &v
  return s
}

func (s *UpdateAudioTemplateResponseAudio) SetStatus(v string) *UpdateAudioTemplateResponseAudio {
  s.Status = &v
  return s
}

func (s *UpdateAudioTemplateResponseAudio) SetType(v string) *UpdateAudioTemplateResponseAudio {
  s.Type = &v
  return s
}

func (s *UpdateAudioTemplateResponseAudio) SetIsDefault(v string) *UpdateAudioTemplateResponseAudio {
  s.IsDefault = &v
  return s
}

type AddAudioConfigRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TemplateIds *string `json:"TemplateIds" xml:"TemplateIds" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s AddAudioConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s AddAudioConfigRequest) GoString() string {
  return s.String()
}

func (s *AddAudioConfigRequest) SetAccessKeyId(v string) *AddAudioConfigRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddAudioConfigRequest) SetOwnerId(v int64) *AddAudioConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *AddAudioConfigRequest) SetResourceOwnerAccount(v string) *AddAudioConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddAudioConfigRequest) SetResourceOwnerId(v int64) *AddAudioConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddAudioConfigRequest) SetTemplateIds(v string) *AddAudioConfigRequest {
  s.TemplateIds = &v
  return s
}

func (s *AddAudioConfigRequest) SetStatus(v string) *AddAudioConfigRequest {
  s.Status = &v
  return s
}

type AddAudioConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Configs *AddAudioConfigResponseConfigs `json:"Configs" xml:"Configs" require:"true" type:"Struct"`
}

func (s AddAudioConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s AddAudioConfigResponse) GoString() string {
  return s.String()
}

func (s *AddAudioConfigResponse) SetRequestId(v string) *AddAudioConfigResponse {
  s.RequestId = &v
  return s
}

func (s *AddAudioConfigResponse) SetConfigs(v *AddAudioConfigResponseConfigs) *AddAudioConfigResponse {
  s.Configs = v
  return s
}

type AddAudioConfigResponseConfigs struct {
  Config []*AddAudioConfigResponseConfigsConfig `json:"Config" xml:"Config" require:"true" type:"Repeated"`
}

func (s AddAudioConfigResponseConfigs) String() string {
  return tea.Prettify(s)
}

func (s AddAudioConfigResponseConfigs) GoString() string {
  return s.String()
}

func (s *AddAudioConfigResponseConfigs) SetConfig(v []*AddAudioConfigResponseConfigsConfig) *AddAudioConfigResponseConfigs {
  s.Config = v
  return s
}

type AddAudioConfigResponseConfigsConfig struct     {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s AddAudioConfigResponseConfigsConfig) String() string {
  return tea.Prettify(s)
}

func (s AddAudioConfigResponseConfigsConfig) GoString() string {
  return s.String()
}

func (s *AddAudioConfigResponseConfigsConfig) SetTemplateId(v string) *AddAudioConfigResponseConfigsConfig {
  s.TemplateId = &v
  return s
}

func (s *AddAudioConfigResponseConfigsConfig) SetStatus(v string) *AddAudioConfigResponseConfigsConfig {
  s.Status = &v
  return s
}

type AddAudioTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Channel *string `json:"Channel" xml:"Channel"`
  Remove *string `json:"Remove" xml:"Remove"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Muxer *string `json:"Muxer" xml:"Muxer" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
}

func (s AddAudioTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s AddAudioTemplateRequest) GoString() string {
  return s.String()
}

func (s *AddAudioTemplateRequest) SetAccessKeyId(v string) *AddAudioTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddAudioTemplateRequest) SetOwnerId(v int64) *AddAudioTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *AddAudioTemplateRequest) SetResourceOwnerAccount(v string) *AddAudioTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddAudioTemplateRequest) SetResourceOwnerId(v int64) *AddAudioTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddAudioTemplateRequest) SetCodec(v string) *AddAudioTemplateRequest {
  s.Codec = &v
  return s
}

func (s *AddAudioTemplateRequest) SetBitrate(v string) *AddAudioTemplateRequest {
  s.Bitrate = &v
  return s
}

func (s *AddAudioTemplateRequest) SetChannel(v string) *AddAudioTemplateRequest {
  s.Channel = &v
  return s
}

func (s *AddAudioTemplateRequest) SetRemove(v string) *AddAudioTemplateRequest {
  s.Remove = &v
  return s
}

func (s *AddAudioTemplateRequest) SetName(v string) *AddAudioTemplateRequest {
  s.Name = &v
  return s
}

func (s *AddAudioTemplateRequest) SetMuxer(v string) *AddAudioTemplateRequest {
  s.Muxer = &v
  return s
}

func (s *AddAudioTemplateRequest) SetStatus(v string) *AddAudioTemplateRequest {
  s.Status = &v
  return s
}

func (s *AddAudioTemplateRequest) SetType(v string) *AddAudioTemplateRequest {
  s.Type = &v
  return s
}

func (s *AddAudioTemplateRequest) SetIsDefault(v string) *AddAudioTemplateRequest {
  s.IsDefault = &v
  return s
}

type AddAudioTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Audio *AddAudioTemplateResponseAudio `json:"Audio" xml:"Audio" require:"true" type:"Struct"`
}

func (s AddAudioTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s AddAudioTemplateResponse) GoString() string {
  return s.String()
}

func (s *AddAudioTemplateResponse) SetRequestId(v string) *AddAudioTemplateResponse {
  s.RequestId = &v
  return s
}

func (s *AddAudioTemplateResponse) SetAudio(v *AddAudioTemplateResponseAudio) *AddAudioTemplateResponse {
  s.Audio = v
  return s
}

type AddAudioTemplateResponseAudio struct {
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  Codec *string `json:"Codec" xml:"Codec" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Channeles *string `json:"Channeles" xml:"Channeles" require:"true"`
  Remove *string `json:"Remove" xml:"Remove" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
}

func (s AddAudioTemplateResponseAudio) String() string {
  return tea.Prettify(s)
}

func (s AddAudioTemplateResponseAudio) GoString() string {
  return s.String()
}

func (s *AddAudioTemplateResponseAudio) SetTemplateId(v string) *AddAudioTemplateResponseAudio {
  s.TemplateId = &v
  return s
}

func (s *AddAudioTemplateResponseAudio) SetCodec(v string) *AddAudioTemplateResponseAudio {
  s.Codec = &v
  return s
}

func (s *AddAudioTemplateResponseAudio) SetBitrate(v string) *AddAudioTemplateResponseAudio {
  s.Bitrate = &v
  return s
}

func (s *AddAudioTemplateResponseAudio) SetChanneles(v string) *AddAudioTemplateResponseAudio {
  s.Channeles = &v
  return s
}

func (s *AddAudioTemplateResponseAudio) SetRemove(v string) *AddAudioTemplateResponseAudio {
  s.Remove = &v
  return s
}

func (s *AddAudioTemplateResponseAudio) SetName(v string) *AddAudioTemplateResponseAudio {
  s.Name = &v
  return s
}

func (s *AddAudioTemplateResponseAudio) SetFormat(v string) *AddAudioTemplateResponseAudio {
  s.Format = &v
  return s
}

func (s *AddAudioTemplateResponseAudio) SetStatus(v string) *AddAudioTemplateResponseAudio {
  s.Status = &v
  return s
}

func (s *AddAudioTemplateResponseAudio) SetType(v string) *AddAudioTemplateResponseAudio {
  s.Type = &v
  return s
}

func (s *AddAudioTemplateResponseAudio) SetIsDefault(v string) *AddAudioTemplateResponseAudio {
  s.IsDefault = &v
  return s
}

type UpdateSpecifyCustomerTemplateConfigRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  TranscodeIds *string `json:"TranscodeIds" xml:"TranscodeIds" require:"true"`
  EncryptTemplateIds *string `json:"EncryptTemplateIds" xml:"EncryptTemplateIds"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
}

func (s UpdateSpecifyCustomerTemplateConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateSpecifyCustomerTemplateConfigRequest) GoString() string {
  return s.String()
}

func (s *UpdateSpecifyCustomerTemplateConfigRequest) SetAccessKeyId(v string) *UpdateSpecifyCustomerTemplateConfigRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateSpecifyCustomerTemplateConfigRequest) SetOwnerId(v int64) *UpdateSpecifyCustomerTemplateConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateSpecifyCustomerTemplateConfigRequest) SetResourceOwnerAccount(v string) *UpdateSpecifyCustomerTemplateConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateSpecifyCustomerTemplateConfigRequest) SetResourceOwnerId(v int64) *UpdateSpecifyCustomerTemplateConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateSpecifyCustomerTemplateConfigRequest) SetTranscodeIds(v string) *UpdateSpecifyCustomerTemplateConfigRequest {
  s.TranscodeIds = &v
  return s
}

func (s *UpdateSpecifyCustomerTemplateConfigRequest) SetEncryptTemplateIds(v string) *UpdateSpecifyCustomerTemplateConfigRequest {
  s.EncryptTemplateIds = &v
  return s
}

func (s *UpdateSpecifyCustomerTemplateConfigRequest) SetCustomerId(v string) *UpdateSpecifyCustomerTemplateConfigRequest {
  s.CustomerId = &v
  return s
}

type UpdateSpecifyCustomerTemplateConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Ret *bool `json:"Ret" xml:"Ret" require:"true"`
}

func (s UpdateSpecifyCustomerTemplateConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateSpecifyCustomerTemplateConfigResponse) GoString() string {
  return s.String()
}

func (s *UpdateSpecifyCustomerTemplateConfigResponse) SetRequestId(v string) *UpdateSpecifyCustomerTemplateConfigResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateSpecifyCustomerTemplateConfigResponse) SetRet(v bool) *UpdateSpecifyCustomerTemplateConfigResponse {
  s.Ret = &v
  return s
}

type GetPlayInfoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Formats *string `json:"Formats" xml:"Formats"`
  AuthTimeout *int64 `json:"AuthTimeout" xml:"AuthTimeout"`
  Rand *string `json:"Rand" xml:"Rand"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo"`
  Channel *string `json:"Channel" xml:"Channel"`
  PlayerVersion *string `json:"PlayerVersion" xml:"PlayerVersion"`
  OutputType *string `json:"OutputType" xml:"OutputType"`
  StreamType *string `json:"StreamType" xml:"StreamType"`
  ReAuthInfo *string `json:"ReAuthInfo" xml:"ReAuthInfo"`
  Definition *string `json:"Definition" xml:"Definition"`
  ResultType *string `json:"ResultType" xml:"ResultType"`
  PlayConfig *string `json:"PlayConfig" xml:"PlayConfig"`
}

func (s GetPlayInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetPlayInfoRequest) GoString() string {
  return s.String()
}

func (s *GetPlayInfoRequest) SetOwnerId(v int64) *GetPlayInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetPlayInfoRequest) SetResourceOwnerAccount(v string) *GetPlayInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetPlayInfoRequest) SetResourceOwnerId(v int64) *GetPlayInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetPlayInfoRequest) SetResourceRealOwnerId(v int64) *GetPlayInfoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetPlayInfoRequest) SetVideoId(v string) *GetPlayInfoRequest {
  s.VideoId = &v
  return s
}

func (s *GetPlayInfoRequest) SetFormats(v string) *GetPlayInfoRequest {
  s.Formats = &v
  return s
}

func (s *GetPlayInfoRequest) SetAuthTimeout(v int64) *GetPlayInfoRequest {
  s.AuthTimeout = &v
  return s
}

func (s *GetPlayInfoRequest) SetRand(v string) *GetPlayInfoRequest {
  s.Rand = &v
  return s
}

func (s *GetPlayInfoRequest) SetAuthInfo(v string) *GetPlayInfoRequest {
  s.AuthInfo = &v
  return s
}

func (s *GetPlayInfoRequest) SetChannel(v string) *GetPlayInfoRequest {
  s.Channel = &v
  return s
}

func (s *GetPlayInfoRequest) SetPlayerVersion(v string) *GetPlayInfoRequest {
  s.PlayerVersion = &v
  return s
}

func (s *GetPlayInfoRequest) SetOutputType(v string) *GetPlayInfoRequest {
  s.OutputType = &v
  return s
}

func (s *GetPlayInfoRequest) SetStreamType(v string) *GetPlayInfoRequest {
  s.StreamType = &v
  return s
}

func (s *GetPlayInfoRequest) SetReAuthInfo(v string) *GetPlayInfoRequest {
  s.ReAuthInfo = &v
  return s
}

func (s *GetPlayInfoRequest) SetDefinition(v string) *GetPlayInfoRequest {
  s.Definition = &v
  return s
}

func (s *GetPlayInfoRequest) SetResultType(v string) *GetPlayInfoRequest {
  s.ResultType = &v
  return s
}

func (s *GetPlayInfoRequest) SetPlayConfig(v string) *GetPlayInfoRequest {
  s.PlayConfig = &v
  return s
}

type GetPlayInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PlayInfoList *GetPlayInfoResponsePlayInfoList `json:"PlayInfoList" xml:"PlayInfoList" require:"true" type:"Struct"`
  VideoBase *GetPlayInfoResponseVideoBase `json:"VideoBase" xml:"VideoBase" require:"true" type:"Struct"`
}

func (s GetPlayInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetPlayInfoResponse) GoString() string {
  return s.String()
}

func (s *GetPlayInfoResponse) SetRequestId(v string) *GetPlayInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetPlayInfoResponse) SetPlayInfoList(v *GetPlayInfoResponsePlayInfoList) *GetPlayInfoResponse {
  s.PlayInfoList = v
  return s
}

func (s *GetPlayInfoResponse) SetVideoBase(v *GetPlayInfoResponseVideoBase) *GetPlayInfoResponse {
  s.VideoBase = v
  return s
}

type GetPlayInfoResponsePlayInfoList struct {
  PlayInfo []*GetPlayInfoResponsePlayInfoListPlayInfo `json:"PlayInfo" xml:"PlayInfo" require:"true" type:"Repeated"`
}

func (s GetPlayInfoResponsePlayInfoList) String() string {
  return tea.Prettify(s)
}

func (s GetPlayInfoResponsePlayInfoList) GoString() string {
  return s.String()
}

func (s *GetPlayInfoResponsePlayInfoList) SetPlayInfo(v []*GetPlayInfoResponsePlayInfoListPlayInfo) *GetPlayInfoResponsePlayInfoList {
  s.PlayInfo = v
  return s
}

type GetPlayInfoResponsePlayInfoListPlayInfo struct     {
  Width *int64 `json:"Width" xml:"Width" require:"true"`
  Height *int64 `json:"Height" xml:"Height" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  PlayURL *string `json:"PlayURL" xml:"PlayURL" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Encrypt *int64 `json:"Encrypt" xml:"Encrypt" require:"true"`
  Plaintext *string `json:"Plaintext" xml:"Plaintext" require:"true"`
  Complexity *string `json:"Complexity" xml:"Complexity" require:"true"`
  StreamType *string `json:"StreamType" xml:"StreamType" require:"true"`
  Rand *string `json:"Rand" xml:"Rand" require:"true"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
  PreprocessStatus *string `json:"PreprocessStatus" xml:"PreprocessStatus" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  EncryptType *string `json:"EncryptType" xml:"EncryptType" require:"true"`
  NarrowBandType *string `json:"NarrowBandType" xml:"NarrowBandType" require:"true"`
}

func (s GetPlayInfoResponsePlayInfoListPlayInfo) String() string {
  return tea.Prettify(s)
}

func (s GetPlayInfoResponsePlayInfoListPlayInfo) GoString() string {
  return s.String()
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetWidth(v int64) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Width = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetHeight(v int64) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Height = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetSize(v int64) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Size = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetPlayURL(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.PlayURL = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetBitrate(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Bitrate = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetDefinition(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Definition = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetDuration(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Duration = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetFormat(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Format = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetFps(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Fps = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetEncrypt(v int64) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Encrypt = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetPlaintext(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Plaintext = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetComplexity(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Complexity = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetStreamType(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.StreamType = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetRand(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Rand = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetJobId(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.JobId = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetPreprocessStatus(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.PreprocessStatus = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetWatermarkId(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.WatermarkId = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetStatus(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.Status = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetCreationTime(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.CreationTime = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetModificationTime(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.ModificationTime = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetEncryptType(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.EncryptType = &v
  return s
}

func (s *GetPlayInfoResponsePlayInfoListPlayInfo) SetNarrowBandType(v string) *GetPlayInfoResponsePlayInfoListPlayInfo {
  s.NarrowBandType = &v
  return s
}

type GetPlayInfoResponseVideoBase struct {
  OutputType *string `json:"OutputType" xml:"OutputType" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  MediaType *string `json:"MediaType" xml:"MediaType" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  TranscodeMode *string `json:"TranscodeMode" xml:"TranscodeMode" require:"true"`
  ThumbnailList *GetPlayInfoResponseVideoBaseThumbnailList `json:"ThumbnailList" xml:"ThumbnailList" require:"true" type:"Struct"`
}

func (s GetPlayInfoResponseVideoBase) String() string {
  return tea.Prettify(s)
}

func (s GetPlayInfoResponseVideoBase) GoString() string {
  return s.String()
}

func (s *GetPlayInfoResponseVideoBase) SetOutputType(v string) *GetPlayInfoResponseVideoBase {
  s.OutputType = &v
  return s
}

func (s *GetPlayInfoResponseVideoBase) SetCoverURL(v string) *GetPlayInfoResponseVideoBase {
  s.CoverURL = &v
  return s
}

func (s *GetPlayInfoResponseVideoBase) SetDuration(v string) *GetPlayInfoResponseVideoBase {
  s.Duration = &v
  return s
}

func (s *GetPlayInfoResponseVideoBase) SetStatus(v string) *GetPlayInfoResponseVideoBase {
  s.Status = &v
  return s
}

func (s *GetPlayInfoResponseVideoBase) SetTitle(v string) *GetPlayInfoResponseVideoBase {
  s.Title = &v
  return s
}

func (s *GetPlayInfoResponseVideoBase) SetVideoId(v string) *GetPlayInfoResponseVideoBase {
  s.VideoId = &v
  return s
}

func (s *GetPlayInfoResponseVideoBase) SetMediaType(v string) *GetPlayInfoResponseVideoBase {
  s.MediaType = &v
  return s
}

func (s *GetPlayInfoResponseVideoBase) SetCreationTime(v string) *GetPlayInfoResponseVideoBase {
  s.CreationTime = &v
  return s
}

func (s *GetPlayInfoResponseVideoBase) SetTranscodeMode(v string) *GetPlayInfoResponseVideoBase {
  s.TranscodeMode = &v
  return s
}

func (s *GetPlayInfoResponseVideoBase) SetThumbnailList(v *GetPlayInfoResponseVideoBaseThumbnailList) *GetPlayInfoResponseVideoBase {
  s.ThumbnailList = v
  return s
}

type GetPlayInfoResponseVideoBaseThumbnailList struct {
  Thumbnail []*GetPlayInfoResponseVideoBaseThumbnailListThumbnail `json:"Thumbnail" xml:"Thumbnail" require:"true" type:"Repeated"`
}

func (s GetPlayInfoResponseVideoBaseThumbnailList) String() string {
  return tea.Prettify(s)
}

func (s GetPlayInfoResponseVideoBaseThumbnailList) GoString() string {
  return s.String()
}

func (s *GetPlayInfoResponseVideoBaseThumbnailList) SetThumbnail(v []*GetPlayInfoResponseVideoBaseThumbnailListThumbnail) *GetPlayInfoResponseVideoBaseThumbnailList {
  s.Thumbnail = v
  return s
}

type GetPlayInfoResponseVideoBaseThumbnailListThumbnail struct     {
  URL *string `json:"URL" xml:"URL" require:"true"`
}

func (s GetPlayInfoResponseVideoBaseThumbnailListThumbnail) String() string {
  return tea.Prettify(s)
}

func (s GetPlayInfoResponseVideoBaseThumbnailListThumbnail) GoString() string {
  return s.String()
}

func (s *GetPlayInfoResponseVideoBaseThumbnailListThumbnail) SetURL(v string) *GetPlayInfoResponseVideoBaseThumbnailListThumbnail {
  s.URL = &v
  return s
}

type GetVideoConfigRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo"`
}

func (s GetVideoConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s GetVideoConfigRequest) GoString() string {
  return s.String()
}

func (s *GetVideoConfigRequest) SetOwnerId(v int64) *GetVideoConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *GetVideoConfigRequest) SetResourceOwnerAccount(v string) *GetVideoConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetVideoConfigRequest) SetResourceOwnerId(v int64) *GetVideoConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetVideoConfigRequest) SetVideoId(v string) *GetVideoConfigRequest {
  s.VideoId = &v
  return s
}

func (s *GetVideoConfigRequest) SetAuthInfo(v string) *GetVideoConfigRequest {
  s.AuthInfo = &v
  return s
}

type GetVideoConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch" require:"true"`
}

func (s GetVideoConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s GetVideoConfigResponse) GoString() string {
  return s.String()
}

func (s *GetVideoConfigResponse) SetRequestId(v string) *GetVideoConfigResponse {
  s.RequestId = &v
  return s
}

func (s *GetVideoConfigResponse) SetDownloadSwitch(v string) *GetVideoConfigResponse {
  s.DownloadSwitch = &v
  return s
}

type SetCustomerConfigRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch"`
  MetricConfig *string `json:"MetricConfig" xml:"MetricConfig"`
  AIConfig *string `json:"AIConfig" xml:"AIConfig"`
}

func (s SetCustomerConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s SetCustomerConfigRequest) GoString() string {
  return s.String()
}

func (s *SetCustomerConfigRequest) SetOwnerId(v int64) *SetCustomerConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *SetCustomerConfigRequest) SetResourceOwnerAccount(v string) *SetCustomerConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetCustomerConfigRequest) SetResourceOwnerId(v int64) *SetCustomerConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetCustomerConfigRequest) SetDownloadSwitch(v string) *SetCustomerConfigRequest {
  s.DownloadSwitch = &v
  return s
}

func (s *SetCustomerConfigRequest) SetMetricConfig(v string) *SetCustomerConfigRequest {
  s.MetricConfig = &v
  return s
}

func (s *SetCustomerConfigRequest) SetAIConfig(v string) *SetCustomerConfigRequest {
  s.AIConfig = &v
  return s
}

type SetCustomerConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SetCustomerConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s SetCustomerConfigResponse) GoString() string {
  return s.String()
}

func (s *SetCustomerConfigResponse) SetRequestId(v string) *SetCustomerConfigResponse {
  s.RequestId = &v
  return s
}

type GetCustomerConfigRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
}

func (s GetCustomerConfigRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCustomerConfigRequest) GoString() string {
  return s.String()
}

func (s *GetCustomerConfigRequest) SetAccessKeyId(v string) *GetCustomerConfigRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetCustomerConfigRequest) SetOwnerId(v int64) *GetCustomerConfigRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCustomerConfigRequest) SetResourceOwnerAccount(v string) *GetCustomerConfigRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCustomerConfigRequest) SetResourceOwnerId(v int64) *GetCustomerConfigRequest {
  s.ResourceOwnerId = &v
  return s
}

type GetCustomerConfigResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch" require:"true"`
  MetricConfig *string `json:"MetricConfig" xml:"MetricConfig" require:"true"`
}

func (s GetCustomerConfigResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCustomerConfigResponse) GoString() string {
  return s.String()
}

func (s *GetCustomerConfigResponse) SetRequestId(v string) *GetCustomerConfigResponse {
  s.RequestId = &v
  return s
}

func (s *GetCustomerConfigResponse) SetDownloadSwitch(v string) *GetCustomerConfigResponse {
  s.DownloadSwitch = &v
  return s
}

func (s *GetCustomerConfigResponse) SetMetricConfig(v string) *GetCustomerConfigResponse {
  s.MetricConfig = &v
  return s
}

type CreateUploadImageRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Title *string `json:"Title" xml:"Title"`
  ImageType *string `json:"ImageType" xml:"ImageType" require:"true"`
  ImageExt *string `json:"ImageExt" xml:"ImageExt"`
  OriginalFileName *string `json:"OriginalFileName" xml:"OriginalFileName"`
  Tags *string `json:"Tags" xml:"Tags"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation"`
  CateId *int64 `json:"CateId" xml:"CateId"`
  UserData *string `json:"UserData" xml:"UserData"`
  Description *string `json:"Description" xml:"Description"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s CreateUploadImageRequest) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadImageRequest) GoString() string {
  return s.String()
}

func (s *CreateUploadImageRequest) SetAccessKeyId(v string) *CreateUploadImageRequest {
  s.AccessKeyId = &v
  return s
}

func (s *CreateUploadImageRequest) SetOwnerId(v int64) *CreateUploadImageRequest {
  s.OwnerId = &v
  return s
}

func (s *CreateUploadImageRequest) SetResourceOwnerAccount(v string) *CreateUploadImageRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *CreateUploadImageRequest) SetResourceOwnerId(v int64) *CreateUploadImageRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *CreateUploadImageRequest) SetTitle(v string) *CreateUploadImageRequest {
  s.Title = &v
  return s
}

func (s *CreateUploadImageRequest) SetImageType(v string) *CreateUploadImageRequest {
  s.ImageType = &v
  return s
}

func (s *CreateUploadImageRequest) SetImageExt(v string) *CreateUploadImageRequest {
  s.ImageExt = &v
  return s
}

func (s *CreateUploadImageRequest) SetOriginalFileName(v string) *CreateUploadImageRequest {
  s.OriginalFileName = &v
  return s
}

func (s *CreateUploadImageRequest) SetTags(v string) *CreateUploadImageRequest {
  s.Tags = &v
  return s
}

func (s *CreateUploadImageRequest) SetStorageLocation(v string) *CreateUploadImageRequest {
  s.StorageLocation = &v
  return s
}

func (s *CreateUploadImageRequest) SetCateId(v int64) *CreateUploadImageRequest {
  s.CateId = &v
  return s
}

func (s *CreateUploadImageRequest) SetUserData(v string) *CreateUploadImageRequest {
  s.UserData = &v
  return s
}

func (s *CreateUploadImageRequest) SetDescription(v string) *CreateUploadImageRequest {
  s.Description = &v
  return s
}

func (s *CreateUploadImageRequest) SetResourceRealOwnerId(v int64) *CreateUploadImageRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type CreateUploadImageResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  ImageId *string `json:"ImageId" xml:"ImageId" require:"true"`
  ImageURL *string `json:"ImageURL" xml:"ImageURL" require:"true"`
  UploadAddress *string `json:"UploadAddress" xml:"UploadAddress" require:"true"`
  UploadAuth *string `json:"UploadAuth" xml:"UploadAuth" require:"true"`
}

func (s CreateUploadImageResponse) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadImageResponse) GoString() string {
  return s.String()
}

func (s *CreateUploadImageResponse) SetRequestId(v string) *CreateUploadImageResponse {
  s.RequestId = &v
  return s
}

func (s *CreateUploadImageResponse) SetImageId(v string) *CreateUploadImageResponse {
  s.ImageId = &v
  return s
}

func (s *CreateUploadImageResponse) SetImageURL(v string) *CreateUploadImageResponse {
  s.ImageURL = &v
  return s
}

func (s *CreateUploadImageResponse) SetUploadAddress(v string) *CreateUploadImageResponse {
  s.UploadAddress = &v
  return s
}

func (s *CreateUploadImageResponse) SetUploadAuth(v string) *CreateUploadImageResponse {
  s.UploadAuth = &v
  return s
}

type UpdateSnapshotRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Time *string `json:"Time" xml:"Time" require:"true"`
  Height *string `json:"Height" xml:"Height"`
  Width *string `json:"Width" xml:"Width"`
  Number *string `json:"Number" xml:"Number" require:"true"`
  Interval *string `json:"Interval" xml:"Interval"`
  SnapshotId *string `json:"SnapshotId" xml:"SnapshotId" require:"true"`
}

func (s UpdateSnapshotRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateSnapshotRequest) GoString() string {
  return s.String()
}

func (s *UpdateSnapshotRequest) SetAccessKeyId(v string) *UpdateSnapshotRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateSnapshotRequest) SetOwnerId(v int64) *UpdateSnapshotRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateSnapshotRequest) SetResourceOwnerAccount(v string) *UpdateSnapshotRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateSnapshotRequest) SetResourceOwnerId(v int64) *UpdateSnapshotRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateSnapshotRequest) SetTime(v string) *UpdateSnapshotRequest {
  s.Time = &v
  return s
}

func (s *UpdateSnapshotRequest) SetHeight(v string) *UpdateSnapshotRequest {
  s.Height = &v
  return s
}

func (s *UpdateSnapshotRequest) SetWidth(v string) *UpdateSnapshotRequest {
  s.Width = &v
  return s
}

func (s *UpdateSnapshotRequest) SetNumber(v string) *UpdateSnapshotRequest {
  s.Number = &v
  return s
}

func (s *UpdateSnapshotRequest) SetInterval(v string) *UpdateSnapshotRequest {
  s.Interval = &v
  return s
}

func (s *UpdateSnapshotRequest) SetSnapshotId(v string) *UpdateSnapshotRequest {
  s.SnapshotId = &v
  return s
}

type UpdateSnapshotResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s UpdateSnapshotResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateSnapshotResponse) GoString() string {
  return s.String()
}

func (s *UpdateSnapshotResponse) SetRequestId(v string) *UpdateSnapshotResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateSnapshotResponse) SetResult(v bool) *UpdateSnapshotResponse {
  s.Result = &v
  return s
}

type RefreshWorkFlowRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
}

func (s RefreshWorkFlowRequest) String() string {
  return tea.Prettify(s)
}

func (s RefreshWorkFlowRequest) GoString() string {
  return s.String()
}

func (s *RefreshWorkFlowRequest) SetAccessKeyId(v string) *RefreshWorkFlowRequest {
  s.AccessKeyId = &v
  return s
}

func (s *RefreshWorkFlowRequest) SetOwnerId(v int64) *RefreshWorkFlowRequest {
  s.OwnerId = &v
  return s
}

func (s *RefreshWorkFlowRequest) SetResourceOwnerAccount(v string) *RefreshWorkFlowRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *RefreshWorkFlowRequest) SetResourceOwnerId(v int64) *RefreshWorkFlowRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *RefreshWorkFlowRequest) SetCustomerId(v string) *RefreshWorkFlowRequest {
  s.CustomerId = &v
  return s
}

type RefreshWorkFlowResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Result *bool `json:"Result" xml:"Result" require:"true"`
}

func (s RefreshWorkFlowResponse) String() string {
  return tea.Prettify(s)
}

func (s RefreshWorkFlowResponse) GoString() string {
  return s.String()
}

func (s *RefreshWorkFlowResponse) SetRequestId(v string) *RefreshWorkFlowResponse {
  s.RequestId = &v
  return s
}

func (s *RefreshWorkFlowResponse) SetResult(v bool) *RefreshWorkFlowResponse {
  s.Result = &v
  return s
}

type AddPipelineRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
}

func (s AddPipelineRequest) String() string {
  return tea.Prettify(s)
}

func (s AddPipelineRequest) GoString() string {
  return s.String()
}

func (s *AddPipelineRequest) SetAccessKeyId(v string) *AddPipelineRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddPipelineRequest) SetOwnerId(v int64) *AddPipelineRequest {
  s.OwnerId = &v
  return s
}

func (s *AddPipelineRequest) SetResourceOwnerAccount(v string) *AddPipelineRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddPipelineRequest) SetResourceOwnerId(v int64) *AddPipelineRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddPipelineRequest) SetCustomerId(v string) *AddPipelineRequest {
  s.CustomerId = &v
  return s
}

type AddPipelineResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PipelineId *string `json:"PipelineId" xml:"PipelineId" require:"true"`
}

func (s AddPipelineResponse) String() string {
  return tea.Prettify(s)
}

func (s AddPipelineResponse) GoString() string {
  return s.String()
}

func (s *AddPipelineResponse) SetRequestId(v string) *AddPipelineResponse {
  s.RequestId = &v
  return s
}

func (s *AddPipelineResponse) SetPipelineId(v string) *AddPipelineResponse {
  s.PipelineId = &v
  return s
}

type GetCheckChannelRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
}

func (s GetCheckChannelRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCheckChannelRequest) GoString() string {
  return s.String()
}

func (s *GetCheckChannelRequest) SetAccessKeyId(v string) *GetCheckChannelRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetCheckChannelRequest) SetOwnerId(v int64) *GetCheckChannelRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCheckChannelRequest) SetResourceOwnerAccount(v string) *GetCheckChannelRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCheckChannelRequest) SetResourceOwnerId(v int64) *GetCheckChannelRequest {
  s.ResourceOwnerId = &v
  return s
}

type GetCheckChannelResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Audit *GetCheckChannelResponseAudit `json:"Audit" xml:"Audit" require:"true" type:"Struct"`
}

func (s GetCheckChannelResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCheckChannelResponse) GoString() string {
  return s.String()
}

func (s *GetCheckChannelResponse) SetRequestId(v string) *GetCheckChannelResponse {
  s.RequestId = &v
  return s
}

func (s *GetCheckChannelResponse) SetAudit(v *GetCheckChannelResponseAudit) *GetCheckChannelResponse {
  s.Audit = v
  return s
}

type GetCheckChannelResponseAudit struct {
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  UpdateTime *string `json:"UpdateTime" xml:"UpdateTime" require:"true"`
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
  LegalSwitch *string `json:"LegalSwitch" xml:"LegalSwitch" require:"true"`
}

func (s GetCheckChannelResponseAudit) String() string {
  return tea.Prettify(s)
}

func (s GetCheckChannelResponseAudit) GoString() string {
  return s.String()
}

func (s *GetCheckChannelResponseAudit) SetCreateTime(v string) *GetCheckChannelResponseAudit {
  s.CreateTime = &v
  return s
}

func (s *GetCheckChannelResponseAudit) SetUpdateTime(v string) *GetCheckChannelResponseAudit {
  s.UpdateTime = &v
  return s
}

func (s *GetCheckChannelResponseAudit) SetChannel(v string) *GetCheckChannelResponseAudit {
  s.Channel = &v
  return s
}

func (s *GetCheckChannelResponseAudit) SetCustomerId(v string) *GetCheckChannelResponseAudit {
  s.CustomerId = &v
  return s
}

func (s *GetCheckChannelResponseAudit) SetLegalSwitch(v string) *GetCheckChannelResponseAudit {
  s.LegalSwitch = &v
  return s
}

type SetCheckChannelRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  LegalSwitch *string `json:"LegalSwitch" xml:"LegalSwitch"`
}

func (s SetCheckChannelRequest) String() string {
  return tea.Prettify(s)
}

func (s SetCheckChannelRequest) GoString() string {
  return s.String()
}

func (s *SetCheckChannelRequest) SetAccessKeyId(v string) *SetCheckChannelRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetCheckChannelRequest) SetOwnerId(v int64) *SetCheckChannelRequest {
  s.OwnerId = &v
  return s
}

func (s *SetCheckChannelRequest) SetResourceOwnerAccount(v string) *SetCheckChannelRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetCheckChannelRequest) SetResourceOwnerId(v int64) *SetCheckChannelRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetCheckChannelRequest) SetChannel(v string) *SetCheckChannelRequest {
  s.Channel = &v
  return s
}

func (s *SetCheckChannelRequest) SetLegalSwitch(v string) *SetCheckChannelRequest {
  s.LegalSwitch = &v
  return s
}

type SetCheckChannelResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Audit *SetCheckChannelResponseAudit `json:"Audit" xml:"Audit" require:"true" type:"Struct"`
}

func (s SetCheckChannelResponse) String() string {
  return tea.Prettify(s)
}

func (s SetCheckChannelResponse) GoString() string {
  return s.String()
}

func (s *SetCheckChannelResponse) SetRequestId(v string) *SetCheckChannelResponse {
  s.RequestId = &v
  return s
}

func (s *SetCheckChannelResponse) SetAudit(v *SetCheckChannelResponseAudit) *SetCheckChannelResponse {
  s.Audit = v
  return s
}

type SetCheckChannelResponseAudit struct {
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  UpdateTime *string `json:"UpdateTime" xml:"UpdateTime" require:"true"`
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
  LegalSwitch *string `json:"LegalSwitch" xml:"LegalSwitch" require:"true"`
}

func (s SetCheckChannelResponseAudit) String() string {
  return tea.Prettify(s)
}

func (s SetCheckChannelResponseAudit) GoString() string {
  return s.String()
}

func (s *SetCheckChannelResponseAudit) SetCreateTime(v string) *SetCheckChannelResponseAudit {
  s.CreateTime = &v
  return s
}

func (s *SetCheckChannelResponseAudit) SetUpdateTime(v string) *SetCheckChannelResponseAudit {
  s.UpdateTime = &v
  return s
}

func (s *SetCheckChannelResponseAudit) SetChannel(v string) *SetCheckChannelResponseAudit {
  s.Channel = &v
  return s
}

func (s *SetCheckChannelResponseAudit) SetCustomerId(v string) *SetCheckChannelResponseAudit {
  s.CustomerId = &v
  return s
}

func (s *SetCheckChannelResponseAudit) SetLegalSwitch(v string) *SetCheckChannelResponseAudit {
  s.LegalSwitch = &v
  return s
}

type GetPlayStatisRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  StartTime *int64 `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *int64 `json:"EndTime" xml:"EndTime" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  Level *string `json:"Level" xml:"Level"`
}

func (s GetPlayStatisRequest) String() string {
  return tea.Prettify(s)
}

func (s GetPlayStatisRequest) GoString() string {
  return s.String()
}

func (s *GetPlayStatisRequest) SetAccessKeyId(v string) *GetPlayStatisRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetPlayStatisRequest) SetOwnerId(v string) *GetPlayStatisRequest {
  s.OwnerId = &v
  return s
}

func (s *GetPlayStatisRequest) SetResourceOwnerId(v string) *GetPlayStatisRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetPlayStatisRequest) SetResourceOwnerAccount(v string) *GetPlayStatisRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetPlayStatisRequest) SetOwnerAccount(v string) *GetPlayStatisRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetPlayStatisRequest) SetStartTime(v int64) *GetPlayStatisRequest {
  s.StartTime = &v
  return s
}

func (s *GetPlayStatisRequest) SetEndTime(v int64) *GetPlayStatisRequest {
  s.EndTime = &v
  return s
}

func (s *GetPlayStatisRequest) SetType(v string) *GetPlayStatisRequest {
  s.Type = &v
  return s
}

func (s *GetPlayStatisRequest) SetLevel(v string) *GetPlayStatisRequest {
  s.Level = &v
  return s
}

type GetPlayStatisResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PlayStatisByPlatformDOs *GetPlayStatisResponsePlayStatisByPlatformDOs `json:"PlayStatisByPlatformDOs" xml:"PlayStatisByPlatformDOs" require:"true" type:"Struct"`
}

func (s GetPlayStatisResponse) String() string {
  return tea.Prettify(s)
}

func (s GetPlayStatisResponse) GoString() string {
  return s.String()
}

func (s *GetPlayStatisResponse) SetRequestId(v string) *GetPlayStatisResponse {
  s.RequestId = &v
  return s
}

func (s *GetPlayStatisResponse) SetPlayStatisByPlatformDOs(v *GetPlayStatisResponsePlayStatisByPlatformDOs) *GetPlayStatisResponse {
  s.PlayStatisByPlatformDOs = v
  return s
}

type GetPlayStatisResponsePlayStatisByPlatformDOs struct {
  PlayStatisByPlatform []*GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatform `json:"PlayStatisByPlatform" xml:"PlayStatisByPlatform" require:"true" type:"Repeated"`
}

func (s GetPlayStatisResponsePlayStatisByPlatformDOs) String() string {
  return tea.Prettify(s)
}

func (s GetPlayStatisResponsePlayStatisByPlatformDOs) GoString() string {
  return s.String()
}

func (s *GetPlayStatisResponsePlayStatisByPlatformDOs) SetPlayStatisByPlatform(v []*GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatform) *GetPlayStatisResponsePlayStatisByPlatformDOs {
  s.PlayStatisByPlatform = v
  return s
}

type GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatform struct     {
  Platform *string `json:"Platform" xml:"Platform" require:"true"`
  PlayStatisDOs *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOs `json:"PlayStatisDOs" xml:"PlayStatisDOs" require:"true" type:"Struct"`
}

func (s GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatform) String() string {
  return tea.Prettify(s)
}

func (s GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatform) GoString() string {
  return s.String()
}

func (s *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatform) SetPlatform(v string) *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatform {
  s.Platform = &v
  return s
}

func (s *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatform) SetPlayStatisDOs(v *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOs) *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatform {
  s.PlayStatisDOs = v
  return s
}

type GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOs struct {
  PlayStatisDO []*GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO `json:"PlayStatisDO" xml:"PlayStatisDO" require:"true" type:"Repeated"`
}

func (s GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOs) String() string {
  return tea.Prettify(s)
}

func (s GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOs) GoString() string {
  return s.String()
}

func (s *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOs) SetPlayStatisDO(v []*GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO) *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOs {
  s.PlayStatisDO = v
  return s
}

type GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO struct     {
  UserId *string `json:"UserId" xml:"UserId" require:"true"`
  Platform *string `json:"Platform" xml:"Platform" require:"true"`
  VisitView *int64 `json:"VisitView" xml:"VisitView" require:"true"`
  ViewTime *int64 `json:"ViewTime" xml:"ViewTime" require:"true"`
  StatTime *string `json:"StatTime" xml:"StatTime" require:"true"`
}

func (s GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO) String() string {
  return tea.Prettify(s)
}

func (s GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO) GoString() string {
  return s.String()
}

func (s *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO) SetUserId(v string) *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO {
  s.UserId = &v
  return s
}

func (s *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO) SetPlatform(v string) *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO {
  s.Platform = &v
  return s
}

func (s *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO) SetVisitView(v int64) *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO {
  s.VisitView = &v
  return s
}

func (s *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO) SetViewTime(v int64) *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO {
  s.ViewTime = &v
  return s
}

func (s *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO) SetStatTime(v string) *GetPlayStatisResponsePlayStatisByPlatformDOsPlayStatisByPlatformPlayStatisDOsPlayStatisDO {
  s.StatTime = &v
  return s
}

type GetMTSStatisRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  StartTime *int64 `json:"StartTime" xml:"StartTime"`
  EndTime *int64 `json:"EndTime" xml:"EndTime"`
  StartTimeUTC *string `json:"StartTimeUTC" xml:"StartTimeUTC"`
  EndTimeUTC *string `json:"EndTimeUTC" xml:"EndTimeUTC"`
  Level *string `json:"Level" xml:"Level"`
  Division *string `json:"Division" xml:"Division"`
}

func (s GetMTSStatisRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMTSStatisRequest) GoString() string {
  return s.String()
}

func (s *GetMTSStatisRequest) SetAccessKeyId(v string) *GetMTSStatisRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMTSStatisRequest) SetOwnerId(v string) *GetMTSStatisRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMTSStatisRequest) SetResourceOwnerId(v string) *GetMTSStatisRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMTSStatisRequest) SetResourceOwnerAccount(v string) *GetMTSStatisRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMTSStatisRequest) SetOwnerAccount(v string) *GetMTSStatisRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetMTSStatisRequest) SetStartTime(v int64) *GetMTSStatisRequest {
  s.StartTime = &v
  return s
}

func (s *GetMTSStatisRequest) SetEndTime(v int64) *GetMTSStatisRequest {
  s.EndTime = &v
  return s
}

func (s *GetMTSStatisRequest) SetStartTimeUTC(v string) *GetMTSStatisRequest {
  s.StartTimeUTC = &v
  return s
}

func (s *GetMTSStatisRequest) SetEndTimeUTC(v string) *GetMTSStatisRequest {
  s.EndTimeUTC = &v
  return s
}

func (s *GetMTSStatisRequest) SetLevel(v string) *GetMTSStatisRequest {
  s.Level = &v
  return s
}

func (s *GetMTSStatisRequest) SetDivision(v string) *GetMTSStatisRequest {
  s.Division = &v
  return s
}

type GetMTSStatisResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MTSStatisBySpecList *GetMTSStatisResponseMTSStatisBySpecList `json:"MTSStatisBySpecList" xml:"MTSStatisBySpecList" require:"true" type:"Struct"`
}

func (s GetMTSStatisResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMTSStatisResponse) GoString() string {
  return s.String()
}

func (s *GetMTSStatisResponse) SetRequestId(v string) *GetMTSStatisResponse {
  s.RequestId = &v
  return s
}

func (s *GetMTSStatisResponse) SetMTSStatisBySpecList(v *GetMTSStatisResponseMTSStatisBySpecList) *GetMTSStatisResponse {
  s.MTSStatisBySpecList = v
  return s
}

type GetMTSStatisResponseMTSStatisBySpecList struct {
  MTSStatisBySpec []*GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpec `json:"MTSStatisBySpec" xml:"MTSStatisBySpec" require:"true" type:"Repeated"`
}

func (s GetMTSStatisResponseMTSStatisBySpecList) String() string {
  return tea.Prettify(s)
}

func (s GetMTSStatisResponseMTSStatisBySpecList) GoString() string {
  return s.String()
}

func (s *GetMTSStatisResponseMTSStatisBySpecList) SetMTSStatisBySpec(v []*GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpec) *GetMTSStatisResponseMTSStatisBySpecList {
  s.MTSStatisBySpec = v
  return s
}

type GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpec struct     {
  Specification *string `json:"Specification" xml:"Specification" require:"true"`
  MTSStatisDOList *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOList `json:"MTSStatisDOList" xml:"MTSStatisDOList" require:"true" type:"Struct"`
}

func (s GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpec) String() string {
  return tea.Prettify(s)
}

func (s GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpec) GoString() string {
  return s.String()
}

func (s *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpec) SetSpecification(v string) *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpec {
  s.Specification = &v
  return s
}

func (s *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpec) SetMTSStatisDOList(v *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOList) *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpec {
  s.MTSStatisDOList = v
  return s
}

type GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOList struct {
  MTSStatisDO []*GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO `json:"MTSStatisDO" xml:"MTSStatisDO" require:"true" type:"Repeated"`
}

func (s GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOList) String() string {
  return tea.Prettify(s)
}

func (s GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOList) GoString() string {
  return s.String()
}

func (s *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOList) SetMTSStatisDO(v []*GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO) *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOList {
  s.MTSStatisDO = v
  return s
}

type GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO struct     {
  UserId *string `json:"UserId" xml:"UserId" require:"true"`
  Specification *string `json:"Specification" xml:"Specification" require:"true"`
  Duration *int64 `json:"Duration" xml:"Duration" require:"true"`
  StatTime *string `json:"StatTime" xml:"StatTime" require:"true"`
  StatTimeUTC *string `json:"StatTimeUTC" xml:"StatTimeUTC" require:"true"`
}

func (s GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO) String() string {
  return tea.Prettify(s)
}

func (s GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO) GoString() string {
  return s.String()
}

func (s *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO) SetUserId(v string) *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO {
  s.UserId = &v
  return s
}

func (s *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO) SetSpecification(v string) *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO {
  s.Specification = &v
  return s
}

func (s *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO) SetDuration(v int64) *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO {
  s.Duration = &v
  return s
}

func (s *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO) SetStatTime(v string) *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO {
  s.StatTime = &v
  return s
}

func (s *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO) SetStatTimeUTC(v string) *GetMTSStatisResponseMTSStatisBySpecListMTSStatisBySpecMTSStatisDOListMTSStatisDO {
  s.StatTimeUTC = &v
  return s
}

type ListDomainRefererRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  RefererType *string `json:"RefererType" xml:"RefererType" require:"true"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
}

func (s ListDomainRefererRequest) String() string {
  return tea.Prettify(s)
}

func (s ListDomainRefererRequest) GoString() string {
  return s.String()
}

func (s *ListDomainRefererRequest) SetAccessKeyId(v string) *ListDomainRefererRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListDomainRefererRequest) SetOwnerId(v string) *ListDomainRefererRequest {
  s.OwnerId = &v
  return s
}

func (s *ListDomainRefererRequest) SetResourceOwnerId(v string) *ListDomainRefererRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListDomainRefererRequest) SetResourceOwnerAccount(v string) *ListDomainRefererRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListDomainRefererRequest) SetDomainName(v string) *ListDomainRefererRequest {
  s.DomainName = &v
  return s
}

func (s *ListDomainRefererRequest) SetRefererType(v string) *ListDomainRefererRequest {
  s.RefererType = &v
  return s
}

func (s *ListDomainRefererRequest) SetPageNo(v int) *ListDomainRefererRequest {
  s.PageNo = &v
  return s
}

func (s *ListDomainRefererRequest) SetPageSize(v int) *ListDomainRefererRequest {
  s.PageSize = &v
  return s
}

type ListDomainRefererResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Total *int `json:"Total" xml:"Total" require:"true"`
  AllowEmpty *string `json:"AllowEmpty" xml:"AllowEmpty" require:"true"`
  RefererList *ListDomainRefererResponseRefererList `json:"RefererList" xml:"RefererList" require:"true" type:"Struct"`
}

func (s ListDomainRefererResponse) String() string {
  return tea.Prettify(s)
}

func (s ListDomainRefererResponse) GoString() string {
  return s.String()
}

func (s *ListDomainRefererResponse) SetRequestId(v string) *ListDomainRefererResponse {
  s.RequestId = &v
  return s
}

func (s *ListDomainRefererResponse) SetTotal(v int) *ListDomainRefererResponse {
  s.Total = &v
  return s
}

func (s *ListDomainRefererResponse) SetAllowEmpty(v string) *ListDomainRefererResponse {
  s.AllowEmpty = &v
  return s
}

func (s *ListDomainRefererResponse) SetRefererList(v *ListDomainRefererResponseRefererList) *ListDomainRefererResponse {
  s.RefererList = v
  return s
}

type ListDomainRefererResponseRefererList struct {
  RefererItem []*ListDomainRefererResponseRefererListRefererItem `json:"RefererItem" xml:"RefererItem" require:"true" type:"Repeated"`
}

func (s ListDomainRefererResponseRefererList) String() string {
  return tea.Prettify(s)
}

func (s ListDomainRefererResponseRefererList) GoString() string {
  return s.String()
}

func (s *ListDomainRefererResponseRefererList) SetRefererItem(v []*ListDomainRefererResponseRefererListRefererItem) *ListDomainRefererResponseRefererList {
  s.RefererItem = v
  return s
}

type ListDomainRefererResponseRefererListRefererItem struct     {
  RefererId *int64 `json:"RefererId" xml:"RefererId" require:"true"`
  Referer *string `json:"Referer" xml:"Referer" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
}

func (s ListDomainRefererResponseRefererListRefererItem) String() string {
  return tea.Prettify(s)
}

func (s ListDomainRefererResponseRefererListRefererItem) GoString() string {
  return s.String()
}

func (s *ListDomainRefererResponseRefererListRefererItem) SetRefererId(v int64) *ListDomainRefererResponseRefererListRefererItem {
  s.RefererId = &v
  return s
}

func (s *ListDomainRefererResponseRefererListRefererItem) SetReferer(v string) *ListDomainRefererResponseRefererListRefererItem {
  s.Referer = &v
  return s
}

func (s *ListDomainRefererResponseRefererListRefererItem) SetCreateTime(v string) *ListDomainRefererResponseRefererListRefererItem {
  s.CreateTime = &v
  return s
}

type SetMessageCallbackRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  CallbackSwitch *string `json:"CallbackSwitch" xml:"CallbackSwitch"`
  CallbackType *string `json:"CallbackType" xml:"CallbackType"`
  CallbackURL *string `json:"CallbackURL" xml:"CallbackURL" require:"true"`
  EventTypeList *string `json:"EventTypeList" xml:"EventTypeList"`
  AuthSwitch *string `json:"AuthSwitch" xml:"AuthSwitch"`
  AuthKey *string `json:"AuthKey" xml:"AuthKey"`
  MnsEndpoint *string `json:"MnsEndpoint" xml:"MnsEndpoint"`
  MnsQueueName *string `json:"MnsQueueName" xml:"MnsQueueName"`
  AppId *string `json:"AppId" xml:"AppId"`
}

func (s SetMessageCallbackRequest) String() string {
  return tea.Prettify(s)
}

func (s SetMessageCallbackRequest) GoString() string {
  return s.String()
}

func (s *SetMessageCallbackRequest) SetAccessKeyId(v string) *SetMessageCallbackRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetMessageCallbackRequest) SetOwnerId(v string) *SetMessageCallbackRequest {
  s.OwnerId = &v
  return s
}

func (s *SetMessageCallbackRequest) SetResourceOwnerId(v string) *SetMessageCallbackRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetMessageCallbackRequest) SetResourceOwnerAccount(v string) *SetMessageCallbackRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetMessageCallbackRequest) SetOwnerAccount(v string) *SetMessageCallbackRequest {
  s.OwnerAccount = &v
  return s
}

func (s *SetMessageCallbackRequest) SetResourceRealOwnerId(v int64) *SetMessageCallbackRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *SetMessageCallbackRequest) SetCallbackSwitch(v string) *SetMessageCallbackRequest {
  s.CallbackSwitch = &v
  return s
}

func (s *SetMessageCallbackRequest) SetCallbackType(v string) *SetMessageCallbackRequest {
  s.CallbackType = &v
  return s
}

func (s *SetMessageCallbackRequest) SetCallbackURL(v string) *SetMessageCallbackRequest {
  s.CallbackURL = &v
  return s
}

func (s *SetMessageCallbackRequest) SetEventTypeList(v string) *SetMessageCallbackRequest {
  s.EventTypeList = &v
  return s
}

func (s *SetMessageCallbackRequest) SetAuthSwitch(v string) *SetMessageCallbackRequest {
  s.AuthSwitch = &v
  return s
}

func (s *SetMessageCallbackRequest) SetAuthKey(v string) *SetMessageCallbackRequest {
  s.AuthKey = &v
  return s
}

func (s *SetMessageCallbackRequest) SetMnsEndpoint(v string) *SetMessageCallbackRequest {
  s.MnsEndpoint = &v
  return s
}

func (s *SetMessageCallbackRequest) SetMnsQueueName(v string) *SetMessageCallbackRequest {
  s.MnsQueueName = &v
  return s
}

func (s *SetMessageCallbackRequest) SetAppId(v string) *SetMessageCallbackRequest {
  s.AppId = &v
  return s
}

type SetMessageCallbackResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SetMessageCallbackResponse) String() string {
  return tea.Prettify(s)
}

func (s SetMessageCallbackResponse) GoString() string {
  return s.String()
}

func (s *SetMessageCallbackResponse) SetRequestId(v string) *SetMessageCallbackResponse {
  s.RequestId = &v
  return s
}

type GetMessageCallbackRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  AppId *string `json:"AppId" xml:"AppId"`
}

func (s GetMessageCallbackRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMessageCallbackRequest) GoString() string {
  return s.String()
}

func (s *GetMessageCallbackRequest) SetAccessKeyId(v string) *GetMessageCallbackRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMessageCallbackRequest) SetOwnerId(v string) *GetMessageCallbackRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMessageCallbackRequest) SetResourceOwnerId(v string) *GetMessageCallbackRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMessageCallbackRequest) SetResourceOwnerAccount(v string) *GetMessageCallbackRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMessageCallbackRequest) SetOwnerAccount(v string) *GetMessageCallbackRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetMessageCallbackRequest) SetResourceRealOwnerId(v int64) *GetMessageCallbackRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *GetMessageCallbackRequest) SetAppId(v string) *GetMessageCallbackRequest {
  s.AppId = &v
  return s
}

type GetMessageCallbackResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MessageCallback *GetMessageCallbackResponseMessageCallback `json:"MessageCallback" xml:"MessageCallback" require:"true" type:"Struct"`
}

func (s GetMessageCallbackResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMessageCallbackResponse) GoString() string {
  return s.String()
}

func (s *GetMessageCallbackResponse) SetRequestId(v string) *GetMessageCallbackResponse {
  s.RequestId = &v
  return s
}

func (s *GetMessageCallbackResponse) SetMessageCallback(v *GetMessageCallbackResponseMessageCallback) *GetMessageCallbackResponse {
  s.MessageCallback = v
  return s
}

type GetMessageCallbackResponseMessageCallback struct {
  CallbackType *string `json:"CallbackType" xml:"CallbackType" require:"true"`
  CallbackSwitch *string `json:"CallbackSwitch" xml:"CallbackSwitch" require:"true"`
  CallbackURL *string `json:"CallbackURL" xml:"CallbackURL" require:"true"`
  EventTypeList *string `json:"EventTypeList" xml:"EventTypeList" require:"true"`
  AuthSwitch *string `json:"AuthSwitch" xml:"AuthSwitch" require:"true"`
  AuthKey *string `json:"AuthKey" xml:"AuthKey" require:"true"`
  MnsEndpoint *string `json:"MnsEndpoint" xml:"MnsEndpoint" require:"true"`
  MnsQueueName *string `json:"MnsQueueName" xml:"MnsQueueName" require:"true"`
}

func (s GetMessageCallbackResponseMessageCallback) String() string {
  return tea.Prettify(s)
}

func (s GetMessageCallbackResponseMessageCallback) GoString() string {
  return s.String()
}

func (s *GetMessageCallbackResponseMessageCallback) SetCallbackType(v string) *GetMessageCallbackResponseMessageCallback {
  s.CallbackType = &v
  return s
}

func (s *GetMessageCallbackResponseMessageCallback) SetCallbackSwitch(v string) *GetMessageCallbackResponseMessageCallback {
  s.CallbackSwitch = &v
  return s
}

func (s *GetMessageCallbackResponseMessageCallback) SetCallbackURL(v string) *GetMessageCallbackResponseMessageCallback {
  s.CallbackURL = &v
  return s
}

func (s *GetMessageCallbackResponseMessageCallback) SetEventTypeList(v string) *GetMessageCallbackResponseMessageCallback {
  s.EventTypeList = &v
  return s
}

func (s *GetMessageCallbackResponseMessageCallback) SetAuthSwitch(v string) *GetMessageCallbackResponseMessageCallback {
  s.AuthSwitch = &v
  return s
}

func (s *GetMessageCallbackResponseMessageCallback) SetAuthKey(v string) *GetMessageCallbackResponseMessageCallback {
  s.AuthKey = &v
  return s
}

func (s *GetMessageCallbackResponseMessageCallback) SetMnsEndpoint(v string) *GetMessageCallbackResponseMessageCallback {
  s.MnsEndpoint = &v
  return s
}

func (s *GetMessageCallbackResponseMessageCallback) SetMnsQueueName(v string) *GetMessageCallbackResponseMessageCallback {
  s.MnsQueueName = &v
  return s
}

type GetVideoPlayInfoForCloudRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  ClientTS *int64 `json:"ClientTS" xml:"ClientTS" require:"true"`
  ClientVersion *string `json:"ClientVersion" xml:"ClientVersion" require:"true"`
  PlaySign *string `json:"PlaySign" xml:"PlaySign" require:"true"`
  SignVersion *string `json:"SignVersion" xml:"SignVersion" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s GetVideoPlayInfoForCloudRequest) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayInfoForCloudRequest) GoString() string {
  return s.String()
}

func (s *GetVideoPlayInfoForCloudRequest) SetAccessKeyId(v string) *GetVideoPlayInfoForCloudRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetVideoPlayInfoForCloudRequest) SetOwnerId(v int64) *GetVideoPlayInfoForCloudRequest {
  s.OwnerId = &v
  return s
}

func (s *GetVideoPlayInfoForCloudRequest) SetResourceOwnerAccount(v string) *GetVideoPlayInfoForCloudRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetVideoPlayInfoForCloudRequest) SetResourceOwnerId(v int64) *GetVideoPlayInfoForCloudRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetVideoPlayInfoForCloudRequest) SetChannel(v string) *GetVideoPlayInfoForCloudRequest {
  s.Channel = &v
  return s
}

func (s *GetVideoPlayInfoForCloudRequest) SetClientTS(v int64) *GetVideoPlayInfoForCloudRequest {
  s.ClientTS = &v
  return s
}

func (s *GetVideoPlayInfoForCloudRequest) SetClientVersion(v string) *GetVideoPlayInfoForCloudRequest {
  s.ClientVersion = &v
  return s
}

func (s *GetVideoPlayInfoForCloudRequest) SetPlaySign(v string) *GetVideoPlayInfoForCloudRequest {
  s.PlaySign = &v
  return s
}

func (s *GetVideoPlayInfoForCloudRequest) SetSignVersion(v string) *GetVideoPlayInfoForCloudRequest {
  s.SignVersion = &v
  return s
}

func (s *GetVideoPlayInfoForCloudRequest) SetVideoId(v string) *GetVideoPlayInfoForCloudRequest {
  s.VideoId = &v
  return s
}

type GetVideoPlayInfoForCloudResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PlayInfo *GetVideoPlayInfoForCloudResponsePlayInfo `json:"PlayInfo" xml:"PlayInfo" require:"true" type:"Struct"`
  VideoInfo *GetVideoPlayInfoForCloudResponseVideoInfo `json:"VideoInfo" xml:"VideoInfo" require:"true" type:"Struct"`
}

func (s GetVideoPlayInfoForCloudResponse) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayInfoForCloudResponse) GoString() string {
  return s.String()
}

func (s *GetVideoPlayInfoForCloudResponse) SetRequestId(v string) *GetVideoPlayInfoForCloudResponse {
  s.RequestId = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponse) SetPlayInfo(v *GetVideoPlayInfoForCloudResponsePlayInfo) *GetVideoPlayInfoForCloudResponse {
  s.PlayInfo = v
  return s
}

func (s *GetVideoPlayInfoForCloudResponse) SetVideoInfo(v *GetVideoPlayInfoForCloudResponseVideoInfo) *GetVideoPlayInfoForCloudResponse {
  s.VideoInfo = v
  return s
}

type GetVideoPlayInfoForCloudResponsePlayInfo struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId" require:"true"`
  AccessKeySecret *string `json:"AccessKeySecret" xml:"AccessKeySecret" require:"true"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo" require:"true"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken" require:"true"`
  Region *string `json:"Region" xml:"Region" require:"true"`
  PlayDomain *string `json:"PlayDomain" xml:"PlayDomain" require:"true"`
}

func (s GetVideoPlayInfoForCloudResponsePlayInfo) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayInfoForCloudResponsePlayInfo) GoString() string {
  return s.String()
}

func (s *GetVideoPlayInfoForCloudResponsePlayInfo) SetAccessKeyId(v string) *GetVideoPlayInfoForCloudResponsePlayInfo {
  s.AccessKeyId = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponsePlayInfo) SetAccessKeySecret(v string) *GetVideoPlayInfoForCloudResponsePlayInfo {
  s.AccessKeySecret = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponsePlayInfo) SetAuthInfo(v string) *GetVideoPlayInfoForCloudResponsePlayInfo {
  s.AuthInfo = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponsePlayInfo) SetSecurityToken(v string) *GetVideoPlayInfoForCloudResponsePlayInfo {
  s.SecurityToken = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponsePlayInfo) SetRegion(v string) *GetVideoPlayInfoForCloudResponsePlayInfo {
  s.Region = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponsePlayInfo) SetPlayDomain(v string) *GetVideoPlayInfoForCloudResponsePlayInfo {
  s.PlayDomain = &v
  return s
}

type GetVideoPlayInfoForCloudResponseVideoInfo struct {
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s GetVideoPlayInfoForCloudResponseVideoInfo) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayInfoForCloudResponseVideoInfo) GoString() string {
  return s.String()
}

func (s *GetVideoPlayInfoForCloudResponseVideoInfo) SetCoverURL(v string) *GetVideoPlayInfoForCloudResponseVideoInfo {
  s.CoverURL = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponseVideoInfo) SetCustomerId(v int64) *GetVideoPlayInfoForCloudResponseVideoInfo {
  s.CustomerId = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponseVideoInfo) SetDuration(v float32) *GetVideoPlayInfoForCloudResponseVideoInfo {
  s.Duration = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponseVideoInfo) SetStatus(v string) *GetVideoPlayInfoForCloudResponseVideoInfo {
  s.Status = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponseVideoInfo) SetTitle(v string) *GetVideoPlayInfoForCloudResponseVideoInfo {
  s.Title = &v
  return s
}

func (s *GetVideoPlayInfoForCloudResponseVideoInfo) SetVideoId(v string) *GetVideoPlayInfoForCloudResponseVideoInfo {
  s.VideoId = &v
  return s
}

type GetVideoPlayAuthRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  AuthInfoTimeout *int64 `json:"AuthInfoTimeout" xml:"AuthInfoTimeout"`
  PlayConfig *string `json:"PlayConfig" xml:"PlayConfig"`
}

func (s GetVideoPlayAuthRequest) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayAuthRequest) GoString() string {
  return s.String()
}

func (s *GetVideoPlayAuthRequest) SetOwnerId(v int64) *GetVideoPlayAuthRequest {
  s.OwnerId = &v
  return s
}

func (s *GetVideoPlayAuthRequest) SetResourceOwnerAccount(v string) *GetVideoPlayAuthRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetVideoPlayAuthRequest) SetResourceOwnerId(v int64) *GetVideoPlayAuthRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetVideoPlayAuthRequest) SetVideoId(v string) *GetVideoPlayAuthRequest {
  s.VideoId = &v
  return s
}

func (s *GetVideoPlayAuthRequest) SetAuthInfoTimeout(v int64) *GetVideoPlayAuthRequest {
  s.AuthInfoTimeout = &v
  return s
}

func (s *GetVideoPlayAuthRequest) SetPlayConfig(v string) *GetVideoPlayAuthRequest {
  s.PlayConfig = &v
  return s
}

type GetVideoPlayAuthResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PlayAuth *string `json:"PlayAuth" xml:"PlayAuth" require:"true"`
  VideoMeta *GetVideoPlayAuthResponseVideoMeta `json:"VideoMeta" xml:"VideoMeta" require:"true" type:"Struct"`
}

func (s GetVideoPlayAuthResponse) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayAuthResponse) GoString() string {
  return s.String()
}

func (s *GetVideoPlayAuthResponse) SetRequestId(v string) *GetVideoPlayAuthResponse {
  s.RequestId = &v
  return s
}

func (s *GetVideoPlayAuthResponse) SetPlayAuth(v string) *GetVideoPlayAuthResponse {
  s.PlayAuth = &v
  return s
}

func (s *GetVideoPlayAuthResponse) SetVideoMeta(v *GetVideoPlayAuthResponseVideoMeta) *GetVideoPlayAuthResponse {
  s.VideoMeta = v
  return s
}

type GetVideoPlayAuthResponseVideoMeta struct {
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s GetVideoPlayAuthResponseVideoMeta) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayAuthResponseVideoMeta) GoString() string {
  return s.String()
}

func (s *GetVideoPlayAuthResponseVideoMeta) SetCoverURL(v string) *GetVideoPlayAuthResponseVideoMeta {
  s.CoverURL = &v
  return s
}

func (s *GetVideoPlayAuthResponseVideoMeta) SetDuration(v float32) *GetVideoPlayAuthResponseVideoMeta {
  s.Duration = &v
  return s
}

func (s *GetVideoPlayAuthResponseVideoMeta) SetStatus(v string) *GetVideoPlayAuthResponseVideoMeta {
  s.Status = &v
  return s
}

func (s *GetVideoPlayAuthResponseVideoMeta) SetTitle(v string) *GetVideoPlayAuthResponseVideoMeta {
  s.Title = &v
  return s
}

func (s *GetVideoPlayAuthResponseVideoMeta) SetVideoId(v string) *GetVideoPlayAuthResponseVideoMeta {
  s.VideoId = &v
  return s
}

type GetMidYKVidRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  YkVid *string `json:"YkVid" xml:"YkVid" require:"true"`
}

func (s GetMidYKVidRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMidYKVidRequest) GoString() string {
  return s.String()
}

func (s *GetMidYKVidRequest) SetAccessKeyId(v string) *GetMidYKVidRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMidYKVidRequest) SetOwnerId(v string) *GetMidYKVidRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMidYKVidRequest) SetResourceOwnerId(v string) *GetMidYKVidRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMidYKVidRequest) SetResourceOwnerAccount(v string) *GetMidYKVidRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMidYKVidRequest) SetOwnerAccount(v string) *GetMidYKVidRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetMidYKVidRequest) SetYkVid(v string) *GetMidYKVidRequest {
  s.YkVid = &v
  return s
}

type GetMidYKVidResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MidYKVidDO *GetMidYKVidResponseMidYKVidDO `json:"MidYKVidDO" xml:"MidYKVidDO" require:"true" type:"Struct"`
}

func (s GetMidYKVidResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMidYKVidResponse) GoString() string {
  return s.String()
}

func (s *GetMidYKVidResponse) SetRequestId(v string) *GetMidYKVidResponse {
  s.RequestId = &v
  return s
}

func (s *GetMidYKVidResponse) SetMidYKVidDO(v *GetMidYKVidResponseMidYKVidDO) *GetMidYKVidResponse {
  s.MidYKVidDO = v
  return s
}

type GetMidYKVidResponseMidYKVidDO struct {
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  YkVid *string `json:"YkVid" xml:"YkVid" require:"true"`
}

func (s GetMidYKVidResponseMidYKVidDO) String() string {
  return tea.Prettify(s)
}

func (s GetMidYKVidResponseMidYKVidDO) GoString() string {
  return s.String()
}

func (s *GetMidYKVidResponseMidYKVidDO) SetMediaId(v string) *GetMidYKVidResponseMidYKVidDO {
  s.MediaId = &v
  return s
}

func (s *GetMidYKVidResponseMidYKVidDO) SetYkVid(v string) *GetMidYKVidResponseMidYKVidDO {
  s.YkVid = &v
  return s
}

type DeleteMidYKVidRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  YkVid *string `json:"YkVid" xml:"YkVid" require:"true"`
}

func (s DeleteMidYKVidRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteMidYKVidRequest) GoString() string {
  return s.String()
}

func (s *DeleteMidYKVidRequest) SetAccessKeyId(v string) *DeleteMidYKVidRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteMidYKVidRequest) SetOwnerId(v string) *DeleteMidYKVidRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteMidYKVidRequest) SetResourceOwnerId(v string) *DeleteMidYKVidRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteMidYKVidRequest) SetResourceOwnerAccount(v string) *DeleteMidYKVidRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteMidYKVidRequest) SetOwnerAccount(v string) *DeleteMidYKVidRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteMidYKVidRequest) SetYkVid(v string) *DeleteMidYKVidRequest {
  s.YkVid = &v
  return s
}

type DeleteMidYKVidResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteMidYKVidResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteMidYKVidResponse) GoString() string {
  return s.String()
}

func (s *DeleteMidYKVidResponse) SetRequestId(v string) *DeleteMidYKVidResponse {
  s.RequestId = &v
  return s
}

type AddMidYKVidRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  YKCloudVid *string `json:"YKCloudVid" xml:"YKCloudVid" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  YKVideoId *string `json:"YKVideoId" xml:"YKVideoId"`
}

func (s AddMidYKVidRequest) String() string {
  return tea.Prettify(s)
}

func (s AddMidYKVidRequest) GoString() string {
  return s.String()
}

func (s *AddMidYKVidRequest) SetAccessKeyId(v string) *AddMidYKVidRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddMidYKVidRequest) SetOwnerId(v string) *AddMidYKVidRequest {
  s.OwnerId = &v
  return s
}

func (s *AddMidYKVidRequest) SetResourceOwnerId(v string) *AddMidYKVidRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddMidYKVidRequest) SetResourceOwnerAccount(v string) *AddMidYKVidRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddMidYKVidRequest) SetOwnerAccount(v string) *AddMidYKVidRequest {
  s.OwnerAccount = &v
  return s
}

func (s *AddMidYKVidRequest) SetYKCloudVid(v string) *AddMidYKVidRequest {
  s.YKCloudVid = &v
  return s
}

func (s *AddMidYKVidRequest) SetMediaId(v string) *AddMidYKVidRequest {
  s.MediaId = &v
  return s
}

func (s *AddMidYKVidRequest) SetYKVideoId(v string) *AddMidYKVidRequest {
  s.YKVideoId = &v
  return s
}

type AddMidYKVidResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MidYKVidDO *AddMidYKVidResponseMidYKVidDO `json:"MidYKVidDO" xml:"MidYKVidDO" require:"true" type:"Struct"`
}

func (s AddMidYKVidResponse) String() string {
  return tea.Prettify(s)
}

func (s AddMidYKVidResponse) GoString() string {
  return s.String()
}

func (s *AddMidYKVidResponse) SetRequestId(v string) *AddMidYKVidResponse {
  s.RequestId = &v
  return s
}

func (s *AddMidYKVidResponse) SetMidYKVidDO(v *AddMidYKVidResponseMidYKVidDO) *AddMidYKVidResponse {
  s.MidYKVidDO = v
  return s
}

type AddMidYKVidResponseMidYKVidDO struct {
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  YKCloudVid *string `json:"YKCloudVid" xml:"YKCloudVid" require:"true"`
  YKVideoId *string `json:"YKVideoId" xml:"YKVideoId" require:"true"`
}

func (s AddMidYKVidResponseMidYKVidDO) String() string {
  return tea.Prettify(s)
}

func (s AddMidYKVidResponseMidYKVidDO) GoString() string {
  return s.String()
}

func (s *AddMidYKVidResponseMidYKVidDO) SetMediaId(v string) *AddMidYKVidResponseMidYKVidDO {
  s.MediaId = &v
  return s
}

func (s *AddMidYKVidResponseMidYKVidDO) SetYKCloudVid(v string) *AddMidYKVidResponseMidYKVidDO {
  s.YKCloudVid = &v
  return s
}

func (s *AddMidYKVidResponseMidYKVidDO) SetYKVideoId(v string) *AddMidYKVidResponseMidYKVidDO {
  s.YKVideoId = &v
  return s
}

type UpdateVideoStatusRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Status *string `json:"status" xml:"status" require:"true"`
}

func (s UpdateVideoStatusRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateVideoStatusRequest) GoString() string {
  return s.String()
}

func (s *UpdateVideoStatusRequest) SetAccessKeyId(v string) *UpdateVideoStatusRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateVideoStatusRequest) SetOwnerId(v int64) *UpdateVideoStatusRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateVideoStatusRequest) SetResourceOwnerAccount(v string) *UpdateVideoStatusRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateVideoStatusRequest) SetResourceOwnerId(v int64) *UpdateVideoStatusRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateVideoStatusRequest) SetVideoId(v string) *UpdateVideoStatusRequest {
  s.VideoId = &v
  return s
}

func (s *UpdateVideoStatusRequest) SetStatus(v string) *UpdateVideoStatusRequest {
  s.Status = &v
  return s
}

type UpdateVideoStatusResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateVideoStatusResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateVideoStatusResponse) GoString() string {
  return s.String()
}

func (s *UpdateVideoStatusResponse) SetRequestId(v string) *UpdateVideoStatusResponse {
  s.RequestId = &v
  return s
}

type UpdateVideoInfoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Title *string `json:"Title" xml:"Title"`
  Tags *string `json:"Tags" xml:"Tags"`
  Description *string `json:"Description" xml:"Description"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL"`
  CateId *int64 `json:"CateId" xml:"CateId"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch"`
  FileSize *int64 `json:"FileSize" xml:"FileSize"`
  Duration *string `json:"Duration" xml:"Duration"`
  Status *string `json:"Status" xml:"Status"`
  MediaType *string `json:"MediaType" xml:"MediaType"`
  Source *string `json:"Source" xml:"Source"`
}

func (s UpdateVideoInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateVideoInfoRequest) GoString() string {
  return s.String()
}

func (s *UpdateVideoInfoRequest) SetOwnerId(v int64) *UpdateVideoInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetResourceOwnerAccount(v string) *UpdateVideoInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetResourceOwnerId(v int64) *UpdateVideoInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetResourceRealOwnerId(v int64) *UpdateVideoInfoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetVideoId(v string) *UpdateVideoInfoRequest {
  s.VideoId = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetTitle(v string) *UpdateVideoInfoRequest {
  s.Title = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetTags(v string) *UpdateVideoInfoRequest {
  s.Tags = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetDescription(v string) *UpdateVideoInfoRequest {
  s.Description = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetCoverURL(v string) *UpdateVideoInfoRequest {
  s.CoverURL = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetCateId(v int64) *UpdateVideoInfoRequest {
  s.CateId = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetDownloadSwitch(v string) *UpdateVideoInfoRequest {
  s.DownloadSwitch = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetFileSize(v int64) *UpdateVideoInfoRequest {
  s.FileSize = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetDuration(v string) *UpdateVideoInfoRequest {
  s.Duration = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetStatus(v string) *UpdateVideoInfoRequest {
  s.Status = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetMediaType(v string) *UpdateVideoInfoRequest {
  s.MediaType = &v
  return s
}

func (s *UpdateVideoInfoRequest) SetSource(v string) *UpdateVideoInfoRequest {
  s.Source = &v
  return s
}

type UpdateVideoInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateVideoInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateVideoInfoResponse) GoString() string {
  return s.String()
}

func (s *UpdateVideoInfoResponse) SetRequestId(v string) *UpdateVideoInfoResponse {
  s.RequestId = &v
  return s
}

type SearchVideoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CateId *int `json:"CateId" xml:"CateId"`
  Title *string `json:"Title" xml:"Title"`
  KeyWord *string `json:"KeyWord" xml:"KeyWord"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  Status *string `json:"Status" xml:"Status"`
  MediaType *string `json:"MediaType" xml:"MediaType"`
  ResultTypes *string `json:"ResultTypes" xml:"ResultTypes"`
  PlayRand *string `json:"PlayRand" xml:"PlayRand"`
  Source *string `json:"Source" xml:"Source"`
  ApiVersion *string `json:"ApiVersion" xml:"ApiVersion"`
  ScrollToken *string `json:"ScrollToken" xml:"ScrollToken"`
  PreprocessStatus *string `json:"PreprocessStatus" xml:"PreprocessStatus"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation"`
  VideoId *string `json:"VideoId" xml:"VideoId"`
}

func (s SearchVideoRequest) String() string {
  return tea.Prettify(s)
}

func (s SearchVideoRequest) GoString() string {
  return s.String()
}

func (s *SearchVideoRequest) SetOwnerId(v int64) *SearchVideoRequest {
  s.OwnerId = &v
  return s
}

func (s *SearchVideoRequest) SetResourceOwnerAccount(v string) *SearchVideoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SearchVideoRequest) SetResourceOwnerId(v int64) *SearchVideoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SearchVideoRequest) SetCateId(v int) *SearchVideoRequest {
  s.CateId = &v
  return s
}

func (s *SearchVideoRequest) SetTitle(v string) *SearchVideoRequest {
  s.Title = &v
  return s
}

func (s *SearchVideoRequest) SetKeyWord(v string) *SearchVideoRequest {
  s.KeyWord = &v
  return s
}

func (s *SearchVideoRequest) SetStartTime(v string) *SearchVideoRequest {
  s.StartTime = &v
  return s
}

func (s *SearchVideoRequest) SetEndTime(v string) *SearchVideoRequest {
  s.EndTime = &v
  return s
}

func (s *SearchVideoRequest) SetPageNo(v int) *SearchVideoRequest {
  s.PageNo = &v
  return s
}

func (s *SearchVideoRequest) SetPageSize(v int) *SearchVideoRequest {
  s.PageSize = &v
  return s
}

func (s *SearchVideoRequest) SetSortBy(v string) *SearchVideoRequest {
  s.SortBy = &v
  return s
}

func (s *SearchVideoRequest) SetStatus(v string) *SearchVideoRequest {
  s.Status = &v
  return s
}

func (s *SearchVideoRequest) SetMediaType(v string) *SearchVideoRequest {
  s.MediaType = &v
  return s
}

func (s *SearchVideoRequest) SetResultTypes(v string) *SearchVideoRequest {
  s.ResultTypes = &v
  return s
}

func (s *SearchVideoRequest) SetPlayRand(v string) *SearchVideoRequest {
  s.PlayRand = &v
  return s
}

func (s *SearchVideoRequest) SetSource(v string) *SearchVideoRequest {
  s.Source = &v
  return s
}

func (s *SearchVideoRequest) SetApiVersion(v string) *SearchVideoRequest {
  s.ApiVersion = &v
  return s
}

func (s *SearchVideoRequest) SetScrollToken(v string) *SearchVideoRequest {
  s.ScrollToken = &v
  return s
}

func (s *SearchVideoRequest) SetPreprocessStatus(v string) *SearchVideoRequest {
  s.PreprocessStatus = &v
  return s
}

func (s *SearchVideoRequest) SetStorageLocation(v string) *SearchVideoRequest {
  s.StorageLocation = &v
  return s
}

func (s *SearchVideoRequest) SetVideoId(v string) *SearchVideoRequest {
  s.VideoId = &v
  return s
}

type SearchVideoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  ScrollToken *string `json:"ScrollToken" xml:"ScrollToken" require:"true"`
  Total *int `json:"Total" xml:"Total" require:"true"`
  VideoList *SearchVideoResponseVideoList `json:"VideoList" xml:"VideoList" require:"true" type:"Struct"`
}

func (s SearchVideoResponse) String() string {
  return tea.Prettify(s)
}

func (s SearchVideoResponse) GoString() string {
  return s.String()
}

func (s *SearchVideoResponse) SetRequestId(v string) *SearchVideoResponse {
  s.RequestId = &v
  return s
}

func (s *SearchVideoResponse) SetScrollToken(v string) *SearchVideoResponse {
  s.ScrollToken = &v
  return s
}

func (s *SearchVideoResponse) SetTotal(v int) *SearchVideoResponse {
  s.Total = &v
  return s
}

func (s *SearchVideoResponse) SetVideoList(v *SearchVideoResponseVideoList) *SearchVideoResponse {
  s.VideoList = v
  return s
}

type SearchVideoResponseVideoList struct {
  Video []*SearchVideoResponseVideoListVideo `json:"Video" xml:"Video" require:"true" type:"Repeated"`
}

func (s SearchVideoResponseVideoList) String() string {
  return tea.Prettify(s)
}

func (s SearchVideoResponseVideoList) GoString() string {
  return s.String()
}

func (s *SearchVideoResponseVideoList) SetVideo(v []*SearchVideoResponseVideoListVideo) *SearchVideoResponseVideoList {
  s.Video = v
  return s
}

type SearchVideoResponseVideoListVideo struct     {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
  MediaType *string `json:"MediaType" xml:"MediaType" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch" require:"true"`
  PreprocessStatus *string `json:"PreprocessStatus" xml:"PreprocessStatus" require:"true"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
  RegionId *string `json:"RegionId" xml:"RegionId" require:"true"`
  PlayInfoList *SearchVideoResponseVideoListVideoPlayInfoList `json:"PlayInfoList" xml:"PlayInfoList" require:"true" type:"Struct"`
  Snapshots *SearchVideoResponseVideoListVideoSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
  SpriteSnapshots *SearchVideoResponseVideoListVideoSpriteSnapshots `json:"SpriteSnapshots" xml:"SpriteSnapshots" require:"true" type:"Struct"`
}

func (s SearchVideoResponseVideoListVideo) String() string {
  return tea.Prettify(s)
}

func (s SearchVideoResponseVideoListVideo) GoString() string {
  return s.String()
}

func (s *SearchVideoResponseVideoListVideo) SetVideoId(v string) *SearchVideoResponseVideoListVideo {
  s.VideoId = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetSource(v string) *SearchVideoResponseVideoListVideo {
  s.Source = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetMediaType(v string) *SearchVideoResponseVideoListVideo {
  s.MediaType = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetTitle(v string) *SearchVideoResponseVideoListVideo {
  s.Title = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetTags(v string) *SearchVideoResponseVideoListVideo {
  s.Tags = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetStatus(v string) *SearchVideoResponseVideoListVideo {
  s.Status = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetSize(v int64) *SearchVideoResponseVideoListVideo {
  s.Size = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetDuration(v float32) *SearchVideoResponseVideoListVideo {
  s.Duration = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetDescription(v string) *SearchVideoResponseVideoListVideo {
  s.Description = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetCustomerId(v int64) *SearchVideoResponseVideoListVideo {
  s.CustomerId = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetCreateTime(v string) *SearchVideoResponseVideoListVideo {
  s.CreateTime = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetModifyTime(v string) *SearchVideoResponseVideoListVideo {
  s.ModifyTime = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetModificationTime(v string) *SearchVideoResponseVideoListVideo {
  s.ModificationTime = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetCreationTime(v string) *SearchVideoResponseVideoListVideo {
  s.CreationTime = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetCoverURL(v string) *SearchVideoResponseVideoListVideo {
  s.CoverURL = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetCateId(v int) *SearchVideoResponseVideoListVideo {
  s.CateId = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetCateName(v string) *SearchVideoResponseVideoListVideo {
  s.CateName = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetDownloadSwitch(v string) *SearchVideoResponseVideoListVideo {
  s.DownloadSwitch = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetPreprocessStatus(v string) *SearchVideoResponseVideoListVideo {
  s.PreprocessStatus = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetStorageLocation(v string) *SearchVideoResponseVideoListVideo {
  s.StorageLocation = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetRegionId(v string) *SearchVideoResponseVideoListVideo {
  s.RegionId = &v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetPlayInfoList(v *SearchVideoResponseVideoListVideoPlayInfoList) *SearchVideoResponseVideoListVideo {
  s.PlayInfoList = v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetSnapshots(v *SearchVideoResponseVideoListVideoSnapshots) *SearchVideoResponseVideoListVideo {
  s.Snapshots = v
  return s
}

func (s *SearchVideoResponseVideoListVideo) SetSpriteSnapshots(v *SearchVideoResponseVideoListVideoSpriteSnapshots) *SearchVideoResponseVideoListVideo {
  s.SpriteSnapshots = v
  return s
}

type SearchVideoResponseVideoListVideoPlayInfoList struct {
  PlayInfo []*SearchVideoResponseVideoListVideoPlayInfoListPlayInfo `json:"PlayInfo" xml:"PlayInfo" require:"true" type:"Repeated"`
}

func (s SearchVideoResponseVideoListVideoPlayInfoList) String() string {
  return tea.Prettify(s)
}

func (s SearchVideoResponseVideoListVideoPlayInfoList) GoString() string {
  return s.String()
}

func (s *SearchVideoResponseVideoListVideoPlayInfoList) SetPlayInfo(v []*SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) *SearchVideoResponseVideoListVideoPlayInfoList {
  s.PlayInfo = v
  return s
}

type SearchVideoResponseVideoListVideoPlayInfoListPlayInfo struct     {
  Width *int64 `json:"Width" xml:"Width" require:"true"`
  Height *int64 `json:"Height" xml:"Height" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  PlayURL *string `json:"PlayURL" xml:"PlayURL" require:"true"`
  Bitrate *string `json:"Bitrate" xml:"Bitrate" require:"true"`
  Definition *string `json:"Definition" xml:"Definition" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  Format *string `json:"Format" xml:"Format" require:"true"`
  Fps *string `json:"Fps" xml:"Fps" require:"true"`
  Encrypt *int64 `json:"Encrypt" xml:"Encrypt" require:"true"`
  Plaintext *string `json:"Plaintext" xml:"Plaintext" require:"true"`
  Complexity *string `json:"Complexity" xml:"Complexity" require:"true"`
  StreamType *string `json:"StreamType" xml:"StreamType" require:"true"`
  Rand *string `json:"Rand" xml:"Rand" require:"true"`
  JobId *string `json:"JobId" xml:"JobId" require:"true"`
}

func (s SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) String() string {
  return tea.Prettify(s)
}

func (s SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) GoString() string {
  return s.String()
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetWidth(v int64) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Width = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetHeight(v int64) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Height = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetSize(v int64) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Size = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetPlayURL(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.PlayURL = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetBitrate(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Bitrate = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetDefinition(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Definition = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetDuration(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Duration = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetFormat(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Format = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetFps(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Fps = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetEncrypt(v int64) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Encrypt = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetPlaintext(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Plaintext = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetComplexity(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Complexity = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetStreamType(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.StreamType = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetRand(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.Rand = &v
  return s
}

func (s *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo) SetJobId(v string) *SearchVideoResponseVideoListVideoPlayInfoListPlayInfo {
  s.JobId = &v
  return s
}

type SearchVideoResponseVideoListVideoSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s SearchVideoResponseVideoListVideoSnapshots) String() string {
  return tea.Prettify(s)
}

func (s SearchVideoResponseVideoListVideoSnapshots) GoString() string {
  return s.String()
}

func (s *SearchVideoResponseVideoListVideoSnapshots) SetSnapshot(v []*string) *SearchVideoResponseVideoListVideoSnapshots {
  s.Snapshot = v
  return s
}

type SearchVideoResponseVideoListVideoSpriteSnapshots struct {
  SpriteSnapshot []*string `json:"SpriteSnapshot" xml:"SpriteSnapshot" require:"true" type:"Repeated"`
}

func (s SearchVideoResponseVideoListVideoSpriteSnapshots) String() string {
  return tea.Prettify(s)
}

func (s SearchVideoResponseVideoListVideoSpriteSnapshots) GoString() string {
  return s.String()
}

func (s *SearchVideoResponseVideoListVideoSpriteSnapshots) SetSpriteSnapshot(v []*string) *SearchVideoResponseVideoListVideoSpriteSnapshots {
  s.SpriteSnapshot = v
  return s
}

type RefreshUploadVideoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s RefreshUploadVideoRequest) String() string {
  return tea.Prettify(s)
}

func (s RefreshUploadVideoRequest) GoString() string {
  return s.String()
}

func (s *RefreshUploadVideoRequest) SetOwnerId(v int64) *RefreshUploadVideoRequest {
  s.OwnerId = &v
  return s
}

func (s *RefreshUploadVideoRequest) SetResourceOwnerAccount(v string) *RefreshUploadVideoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *RefreshUploadVideoRequest) SetResourceOwnerId(v int64) *RefreshUploadVideoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *RefreshUploadVideoRequest) SetResourceRealOwnerId(v int64) *RefreshUploadVideoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *RefreshUploadVideoRequest) SetVideoId(v string) *RefreshUploadVideoRequest {
  s.VideoId = &v
  return s
}

type RefreshUploadVideoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UploadAuth *string `json:"UploadAuth" xml:"UploadAuth" require:"true"`
  UploadAddress *string `json:"UploadAddress" xml:"UploadAddress" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s RefreshUploadVideoResponse) String() string {
  return tea.Prettify(s)
}

func (s RefreshUploadVideoResponse) GoString() string {
  return s.String()
}

func (s *RefreshUploadVideoResponse) SetRequestId(v string) *RefreshUploadVideoResponse {
  s.RequestId = &v
  return s
}

func (s *RefreshUploadVideoResponse) SetUploadAuth(v string) *RefreshUploadVideoResponse {
  s.UploadAuth = &v
  return s
}

func (s *RefreshUploadVideoResponse) SetUploadAddress(v string) *RefreshUploadVideoResponse {
  s.UploadAddress = &v
  return s
}

func (s *RefreshUploadVideoResponse) SetVideoId(v string) *RefreshUploadVideoResponse {
  s.VideoId = &v
  return s
}

type GetVideoListRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CateId *int64 `json:"CateId" xml:"CateId"`
  Status *string `json:"Status" xml:"Status"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
}

func (s GetVideoListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetVideoListRequest) GoString() string {
  return s.String()
}

func (s *GetVideoListRequest) SetOwnerId(v int64) *GetVideoListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetVideoListRequest) SetResourceOwnerAccount(v string) *GetVideoListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetVideoListRequest) SetResourceOwnerId(v int64) *GetVideoListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetVideoListRequest) SetCateId(v int64) *GetVideoListRequest {
  s.CateId = &v
  return s
}

func (s *GetVideoListRequest) SetStatus(v string) *GetVideoListRequest {
  s.Status = &v
  return s
}

func (s *GetVideoListRequest) SetPageNo(v int) *GetVideoListRequest {
  s.PageNo = &v
  return s
}

func (s *GetVideoListRequest) SetPageSize(v int) *GetVideoListRequest {
  s.PageSize = &v
  return s
}

func (s *GetVideoListRequest) SetSortBy(v string) *GetVideoListRequest {
  s.SortBy = &v
  return s
}

func (s *GetVideoListRequest) SetStartTime(v string) *GetVideoListRequest {
  s.StartTime = &v
  return s
}

func (s *GetVideoListRequest) SetEndTime(v string) *GetVideoListRequest {
  s.EndTime = &v
  return s
}

type GetVideoListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Total *int `json:"Total" xml:"Total" require:"true"`
  VideoList *GetVideoListResponseVideoList `json:"VideoList" xml:"VideoList" require:"true" type:"Struct"`
}

func (s GetVideoListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetVideoListResponse) GoString() string {
  return s.String()
}

func (s *GetVideoListResponse) SetRequestId(v string) *GetVideoListResponse {
  s.RequestId = &v
  return s
}

func (s *GetVideoListResponse) SetTotal(v int) *GetVideoListResponse {
  s.Total = &v
  return s
}

func (s *GetVideoListResponse) SetVideoList(v *GetVideoListResponseVideoList) *GetVideoListResponse {
  s.VideoList = v
  return s
}

type GetVideoListResponseVideoList struct {
  Video []*GetVideoListResponseVideoListVideo `json:"Video" xml:"Video" require:"true" type:"Repeated"`
}

func (s GetVideoListResponseVideoList) String() string {
  return tea.Prettify(s)
}

func (s GetVideoListResponseVideoList) GoString() string {
  return s.String()
}

func (s *GetVideoListResponseVideoList) SetVideo(v []*GetVideoListResponseVideoListVideo) *GetVideoListResponseVideoList {
  s.Video = v
  return s
}

type GetVideoListResponseVideoListVideo struct     {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  Snapshots *GetVideoListResponseVideoListVideoSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
}

func (s GetVideoListResponseVideoListVideo) String() string {
  return tea.Prettify(s)
}

func (s GetVideoListResponseVideoListVideo) GoString() string {
  return s.String()
}

func (s *GetVideoListResponseVideoListVideo) SetVideoId(v string) *GetVideoListResponseVideoListVideo {
  s.VideoId = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetTitle(v string) *GetVideoListResponseVideoListVideo {
  s.Title = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetTags(v string) *GetVideoListResponseVideoListVideo {
  s.Tags = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetStatus(v string) *GetVideoListResponseVideoListVideo {
  s.Status = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetSize(v int64) *GetVideoListResponseVideoListVideo {
  s.Size = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetDuration(v float32) *GetVideoListResponseVideoListVideo {
  s.Duration = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetDescription(v string) *GetVideoListResponseVideoListVideo {
  s.Description = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetCreateTime(v string) *GetVideoListResponseVideoListVideo {
  s.CreateTime = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetModifyTime(v string) *GetVideoListResponseVideoListVideo {
  s.ModifyTime = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetModificationTime(v string) *GetVideoListResponseVideoListVideo {
  s.ModificationTime = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetCreationTime(v string) *GetVideoListResponseVideoListVideo {
  s.CreationTime = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetCoverURL(v string) *GetVideoListResponseVideoListVideo {
  s.CoverURL = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetCateId(v int64) *GetVideoListResponseVideoListVideo {
  s.CateId = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetCateName(v string) *GetVideoListResponseVideoListVideo {
  s.CateName = &v
  return s
}

func (s *GetVideoListResponseVideoListVideo) SetSnapshots(v *GetVideoListResponseVideoListVideoSnapshots) *GetVideoListResponseVideoListVideo {
  s.Snapshots = v
  return s
}

type GetVideoListResponseVideoListVideoSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s GetVideoListResponseVideoListVideoSnapshots) String() string {
  return tea.Prettify(s)
}

func (s GetVideoListResponseVideoListVideoSnapshots) GoString() string {
  return s.String()
}

func (s *GetVideoListResponseVideoListVideoSnapshots) SetSnapshot(v []*string) *GetVideoListResponseVideoListVideoSnapshots {
  s.Snapshot = v
  return s
}

type GetVideoInfoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  ResultTypes *string `json:"ResultTypes" xml:"ResultTypes"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s GetVideoInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfoRequest) GoString() string {
  return s.String()
}

func (s *GetVideoInfoRequest) SetOwnerId(v int64) *GetVideoInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetVideoInfoRequest) SetResourceOwnerAccount(v string) *GetVideoInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetVideoInfoRequest) SetResourceOwnerId(v int64) *GetVideoInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetVideoInfoRequest) SetVideoId(v string) *GetVideoInfoRequest {
  s.VideoId = &v
  return s
}

func (s *GetVideoInfoRequest) SetResultTypes(v string) *GetVideoInfoRequest {
  s.ResultTypes = &v
  return s
}

func (s *GetVideoInfoRequest) SetResourceRealOwnerId(v int64) *GetVideoInfoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type GetVideoInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  AI *string `json:"AI" xml:"AI" require:"true"`
  Video *GetVideoInfoResponseVideo `json:"Video" xml:"Video" require:"true" type:"Struct"`
}

func (s GetVideoInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfoResponse) GoString() string {
  return s.String()
}

func (s *GetVideoInfoResponse) SetRequestId(v string) *GetVideoInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetVideoInfoResponse) SetAI(v string) *GetVideoInfoResponse {
  s.AI = &v
  return s
}

func (s *GetVideoInfoResponse) SetVideo(v *GetVideoInfoResponseVideo) *GetVideoInfoResponse {
  s.Video = v
  return s
}

type GetVideoInfoResponseVideo struct {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  ModificationTime *string `json:"ModificationTime" xml:"ModificationTime" require:"true"`
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  DownloadSwitch *string `json:"DownloadSwitch" xml:"DownloadSwitch" require:"true"`
  TemplateGroupId *string `json:"TemplateGroupId" xml:"TemplateGroupId" require:"true"`
  PreprocessStatus *string `json:"PreprocessStatus" xml:"PreprocessStatus" require:"true"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation" require:"true"`
  RegionId *string `json:"RegionId" xml:"RegionId" require:"true"`
  CustomMediaInfo *string `json:"CustomMediaInfo" xml:"CustomMediaInfo" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  ThumbnailList *GetVideoInfoResponseVideoThumbnailList `json:"ThumbnailList" xml:"ThumbnailList" require:"true" type:"Struct"`
  Snapshots *GetVideoInfoResponseVideoSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
}

func (s GetVideoInfoResponseVideo) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfoResponseVideo) GoString() string {
  return s.String()
}

func (s *GetVideoInfoResponseVideo) SetVideoId(v string) *GetVideoInfoResponseVideo {
  s.VideoId = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetTitle(v string) *GetVideoInfoResponseVideo {
  s.Title = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetTags(v string) *GetVideoInfoResponseVideo {
  s.Tags = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetStatus(v string) *GetVideoInfoResponseVideo {
  s.Status = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetSize(v int64) *GetVideoInfoResponseVideo {
  s.Size = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetDuration(v float32) *GetVideoInfoResponseVideo {
  s.Duration = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetDescription(v string) *GetVideoInfoResponseVideo {
  s.Description = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetCreateTime(v string) *GetVideoInfoResponseVideo {
  s.CreateTime = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetModifyTime(v string) *GetVideoInfoResponseVideo {
  s.ModifyTime = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetModificationTime(v string) *GetVideoInfoResponseVideo {
  s.ModificationTime = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetCreationTime(v string) *GetVideoInfoResponseVideo {
  s.CreationTime = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetCoverURL(v string) *GetVideoInfoResponseVideo {
  s.CoverURL = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetCateId(v int64) *GetVideoInfoResponseVideo {
  s.CateId = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetCateName(v string) *GetVideoInfoResponseVideo {
  s.CateName = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetDownloadSwitch(v string) *GetVideoInfoResponseVideo {
  s.DownloadSwitch = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetTemplateGroupId(v string) *GetVideoInfoResponseVideo {
  s.TemplateGroupId = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetPreprocessStatus(v string) *GetVideoInfoResponseVideo {
  s.PreprocessStatus = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetStorageLocation(v string) *GetVideoInfoResponseVideo {
  s.StorageLocation = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetRegionId(v string) *GetVideoInfoResponseVideo {
  s.RegionId = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetCustomMediaInfo(v string) *GetVideoInfoResponseVideo {
  s.CustomMediaInfo = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetCustomerId(v int64) *GetVideoInfoResponseVideo {
  s.CustomerId = &v
  return s
}

func (s *GetVideoInfoResponseVideo) SetThumbnailList(v *GetVideoInfoResponseVideoThumbnailList) *GetVideoInfoResponseVideo {
  s.ThumbnailList = v
  return s
}

func (s *GetVideoInfoResponseVideo) SetSnapshots(v *GetVideoInfoResponseVideoSnapshots) *GetVideoInfoResponseVideo {
  s.Snapshots = v
  return s
}

type GetVideoInfoResponseVideoThumbnailList struct {
  Thumbnail []*GetVideoInfoResponseVideoThumbnailListThumbnail `json:"Thumbnail" xml:"Thumbnail" require:"true" type:"Repeated"`
}

func (s GetVideoInfoResponseVideoThumbnailList) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfoResponseVideoThumbnailList) GoString() string {
  return s.String()
}

func (s *GetVideoInfoResponseVideoThumbnailList) SetThumbnail(v []*GetVideoInfoResponseVideoThumbnailListThumbnail) *GetVideoInfoResponseVideoThumbnailList {
  s.Thumbnail = v
  return s
}

type GetVideoInfoResponseVideoThumbnailListThumbnail struct     {
  URL *string `json:"URL" xml:"URL" require:"true"`
}

func (s GetVideoInfoResponseVideoThumbnailListThumbnail) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfoResponseVideoThumbnailListThumbnail) GoString() string {
  return s.String()
}

func (s *GetVideoInfoResponseVideoThumbnailListThumbnail) SetURL(v string) *GetVideoInfoResponseVideoThumbnailListThumbnail {
  s.URL = &v
  return s
}

type GetVideoInfoResponseVideoSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s GetVideoInfoResponseVideoSnapshots) String() string {
  return tea.Prettify(s)
}

func (s GetVideoInfoResponseVideoSnapshots) GoString() string {
  return s.String()
}

func (s *GetVideoInfoResponseVideoSnapshots) SetSnapshot(v []*string) *GetVideoInfoResponseVideoSnapshots {
  s.Snapshot = v
  return s
}

type GetCategoryTreeRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s GetCategoryTreeRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCategoryTreeRequest) GoString() string {
  return s.String()
}

func (s *GetCategoryTreeRequest) SetAccessKeyId(v string) *GetCategoryTreeRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetCategoryTreeRequest) SetOwnerId(v string) *GetCategoryTreeRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCategoryTreeRequest) SetResourceOwnerId(v string) *GetCategoryTreeRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetCategoryTreeRequest) SetResourceOwnerAccount(v string) *GetCategoryTreeRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCategoryTreeRequest) SetOwnerAccount(v string) *GetCategoryTreeRequest {
  s.OwnerAccount = &v
  return s
}

type GetCategoryTreeResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  CategoryTree *string `json:"CategoryTree" xml:"CategoryTree" require:"true"`
}

func (s GetCategoryTreeResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCategoryTreeResponse) GoString() string {
  return s.String()
}

func (s *GetCategoryTreeResponse) SetRequestId(v string) *GetCategoryTreeResponse {
  s.RequestId = &v
  return s
}

func (s *GetCategoryTreeResponse) SetCategoryTree(v string) *GetCategoryTreeResponse {
  s.CategoryTree = &v
  return s
}

type GetCategoryListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s GetCategoryListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCategoryListRequest) GoString() string {
  return s.String()
}

func (s *GetCategoryListRequest) SetAccessKeyId(v string) *GetCategoryListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetCategoryListRequest) SetOwnerId(v string) *GetCategoryListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCategoryListRequest) SetResourceOwnerId(v string) *GetCategoryListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetCategoryListRequest) SetResourceOwnerAccount(v string) *GetCategoryListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCategoryListRequest) SetOwnerAccount(v string) *GetCategoryListRequest {
  s.OwnerAccount = &v
  return s
}

type GetCategoryListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  CategoryList *GetCategoryListResponseCategoryList `json:"CategoryList" xml:"CategoryList" require:"true" type:"Struct"`
}

func (s GetCategoryListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCategoryListResponse) GoString() string {
  return s.String()
}

func (s *GetCategoryListResponse) SetRequestId(v string) *GetCategoryListResponse {
  s.RequestId = &v
  return s
}

func (s *GetCategoryListResponse) SetCategoryList(v *GetCategoryListResponseCategoryList) *GetCategoryListResponse {
  s.CategoryList = v
  return s
}

type GetCategoryListResponseCategoryList struct {
  Category []*GetCategoryListResponseCategoryListCategory `json:"Category" xml:"Category" require:"true" type:"Repeated"`
}

func (s GetCategoryListResponseCategoryList) String() string {
  return tea.Prettify(s)
}

func (s GetCategoryListResponseCategoryList) GoString() string {
  return s.String()
}

func (s *GetCategoryListResponseCategoryList) SetCategory(v []*GetCategoryListResponseCategoryListCategory) *GetCategoryListResponseCategoryList {
  s.Category = v
  return s
}

type GetCategoryListResponseCategoryListCategory struct     {
  CateId *string `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  ParentId *string `json:"ParentId" xml:"ParentId" require:"true"`
  Level *string `json:"Level" xml:"Level" require:"true"`
}

func (s GetCategoryListResponseCategoryListCategory) String() string {
  return tea.Prettify(s)
}

func (s GetCategoryListResponseCategoryListCategory) GoString() string {
  return s.String()
}

func (s *GetCategoryListResponseCategoryListCategory) SetCateId(v string) *GetCategoryListResponseCategoryListCategory {
  s.CateId = &v
  return s
}

func (s *GetCategoryListResponseCategoryListCategory) SetCateName(v string) *GetCategoryListResponseCategoryListCategory {
  s.CateName = &v
  return s
}

func (s *GetCategoryListResponseCategoryListCategory) SetParentId(v string) *GetCategoryListResponseCategoryListCategory {
  s.ParentId = &v
  return s
}

func (s *GetCategoryListResponseCategoryListCategory) SetLevel(v string) *GetCategoryListResponseCategoryListCategory {
  s.Level = &v
  return s
}

type DeleteVideoTagRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Tag *string `json:"Tag" xml:"Tag" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
}

func (s DeleteVideoTagRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteVideoTagRequest) GoString() string {
  return s.String()
}

func (s *DeleteVideoTagRequest) SetAccessKeyId(v string) *DeleteVideoTagRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteVideoTagRequest) SetOwnerId(v string) *DeleteVideoTagRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteVideoTagRequest) SetResourceOwnerId(v string) *DeleteVideoTagRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteVideoTagRequest) SetResourceOwnerAccount(v string) *DeleteVideoTagRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteVideoTagRequest) SetOwnerAccount(v string) *DeleteVideoTagRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteVideoTagRequest) SetTag(v string) *DeleteVideoTagRequest {
  s.Tag = &v
  return s
}

func (s *DeleteVideoTagRequest) SetMediaId(v string) *DeleteVideoTagRequest {
  s.MediaId = &v
  return s
}

type DeleteVideoTagResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaInfoDTO *DeleteVideoTagResponseMediaInfoDTO `json:"MediaInfoDTO" xml:"MediaInfoDTO" require:"true" type:"Struct"`
}

func (s DeleteVideoTagResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteVideoTagResponse) GoString() string {
  return s.String()
}

func (s *DeleteVideoTagResponse) SetRequestId(v string) *DeleteVideoTagResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteVideoTagResponse) SetMediaInfoDTO(v *DeleteVideoTagResponseMediaInfoDTO) *DeleteVideoTagResponse {
  s.MediaInfoDTO = v
  return s
}

type DeleteVideoTagResponseMediaInfoDTO struct {
  UserId *int64 `json:"UserId" xml:"UserId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
}

func (s DeleteVideoTagResponseMediaInfoDTO) String() string {
  return tea.Prettify(s)
}

func (s DeleteVideoTagResponseMediaInfoDTO) GoString() string {
  return s.String()
}

func (s *DeleteVideoTagResponseMediaInfoDTO) SetUserId(v int64) *DeleteVideoTagResponseMediaInfoDTO {
  s.UserId = &v
  return s
}

func (s *DeleteVideoTagResponseMediaInfoDTO) SetMediaId(v string) *DeleteVideoTagResponseMediaInfoDTO {
  s.MediaId = &v
  return s
}

func (s *DeleteVideoTagResponseMediaInfoDTO) SetTitle(v string) *DeleteVideoTagResponseMediaInfoDTO {
  s.Title = &v
  return s
}

func (s *DeleteVideoTagResponseMediaInfoDTO) SetTags(v string) *DeleteVideoTagResponseMediaInfoDTO {
  s.Tags = &v
  return s
}

type DeleteVideoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  VideoIds *string `json:"VideoIds" xml:"VideoIds" require:"true"`
}

func (s DeleteVideoRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteVideoRequest) GoString() string {
  return s.String()
}

func (s *DeleteVideoRequest) SetOwnerId(v int64) *DeleteVideoRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteVideoRequest) SetResourceOwnerAccount(v string) *DeleteVideoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteVideoRequest) SetResourceOwnerId(v int64) *DeleteVideoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteVideoRequest) SetResourceRealOwnerId(v int64) *DeleteVideoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *DeleteVideoRequest) SetVideoIds(v string) *DeleteVideoRequest {
  s.VideoIds = &v
  return s
}

type DeleteVideoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteVideoResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteVideoResponse) GoString() string {
  return s.String()
}

func (s *DeleteVideoResponse) SetRequestId(v string) *DeleteVideoResponse {
  s.RequestId = &v
  return s
}

type CreateUploadVideoRequest struct {
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL"`
  Description *string `json:"Description" xml:"Description"`
  FileName *string `json:"FileName" xml:"FileName" require:"true"`
  FileSize *int64 `json:"FileSize" xml:"FileSize"`
  IP *string `json:"IP" xml:"IP"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  CateId *int64 `json:"CateId" xml:"CateId"`
  Tags *string `json:"Tags" xml:"Tags"`
  UserData *string `json:"UserData" xml:"UserData"`
  TemplateGroupId *string `json:"TemplateGroupId" xml:"TemplateGroupId"`
  WorkflowId *string `json:"WorkflowId" xml:"WorkflowId"`
  StorageLocation *string `json:"StorageLocation" xml:"StorageLocation"`
  AppId *string `json:"AppId" xml:"AppId"`
}

func (s CreateUploadVideoRequest) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadVideoRequest) GoString() string {
  return s.String()
}

func (s *CreateUploadVideoRequest) SetOwnerId(v int64) *CreateUploadVideoRequest {
  s.OwnerId = &v
  return s
}

func (s *CreateUploadVideoRequest) SetResourceOwnerAccount(v string) *CreateUploadVideoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *CreateUploadVideoRequest) SetResourceOwnerId(v int64) *CreateUploadVideoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *CreateUploadVideoRequest) SetResourceRealOwnerId(v int64) *CreateUploadVideoRequest {
  s.ResourceRealOwnerId = &v
  return s
}

func (s *CreateUploadVideoRequest) SetCoverURL(v string) *CreateUploadVideoRequest {
  s.CoverURL = &v
  return s
}

func (s *CreateUploadVideoRequest) SetDescription(v string) *CreateUploadVideoRequest {
  s.Description = &v
  return s
}

func (s *CreateUploadVideoRequest) SetFileName(v string) *CreateUploadVideoRequest {
  s.FileName = &v
  return s
}

func (s *CreateUploadVideoRequest) SetFileSize(v int64) *CreateUploadVideoRequest {
  s.FileSize = &v
  return s
}

func (s *CreateUploadVideoRequest) SetIP(v string) *CreateUploadVideoRequest {
  s.IP = &v
  return s
}

func (s *CreateUploadVideoRequest) SetTitle(v string) *CreateUploadVideoRequest {
  s.Title = &v
  return s
}

func (s *CreateUploadVideoRequest) SetCateId(v int64) *CreateUploadVideoRequest {
  s.CateId = &v
  return s
}

func (s *CreateUploadVideoRequest) SetTags(v string) *CreateUploadVideoRequest {
  s.Tags = &v
  return s
}

func (s *CreateUploadVideoRequest) SetUserData(v string) *CreateUploadVideoRequest {
  s.UserData = &v
  return s
}

func (s *CreateUploadVideoRequest) SetTemplateGroupId(v string) *CreateUploadVideoRequest {
  s.TemplateGroupId = &v
  return s
}

func (s *CreateUploadVideoRequest) SetWorkflowId(v string) *CreateUploadVideoRequest {
  s.WorkflowId = &v
  return s
}

func (s *CreateUploadVideoRequest) SetStorageLocation(v string) *CreateUploadVideoRequest {
  s.StorageLocation = &v
  return s
}

func (s *CreateUploadVideoRequest) SetAppId(v string) *CreateUploadVideoRequest {
  s.AppId = &v
  return s
}

type CreateUploadVideoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  UploadAddress *string `json:"UploadAddress" xml:"UploadAddress" require:"true"`
  UploadAuth *string `json:"UploadAuth" xml:"UploadAuth" require:"true"`
}

func (s CreateUploadVideoResponse) String() string {
  return tea.Prettify(s)
}

func (s CreateUploadVideoResponse) GoString() string {
  return s.String()
}

func (s *CreateUploadVideoResponse) SetRequestId(v string) *CreateUploadVideoResponse {
  s.RequestId = &v
  return s
}

func (s *CreateUploadVideoResponse) SetVideoId(v string) *CreateUploadVideoResponse {
  s.VideoId = &v
  return s
}

func (s *CreateUploadVideoResponse) SetUploadAddress(v string) *CreateUploadVideoResponse {
  s.UploadAddress = &v
  return s
}

func (s *CreateUploadVideoResponse) SetUploadAuth(v string) *CreateUploadVideoResponse {
  s.UploadAuth = &v
  return s
}

type CheckVideoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoIds *string `json:"VideoIds" xml:"VideoIds" require:"true"`
  CheckStatus *string `json:"CheckStatus" xml:"CheckStatus" require:"true"`
  CheckReason *string `json:"CheckReason" xml:"CheckReason"`
}

func (s CheckVideoRequest) String() string {
  return tea.Prettify(s)
}

func (s CheckVideoRequest) GoString() string {
  return s.String()
}

func (s *CheckVideoRequest) SetAccessKeyId(v string) *CheckVideoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *CheckVideoRequest) SetOwnerId(v int64) *CheckVideoRequest {
  s.OwnerId = &v
  return s
}

func (s *CheckVideoRequest) SetResourceOwnerAccount(v string) *CheckVideoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *CheckVideoRequest) SetResourceOwnerId(v int64) *CheckVideoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *CheckVideoRequest) SetVideoIds(v string) *CheckVideoRequest {
  s.VideoIds = &v
  return s
}

func (s *CheckVideoRequest) SetCheckStatus(v string) *CheckVideoRequest {
  s.CheckStatus = &v
  return s
}

func (s *CheckVideoRequest) SetCheckReason(v string) *CheckVideoRequest {
  s.CheckReason = &v
  return s
}

type CheckVideoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  FailedList *CheckVideoResponseFailedList `json:"FailedList" xml:"FailedList" require:"true" type:"Struct"`
}

func (s CheckVideoResponse) String() string {
  return tea.Prettify(s)
}

func (s CheckVideoResponse) GoString() string {
  return s.String()
}

func (s *CheckVideoResponse) SetRequestId(v string) *CheckVideoResponse {
  s.RequestId = &v
  return s
}

func (s *CheckVideoResponse) SetFailedList(v *CheckVideoResponseFailedList) *CheckVideoResponse {
  s.FailedList = v
  return s
}

type CheckVideoResponseFailedList struct {
  String []*string `json:"String" xml:"String" require:"true" type:"Repeated"`
}

func (s CheckVideoResponseFailedList) String() string {
  return tea.Prettify(s)
}

func (s CheckVideoResponseFailedList) GoString() string {
  return s.String()
}

func (s *CheckVideoResponseFailedList) SetString(v []*string) *CheckVideoResponseFailedList {
  s.String = v
  return s
}

type AddVideoTagRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Tag *string `json:"Tag" xml:"Tag" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
}

func (s AddVideoTagRequest) String() string {
  return tea.Prettify(s)
}

func (s AddVideoTagRequest) GoString() string {
  return s.String()
}

func (s *AddVideoTagRequest) SetAccessKeyId(v string) *AddVideoTagRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddVideoTagRequest) SetOwnerId(v string) *AddVideoTagRequest {
  s.OwnerId = &v
  return s
}

func (s *AddVideoTagRequest) SetResourceOwnerId(v string) *AddVideoTagRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddVideoTagRequest) SetResourceOwnerAccount(v string) *AddVideoTagRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddVideoTagRequest) SetOwnerAccount(v string) *AddVideoTagRequest {
  s.OwnerAccount = &v
  return s
}

func (s *AddVideoTagRequest) SetTag(v string) *AddVideoTagRequest {
  s.Tag = &v
  return s
}

func (s *AddVideoTagRequest) SetMediaId(v string) *AddVideoTagRequest {
  s.MediaId = &v
  return s
}

type AddVideoTagResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaInfoDTO *AddVideoTagResponseMediaInfoDTO `json:"MediaInfoDTO" xml:"MediaInfoDTO" require:"true" type:"Struct"`
}

func (s AddVideoTagResponse) String() string {
  return tea.Prettify(s)
}

func (s AddVideoTagResponse) GoString() string {
  return s.String()
}

func (s *AddVideoTagResponse) SetRequestId(v string) *AddVideoTagResponse {
  s.RequestId = &v
  return s
}

func (s *AddVideoTagResponse) SetMediaInfoDTO(v *AddVideoTagResponseMediaInfoDTO) *AddVideoTagResponse {
  s.MediaInfoDTO = v
  return s
}

type AddVideoTagResponseMediaInfoDTO struct {
  UserId *int64 `json:"UserId" xml:"UserId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
}

func (s AddVideoTagResponseMediaInfoDTO) String() string {
  return tea.Prettify(s)
}

func (s AddVideoTagResponseMediaInfoDTO) GoString() string {
  return s.String()
}

func (s *AddVideoTagResponseMediaInfoDTO) SetUserId(v int64) *AddVideoTagResponseMediaInfoDTO {
  s.UserId = &v
  return s
}

func (s *AddVideoTagResponseMediaInfoDTO) SetMediaId(v string) *AddVideoTagResponseMediaInfoDTO {
  s.MediaId = &v
  return s
}

func (s *AddVideoTagResponseMediaInfoDTO) SetTitle(v string) *AddVideoTagResponseMediaInfoDTO {
  s.Title = &v
  return s
}

func (s *AddVideoTagResponseMediaInfoDTO) SetTags(v string) *AddVideoTagResponseMediaInfoDTO {
  s.Tags = &v
  return s
}

type AddApiAuthRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  State *int `json:"State" xml:"State"`
  PlayKey *string `json:"PlayKey" xml:"PlayKey" require:"true"`
  ExpireTime *string `json:"ExpireTime" xml:"ExpireTime"`
  SignVersion *string `json:"SignVersion" xml:"SignVersion" require:"true"`
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  ClientVersion *string `json:"ClientVersion" xml:"ClientVersion" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
}

func (s AddApiAuthRequest) String() string {
  return tea.Prettify(s)
}

func (s AddApiAuthRequest) GoString() string {
  return s.String()
}

func (s *AddApiAuthRequest) SetAccessKeyId(v string) *AddApiAuthRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddApiAuthRequest) SetOwnerId(v string) *AddApiAuthRequest {
  s.OwnerId = &v
  return s
}

func (s *AddApiAuthRequest) SetState(v int) *AddApiAuthRequest {
  s.State = &v
  return s
}

func (s *AddApiAuthRequest) SetPlayKey(v string) *AddApiAuthRequest {
  s.PlayKey = &v
  return s
}

func (s *AddApiAuthRequest) SetExpireTime(v string) *AddApiAuthRequest {
  s.ExpireTime = &v
  return s
}

func (s *AddApiAuthRequest) SetSignVersion(v string) *AddApiAuthRequest {
  s.SignVersion = &v
  return s
}

func (s *AddApiAuthRequest) SetChannel(v string) *AddApiAuthRequest {
  s.Channel = &v
  return s
}

func (s *AddApiAuthRequest) SetDescription(v string) *AddApiAuthRequest {
  s.Description = &v
  return s
}

func (s *AddApiAuthRequest) SetClientVersion(v string) *AddApiAuthRequest {
  s.ClientVersion = &v
  return s
}

func (s *AddApiAuthRequest) SetSource(v string) *AddApiAuthRequest {
  s.Source = &v
  return s
}

type AddApiAuthResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddApiAuthResponse) String() string {
  return tea.Prettify(s)
}

func (s AddApiAuthResponse) GoString() string {
  return s.String()
}

func (s *AddApiAuthResponse) SetRequestId(v string) *AddApiAuthResponse {
  s.RequestId = &v
  return s
}

type GetPlayChannelKeyRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  SignVersion *string `json:"SignVersion" xml:"SignVersion" require:"true"`
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s GetPlayChannelKeyRequest) String() string {
  return tea.Prettify(s)
}

func (s GetPlayChannelKeyRequest) GoString() string {
  return s.String()
}

func (s *GetPlayChannelKeyRequest) SetAccessKeyId(v string) *GetPlayChannelKeyRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetPlayChannelKeyRequest) SetOwnerId(v string) *GetPlayChannelKeyRequest {
  s.OwnerId = &v
  return s
}

func (s *GetPlayChannelKeyRequest) SetSignVersion(v string) *GetPlayChannelKeyRequest {
  s.SignVersion = &v
  return s
}

func (s *GetPlayChannelKeyRequest) SetChannel(v string) *GetPlayChannelKeyRequest {
  s.Channel = &v
  return s
}

func (s *GetPlayChannelKeyRequest) SetResourceRealOwnerId(v int64) *GetPlayChannelKeyRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type GetPlayChannelKeyResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PlayKey *string `json:"PlayKey" xml:"PlayKey" require:"true"`
}

func (s GetPlayChannelKeyResponse) String() string {
  return tea.Prettify(s)
}

func (s GetPlayChannelKeyResponse) GoString() string {
  return s.String()
}

func (s *GetPlayChannelKeyResponse) SetRequestId(v string) *GetPlayChannelKeyResponse {
  s.RequestId = &v
  return s
}

func (s *GetPlayChannelKeyResponse) SetPlayKey(v string) *GetPlayChannelKeyResponse {
  s.PlayKey = &v
  return s
}

type GetDomainListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s GetDomainListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetDomainListRequest) GoString() string {
  return s.String()
}

func (s *GetDomainListRequest) SetAccessKeyId(v string) *GetDomainListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetDomainListRequest) SetOwnerId(v string) *GetDomainListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetDomainListRequest) SetResourceOwnerId(v string) *GetDomainListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetDomainListRequest) SetResourceOwnerAccount(v string) *GetDomainListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetDomainListRequest) SetOwnerAccount(v string) *GetDomainListRequest {
  s.OwnerAccount = &v
  return s
}

type GetDomainListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  DomainDTOList *GetDomainListResponseDomainDTOList `json:"DomainDTOList" xml:"DomainDTOList" require:"true" type:"Struct"`
}

func (s GetDomainListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetDomainListResponse) GoString() string {
  return s.String()
}

func (s *GetDomainListResponse) SetRequestId(v string) *GetDomainListResponse {
  s.RequestId = &v
  return s
}

func (s *GetDomainListResponse) SetDomainDTOList(v *GetDomainListResponseDomainDTOList) *GetDomainListResponse {
  s.DomainDTOList = v
  return s
}

type GetDomainListResponseDomainDTOList struct {
  DomainDTO []*GetDomainListResponseDomainDTOListDomainDTO `json:"DomainDTO" xml:"DomainDTO" require:"true" type:"Repeated"`
}

func (s GetDomainListResponseDomainDTOList) String() string {
  return tea.Prettify(s)
}

func (s GetDomainListResponseDomainDTOList) GoString() string {
  return s.String()
}

func (s *GetDomainListResponseDomainDTOList) SetDomainDTO(v []*GetDomainListResponseDomainDTOListDomainDTO) *GetDomainListResponseDomainDTOList {
  s.DomainDTO = v
  return s
}

type GetDomainListResponseDomainDTOListDomainDTO struct     {
  UserId *int64 `json:"UserId" xml:"UserId" require:"true"`
  DomainName *string `json:"DomainName" xml:"DomainName" require:"true"`
  DomainType *string `json:"DomainType" xml:"DomainType" require:"true"`
  DomainCname *string `json:"DomainCname" xml:"DomainCname" require:"true"`
  DomainStatus *string `json:"DomainStatus" xml:"DomainStatus" require:"true"`
  BucketName *string `json:"BucketName" xml:"BucketName" require:"true"`
  BucketEndpoint *string `json:"BucketEndpoint" xml:"BucketEndpoint" require:"true"`
  DefaultPlay *bool `json:"DefaultPlay" xml:"DefaultPlay" require:"true"`
  SourceLocation *string `json:"SourceLocation" xml:"SourceLocation" require:"true"`
}

func (s GetDomainListResponseDomainDTOListDomainDTO) String() string {
  return tea.Prettify(s)
}

func (s GetDomainListResponseDomainDTOListDomainDTO) GoString() string {
  return s.String()
}

func (s *GetDomainListResponseDomainDTOListDomainDTO) SetUserId(v int64) *GetDomainListResponseDomainDTOListDomainDTO {
  s.UserId = &v
  return s
}

func (s *GetDomainListResponseDomainDTOListDomainDTO) SetDomainName(v string) *GetDomainListResponseDomainDTOListDomainDTO {
  s.DomainName = &v
  return s
}

func (s *GetDomainListResponseDomainDTOListDomainDTO) SetDomainType(v string) *GetDomainListResponseDomainDTOListDomainDTO {
  s.DomainType = &v
  return s
}

func (s *GetDomainListResponseDomainDTOListDomainDTO) SetDomainCname(v string) *GetDomainListResponseDomainDTOListDomainDTO {
  s.DomainCname = &v
  return s
}

func (s *GetDomainListResponseDomainDTOListDomainDTO) SetDomainStatus(v string) *GetDomainListResponseDomainDTOListDomainDTO {
  s.DomainStatus = &v
  return s
}

func (s *GetDomainListResponseDomainDTOListDomainDTO) SetBucketName(v string) *GetDomainListResponseDomainDTOListDomainDTO {
  s.BucketName = &v
  return s
}

func (s *GetDomainListResponseDomainDTOListDomainDTO) SetBucketEndpoint(v string) *GetDomainListResponseDomainDTOListDomainDTO {
  s.BucketEndpoint = &v
  return s
}

func (s *GetDomainListResponseDomainDTOListDomainDTO) SetDefaultPlay(v bool) *GetDomainListResponseDomainDTOListDomainDTO {
  s.DefaultPlay = &v
  return s
}

func (s *GetDomainListResponseDomainDTOListDomainDTO) SetSourceLocation(v string) *GetDomainListResponseDomainDTOListDomainDTO {
  s.SourceLocation = &v
  return s
}

type GetServiceStatusRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s GetServiceStatusRequest) String() string {
  return tea.Prettify(s)
}

func (s GetServiceStatusRequest) GoString() string {
  return s.String()
}

func (s *GetServiceStatusRequest) SetAccessKeyId(v string) *GetServiceStatusRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetServiceStatusRequest) SetOwnerId(v string) *GetServiceStatusRequest {
  s.OwnerId = &v
  return s
}

func (s *GetServiceStatusRequest) SetResourceOwnerId(v string) *GetServiceStatusRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetServiceStatusRequest) SetResourceOwnerAccount(v string) *GetServiceStatusRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetServiceStatusRequest) SetOwnerAccount(v string) *GetServiceStatusRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetServiceStatusRequest) SetResourceRealOwnerId(v int64) *GetServiceStatusRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type GetServiceStatusResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Status *int `json:"status" xml:"status" require:"true"`
  ServiceState *int `json:"serviceState" xml:"serviceState" require:"true"`
  InstanceId *string `json:"InstanceId" xml:"InstanceId" require:"true"`
  ChargeType *int `json:"ChargeType" xml:"ChargeType" require:"true"`
  ChangingChargeType *string `json:"ChangingChargeType" xml:"ChangingChargeType" require:"true"`
  ChangingAfterTime *string `json:"ChangingAfterTime" xml:"ChangingAfterTime" require:"true"`
}

func (s GetServiceStatusResponse) String() string {
  return tea.Prettify(s)
}

func (s GetServiceStatusResponse) GoString() string {
  return s.String()
}

func (s *GetServiceStatusResponse) SetRequestId(v string) *GetServiceStatusResponse {
  s.RequestId = &v
  return s
}

func (s *GetServiceStatusResponse) SetStatus(v int) *GetServiceStatusResponse {
  s.Status = &v
  return s
}

func (s *GetServiceStatusResponse) SetServiceState(v int) *GetServiceStatusResponse {
  s.ServiceState = &v
  return s
}

func (s *GetServiceStatusResponse) SetInstanceId(v string) *GetServiceStatusResponse {
  s.InstanceId = &v
  return s
}

func (s *GetServiceStatusResponse) SetChargeType(v int) *GetServiceStatusResponse {
  s.ChargeType = &v
  return s
}

func (s *GetServiceStatusResponse) SetChangingChargeType(v string) *GetServiceStatusResponse {
  s.ChangingChargeType = &v
  return s
}

func (s *GetServiceStatusResponse) SetChangingAfterTime(v string) *GetServiceStatusResponse {
  s.ChangingAfterTime = &v
  return s
}

type NotifyProduceRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Data *string `json:"data" xml:"data" require:"true"`
}

func (s NotifyProduceRequest) String() string {
  return tea.Prettify(s)
}

func (s NotifyProduceRequest) GoString() string {
  return s.String()
}

func (s *NotifyProduceRequest) SetAccessKeyId(v string) *NotifyProduceRequest {
  s.AccessKeyId = &v
  return s
}

func (s *NotifyProduceRequest) SetOwnerId(v string) *NotifyProduceRequest {
  s.OwnerId = &v
  return s
}

func (s *NotifyProduceRequest) SetResourceOwnerId(v string) *NotifyProduceRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *NotifyProduceRequest) SetResourceOwnerAccount(v string) *NotifyProduceRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *NotifyProduceRequest) SetOwnerAccount(v string) *NotifyProduceRequest {
  s.OwnerAccount = &v
  return s
}

func (s *NotifyProduceRequest) SetData(v string) *NotifyProduceRequest {
  s.Data = &v
  return s
}

type NotifyProduceResponse struct {
  RequestId *string `json:"requestId" xml:"requestId" require:"true"`
  Success *bool `json:"success" xml:"success" require:"true"`
  Code *string `json:"code" xml:"code" require:"true"`
  Message *string `json:"message" xml:"message" require:"true"`
  Data *string `json:"data" xml:"data" require:"true"`
}

func (s NotifyProduceResponse) String() string {
  return tea.Prettify(s)
}

func (s NotifyProduceResponse) GoString() string {
  return s.String()
}

func (s *NotifyProduceResponse) SetRequestId(v string) *NotifyProduceResponse {
  s.RequestId = &v
  return s
}

func (s *NotifyProduceResponse) SetSuccess(v bool) *NotifyProduceResponse {
  s.Success = &v
  return s
}

func (s *NotifyProduceResponse) SetCode(v string) *NotifyProduceResponse {
  s.Code = &v
  return s
}

func (s *NotifyProduceResponse) SetMessage(v string) *NotifyProduceResponse {
  s.Message = &v
  return s
}

func (s *NotifyProduceResponse) SetData(v string) *NotifyProduceResponse {
  s.Data = &v
  return s
}

type NotifyInitResourceRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s NotifyInitResourceRequest) String() string {
  return tea.Prettify(s)
}

func (s NotifyInitResourceRequest) GoString() string {
  return s.String()
}

func (s *NotifyInitResourceRequest) SetAccessKeyId(v string) *NotifyInitResourceRequest {
  s.AccessKeyId = &v
  return s
}

func (s *NotifyInitResourceRequest) SetOwnerId(v string) *NotifyInitResourceRequest {
  s.OwnerId = &v
  return s
}

func (s *NotifyInitResourceRequest) SetResourceOwnerId(v string) *NotifyInitResourceRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *NotifyInitResourceRequest) SetResourceOwnerAccount(v string) *NotifyInitResourceRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *NotifyInitResourceRequest) SetOwnerAccount(v string) *NotifyInitResourceRequest {
  s.OwnerAccount = &v
  return s
}

func (s *NotifyInitResourceRequest) SetResourceRealOwnerId(v int64) *NotifyInitResourceRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type NotifyInitResourceResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s NotifyInitResourceResponse) String() string {
  return tea.Prettify(s)
}

func (s NotifyInitResourceResponse) GoString() string {
  return s.String()
}

func (s *NotifyInitResourceResponse) SetRequestId(v string) *NotifyInitResourceResponse {
  s.RequestId = &v
  return s
}

type GetPlayChannelListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  State *int `json:"State" xml:"State"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s GetPlayChannelListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetPlayChannelListRequest) GoString() string {
  return s.String()
}

func (s *GetPlayChannelListRequest) SetAccessKeyId(v string) *GetPlayChannelListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetPlayChannelListRequest) SetOwnerId(v string) *GetPlayChannelListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetPlayChannelListRequest) SetState(v int) *GetPlayChannelListRequest {
  s.State = &v
  return s
}

func (s *GetPlayChannelListRequest) SetPageNo(v int) *GetPlayChannelListRequest {
  s.PageNo = &v
  return s
}

func (s *GetPlayChannelListRequest) SetPageSize(v int) *GetPlayChannelListRequest {
  s.PageSize = &v
  return s
}

func (s *GetPlayChannelListRequest) SetResourceRealOwnerId(v int64) *GetPlayChannelListRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type GetPlayChannelListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Total *int `json:"Total" xml:"Total" require:"true"`
  PlayKeyList *GetPlayChannelListResponsePlayKeyList `json:"PlayKeyList" xml:"PlayKeyList" require:"true" type:"Struct"`
}

func (s GetPlayChannelListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetPlayChannelListResponse) GoString() string {
  return s.String()
}

func (s *GetPlayChannelListResponse) SetRequestId(v string) *GetPlayChannelListResponse {
  s.RequestId = &v
  return s
}

func (s *GetPlayChannelListResponse) SetTotal(v int) *GetPlayChannelListResponse {
  s.Total = &v
  return s
}

func (s *GetPlayChannelListResponse) SetPlayKeyList(v *GetPlayChannelListResponsePlayKeyList) *GetPlayChannelListResponse {
  s.PlayKeyList = v
  return s
}

type GetPlayChannelListResponsePlayKeyList struct {
  PlayKey []*GetPlayChannelListResponsePlayKeyListPlayKey `json:"PlayKey" xml:"PlayKey" require:"true" type:"Repeated"`
}

func (s GetPlayChannelListResponsePlayKeyList) String() string {
  return tea.Prettify(s)
}

func (s GetPlayChannelListResponsePlayKeyList) GoString() string {
  return s.String()
}

func (s *GetPlayChannelListResponsePlayKeyList) SetPlayKey(v []*GetPlayChannelListResponsePlayKeyListPlayKey) *GetPlayChannelListResponsePlayKeyList {
  s.PlayKey = v
  return s
}

type GetPlayChannelListResponsePlayKeyListPlayKey struct     {
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  SignVersion *string `json:"SignVersion" xml:"SignVersion" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  ClientVersion *string `json:"ClientVersion" xml:"ClientVersion" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Source *string `json:"Source" xml:"Source" require:"true"`
}

func (s GetPlayChannelListResponsePlayKeyListPlayKey) String() string {
  return tea.Prettify(s)
}

func (s GetPlayChannelListResponsePlayKeyListPlayKey) GoString() string {
  return s.String()
}

func (s *GetPlayChannelListResponsePlayKeyListPlayKey) SetChannel(v string) *GetPlayChannelListResponsePlayKeyListPlayKey {
  s.Channel = &v
  return s
}

func (s *GetPlayChannelListResponsePlayKeyListPlayKey) SetCreateTime(v string) *GetPlayChannelListResponsePlayKeyListPlayKey {
  s.CreateTime = &v
  return s
}

func (s *GetPlayChannelListResponsePlayKeyListPlayKey) SetModifyTime(v string) *GetPlayChannelListResponsePlayKeyListPlayKey {
  s.ModifyTime = &v
  return s
}

func (s *GetPlayChannelListResponsePlayKeyListPlayKey) SetSignVersion(v string) *GetPlayChannelListResponsePlayKeyListPlayKey {
  s.SignVersion = &v
  return s
}

func (s *GetPlayChannelListResponsePlayKeyListPlayKey) SetDescription(v string) *GetPlayChannelListResponsePlayKeyListPlayKey {
  s.Description = &v
  return s
}

func (s *GetPlayChannelListResponsePlayKeyListPlayKey) SetClientVersion(v string) *GetPlayChannelListResponsePlayKeyListPlayKey {
  s.ClientVersion = &v
  return s
}

func (s *GetPlayChannelListResponsePlayKeyListPlayKey) SetStatus(v string) *GetPlayChannelListResponsePlayKeyListPlayKey {
  s.Status = &v
  return s
}

func (s *GetPlayChannelListResponsePlayKeyListPlayKey) SetSource(v string) *GetPlayChannelListResponsePlayKeyListPlayKey {
  s.Source = &v
  return s
}

type UpdateApiAuthRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  State *int `json:"State" xml:"State"`
  ExpireTime *string `json:"ExpireTime" xml:"ExpireTime"`
  SignVersion *string `json:"SignVersion" xml:"SignVersion" require:"true"`
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  Description *string `json:"Description" xml:"Description"`
  ClientVersion *string `json:"ClientVersion" xml:"ClientVersion"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s UpdateApiAuthRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateApiAuthRequest) GoString() string {
  return s.String()
}

func (s *UpdateApiAuthRequest) SetAccessKeyId(v string) *UpdateApiAuthRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateApiAuthRequest) SetOwnerId(v string) *UpdateApiAuthRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateApiAuthRequest) SetState(v int) *UpdateApiAuthRequest {
  s.State = &v
  return s
}

func (s *UpdateApiAuthRequest) SetExpireTime(v string) *UpdateApiAuthRequest {
  s.ExpireTime = &v
  return s
}

func (s *UpdateApiAuthRequest) SetSignVersion(v string) *UpdateApiAuthRequest {
  s.SignVersion = &v
  return s
}

func (s *UpdateApiAuthRequest) SetChannel(v string) *UpdateApiAuthRequest {
  s.Channel = &v
  return s
}

func (s *UpdateApiAuthRequest) SetDescription(v string) *UpdateApiAuthRequest {
  s.Description = &v
  return s
}

func (s *UpdateApiAuthRequest) SetClientVersion(v string) *UpdateApiAuthRequest {
  s.ClientVersion = &v
  return s
}

func (s *UpdateApiAuthRequest) SetResourceRealOwnerId(v int64) *UpdateApiAuthRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type UpdateApiAuthResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  ApiAuth *UpdateApiAuthResponseApiAuth `json:"ApiAuth" xml:"ApiAuth" require:"true" type:"Struct"`
}

func (s UpdateApiAuthResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateApiAuthResponse) GoString() string {
  return s.String()
}

func (s *UpdateApiAuthResponse) SetRequestId(v string) *UpdateApiAuthResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateApiAuthResponse) SetApiAuth(v *UpdateApiAuthResponseApiAuth) *UpdateApiAuthResponse {
  s.ApiAuth = v
  return s
}

type UpdateApiAuthResponseApiAuth struct {
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  Status *int `json:"Status" xml:"Status" require:"true"`
  ExpireTime *string `json:"ExpireTime" xml:"ExpireTime" require:"true"`
  SignVersion *string `json:"SignVersion" xml:"SignVersion" require:"true"`
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  ClientVersion *string `json:"ClientVersion" xml:"ClientVersion" require:"true"`
}

func (s UpdateApiAuthResponseApiAuth) String() string {
  return tea.Prettify(s)
}

func (s UpdateApiAuthResponseApiAuth) GoString() string {
  return s.String()
}

func (s *UpdateApiAuthResponseApiAuth) SetCreateTime(v string) *UpdateApiAuthResponseApiAuth {
  s.CreateTime = &v
  return s
}

func (s *UpdateApiAuthResponseApiAuth) SetModifyTime(v string) *UpdateApiAuthResponseApiAuth {
  s.ModifyTime = &v
  return s
}

func (s *UpdateApiAuthResponseApiAuth) SetStatus(v int) *UpdateApiAuthResponseApiAuth {
  s.Status = &v
  return s
}

func (s *UpdateApiAuthResponseApiAuth) SetExpireTime(v string) *UpdateApiAuthResponseApiAuth {
  s.ExpireTime = &v
  return s
}

func (s *UpdateApiAuthResponseApiAuth) SetSignVersion(v string) *UpdateApiAuthResponseApiAuth {
  s.SignVersion = &v
  return s
}

func (s *UpdateApiAuthResponseApiAuth) SetChannel(v string) *UpdateApiAuthResponseApiAuth {
  s.Channel = &v
  return s
}

func (s *UpdateApiAuthResponseApiAuth) SetDescription(v string) *UpdateApiAuthResponseApiAuth {
  s.Description = &v
  return s
}

func (s *UpdateApiAuthResponseApiAuth) SetClientVersion(v string) *UpdateApiAuthResponseApiAuth {
  s.ClientVersion = &v
  return s
}

type UserExistRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s UserExistRequest) String() string {
  return tea.Prettify(s)
}

func (s UserExistRequest) GoString() string {
  return s.String()
}

func (s *UserExistRequest) SetAccessKeyId(v string) *UserExistRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UserExistRequest) SetOwnerId(v string) *UserExistRequest {
  s.OwnerId = &v
  return s
}

func (s *UserExistRequest) SetResourceOwnerId(v string) *UserExistRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UserExistRequest) SetResourceOwnerAccount(v string) *UserExistRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UserExistRequest) SetOwnerAccount(v string) *UserExistRequest {
  s.OwnerAccount = &v
  return s
}

type UserExistResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UserState *int `json:"userState" xml:"userState" require:"true"`
}

func (s UserExistResponse) String() string {
  return tea.Prettify(s)
}

func (s UserExistResponse) GoString() string {
  return s.String()
}

func (s *UserExistResponse) SetRequestId(v string) *UserExistResponse {
  s.RequestId = &v
  return s
}

func (s *UserExistResponse) SetUserState(v int) *UserExistResponse {
  s.UserState = &v
  return s
}

type AddMediaInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  FileUrl *string `json:"FileUrl" xml:"FileUrl"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags"`
  Privilege *int `json:"Privilege" xml:"Privilege"`
  IP *string `json:"IP" xml:"IP"`
  FileSize *int64 `json:"FileSize" xml:"FileSize"`
  Duration *int64 `json:"Duration" xml:"Duration"`
  FileName *string `json:"FileName" xml:"FileName" require:"true"`
  FileMd5 *string `json:"FileMd5" xml:"FileMd5"`
  Description *string `json:"Description" xml:"Description"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL"`
  CateId *int `json:"CateId" xml:"CateId"`
  MediaWorkflowId *string `json:"MediaWorkflowId" xml:"MediaWorkflowId"`
  MediaWorkflowUserData *string `json:"MediaWorkflowUserData" xml:"MediaWorkflowUserData"`
  MediaWorkflowRunId *string `json:"MediaWorkflowRunId" xml:"MediaWorkflowRunId"`
}

func (s AddMediaInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s AddMediaInfoRequest) GoString() string {
  return s.String()
}

func (s *AddMediaInfoRequest) SetAccessKeyId(v string) *AddMediaInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddMediaInfoRequest) SetOwnerId(v int64) *AddMediaInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *AddMediaInfoRequest) SetResourceOwnerAccount(v string) *AddMediaInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddMediaInfoRequest) SetResourceOwnerId(v int64) *AddMediaInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddMediaInfoRequest) SetFileUrl(v string) *AddMediaInfoRequest {
  s.FileUrl = &v
  return s
}

func (s *AddMediaInfoRequest) SetTitle(v string) *AddMediaInfoRequest {
  s.Title = &v
  return s
}

func (s *AddMediaInfoRequest) SetTags(v string) *AddMediaInfoRequest {
  s.Tags = &v
  return s
}

func (s *AddMediaInfoRequest) SetPrivilege(v int) *AddMediaInfoRequest {
  s.Privilege = &v
  return s
}

func (s *AddMediaInfoRequest) SetIP(v string) *AddMediaInfoRequest {
  s.IP = &v
  return s
}

func (s *AddMediaInfoRequest) SetFileSize(v int64) *AddMediaInfoRequest {
  s.FileSize = &v
  return s
}

func (s *AddMediaInfoRequest) SetDuration(v int64) *AddMediaInfoRequest {
  s.Duration = &v
  return s
}

func (s *AddMediaInfoRequest) SetFileName(v string) *AddMediaInfoRequest {
  s.FileName = &v
  return s
}

func (s *AddMediaInfoRequest) SetFileMd5(v string) *AddMediaInfoRequest {
  s.FileMd5 = &v
  return s
}

func (s *AddMediaInfoRequest) SetDescription(v string) *AddMediaInfoRequest {
  s.Description = &v
  return s
}

func (s *AddMediaInfoRequest) SetCoverURL(v string) *AddMediaInfoRequest {
  s.CoverURL = &v
  return s
}

func (s *AddMediaInfoRequest) SetCateId(v int) *AddMediaInfoRequest {
  s.CateId = &v
  return s
}

func (s *AddMediaInfoRequest) SetMediaWorkflowId(v string) *AddMediaInfoRequest {
  s.MediaWorkflowId = &v
  return s
}

func (s *AddMediaInfoRequest) SetMediaWorkflowUserData(v string) *AddMediaInfoRequest {
  s.MediaWorkflowUserData = &v
  return s
}

func (s *AddMediaInfoRequest) SetMediaWorkflowRunId(v string) *AddMediaInfoRequest {
  s.MediaWorkflowRunId = &v
  return s
}

type AddMediaInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  UploadKey *string `json:"UploadKey" xml:"UploadKey" require:"true"`
  UploadAddress *AddMediaInfoResponseUploadAddress `json:"UploadAddress" xml:"UploadAddress" require:"true" type:"Struct"`
}

func (s AddMediaInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s AddMediaInfoResponse) GoString() string {
  return s.String()
}

func (s *AddMediaInfoResponse) SetRequestId(v string) *AddMediaInfoResponse {
  s.RequestId = &v
  return s
}

func (s *AddMediaInfoResponse) SetVideoId(v string) *AddMediaInfoResponse {
  s.VideoId = &v
  return s
}

func (s *AddMediaInfoResponse) SetUploadKey(v string) *AddMediaInfoResponse {
  s.UploadKey = &v
  return s
}

func (s *AddMediaInfoResponse) SetUploadAddress(v *AddMediaInfoResponseUploadAddress) *AddMediaInfoResponse {
  s.UploadAddress = v
  return s
}

type AddMediaInfoResponseUploadAddress struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId" require:"true"`
  AccessKeySecret *string `json:"AccessKeySecret" xml:"AccessKeySecret" require:"true"`
  Bucket *string `json:"Bucket" xml:"Bucket" require:"true"`
  EndPoint *string `json:"EndPoint" xml:"EndPoint" require:"true"`
  Expiration *string `json:"Expiration" xml:"Expiration" require:"true"`
  FileName *string `json:"FileName" xml:"FileName" require:"true"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken" require:"true"`
}

func (s AddMediaInfoResponseUploadAddress) String() string {
  return tea.Prettify(s)
}

func (s AddMediaInfoResponseUploadAddress) GoString() string {
  return s.String()
}

func (s *AddMediaInfoResponseUploadAddress) SetAccessKeyId(v string) *AddMediaInfoResponseUploadAddress {
  s.AccessKeyId = &v
  return s
}

func (s *AddMediaInfoResponseUploadAddress) SetAccessKeySecret(v string) *AddMediaInfoResponseUploadAddress {
  s.AccessKeySecret = &v
  return s
}

func (s *AddMediaInfoResponseUploadAddress) SetBucket(v string) *AddMediaInfoResponseUploadAddress {
  s.Bucket = &v
  return s
}

func (s *AddMediaInfoResponseUploadAddress) SetEndPoint(v string) *AddMediaInfoResponseUploadAddress {
  s.EndPoint = &v
  return s
}

func (s *AddMediaInfoResponseUploadAddress) SetExpiration(v string) *AddMediaInfoResponseUploadAddress {
  s.Expiration = &v
  return s
}

func (s *AddMediaInfoResponseUploadAddress) SetFileName(v string) *AddMediaInfoResponseUploadAddress {
  s.FileName = &v
  return s
}

func (s *AddMediaInfoResponseUploadAddress) SetSecurityToken(v string) *AddMediaInfoResponseUploadAddress {
  s.SecurityToken = &v
  return s
}

type AddCategoryRequest struct {
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  ParentId *int64 `json:"ParentId" xml:"ParentId"`
  Type *string `json:"Type" xml:"Type"`
}

func (s AddCategoryRequest) String() string {
  return tea.Prettify(s)
}

func (s AddCategoryRequest) GoString() string {
  return s.String()
}

func (s *AddCategoryRequest) SetOwnerId(v string) *AddCategoryRequest {
  s.OwnerId = &v
  return s
}

func (s *AddCategoryRequest) SetResourceOwnerId(v string) *AddCategoryRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddCategoryRequest) SetResourceOwnerAccount(v string) *AddCategoryRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddCategoryRequest) SetCateName(v string) *AddCategoryRequest {
  s.CateName = &v
  return s
}

func (s *AddCategoryRequest) SetParentId(v int64) *AddCategoryRequest {
  s.ParentId = &v
  return s
}

func (s *AddCategoryRequest) SetType(v string) *AddCategoryRequest {
  s.Type = &v
  return s
}

type AddCategoryResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Category *AddCategoryResponseCategory `json:"Category" xml:"Category" require:"true" type:"Struct"`
}

func (s AddCategoryResponse) String() string {
  return tea.Prettify(s)
}

func (s AddCategoryResponse) GoString() string {
  return s.String()
}

func (s *AddCategoryResponse) SetRequestId(v string) *AddCategoryResponse {
  s.RequestId = &v
  return s
}

func (s *AddCategoryResponse) SetCategory(v *AddCategoryResponseCategory) *AddCategoryResponse {
  s.Category = v
  return s
}

type AddCategoryResponseCategory struct {
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  ParentId *int64 `json:"ParentId" xml:"ParentId" require:"true"`
  Level *int64 `json:"Level" xml:"Level" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
}

func (s AddCategoryResponseCategory) String() string {
  return tea.Prettify(s)
}

func (s AddCategoryResponseCategory) GoString() string {
  return s.String()
}

func (s *AddCategoryResponseCategory) SetCateId(v int64) *AddCategoryResponseCategory {
  s.CateId = &v
  return s
}

func (s *AddCategoryResponseCategory) SetCateName(v string) *AddCategoryResponseCategory {
  s.CateName = &v
  return s
}

func (s *AddCategoryResponseCategory) SetParentId(v int64) *AddCategoryResponseCategory {
  s.ParentId = &v
  return s
}

func (s *AddCategoryResponseCategory) SetLevel(v int64) *AddCategoryResponseCategory {
  s.Level = &v
  return s
}

func (s *AddCategoryResponseCategory) SetType(v string) *AddCategoryResponseCategory {
  s.Type = &v
  return s
}

type DeleteCategoryRequest struct {
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
}

func (s DeleteCategoryRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteCategoryRequest) GoString() string {
  return s.String()
}

func (s *DeleteCategoryRequest) SetOwnerId(v string) *DeleteCategoryRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteCategoryRequest) SetResourceOwnerId(v string) *DeleteCategoryRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteCategoryRequest) SetResourceOwnerAccount(v string) *DeleteCategoryRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteCategoryRequest) SetOwnerAccount(v string) *DeleteCategoryRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteCategoryRequest) SetCateId(v int64) *DeleteCategoryRequest {
  s.CateId = &v
  return s
}

type DeleteCategoryResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteCategoryResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteCategoryResponse) GoString() string {
  return s.String()
}

func (s *DeleteCategoryResponse) SetRequestId(v string) *DeleteCategoryResponse {
  s.RequestId = &v
  return s
}

type UpdateMediaInfoStatusRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Status *string `json:"status" xml:"status" require:"true"`
}

func (s UpdateMediaInfoStatusRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateMediaInfoStatusRequest) GoString() string {
  return s.String()
}

func (s *UpdateMediaInfoStatusRequest) SetAccessKeyId(v string) *UpdateMediaInfoStatusRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateMediaInfoStatusRequest) SetOwnerId(v int64) *UpdateMediaInfoStatusRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateMediaInfoStatusRequest) SetResourceOwnerAccount(v string) *UpdateMediaInfoStatusRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateMediaInfoStatusRequest) SetResourceOwnerId(v int64) *UpdateMediaInfoStatusRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateMediaInfoStatusRequest) SetVideoId(v string) *UpdateMediaInfoStatusRequest {
  s.VideoId = &v
  return s
}

func (s *UpdateMediaInfoStatusRequest) SetStatus(v string) *UpdateMediaInfoStatusRequest {
  s.Status = &v
  return s
}

type UpdateMediaInfoStatusResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateMediaInfoStatusResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateMediaInfoStatusResponse) GoString() string {
  return s.String()
}

func (s *UpdateMediaInfoStatusResponse) SetRequestId(v string) *UpdateMediaInfoStatusResponse {
  s.RequestId = &v
  return s
}

type CategoryTreeRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s CategoryTreeRequest) String() string {
  return tea.Prettify(s)
}

func (s CategoryTreeRequest) GoString() string {
  return s.String()
}

func (s *CategoryTreeRequest) SetAccessKeyId(v string) *CategoryTreeRequest {
  s.AccessKeyId = &v
  return s
}

func (s *CategoryTreeRequest) SetOwnerId(v string) *CategoryTreeRequest {
  s.OwnerId = &v
  return s
}

func (s *CategoryTreeRequest) SetResourceOwnerId(v string) *CategoryTreeRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *CategoryTreeRequest) SetResourceOwnerAccount(v string) *CategoryTreeRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *CategoryTreeRequest) SetOwnerAccount(v string) *CategoryTreeRequest {
  s.OwnerAccount = &v
  return s
}

type CategoryTreeResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  CategoryTree *string `json:"CategoryTree" xml:"CategoryTree" require:"true"`
}

func (s CategoryTreeResponse) String() string {
  return tea.Prettify(s)
}

func (s CategoryTreeResponse) GoString() string {
  return s.String()
}

func (s *CategoryTreeResponse) SetRequestId(v string) *CategoryTreeResponse {
  s.RequestId = &v
  return s
}

func (s *CategoryTreeResponse) SetCategoryTree(v string) *CategoryTreeResponse {
  s.CategoryTree = &v
  return s
}

type AddMediaTagRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Tag *string `json:"Tag" xml:"Tag" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
}

func (s AddMediaTagRequest) String() string {
  return tea.Prettify(s)
}

func (s AddMediaTagRequest) GoString() string {
  return s.String()
}

func (s *AddMediaTagRequest) SetAccessKeyId(v string) *AddMediaTagRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddMediaTagRequest) SetOwnerId(v string) *AddMediaTagRequest {
  s.OwnerId = &v
  return s
}

func (s *AddMediaTagRequest) SetResourceOwnerId(v string) *AddMediaTagRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddMediaTagRequest) SetResourceOwnerAccount(v string) *AddMediaTagRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddMediaTagRequest) SetOwnerAccount(v string) *AddMediaTagRequest {
  s.OwnerAccount = &v
  return s
}

func (s *AddMediaTagRequest) SetTag(v string) *AddMediaTagRequest {
  s.Tag = &v
  return s
}

func (s *AddMediaTagRequest) SetMediaId(v string) *AddMediaTagRequest {
  s.MediaId = &v
  return s
}

type AddMediaTagResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaInfoDTO *AddMediaTagResponseMediaInfoDTO `json:"MediaInfoDTO" xml:"MediaInfoDTO" require:"true" type:"Struct"`
}

func (s AddMediaTagResponse) String() string {
  return tea.Prettify(s)
}

func (s AddMediaTagResponse) GoString() string {
  return s.String()
}

func (s *AddMediaTagResponse) SetRequestId(v string) *AddMediaTagResponse {
  s.RequestId = &v
  return s
}

func (s *AddMediaTagResponse) SetMediaInfoDTO(v *AddMediaTagResponseMediaInfoDTO) *AddMediaTagResponse {
  s.MediaInfoDTO = v
  return s
}

type AddMediaTagResponseMediaInfoDTO struct {
  UserId *int64 `json:"UserId" xml:"UserId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
}

func (s AddMediaTagResponseMediaInfoDTO) String() string {
  return tea.Prettify(s)
}

func (s AddMediaTagResponseMediaInfoDTO) GoString() string {
  return s.String()
}

func (s *AddMediaTagResponseMediaInfoDTO) SetUserId(v int64) *AddMediaTagResponseMediaInfoDTO {
  s.UserId = &v
  return s
}

func (s *AddMediaTagResponseMediaInfoDTO) SetMediaId(v string) *AddMediaTagResponseMediaInfoDTO {
  s.MediaId = &v
  return s
}

func (s *AddMediaTagResponseMediaInfoDTO) SetTitle(v string) *AddMediaTagResponseMediaInfoDTO {
  s.Title = &v
  return s
}

func (s *AddMediaTagResponseMediaInfoDTO) SetTags(v string) *AddMediaTagResponseMediaInfoDTO {
  s.Tags = &v
  return s
}

type GetCDNStatisSumRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  StartTime *int64 `json:"StartTime" xml:"StartTime"`
  EndTime *int64 `json:"EndTime" xml:"EndTime"`
  StartTimeUTC *string `json:"StartTimeUTC" xml:"StartTimeUTC"`
  EndTimeUTC *string `json:"EndTimeUTC" xml:"EndTimeUTC"`
  Level *string `json:"Level" xml:"Level"`
  LevelRule *string `json:"LevelRule" xml:"LevelRule"`
  DomainName *string `json:"DomainName" xml:"DomainName"`
}

func (s GetCDNStatisSumRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCDNStatisSumRequest) GoString() string {
  return s.String()
}

func (s *GetCDNStatisSumRequest) SetAccessKeyId(v string) *GetCDNStatisSumRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetOwnerId(v string) *GetCDNStatisSumRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetResourceOwnerId(v string) *GetCDNStatisSumRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetResourceOwnerAccount(v string) *GetCDNStatisSumRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetOwnerAccount(v string) *GetCDNStatisSumRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetStartTime(v int64) *GetCDNStatisSumRequest {
  s.StartTime = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetEndTime(v int64) *GetCDNStatisSumRequest {
  s.EndTime = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetStartTimeUTC(v string) *GetCDNStatisSumRequest {
  s.StartTimeUTC = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetEndTimeUTC(v string) *GetCDNStatisSumRequest {
  s.EndTimeUTC = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetLevel(v string) *GetCDNStatisSumRequest {
  s.Level = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetLevelRule(v string) *GetCDNStatisSumRequest {
  s.LevelRule = &v
  return s
}

func (s *GetCDNStatisSumRequest) SetDomainName(v string) *GetCDNStatisSumRequest {
  s.DomainName = &v
  return s
}

type GetCDNStatisSumResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  SumFlowDataValue *int64 `json:"SumFlowDataValue" xml:"SumFlowDataValue" require:"true"`
  MaxBpsDataValue *int64 `json:"MaxBpsDataValue" xml:"MaxBpsDataValue" require:"true"`
  Current95BpsDataValue *int64 `json:"Current95BpsDataValue" xml:"Current95BpsDataValue" require:"true"`
  Level *string `json:"Level" xml:"Level" require:"true"`
  CDNStatisList *GetCDNStatisSumResponseCDNStatisList `json:"CDNStatisList" xml:"CDNStatisList" require:"true" type:"Struct"`
}

func (s GetCDNStatisSumResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCDNStatisSumResponse) GoString() string {
  return s.String()
}

func (s *GetCDNStatisSumResponse) SetRequestId(v string) *GetCDNStatisSumResponse {
  s.RequestId = &v
  return s
}

func (s *GetCDNStatisSumResponse) SetSumFlowDataValue(v int64) *GetCDNStatisSumResponse {
  s.SumFlowDataValue = &v
  return s
}

func (s *GetCDNStatisSumResponse) SetMaxBpsDataValue(v int64) *GetCDNStatisSumResponse {
  s.MaxBpsDataValue = &v
  return s
}

func (s *GetCDNStatisSumResponse) SetCurrent95BpsDataValue(v int64) *GetCDNStatisSumResponse {
  s.Current95BpsDataValue = &v
  return s
}

func (s *GetCDNStatisSumResponse) SetLevel(v string) *GetCDNStatisSumResponse {
  s.Level = &v
  return s
}

func (s *GetCDNStatisSumResponse) SetCDNStatisList(v *GetCDNStatisSumResponseCDNStatisList) *GetCDNStatisSumResponse {
  s.CDNStatisList = v
  return s
}

type GetCDNStatisSumResponseCDNStatisList struct {
  CDNMetric []*GetCDNStatisSumResponseCDNStatisListCDNMetric `json:"CDNMetric" xml:"CDNMetric" require:"true" type:"Repeated"`
}

func (s GetCDNStatisSumResponseCDNStatisList) String() string {
  return tea.Prettify(s)
}

func (s GetCDNStatisSumResponseCDNStatisList) GoString() string {
  return s.String()
}

func (s *GetCDNStatisSumResponseCDNStatisList) SetCDNMetric(v []*GetCDNStatisSumResponseCDNStatisListCDNMetric) *GetCDNStatisSumResponseCDNStatisList {
  s.CDNMetric = v
  return s
}

type GetCDNStatisSumResponseCDNStatisListCDNMetric struct     {
  StatTime *string `json:"StatTime" xml:"StatTime" require:"true"`
  StatTimeUTC *string `json:"StatTimeUTC" xml:"StatTimeUTC" require:"true"`
  FlowDataDomesticValue *int64 `json:"FlowDataDomesticValue" xml:"FlowDataDomesticValue" require:"true"`
  FlowDataOverseasValue *int64 `json:"FlowDataOverseasValue" xml:"FlowDataOverseasValue" require:"true"`
  FlowDataValue *int64 `json:"FlowDataValue" xml:"FlowDataValue" require:"true"`
  BpsDataDomesticValue *int64 `json:"BpsDataDomesticValue" xml:"BpsDataDomesticValue" require:"true"`
  BpsDataOverseasValue *int64 `json:"BpsDataOverseasValue" xml:"BpsDataOverseasValue" require:"true"`
  BpsDataValue *int64 `json:"BpsDataValue" xml:"BpsDataValue" require:"true"`
}

func (s GetCDNStatisSumResponseCDNStatisListCDNMetric) String() string {
  return tea.Prettify(s)
}

func (s GetCDNStatisSumResponseCDNStatisListCDNMetric) GoString() string {
  return s.String()
}

func (s *GetCDNStatisSumResponseCDNStatisListCDNMetric) SetStatTime(v string) *GetCDNStatisSumResponseCDNStatisListCDNMetric {
  s.StatTime = &v
  return s
}

func (s *GetCDNStatisSumResponseCDNStatisListCDNMetric) SetStatTimeUTC(v string) *GetCDNStatisSumResponseCDNStatisListCDNMetric {
  s.StatTimeUTC = &v
  return s
}

func (s *GetCDNStatisSumResponseCDNStatisListCDNMetric) SetFlowDataDomesticValue(v int64) *GetCDNStatisSumResponseCDNStatisListCDNMetric {
  s.FlowDataDomesticValue = &v
  return s
}

func (s *GetCDNStatisSumResponseCDNStatisListCDNMetric) SetFlowDataOverseasValue(v int64) *GetCDNStatisSumResponseCDNStatisListCDNMetric {
  s.FlowDataOverseasValue = &v
  return s
}

func (s *GetCDNStatisSumResponseCDNStatisListCDNMetric) SetFlowDataValue(v int64) *GetCDNStatisSumResponseCDNStatisListCDNMetric {
  s.FlowDataValue = &v
  return s
}

func (s *GetCDNStatisSumResponseCDNStatisListCDNMetric) SetBpsDataDomesticValue(v int64) *GetCDNStatisSumResponseCDNStatisListCDNMetric {
  s.BpsDataDomesticValue = &v
  return s
}

func (s *GetCDNStatisSumResponseCDNStatisListCDNMetric) SetBpsDataOverseasValue(v int64) *GetCDNStatisSumResponseCDNStatisListCDNMetric {
  s.BpsDataOverseasValue = &v
  return s
}

func (s *GetCDNStatisSumResponseCDNStatisListCDNMetric) SetBpsDataValue(v int64) *GetCDNStatisSumResponseCDNStatisListCDNMetric {
  s.BpsDataValue = &v
  return s
}

type GetCDNStatisRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  StartTime *int64 `json:"StartTime" xml:"StartTime" require:"true"`
  EndTime *int64 `json:"EndTime" xml:"EndTime" require:"true"`
  Level *string `json:"Level" xml:"Level"`
}

func (s GetCDNStatisRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCDNStatisRequest) GoString() string {
  return s.String()
}

func (s *GetCDNStatisRequest) SetAccessKeyId(v string) *GetCDNStatisRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetCDNStatisRequest) SetOwnerId(v string) *GetCDNStatisRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCDNStatisRequest) SetResourceOwnerId(v string) *GetCDNStatisRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetCDNStatisRequest) SetResourceOwnerAccount(v string) *GetCDNStatisRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCDNStatisRequest) SetOwnerAccount(v string) *GetCDNStatisRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetCDNStatisRequest) SetStartTime(v int64) *GetCDNStatisRequest {
  s.StartTime = &v
  return s
}

func (s *GetCDNStatisRequest) SetEndTime(v int64) *GetCDNStatisRequest {
  s.EndTime = &v
  return s
}

func (s *GetCDNStatisRequest) SetLevel(v string) *GetCDNStatisRequest {
  s.Level = &v
  return s
}

type GetCDNStatisResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  SumFlowDataValue *int64 `json:"SumFlowDataValue" xml:"SumFlowDataValue" require:"true"`
  MaxBpsDataValue *int64 `json:"MaxBpsDataValue" xml:"MaxBpsDataValue" require:"true"`
  Current95BpsDataValue *int64 `json:"Current95BpsDataValue" xml:"Current95BpsDataValue" require:"true"`
  CDNStatisList *GetCDNStatisResponseCDNStatisList `json:"CDNStatisList" xml:"CDNStatisList" require:"true" type:"Struct"`
}

func (s GetCDNStatisResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCDNStatisResponse) GoString() string {
  return s.String()
}

func (s *GetCDNStatisResponse) SetRequestId(v string) *GetCDNStatisResponse {
  s.RequestId = &v
  return s
}

func (s *GetCDNStatisResponse) SetSumFlowDataValue(v int64) *GetCDNStatisResponse {
  s.SumFlowDataValue = &v
  return s
}

func (s *GetCDNStatisResponse) SetMaxBpsDataValue(v int64) *GetCDNStatisResponse {
  s.MaxBpsDataValue = &v
  return s
}

func (s *GetCDNStatisResponse) SetCurrent95BpsDataValue(v int64) *GetCDNStatisResponse {
  s.Current95BpsDataValue = &v
  return s
}

func (s *GetCDNStatisResponse) SetCDNStatisList(v *GetCDNStatisResponseCDNStatisList) *GetCDNStatisResponse {
  s.CDNStatisList = v
  return s
}

type GetCDNStatisResponseCDNStatisList struct {
  CDNMetric []*GetCDNStatisResponseCDNStatisListCDNMetric `json:"CDNMetric" xml:"CDNMetric" require:"true" type:"Repeated"`
}

func (s GetCDNStatisResponseCDNStatisList) String() string {
  return tea.Prettify(s)
}

func (s GetCDNStatisResponseCDNStatisList) GoString() string {
  return s.String()
}

func (s *GetCDNStatisResponseCDNStatisList) SetCDNMetric(v []*GetCDNStatisResponseCDNStatisListCDNMetric) *GetCDNStatisResponseCDNStatisList {
  s.CDNMetric = v
  return s
}

type GetCDNStatisResponseCDNStatisListCDNMetric struct     {
  CdnDomain *string `json:"CdnDomain" xml:"CdnDomain" require:"true"`
  StatTime *string `json:"StatTime" xml:"StatTime" require:"true"`
  FlowDataDomesticValue *int64 `json:"FlowDataDomesticValue" xml:"FlowDataDomesticValue" require:"true"`
  FlowDataOverseasValue *int64 `json:"FlowDataOverseasValue" xml:"FlowDataOverseasValue" require:"true"`
  FlowDataValue *int64 `json:"FlowDataValue" xml:"FlowDataValue" require:"true"`
  BpsDataDomesticValue *int64 `json:"BpsDataDomesticValue" xml:"BpsDataDomesticValue" require:"true"`
  BpsDataOverseasValue *int64 `json:"BpsDataOverseasValue" xml:"BpsDataOverseasValue" require:"true"`
  BpsDataValue *int64 `json:"BpsDataValue" xml:"BpsDataValue" require:"true"`
}

func (s GetCDNStatisResponseCDNStatisListCDNMetric) String() string {
  return tea.Prettify(s)
}

func (s GetCDNStatisResponseCDNStatisListCDNMetric) GoString() string {
  return s.String()
}

func (s *GetCDNStatisResponseCDNStatisListCDNMetric) SetCdnDomain(v string) *GetCDNStatisResponseCDNStatisListCDNMetric {
  s.CdnDomain = &v
  return s
}

func (s *GetCDNStatisResponseCDNStatisListCDNMetric) SetStatTime(v string) *GetCDNStatisResponseCDNStatisListCDNMetric {
  s.StatTime = &v
  return s
}

func (s *GetCDNStatisResponseCDNStatisListCDNMetric) SetFlowDataDomesticValue(v int64) *GetCDNStatisResponseCDNStatisListCDNMetric {
  s.FlowDataDomesticValue = &v
  return s
}

func (s *GetCDNStatisResponseCDNStatisListCDNMetric) SetFlowDataOverseasValue(v int64) *GetCDNStatisResponseCDNStatisListCDNMetric {
  s.FlowDataOverseasValue = &v
  return s
}

func (s *GetCDNStatisResponseCDNStatisListCDNMetric) SetFlowDataValue(v int64) *GetCDNStatisResponseCDNStatisListCDNMetric {
  s.FlowDataValue = &v
  return s
}

func (s *GetCDNStatisResponseCDNStatisListCDNMetric) SetBpsDataDomesticValue(v int64) *GetCDNStatisResponseCDNStatisListCDNMetric {
  s.BpsDataDomesticValue = &v
  return s
}

func (s *GetCDNStatisResponseCDNStatisListCDNMetric) SetBpsDataOverseasValue(v int64) *GetCDNStatisResponseCDNStatisListCDNMetric {
  s.BpsDataOverseasValue = &v
  return s
}

func (s *GetCDNStatisResponseCDNStatisListCDNMetric) SetBpsDataValue(v int64) *GetCDNStatisResponseCDNStatisListCDNMetric {
  s.BpsDataValue = &v
  return s
}

type DeleteMediaTagRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  Tag *string `json:"Tag" xml:"Tag" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
}

func (s DeleteMediaTagRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteMediaTagRequest) GoString() string {
  return s.String()
}

func (s *DeleteMediaTagRequest) SetAccessKeyId(v string) *DeleteMediaTagRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteMediaTagRequest) SetOwnerId(v string) *DeleteMediaTagRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteMediaTagRequest) SetResourceOwnerId(v string) *DeleteMediaTagRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteMediaTagRequest) SetResourceOwnerAccount(v string) *DeleteMediaTagRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteMediaTagRequest) SetOwnerAccount(v string) *DeleteMediaTagRequest {
  s.OwnerAccount = &v
  return s
}

func (s *DeleteMediaTagRequest) SetTag(v string) *DeleteMediaTagRequest {
  s.Tag = &v
  return s
}

func (s *DeleteMediaTagRequest) SetMediaId(v string) *DeleteMediaTagRequest {
  s.MediaId = &v
  return s
}

type DeleteMediaTagResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MediaInfoDTO *DeleteMediaTagResponseMediaInfoDTO `json:"MediaInfoDTO" xml:"MediaInfoDTO" require:"true" type:"Struct"`
}

func (s DeleteMediaTagResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteMediaTagResponse) GoString() string {
  return s.String()
}

func (s *DeleteMediaTagResponse) SetRequestId(v string) *DeleteMediaTagResponse {
  s.RequestId = &v
  return s
}

func (s *DeleteMediaTagResponse) SetMediaInfoDTO(v *DeleteMediaTagResponseMediaInfoDTO) *DeleteMediaTagResponse {
  s.MediaInfoDTO = v
  return s
}

type DeleteMediaTagResponseMediaInfoDTO struct {
  UserId *int64 `json:"UserId" xml:"UserId" require:"true"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
}

func (s DeleteMediaTagResponseMediaInfoDTO) String() string {
  return tea.Prettify(s)
}

func (s DeleteMediaTagResponseMediaInfoDTO) GoString() string {
  return s.String()
}

func (s *DeleteMediaTagResponseMediaInfoDTO) SetUserId(v int64) *DeleteMediaTagResponseMediaInfoDTO {
  s.UserId = &v
  return s
}

func (s *DeleteMediaTagResponseMediaInfoDTO) SetMediaId(v string) *DeleteMediaTagResponseMediaInfoDTO {
  s.MediaId = &v
  return s
}

func (s *DeleteMediaTagResponseMediaInfoDTO) SetTitle(v string) *DeleteMediaTagResponseMediaInfoDTO {
  s.Title = &v
  return s
}

func (s *DeleteMediaTagResponseMediaInfoDTO) SetTags(v string) *DeleteMediaTagResponseMediaInfoDTO {
  s.Tags = &v
  return s
}

type DeleteMediaInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoIds *string `json:"VideoIds" xml:"VideoIds" require:"true"`
}

func (s DeleteMediaInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteMediaInfoRequest) GoString() string {
  return s.String()
}

func (s *DeleteMediaInfoRequest) SetAccessKeyId(v string) *DeleteMediaInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteMediaInfoRequest) SetOwnerId(v int64) *DeleteMediaInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteMediaInfoRequest) SetResourceOwnerAccount(v string) *DeleteMediaInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteMediaInfoRequest) SetResourceOwnerId(v int64) *DeleteMediaInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteMediaInfoRequest) SetVideoIds(v string) *DeleteMediaInfoRequest {
  s.VideoIds = &v
  return s
}

type DeleteMediaInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteMediaInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteMediaInfoResponse) GoString() string {
  return s.String()
}

func (s *DeleteMediaInfoResponse) SetRequestId(v string) *DeleteMediaInfoResponse {
  s.RequestId = &v
  return s
}

type GetOSSStatisRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  StartTime *int64 `json:"StartTime" xml:"StartTime"`
  EndTime *int64 `json:"EndTime" xml:"EndTime"`
  StartTimeUTC *string `json:"StartTimeUTC" xml:"StartTimeUTC"`
  EndTimeUTC *string `json:"EndTimeUTC" xml:"EndTimeUTC"`
  Level *string `json:"Level" xml:"Level"`
  Division *string `json:"Division" xml:"Division"`
}

func (s GetOSSStatisRequest) String() string {
  return tea.Prettify(s)
}

func (s GetOSSStatisRequest) GoString() string {
  return s.String()
}

func (s *GetOSSStatisRequest) SetAccessKeyId(v string) *GetOSSStatisRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetOSSStatisRequest) SetOwnerId(v string) *GetOSSStatisRequest {
  s.OwnerId = &v
  return s
}

func (s *GetOSSStatisRequest) SetResourceOwnerId(v string) *GetOSSStatisRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetOSSStatisRequest) SetResourceOwnerAccount(v string) *GetOSSStatisRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetOSSStatisRequest) SetOwnerAccount(v string) *GetOSSStatisRequest {
  s.OwnerAccount = &v
  return s
}

func (s *GetOSSStatisRequest) SetStartTime(v int64) *GetOSSStatisRequest {
  s.StartTime = &v
  return s
}

func (s *GetOSSStatisRequest) SetEndTime(v int64) *GetOSSStatisRequest {
  s.EndTime = &v
  return s
}

func (s *GetOSSStatisRequest) SetStartTimeUTC(v string) *GetOSSStatisRequest {
  s.StartTimeUTC = &v
  return s
}

func (s *GetOSSStatisRequest) SetEndTimeUTC(v string) *GetOSSStatisRequest {
  s.EndTimeUTC = &v
  return s
}

func (s *GetOSSStatisRequest) SetLevel(v string) *GetOSSStatisRequest {
  s.Level = &v
  return s
}

func (s *GetOSSStatisRequest) SetDivision(v string) *GetOSSStatisRequest {
  s.Division = &v
  return s
}

type GetOSSStatisResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  MaxStorageUtilization *int64 `json:"MaxStorageUtilization" xml:"MaxStorageUtilization" require:"true"`
  OssStatisList *GetOSSStatisResponseOssStatisList `json:"OssStatisList" xml:"OssStatisList" require:"true" type:"Struct"`
}

func (s GetOSSStatisResponse) String() string {
  return tea.Prettify(s)
}

func (s GetOSSStatisResponse) GoString() string {
  return s.String()
}

func (s *GetOSSStatisResponse) SetRequestId(v string) *GetOSSStatisResponse {
  s.RequestId = &v
  return s
}

func (s *GetOSSStatisResponse) SetMaxStorageUtilization(v int64) *GetOSSStatisResponse {
  s.MaxStorageUtilization = &v
  return s
}

func (s *GetOSSStatisResponse) SetOssStatisList(v *GetOSSStatisResponseOssStatisList) *GetOSSStatisResponse {
  s.OssStatisList = v
  return s
}

type GetOSSStatisResponseOssStatisList struct {
  OSSMetric []*GetOSSStatisResponseOssStatisListOSSMetric `json:"OSSMetric" xml:"OSSMetric" require:"true" type:"Repeated"`
}

func (s GetOSSStatisResponseOssStatisList) String() string {
  return tea.Prettify(s)
}

func (s GetOSSStatisResponseOssStatisList) GoString() string {
  return s.String()
}

func (s *GetOSSStatisResponseOssStatisList) SetOSSMetric(v []*GetOSSStatisResponseOssStatisListOSSMetric) *GetOSSStatisResponseOssStatisList {
  s.OSSMetric = v
  return s
}

type GetOSSStatisResponseOssStatisListOSSMetric struct     {
  StatTime *string `json:"StatTime" xml:"StatTime" require:"true"`
  StatTimeUTC *string `json:"StatTimeUTC" xml:"StatTimeUTC" require:"true"`
  StorageUtilization *int64 `json:"StorageUtilization" xml:"StorageUtilization" require:"true"`
}

func (s GetOSSStatisResponseOssStatisListOSSMetric) String() string {
  return tea.Prettify(s)
}

func (s GetOSSStatisResponseOssStatisListOSSMetric) GoString() string {
  return s.String()
}

func (s *GetOSSStatisResponseOssStatisListOSSMetric) SetStatTime(v string) *GetOSSStatisResponseOssStatisListOSSMetric {
  s.StatTime = &v
  return s
}

func (s *GetOSSStatisResponseOssStatisListOSSMetric) SetStatTimeUTC(v string) *GetOSSStatisResponseOssStatisListOSSMetric {
  s.StatTimeUTC = &v
  return s
}

func (s *GetOSSStatisResponseOssStatisListOSSMetric) SetStorageUtilization(v int64) *GetOSSStatisResponseOssStatisListOSSMetric {
  s.StorageUtilization = &v
  return s
}

type GetVideoPlayInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Channel *string `json:"Channel" xml:"Channel" require:"true"`
  ClientTS *int64 `json:"ClientTS" xml:"ClientTS" require:"true"`
  ClientVersion *string `json:"ClientVersion" xml:"ClientVersion" require:"true"`
  PlaySign *string `json:"PlaySign" xml:"PlaySign" require:"true"`
  SignVersion *string `json:"SignVersion" xml:"SignVersion" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s GetVideoPlayInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayInfoRequest) GoString() string {
  return s.String()
}

func (s *GetVideoPlayInfoRequest) SetAccessKeyId(v string) *GetVideoPlayInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetVideoPlayInfoRequest) SetOwnerId(v int64) *GetVideoPlayInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetVideoPlayInfoRequest) SetResourceOwnerAccount(v string) *GetVideoPlayInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetVideoPlayInfoRequest) SetResourceOwnerId(v int64) *GetVideoPlayInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetVideoPlayInfoRequest) SetChannel(v string) *GetVideoPlayInfoRequest {
  s.Channel = &v
  return s
}

func (s *GetVideoPlayInfoRequest) SetClientTS(v int64) *GetVideoPlayInfoRequest {
  s.ClientTS = &v
  return s
}

func (s *GetVideoPlayInfoRequest) SetClientVersion(v string) *GetVideoPlayInfoRequest {
  s.ClientVersion = &v
  return s
}

func (s *GetVideoPlayInfoRequest) SetPlaySign(v string) *GetVideoPlayInfoRequest {
  s.PlaySign = &v
  return s
}

func (s *GetVideoPlayInfoRequest) SetSignVersion(v string) *GetVideoPlayInfoRequest {
  s.SignVersion = &v
  return s
}

func (s *GetVideoPlayInfoRequest) SetVideoId(v string) *GetVideoPlayInfoRequest {
  s.VideoId = &v
  return s
}

type GetVideoPlayInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  PlayInfo *GetVideoPlayInfoResponsePlayInfo `json:"PlayInfo" xml:"PlayInfo" require:"true" type:"Struct"`
  VideoInfo *GetVideoPlayInfoResponseVideoInfo `json:"VideoInfo" xml:"VideoInfo" require:"true" type:"Struct"`
}

func (s GetVideoPlayInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayInfoResponse) GoString() string {
  return s.String()
}

func (s *GetVideoPlayInfoResponse) SetRequestId(v string) *GetVideoPlayInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetVideoPlayInfoResponse) SetPlayInfo(v *GetVideoPlayInfoResponsePlayInfo) *GetVideoPlayInfoResponse {
  s.PlayInfo = v
  return s
}

func (s *GetVideoPlayInfoResponse) SetVideoInfo(v *GetVideoPlayInfoResponseVideoInfo) *GetVideoPlayInfoResponse {
  s.VideoInfo = v
  return s
}

type GetVideoPlayInfoResponsePlayInfo struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId" require:"true"`
  AccessKeySecret *string `json:"AccessKeySecret" xml:"AccessKeySecret" require:"true"`
  AuthInfo *string `json:"AuthInfo" xml:"AuthInfo" require:"true"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken" require:"true"`
  Region *string `json:"Region" xml:"Region" require:"true"`
  PlayDomain *string `json:"PlayDomain" xml:"PlayDomain" require:"true"`
}

func (s GetVideoPlayInfoResponsePlayInfo) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayInfoResponsePlayInfo) GoString() string {
  return s.String()
}

func (s *GetVideoPlayInfoResponsePlayInfo) SetAccessKeyId(v string) *GetVideoPlayInfoResponsePlayInfo {
  s.AccessKeyId = &v
  return s
}

func (s *GetVideoPlayInfoResponsePlayInfo) SetAccessKeySecret(v string) *GetVideoPlayInfoResponsePlayInfo {
  s.AccessKeySecret = &v
  return s
}

func (s *GetVideoPlayInfoResponsePlayInfo) SetAuthInfo(v string) *GetVideoPlayInfoResponsePlayInfo {
  s.AuthInfo = &v
  return s
}

func (s *GetVideoPlayInfoResponsePlayInfo) SetSecurityToken(v string) *GetVideoPlayInfoResponsePlayInfo {
  s.SecurityToken = &v
  return s
}

func (s *GetVideoPlayInfoResponsePlayInfo) SetRegion(v string) *GetVideoPlayInfoResponsePlayInfo {
  s.Region = &v
  return s
}

func (s *GetVideoPlayInfoResponsePlayInfo) SetPlayDomain(v string) *GetVideoPlayInfoResponsePlayInfo {
  s.PlayDomain = &v
  return s
}

type GetVideoPlayInfoResponseVideoInfo struct {
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  Duration *float32 `json:"Duration" xml:"Duration" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s GetVideoPlayInfoResponseVideoInfo) String() string {
  return tea.Prettify(s)
}

func (s GetVideoPlayInfoResponseVideoInfo) GoString() string {
  return s.String()
}

func (s *GetVideoPlayInfoResponseVideoInfo) SetCoverURL(v string) *GetVideoPlayInfoResponseVideoInfo {
  s.CoverURL = &v
  return s
}

func (s *GetVideoPlayInfoResponseVideoInfo) SetCustomerId(v int64) *GetVideoPlayInfoResponseVideoInfo {
  s.CustomerId = &v
  return s
}

func (s *GetVideoPlayInfoResponseVideoInfo) SetDuration(v float32) *GetVideoPlayInfoResponseVideoInfo {
  s.Duration = &v
  return s
}

func (s *GetVideoPlayInfoResponseVideoInfo) SetStatus(v string) *GetVideoPlayInfoResponseVideoInfo {
  s.Status = &v
  return s
}

func (s *GetVideoPlayInfoResponseVideoInfo) SetTitle(v string) *GetVideoPlayInfoResponseVideoInfo {
  s.Title = &v
  return s
}

func (s *GetVideoPlayInfoResponseVideoInfo) SetVideoId(v string) *GetVideoPlayInfoResponseVideoInfo {
  s.VideoId = &v
  return s
}

type GetMediaInfoListRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CateId *int `json:"CateId" xml:"CateId"`
  Status *string `json:"Status" xml:"Status"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
}

func (s GetMediaInfoListRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMediaInfoListRequest) GoString() string {
  return s.String()
}

func (s *GetMediaInfoListRequest) SetAccessKeyId(v string) *GetMediaInfoListRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMediaInfoListRequest) SetOwnerId(v int64) *GetMediaInfoListRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMediaInfoListRequest) SetResourceOwnerAccount(v string) *GetMediaInfoListRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMediaInfoListRequest) SetResourceOwnerId(v int64) *GetMediaInfoListRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMediaInfoListRequest) SetCateId(v int) *GetMediaInfoListRequest {
  s.CateId = &v
  return s
}

func (s *GetMediaInfoListRequest) SetStatus(v string) *GetMediaInfoListRequest {
  s.Status = &v
  return s
}

func (s *GetMediaInfoListRequest) SetPageNo(v int) *GetMediaInfoListRequest {
  s.PageNo = &v
  return s
}

func (s *GetMediaInfoListRequest) SetPageSize(v int) *GetMediaInfoListRequest {
  s.PageSize = &v
  return s
}

func (s *GetMediaInfoListRequest) SetSortBy(v string) *GetMediaInfoListRequest {
  s.SortBy = &v
  return s
}

type GetMediaInfoListResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  VideoList *GetMediaInfoListResponseVideoList `json:"VideoList" xml:"VideoList" require:"true" type:"Struct"`
}

func (s GetMediaInfoListResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMediaInfoListResponse) GoString() string {
  return s.String()
}

func (s *GetMediaInfoListResponse) SetRequestId(v string) *GetMediaInfoListResponse {
  s.RequestId = &v
  return s
}

func (s *GetMediaInfoListResponse) SetVideoList(v *GetMediaInfoListResponseVideoList) *GetMediaInfoListResponse {
  s.VideoList = v
  return s
}

type GetMediaInfoListResponseVideoList struct {
  MediaInfo []*GetMediaInfoListResponseVideoListMediaInfo `json:"MediaInfo" xml:"MediaInfo" require:"true" type:"Repeated"`
}

func (s GetMediaInfoListResponseVideoList) String() string {
  return tea.Prettify(s)
}

func (s GetMediaInfoListResponseVideoList) GoString() string {
  return s.String()
}

func (s *GetMediaInfoListResponseVideoList) SetMediaInfo(v []*GetMediaInfoListResponseVideoListMediaInfo) *GetMediaInfoListResponseVideoList {
  s.MediaInfo = v
  return s
}

type GetMediaInfoListResponseVideoListMediaInfo struct     {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Privilege *int `json:"Privilege" xml:"Privilege" require:"true"`
  Duration *int64 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  Snapshots *GetMediaInfoListResponseVideoListMediaInfoSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
}

func (s GetMediaInfoListResponseVideoListMediaInfo) String() string {
  return tea.Prettify(s)
}

func (s GetMediaInfoListResponseVideoListMediaInfo) GoString() string {
  return s.String()
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetVideoId(v string) *GetMediaInfoListResponseVideoListMediaInfo {
  s.VideoId = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetTitle(v string) *GetMediaInfoListResponseVideoListMediaInfo {
  s.Title = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetTags(v string) *GetMediaInfoListResponseVideoListMediaInfo {
  s.Tags = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetStatus(v string) *GetMediaInfoListResponseVideoListMediaInfo {
  s.Status = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetSize(v int64) *GetMediaInfoListResponseVideoListMediaInfo {
  s.Size = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetPrivilege(v int) *GetMediaInfoListResponseVideoListMediaInfo {
  s.Privilege = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetDuration(v int64) *GetMediaInfoListResponseVideoListMediaInfo {
  s.Duration = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetDescription(v string) *GetMediaInfoListResponseVideoListMediaInfo {
  s.Description = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetCustomerId(v int64) *GetMediaInfoListResponseVideoListMediaInfo {
  s.CustomerId = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetCreateTime(v string) *GetMediaInfoListResponseVideoListMediaInfo {
  s.CreateTime = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetModifyTime(v string) *GetMediaInfoListResponseVideoListMediaInfo {
  s.ModifyTime = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetCoverURL(v string) *GetMediaInfoListResponseVideoListMediaInfo {
  s.CoverURL = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetCateId(v int) *GetMediaInfoListResponseVideoListMediaInfo {
  s.CateId = &v
  return s
}

func (s *GetMediaInfoListResponseVideoListMediaInfo) SetSnapshots(v *GetMediaInfoListResponseVideoListMediaInfoSnapshots) *GetMediaInfoListResponseVideoListMediaInfo {
  s.Snapshots = v
  return s
}

type GetMediaInfoListResponseVideoListMediaInfoSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s GetMediaInfoListResponseVideoListMediaInfoSnapshots) String() string {
  return tea.Prettify(s)
}

func (s GetMediaInfoListResponseVideoListMediaInfoSnapshots) GoString() string {
  return s.String()
}

func (s *GetMediaInfoListResponseVideoListMediaInfoSnapshots) SetSnapshot(v []*string) *GetMediaInfoListResponseVideoListMediaInfoSnapshots {
  s.Snapshot = v
  return s
}

type GetMediaInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s GetMediaInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s GetMediaInfoRequest) GoString() string {
  return s.String()
}

func (s *GetMediaInfoRequest) SetAccessKeyId(v string) *GetMediaInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetMediaInfoRequest) SetOwnerId(v int64) *GetMediaInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *GetMediaInfoRequest) SetResourceOwnerAccount(v string) *GetMediaInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetMediaInfoRequest) SetResourceOwnerId(v int64) *GetMediaInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetMediaInfoRequest) SetVideoId(v string) *GetMediaInfoRequest {
  s.VideoId = &v
  return s
}

type GetMediaInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Video *GetMediaInfoResponseVideo `json:"Video" xml:"Video" require:"true" type:"Struct"`
}

func (s GetMediaInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s GetMediaInfoResponse) GoString() string {
  return s.String()
}

func (s *GetMediaInfoResponse) SetRequestId(v string) *GetMediaInfoResponse {
  s.RequestId = &v
  return s
}

func (s *GetMediaInfoResponse) SetVideo(v *GetMediaInfoResponseVideo) *GetMediaInfoResponse {
  s.Video = v
  return s
}

type GetMediaInfoResponseVideo struct {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Privilege *int `json:"Privilege" xml:"Privilege" require:"true"`
  Duration *int64 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  Snapshots *GetMediaInfoResponseVideoSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
}

func (s GetMediaInfoResponseVideo) String() string {
  return tea.Prettify(s)
}

func (s GetMediaInfoResponseVideo) GoString() string {
  return s.String()
}

func (s *GetMediaInfoResponseVideo) SetVideoId(v string) *GetMediaInfoResponseVideo {
  s.VideoId = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetTitle(v string) *GetMediaInfoResponseVideo {
  s.Title = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetTags(v string) *GetMediaInfoResponseVideo {
  s.Tags = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetStatus(v string) *GetMediaInfoResponseVideo {
  s.Status = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetSize(v int64) *GetMediaInfoResponseVideo {
  s.Size = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetPrivilege(v int) *GetMediaInfoResponseVideo {
  s.Privilege = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetDuration(v int64) *GetMediaInfoResponseVideo {
  s.Duration = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetDescription(v string) *GetMediaInfoResponseVideo {
  s.Description = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetCustomerId(v int64) *GetMediaInfoResponseVideo {
  s.CustomerId = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetCreateTime(v string) *GetMediaInfoResponseVideo {
  s.CreateTime = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetModifyTime(v string) *GetMediaInfoResponseVideo {
  s.ModifyTime = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetCoverURL(v string) *GetMediaInfoResponseVideo {
  s.CoverURL = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetCateId(v int) *GetMediaInfoResponseVideo {
  s.CateId = &v
  return s
}

func (s *GetMediaInfoResponseVideo) SetSnapshots(v *GetMediaInfoResponseVideoSnapshots) *GetMediaInfoResponseVideo {
  s.Snapshots = v
  return s
}

type GetMediaInfoResponseVideoSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s GetMediaInfoResponseVideoSnapshots) String() string {
  return tea.Prettify(s)
}

func (s GetMediaInfoResponseVideoSnapshots) GoString() string {
  return s.String()
}

func (s *GetMediaInfoResponseVideoSnapshots) SetSnapshot(v []*string) *GetMediaInfoResponseVideoSnapshots {
  s.Snapshot = v
  return s
}

type SearchMediaInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  CateId *int `json:"CateId" xml:"CateId"`
  Title *string `json:"Title" xml:"Title"`
  KeyWord *string `json:"KeyWord" xml:"KeyWord"`
  StartTime *string `json:"StartTime" xml:"StartTime"`
  EndTime *string `json:"EndTime" xml:"EndTime"`
  PageNo *int `json:"PageNo" xml:"PageNo"`
  PageSize *int `json:"PageSize" xml:"PageSize"`
  SortBy *string `json:"SortBy" xml:"SortBy"`
  Status *string `json:"Status" xml:"Status"`
}

func (s SearchMediaInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaInfoRequest) GoString() string {
  return s.String()
}

func (s *SearchMediaInfoRequest) SetAccessKeyId(v string) *SearchMediaInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SearchMediaInfoRequest) SetOwnerId(v int64) *SearchMediaInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *SearchMediaInfoRequest) SetResourceOwnerAccount(v string) *SearchMediaInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SearchMediaInfoRequest) SetResourceOwnerId(v int64) *SearchMediaInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SearchMediaInfoRequest) SetCateId(v int) *SearchMediaInfoRequest {
  s.CateId = &v
  return s
}

func (s *SearchMediaInfoRequest) SetTitle(v string) *SearchMediaInfoRequest {
  s.Title = &v
  return s
}

func (s *SearchMediaInfoRequest) SetKeyWord(v string) *SearchMediaInfoRequest {
  s.KeyWord = &v
  return s
}

func (s *SearchMediaInfoRequest) SetStartTime(v string) *SearchMediaInfoRequest {
  s.StartTime = &v
  return s
}

func (s *SearchMediaInfoRequest) SetEndTime(v string) *SearchMediaInfoRequest {
  s.EndTime = &v
  return s
}

func (s *SearchMediaInfoRequest) SetPageNo(v int) *SearchMediaInfoRequest {
  s.PageNo = &v
  return s
}

func (s *SearchMediaInfoRequest) SetPageSize(v int) *SearchMediaInfoRequest {
  s.PageSize = &v
  return s
}

func (s *SearchMediaInfoRequest) SetSortBy(v string) *SearchMediaInfoRequest {
  s.SortBy = &v
  return s
}

func (s *SearchMediaInfoRequest) SetStatus(v string) *SearchMediaInfoRequest {
  s.Status = &v
  return s
}

type SearchMediaInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Total *int `json:"Total" xml:"Total" require:"true"`
  VideoList *SearchMediaInfoResponseVideoList `json:"VideoList" xml:"VideoList" require:"true" type:"Struct"`
}

func (s SearchMediaInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaInfoResponse) GoString() string {
  return s.String()
}

func (s *SearchMediaInfoResponse) SetRequestId(v string) *SearchMediaInfoResponse {
  s.RequestId = &v
  return s
}

func (s *SearchMediaInfoResponse) SetTotal(v int) *SearchMediaInfoResponse {
  s.Total = &v
  return s
}

func (s *SearchMediaInfoResponse) SetVideoList(v *SearchMediaInfoResponseVideoList) *SearchMediaInfoResponse {
  s.VideoList = v
  return s
}

type SearchMediaInfoResponseVideoList struct {
  MediaInfo []*SearchMediaInfoResponseVideoListMediaInfo `json:"MediaInfo" xml:"MediaInfo" require:"true" type:"Repeated"`
}

func (s SearchMediaInfoResponseVideoList) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaInfoResponseVideoList) GoString() string {
  return s.String()
}

func (s *SearchMediaInfoResponseVideoList) SetMediaInfo(v []*SearchMediaInfoResponseVideoListMediaInfo) *SearchMediaInfoResponseVideoList {
  s.MediaInfo = v
  return s
}

type SearchMediaInfoResponseVideoListMediaInfo struct     {
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Size *int64 `json:"Size" xml:"Size" require:"true"`
  Privilege *int `json:"Privilege" xml:"Privilege" require:"true"`
  Duration *int64 `json:"Duration" xml:"Duration" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CustomerId *int64 `json:"CustomerId" xml:"CustomerId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  ModifyTime *string `json:"ModifyTime" xml:"ModifyTime" require:"true"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL" require:"true"`
  CateId *int `json:"CateId" xml:"CateId" require:"true"`
  Snapshots *SearchMediaInfoResponseVideoListMediaInfoSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
}

func (s SearchMediaInfoResponseVideoListMediaInfo) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaInfoResponseVideoListMediaInfo) GoString() string {
  return s.String()
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetVideoId(v string) *SearchMediaInfoResponseVideoListMediaInfo {
  s.VideoId = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetTitle(v string) *SearchMediaInfoResponseVideoListMediaInfo {
  s.Title = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetTags(v string) *SearchMediaInfoResponseVideoListMediaInfo {
  s.Tags = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetStatus(v string) *SearchMediaInfoResponseVideoListMediaInfo {
  s.Status = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetSize(v int64) *SearchMediaInfoResponseVideoListMediaInfo {
  s.Size = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetPrivilege(v int) *SearchMediaInfoResponseVideoListMediaInfo {
  s.Privilege = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetDuration(v int64) *SearchMediaInfoResponseVideoListMediaInfo {
  s.Duration = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetDescription(v string) *SearchMediaInfoResponseVideoListMediaInfo {
  s.Description = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetCustomerId(v int64) *SearchMediaInfoResponseVideoListMediaInfo {
  s.CustomerId = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetCreateTime(v string) *SearchMediaInfoResponseVideoListMediaInfo {
  s.CreateTime = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetModifyTime(v string) *SearchMediaInfoResponseVideoListMediaInfo {
  s.ModifyTime = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetCoverURL(v string) *SearchMediaInfoResponseVideoListMediaInfo {
  s.CoverURL = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetCateId(v int) *SearchMediaInfoResponseVideoListMediaInfo {
  s.CateId = &v
  return s
}

func (s *SearchMediaInfoResponseVideoListMediaInfo) SetSnapshots(v *SearchMediaInfoResponseVideoListMediaInfoSnapshots) *SearchMediaInfoResponseVideoListMediaInfo {
  s.Snapshots = v
  return s
}

type SearchMediaInfoResponseVideoListMediaInfoSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s SearchMediaInfoResponseVideoListMediaInfoSnapshots) String() string {
  return tea.Prettify(s)
}

func (s SearchMediaInfoResponseVideoListMediaInfoSnapshots) GoString() string {
  return s.String()
}

func (s *SearchMediaInfoResponseVideoListMediaInfoSnapshots) SetSnapshot(v []*string) *SearchMediaInfoResponseVideoListMediaInfoSnapshots {
  s.Snapshot = v
  return s
}

type RefreshUploadTokenRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
}

func (s RefreshUploadTokenRequest) String() string {
  return tea.Prettify(s)
}

func (s RefreshUploadTokenRequest) GoString() string {
  return s.String()
}

func (s *RefreshUploadTokenRequest) SetAccessKeyId(v string) *RefreshUploadTokenRequest {
  s.AccessKeyId = &v
  return s
}

func (s *RefreshUploadTokenRequest) SetOwnerId(v int64) *RefreshUploadTokenRequest {
  s.OwnerId = &v
  return s
}

func (s *RefreshUploadTokenRequest) SetResourceOwnerAccount(v string) *RefreshUploadTokenRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *RefreshUploadTokenRequest) SetResourceOwnerId(v int64) *RefreshUploadTokenRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *RefreshUploadTokenRequest) SetVideoId(v string) *RefreshUploadTokenRequest {
  s.VideoId = &v
  return s
}

type RefreshUploadTokenResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  UploadKey *string `json:"UploadKey" xml:"UploadKey" require:"true"`
  UploadAddress *RefreshUploadTokenResponseUploadAddress `json:"UploadAddress" xml:"UploadAddress" require:"true" type:"Struct"`
}

func (s RefreshUploadTokenResponse) String() string {
  return tea.Prettify(s)
}

func (s RefreshUploadTokenResponse) GoString() string {
  return s.String()
}

func (s *RefreshUploadTokenResponse) SetRequestId(v string) *RefreshUploadTokenResponse {
  s.RequestId = &v
  return s
}

func (s *RefreshUploadTokenResponse) SetUploadKey(v string) *RefreshUploadTokenResponse {
  s.UploadKey = &v
  return s
}

func (s *RefreshUploadTokenResponse) SetUploadAddress(v *RefreshUploadTokenResponseUploadAddress) *RefreshUploadTokenResponse {
  s.UploadAddress = v
  return s
}

type RefreshUploadTokenResponseUploadAddress struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId" require:"true"`
  AccessKeySecret *string `json:"AccessKeySecret" xml:"AccessKeySecret" require:"true"`
  Expiration *string `json:"Expiration" xml:"Expiration" require:"true"`
  SecurityToken *string `json:"SecurityToken" xml:"SecurityToken" require:"true"`
}

func (s RefreshUploadTokenResponseUploadAddress) String() string {
  return tea.Prettify(s)
}

func (s RefreshUploadTokenResponseUploadAddress) GoString() string {
  return s.String()
}

func (s *RefreshUploadTokenResponseUploadAddress) SetAccessKeyId(v string) *RefreshUploadTokenResponseUploadAddress {
  s.AccessKeyId = &v
  return s
}

func (s *RefreshUploadTokenResponseUploadAddress) SetAccessKeySecret(v string) *RefreshUploadTokenResponseUploadAddress {
  s.AccessKeySecret = &v
  return s
}

func (s *RefreshUploadTokenResponseUploadAddress) SetExpiration(v string) *RefreshUploadTokenResponseUploadAddress {
  s.Expiration = &v
  return s
}

func (s *RefreshUploadTokenResponseUploadAddress) SetSecurityToken(v string) *RefreshUploadTokenResponseUploadAddress {
  s.SecurityToken = &v
  return s
}

type ListAllCategoryRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s ListAllCategoryRequest) String() string {
  return tea.Prettify(s)
}

func (s ListAllCategoryRequest) GoString() string {
  return s.String()
}

func (s *ListAllCategoryRequest) SetAccessKeyId(v string) *ListAllCategoryRequest {
  s.AccessKeyId = &v
  return s
}

func (s *ListAllCategoryRequest) SetOwnerId(v string) *ListAllCategoryRequest {
  s.OwnerId = &v
  return s
}

func (s *ListAllCategoryRequest) SetResourceOwnerId(v string) *ListAllCategoryRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *ListAllCategoryRequest) SetResourceOwnerAccount(v string) *ListAllCategoryRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *ListAllCategoryRequest) SetOwnerAccount(v string) *ListAllCategoryRequest {
  s.OwnerAccount = &v
  return s
}

type ListAllCategoryResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  CategoryList *ListAllCategoryResponseCategoryList `json:"CategoryList" xml:"CategoryList" require:"true" type:"Struct"`
}

func (s ListAllCategoryResponse) String() string {
  return tea.Prettify(s)
}

func (s ListAllCategoryResponse) GoString() string {
  return s.String()
}

func (s *ListAllCategoryResponse) SetRequestId(v string) *ListAllCategoryResponse {
  s.RequestId = &v
  return s
}

func (s *ListAllCategoryResponse) SetCategoryList(v *ListAllCategoryResponseCategoryList) *ListAllCategoryResponse {
  s.CategoryList = v
  return s
}

type ListAllCategoryResponseCategoryList struct {
  Category []*ListAllCategoryResponseCategoryListCategory `json:"Category" xml:"Category" require:"true" type:"Repeated"`
}

func (s ListAllCategoryResponseCategoryList) String() string {
  return tea.Prettify(s)
}

func (s ListAllCategoryResponseCategoryList) GoString() string {
  return s.String()
}

func (s *ListAllCategoryResponseCategoryList) SetCategory(v []*ListAllCategoryResponseCategoryListCategory) *ListAllCategoryResponseCategoryList {
  s.Category = v
  return s
}

type ListAllCategoryResponseCategoryListCategory struct     {
  CateId *string `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  ParentId *string `json:"ParentId" xml:"ParentId" require:"true"`
  Level *string `json:"Level" xml:"Level" require:"true"`
}

func (s ListAllCategoryResponseCategoryListCategory) String() string {
  return tea.Prettify(s)
}

func (s ListAllCategoryResponseCategoryListCategory) GoString() string {
  return s.String()
}

func (s *ListAllCategoryResponseCategoryListCategory) SetCateId(v string) *ListAllCategoryResponseCategoryListCategory {
  s.CateId = &v
  return s
}

func (s *ListAllCategoryResponseCategoryListCategory) SetCateName(v string) *ListAllCategoryResponseCategoryListCategory {
  s.CateName = &v
  return s
}

func (s *ListAllCategoryResponseCategoryListCategory) SetParentId(v string) *ListAllCategoryResponseCategoryListCategory {
  s.ParentId = &v
  return s
}

func (s *ListAllCategoryResponseCategoryListCategory) SetLevel(v string) *ListAllCategoryResponseCategoryListCategory {
  s.Level = &v
  return s
}

type GetTotalStatisRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
}

func (s GetTotalStatisRequest) String() string {
  return tea.Prettify(s)
}

func (s GetTotalStatisRequest) GoString() string {
  return s.String()
}

func (s *GetTotalStatisRequest) SetAccessKeyId(v string) *GetTotalStatisRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetTotalStatisRequest) SetOwnerId(v string) *GetTotalStatisRequest {
  s.OwnerId = &v
  return s
}

func (s *GetTotalStatisRequest) SetResourceOwnerId(v string) *GetTotalStatisRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetTotalStatisRequest) SetResourceOwnerAccount(v string) *GetTotalStatisRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetTotalStatisRequest) SetOwnerAccount(v string) *GetTotalStatisRequest {
  s.OwnerAccount = &v
  return s
}

type GetTotalStatisResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  TranscodeDuration *int64 `json:"TranscodeDuration" xml:"TranscodeDuration" require:"true"`
  StorageUtilization *int64 `json:"StorageUtilization" xml:"StorageUtilization" require:"true"`
  NetworkOut *int64 `json:"NetworkOut" xml:"NetworkOut" require:"true"`
}

func (s GetTotalStatisResponse) String() string {
  return tea.Prettify(s)
}

func (s GetTotalStatisResponse) GoString() string {
  return s.String()
}

func (s *GetTotalStatisResponse) SetRequestId(v string) *GetTotalStatisResponse {
  s.RequestId = &v
  return s
}

func (s *GetTotalStatisResponse) SetTranscodeDuration(v int64) *GetTotalStatisResponse {
  s.TranscodeDuration = &v
  return s
}

func (s *GetTotalStatisResponse) SetStorageUtilization(v int64) *GetTotalStatisResponse {
  s.StorageUtilization = &v
  return s
}

func (s *GetTotalStatisResponse) SetNetworkOut(v int64) *GetTotalStatisResponse {
  s.NetworkOut = &v
  return s
}

type UpdateMediaInfoRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  FileUrl *string `json:"FileUrl" xml:"FileUrl"`
  VideoId *string `json:"VideoId" xml:"VideoId" require:"true"`
  Title *string `json:"Title" xml:"Title"`
  Tags *string `json:"Tags" xml:"Tags"`
  Privilege *int `json:"Privilege" xml:"Privilege"`
  Password *string `json:"Password" xml:"Password"`
  Description *string `json:"Description" xml:"Description"`
  CoverURL *string `json:"CoverURL" xml:"CoverURL"`
  CateId *int `json:"CateId" xml:"CateId"`
  Duration *int64 `json:"Duration" xml:"Duration"`
  MediaWorkflowId *string `json:"MediaWorkflowId" xml:"MediaWorkflowId"`
  MediaWorkflowUserData *string `json:"MediaWorkflowUserData" xml:"MediaWorkflowUserData"`
  MediaWorkflowRunId *string `json:"MediaWorkflowRunId" xml:"MediaWorkflowRunId"`
}

func (s UpdateMediaInfoRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateMediaInfoRequest) GoString() string {
  return s.String()
}

func (s *UpdateMediaInfoRequest) SetAccessKeyId(v string) *UpdateMediaInfoRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetOwnerId(v int64) *UpdateMediaInfoRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetResourceOwnerAccount(v string) *UpdateMediaInfoRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetResourceOwnerId(v int64) *UpdateMediaInfoRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetFileUrl(v string) *UpdateMediaInfoRequest {
  s.FileUrl = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetVideoId(v string) *UpdateMediaInfoRequest {
  s.VideoId = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetTitle(v string) *UpdateMediaInfoRequest {
  s.Title = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetTags(v string) *UpdateMediaInfoRequest {
  s.Tags = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetPrivilege(v int) *UpdateMediaInfoRequest {
  s.Privilege = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetPassword(v string) *UpdateMediaInfoRequest {
  s.Password = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetDescription(v string) *UpdateMediaInfoRequest {
  s.Description = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetCoverURL(v string) *UpdateMediaInfoRequest {
  s.CoverURL = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetCateId(v int) *UpdateMediaInfoRequest {
  s.CateId = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetDuration(v int64) *UpdateMediaInfoRequest {
  s.Duration = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetMediaWorkflowId(v string) *UpdateMediaInfoRequest {
  s.MediaWorkflowId = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetMediaWorkflowUserData(v string) *UpdateMediaInfoRequest {
  s.MediaWorkflowUserData = &v
  return s
}

func (s *UpdateMediaInfoRequest) SetMediaWorkflowRunId(v string) *UpdateMediaInfoRequest {
  s.MediaWorkflowRunId = &v
  return s
}

type UpdateMediaInfoResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateMediaInfoResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateMediaInfoResponse) GoString() string {
  return s.String()
}

func (s *UpdateMediaInfoResponse) SetRequestId(v string) *UpdateMediaInfoResponse {
  s.RequestId = &v
  return s
}

type UpdateMediaCategoryRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  CateId *string `json:"CateId" xml:"CateId" require:"true"`
}

func (s UpdateMediaCategoryRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateMediaCategoryRequest) GoString() string {
  return s.String()
}

func (s *UpdateMediaCategoryRequest) SetAccessKeyId(v string) *UpdateMediaCategoryRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateMediaCategoryRequest) SetOwnerId(v string) *UpdateMediaCategoryRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateMediaCategoryRequest) SetResourceOwnerId(v string) *UpdateMediaCategoryRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateMediaCategoryRequest) SetResourceOwnerAccount(v string) *UpdateMediaCategoryRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateMediaCategoryRequest) SetOwnerAccount(v string) *UpdateMediaCategoryRequest {
  s.OwnerAccount = &v
  return s
}

func (s *UpdateMediaCategoryRequest) SetMediaId(v string) *UpdateMediaCategoryRequest {
  s.MediaId = &v
  return s
}

func (s *UpdateMediaCategoryRequest) SetCateId(v string) *UpdateMediaCategoryRequest {
  s.CateId = &v
  return s
}

type UpdateMediaCategoryResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Media *UpdateMediaCategoryResponseMedia `json:"Media" xml:"Media" require:"true" type:"Struct"`
}

func (s UpdateMediaCategoryResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateMediaCategoryResponse) GoString() string {
  return s.String()
}

func (s *UpdateMediaCategoryResponse) SetRequestId(v string) *UpdateMediaCategoryResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateMediaCategoryResponse) SetMedia(v *UpdateMediaCategoryResponseMedia) *UpdateMediaCategoryResponse {
  s.Media = v
  return s
}

type UpdateMediaCategoryResponseMedia struct {
  MediaId *string `json:"MediaId" xml:"MediaId" require:"true"`
  Title *string `json:"Title" xml:"Title" require:"true"`
  Description *string `json:"Description" xml:"Description" require:"true"`
  CoverUrl *string `json:"CoverUrl" xml:"CoverUrl" require:"true"`
  CateId *int64 `json:"CateId" xml:"CateId" require:"true"`
  Tags *string `json:"Tags" xml:"Tags" require:"true"`
  Duration *string `json:"Duration" xml:"Duration" require:"true"`
  FileSize *string `json:"FileSize" xml:"FileSize" require:"true"`
  State *int `json:"State" xml:"State" require:"true"`
  MediaWorkflowRunId *string `json:"MediaWorkflowRunId" xml:"MediaWorkflowRunId" require:"true"`
  CreateTime *string `json:"CreateTime" xml:"CreateTime" require:"true"`
  CreateIp *string `json:"CreateIp" xml:"CreateIp" require:"true"`
  MediaWorkflowId *string `json:"MediaWorkflowId" xml:"MediaWorkflowId" require:"true"`
  PublicType *int `json:"PublicType" xml:"PublicType" require:"true"`
  Snapshots *UpdateMediaCategoryResponseMediaSnapshots `json:"Snapshots" xml:"Snapshots" require:"true" type:"Struct"`
}

func (s UpdateMediaCategoryResponseMedia) String() string {
  return tea.Prettify(s)
}

func (s UpdateMediaCategoryResponseMedia) GoString() string {
  return s.String()
}

func (s *UpdateMediaCategoryResponseMedia) SetMediaId(v string) *UpdateMediaCategoryResponseMedia {
  s.MediaId = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetTitle(v string) *UpdateMediaCategoryResponseMedia {
  s.Title = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetDescription(v string) *UpdateMediaCategoryResponseMedia {
  s.Description = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetCoverUrl(v string) *UpdateMediaCategoryResponseMedia {
  s.CoverUrl = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetCateId(v int64) *UpdateMediaCategoryResponseMedia {
  s.CateId = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetTags(v string) *UpdateMediaCategoryResponseMedia {
  s.Tags = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetDuration(v string) *UpdateMediaCategoryResponseMedia {
  s.Duration = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetFileSize(v string) *UpdateMediaCategoryResponseMedia {
  s.FileSize = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetState(v int) *UpdateMediaCategoryResponseMedia {
  s.State = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetMediaWorkflowRunId(v string) *UpdateMediaCategoryResponseMedia {
  s.MediaWorkflowRunId = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetCreateTime(v string) *UpdateMediaCategoryResponseMedia {
  s.CreateTime = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetCreateIp(v string) *UpdateMediaCategoryResponseMedia {
  s.CreateIp = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetMediaWorkflowId(v string) *UpdateMediaCategoryResponseMedia {
  s.MediaWorkflowId = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetPublicType(v int) *UpdateMediaCategoryResponseMedia {
  s.PublicType = &v
  return s
}

func (s *UpdateMediaCategoryResponseMedia) SetSnapshots(v *UpdateMediaCategoryResponseMediaSnapshots) *UpdateMediaCategoryResponseMedia {
  s.Snapshots = v
  return s
}

type UpdateMediaCategoryResponseMediaSnapshots struct {
  Snapshot []*string `json:"Snapshot" xml:"Snapshot" require:"true" type:"Repeated"`
}

func (s UpdateMediaCategoryResponseMediaSnapshots) String() string {
  return tea.Prettify(s)
}

func (s UpdateMediaCategoryResponseMediaSnapshots) GoString() string {
  return s.String()
}

func (s *UpdateMediaCategoryResponseMediaSnapshots) SetSnapshot(v []*string) *UpdateMediaCategoryResponseMediaSnapshots {
  s.Snapshot = v
  return s
}

type UpdateCategoryNameRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *string `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerId *string `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  OwnerAccount *string `json:"OwnerAccount" xml:"OwnerAccount"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  CateId *string `json:"CateId" xml:"CateId" require:"true"`
}

func (s UpdateCategoryNameRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateCategoryNameRequest) GoString() string {
  return s.String()
}

func (s *UpdateCategoryNameRequest) SetAccessKeyId(v string) *UpdateCategoryNameRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateCategoryNameRequest) SetOwnerId(v string) *UpdateCategoryNameRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateCategoryNameRequest) SetResourceOwnerId(v string) *UpdateCategoryNameRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateCategoryNameRequest) SetResourceOwnerAccount(v string) *UpdateCategoryNameRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateCategoryNameRequest) SetOwnerAccount(v string) *UpdateCategoryNameRequest {
  s.OwnerAccount = &v
  return s
}

func (s *UpdateCategoryNameRequest) SetCateName(v string) *UpdateCategoryNameRequest {
  s.CateName = &v
  return s
}

func (s *UpdateCategoryNameRequest) SetCateId(v string) *UpdateCategoryNameRequest {
  s.CateId = &v
  return s
}

type UpdateCategoryNameResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Category *UpdateCategoryNameResponseCategory `json:"Category" xml:"Category" require:"true" type:"Struct"`
}

func (s UpdateCategoryNameResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateCategoryNameResponse) GoString() string {
  return s.String()
}

func (s *UpdateCategoryNameResponse) SetRequestId(v string) *UpdateCategoryNameResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateCategoryNameResponse) SetCategory(v *UpdateCategoryNameResponseCategory) *UpdateCategoryNameResponse {
  s.Category = v
  return s
}

type UpdateCategoryNameResponseCategory struct {
  CateId *string `json:"CateId" xml:"CateId" require:"true"`
  CateName *string `json:"CateName" xml:"CateName" require:"true"`
  ParentId *string `json:"ParentId" xml:"ParentId" require:"true"`
  Level *string `json:"Level" xml:"Level" require:"true"`
}

func (s UpdateCategoryNameResponseCategory) String() string {
  return tea.Prettify(s)
}

func (s UpdateCategoryNameResponseCategory) GoString() string {
  return s.String()
}

func (s *UpdateCategoryNameResponseCategory) SetCateId(v string) *UpdateCategoryNameResponseCategory {
  s.CateId = &v
  return s
}

func (s *UpdateCategoryNameResponseCategory) SetCateName(v string) *UpdateCategoryNameResponseCategory {
  s.CateName = &v
  return s
}

func (s *UpdateCategoryNameResponseCategory) SetParentId(v string) *UpdateCategoryNameResponseCategory {
  s.ParentId = &v
  return s
}

func (s *UpdateCategoryNameResponseCategory) SetLevel(v string) *UpdateCategoryNameResponseCategory {
  s.Level = &v
  return s
}

type AddWatermarkRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  HorizontalOffet *string `json:"HorizontalOffet" xml:"HorizontalOffet"`
  HorizontalOffset *string `json:"HorizontalOffset" xml:"HorizontalOffset"`
  VerticalOffset *string `json:"VerticalOffset" xml:"VerticalOffset"`
  Position *string `json:"Position" xml:"Position"`
  Type *string `json:"Type" xml:"Type"`
  Bucket *string `json:"Bucket" xml:"Bucket"`
  Object *string `json:"Object" xml:"Object"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Width *string `json:"Width" xml:"Width"`
  Height *string `json:"Height" xml:"Height"`
  Active *string `json:"Active" xml:"Active"`
  ScreenMode *string `json:"ScreenMode" xml:"ScreenMode"`
  VideoWidth *int `json:"VideoWidth" xml:"VideoWidth"`
  VideoHeight *int `json:"VideoHeight" xml:"VideoHeight"`
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig"`
  FileUrl *string `json:"FileUrl" xml:"FileUrl"`
  ScreenWidth *int `json:"ScreenWidth" xml:"ScreenWidth"`
  ScreenHeight *int `json:"ScreenHeight" xml:"ScreenHeight"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s AddWatermarkRequest) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkRequest) GoString() string {
  return s.String()
}

func (s *AddWatermarkRequest) SetAccessKeyId(v string) *AddWatermarkRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddWatermarkRequest) SetOwnerId(v int64) *AddWatermarkRequest {
  s.OwnerId = &v
  return s
}

func (s *AddWatermarkRequest) SetResourceOwnerAccount(v string) *AddWatermarkRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddWatermarkRequest) SetResourceOwnerId(v int64) *AddWatermarkRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddWatermarkRequest) SetHorizontalOffet(v string) *AddWatermarkRequest {
  s.HorizontalOffet = &v
  return s
}

func (s *AddWatermarkRequest) SetHorizontalOffset(v string) *AddWatermarkRequest {
  s.HorizontalOffset = &v
  return s
}

func (s *AddWatermarkRequest) SetVerticalOffset(v string) *AddWatermarkRequest {
  s.VerticalOffset = &v
  return s
}

func (s *AddWatermarkRequest) SetPosition(v string) *AddWatermarkRequest {
  s.Position = &v
  return s
}

func (s *AddWatermarkRequest) SetType(v string) *AddWatermarkRequest {
  s.Type = &v
  return s
}

func (s *AddWatermarkRequest) SetBucket(v string) *AddWatermarkRequest {
  s.Bucket = &v
  return s
}

func (s *AddWatermarkRequest) SetObject(v string) *AddWatermarkRequest {
  s.Object = &v
  return s
}

func (s *AddWatermarkRequest) SetName(v string) *AddWatermarkRequest {
  s.Name = &v
  return s
}

func (s *AddWatermarkRequest) SetWidth(v string) *AddWatermarkRequest {
  s.Width = &v
  return s
}

func (s *AddWatermarkRequest) SetHeight(v string) *AddWatermarkRequest {
  s.Height = &v
  return s
}

func (s *AddWatermarkRequest) SetActive(v string) *AddWatermarkRequest {
  s.Active = &v
  return s
}

func (s *AddWatermarkRequest) SetScreenMode(v string) *AddWatermarkRequest {
  s.ScreenMode = &v
  return s
}

func (s *AddWatermarkRequest) SetVideoWidth(v int) *AddWatermarkRequest {
  s.VideoWidth = &v
  return s
}

func (s *AddWatermarkRequest) SetVideoHeight(v int) *AddWatermarkRequest {
  s.VideoHeight = &v
  return s
}

func (s *AddWatermarkRequest) SetWatermarkConfig(v string) *AddWatermarkRequest {
  s.WatermarkConfig = &v
  return s
}

func (s *AddWatermarkRequest) SetFileUrl(v string) *AddWatermarkRequest {
  s.FileUrl = &v
  return s
}

func (s *AddWatermarkRequest) SetScreenWidth(v int) *AddWatermarkRequest {
  s.ScreenWidth = &v
  return s
}

func (s *AddWatermarkRequest) SetScreenHeight(v int) *AddWatermarkRequest {
  s.ScreenHeight = &v
  return s
}

func (s *AddWatermarkRequest) SetResourceRealOwnerId(v int64) *AddWatermarkRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type AddWatermarkResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Watermark *AddWatermarkResponseWatermark `json:"Watermark" xml:"Watermark" require:"true" type:"Struct"`
  WatermarkInfo *AddWatermarkResponseWatermarkInfo `json:"WatermarkInfo" xml:"WatermarkInfo" require:"true" type:"Struct"`
}

func (s AddWatermarkResponse) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkResponse) GoString() string {
  return s.String()
}

func (s *AddWatermarkResponse) SetRequestId(v string) *AddWatermarkResponse {
  s.RequestId = &v
  return s
}

func (s *AddWatermarkResponse) SetWatermark(v *AddWatermarkResponseWatermark) *AddWatermarkResponse {
  s.Watermark = v
  return s
}

func (s *AddWatermarkResponse) SetWatermarkInfo(v *AddWatermarkResponseWatermarkInfo) *AddWatermarkResponse {
  s.WatermarkInfo = v
  return s
}

type AddWatermarkResponseWatermark struct {
  CreateTime *int `json:"CreateTime" xml:"CreateTime" require:"true"`
  HorizontalOffset *string `json:"HorizontalOffset" xml:"HorizontalOffset" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  Position *string `json:"Position" xml:"Position" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  VerticalOffset *string `json:"VerticalOffset" xml:"VerticalOffset" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
  VideoHeight *int `json:"VideoHeight" xml:"VideoHeight" require:"true"`
  VideoWidth *int `json:"VideoWidth" xml:"VideoWidth" require:"true"`
  ScreenMode *string `json:"ScreenMode" xml:"ScreenMode" require:"true"`
}

func (s AddWatermarkResponseWatermark) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkResponseWatermark) GoString() string {
  return s.String()
}

func (s *AddWatermarkResponseWatermark) SetCreateTime(v int) *AddWatermarkResponseWatermark {
  s.CreateTime = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetHorizontalOffset(v string) *AddWatermarkResponseWatermark {
  s.HorizontalOffset = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetIsDefault(v string) *AddWatermarkResponseWatermark {
  s.IsDefault = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetPosition(v string) *AddWatermarkResponseWatermark {
  s.Position = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetWatermarkId(v string) *AddWatermarkResponseWatermark {
  s.WatermarkId = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetVerticalOffset(v string) *AddWatermarkResponseWatermark {
  s.VerticalOffset = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetName(v string) *AddWatermarkResponseWatermark {
  s.Name = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetWidth(v string) *AddWatermarkResponseWatermark {
  s.Width = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetHeight(v string) *AddWatermarkResponseWatermark {
  s.Height = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetUrl(v string) *AddWatermarkResponseWatermark {
  s.Url = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetVideoHeight(v int) *AddWatermarkResponseWatermark {
  s.VideoHeight = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetVideoWidth(v int) *AddWatermarkResponseWatermark {
  s.VideoWidth = &v
  return s
}

func (s *AddWatermarkResponseWatermark) SetScreenMode(v string) *AddWatermarkResponseWatermark {
  s.ScreenMode = &v
  return s
}

type AddWatermarkResponseWatermarkInfo struct {
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  ScreenWidth *int `json:"ScreenWidth" xml:"ScreenWidth" require:"true"`
  ScreenHeight *int `json:"ScreenHeight" xml:"ScreenHeight" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  FileUrl *string `json:"FileUrl" xml:"FileUrl" require:"true"`
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig" require:"true"`
}

func (s AddWatermarkResponseWatermarkInfo) String() string {
  return tea.Prettify(s)
}

func (s AddWatermarkResponseWatermarkInfo) GoString() string {
  return s.String()
}

func (s *AddWatermarkResponseWatermarkInfo) SetCreationTime(v string) *AddWatermarkResponseWatermarkInfo {
  s.CreationTime = &v
  return s
}

func (s *AddWatermarkResponseWatermarkInfo) SetType(v string) *AddWatermarkResponseWatermarkInfo {
  s.Type = &v
  return s
}

func (s *AddWatermarkResponseWatermarkInfo) SetIsDefault(v string) *AddWatermarkResponseWatermarkInfo {
  s.IsDefault = &v
  return s
}

func (s *AddWatermarkResponseWatermarkInfo) SetWatermarkId(v string) *AddWatermarkResponseWatermarkInfo {
  s.WatermarkId = &v
  return s
}

func (s *AddWatermarkResponseWatermarkInfo) SetScreenWidth(v int) *AddWatermarkResponseWatermarkInfo {
  s.ScreenWidth = &v
  return s
}

func (s *AddWatermarkResponseWatermarkInfo) SetScreenHeight(v int) *AddWatermarkResponseWatermarkInfo {
  s.ScreenHeight = &v
  return s
}

func (s *AddWatermarkResponseWatermarkInfo) SetName(v string) *AddWatermarkResponseWatermarkInfo {
  s.Name = &v
  return s
}

func (s *AddWatermarkResponseWatermarkInfo) SetFileUrl(v string) *AddWatermarkResponseWatermarkInfo {
  s.FileUrl = &v
  return s
}

func (s *AddWatermarkResponseWatermarkInfo) SetWatermarkConfig(v string) *AddWatermarkResponseWatermarkInfo {
  s.WatermarkConfig = &v
  return s
}

type AddTranscodeTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Muxer *string `json:"Muxer" xml:"Muxer" require:"true"`
  Resolution *string `json:"Resolution" xml:"Resolution" require:"true"`
  Detail *string `json:"Detail" xml:"Detail" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  VideoBitrate *string `json:"VideoBitrate" xml:"VideoBitrate" require:"true"`
  VideoCodec *string `json:"VideoCodec" xml:"VideoCodec" require:"true"`
  AudioBitrate *string `json:"AudioBitrate" xml:"AudioBitrate" require:"true"`
  AudioCodec *string `json:"AudioCodec" xml:"AudioCodec" require:"true"`
}

func (s AddTranscodeTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s AddTranscodeTemplateRequest) GoString() string {
  return s.String()
}

func (s *AddTranscodeTemplateRequest) SetAccessKeyId(v string) *AddTranscodeTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetOwnerId(v int64) *AddTranscodeTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetResourceOwnerAccount(v string) *AddTranscodeTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetResourceOwnerId(v int64) *AddTranscodeTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetMuxer(v string) *AddTranscodeTemplateRequest {
  s.Muxer = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetResolution(v string) *AddTranscodeTemplateRequest {
  s.Resolution = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetDetail(v string) *AddTranscodeTemplateRequest {
  s.Detail = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetName(v string) *AddTranscodeTemplateRequest {
  s.Name = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetVideoBitrate(v string) *AddTranscodeTemplateRequest {
  s.VideoBitrate = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetVideoCodec(v string) *AddTranscodeTemplateRequest {
  s.VideoCodec = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetAudioBitrate(v string) *AddTranscodeTemplateRequest {
  s.AudioBitrate = &v
  return s
}

func (s *AddTranscodeTemplateRequest) SetAudioCodec(v string) *AddTranscodeTemplateRequest {
  s.AudioCodec = &v
  return s
}

type AddTranscodeTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddTranscodeTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s AddTranscodeTemplateResponse) GoString() string {
  return s.String()
}

func (s *AddTranscodeTemplateResponse) SetRequestId(v string) *AddTranscodeTemplateResponse {
  s.RequestId = &v
  return s
}

type AddSnapshotRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Time *string `json:"Time" xml:"Time" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Number *string `json:"Number" xml:"Number" require:"true"`
}

func (s AddSnapshotRequest) String() string {
  return tea.Prettify(s)
}

func (s AddSnapshotRequest) GoString() string {
  return s.String()
}

func (s *AddSnapshotRequest) SetAccessKeyId(v string) *AddSnapshotRequest {
  s.AccessKeyId = &v
  return s
}

func (s *AddSnapshotRequest) SetOwnerId(v int64) *AddSnapshotRequest {
  s.OwnerId = &v
  return s
}

func (s *AddSnapshotRequest) SetResourceOwnerAccount(v string) *AddSnapshotRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *AddSnapshotRequest) SetResourceOwnerId(v int64) *AddSnapshotRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *AddSnapshotRequest) SetTime(v string) *AddSnapshotRequest {
  s.Time = &v
  return s
}

func (s *AddSnapshotRequest) SetHeight(v string) *AddSnapshotRequest {
  s.Height = &v
  return s
}

func (s *AddSnapshotRequest) SetWidth(v string) *AddSnapshotRequest {
  s.Width = &v
  return s
}

func (s *AddSnapshotRequest) SetNumber(v string) *AddSnapshotRequest {
  s.Number = &v
  return s
}

type AddSnapshotResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s AddSnapshotResponse) String() string {
  return tea.Prettify(s)
}

func (s AddSnapshotResponse) GoString() string {
  return s.String()
}

func (s *AddSnapshotResponse) SetRequestId(v string) *AddSnapshotResponse {
  s.RequestId = &v
  return s
}

type GetCustomerTranscodeConfRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
}

func (s GetCustomerTranscodeConfRequest) String() string {
  return tea.Prettify(s)
}

func (s GetCustomerTranscodeConfRequest) GoString() string {
  return s.String()
}

func (s *GetCustomerTranscodeConfRequest) SetAccessKeyId(v string) *GetCustomerTranscodeConfRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetCustomerTranscodeConfRequest) SetOwnerId(v int64) *GetCustomerTranscodeConfRequest {
  s.OwnerId = &v
  return s
}

func (s *GetCustomerTranscodeConfRequest) SetResourceOwnerAccount(v string) *GetCustomerTranscodeConfRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetCustomerTranscodeConfRequest) SetResourceOwnerId(v int64) *GetCustomerTranscodeConfRequest {
  s.ResourceOwnerId = &v
  return s
}

type GetCustomerTranscodeConfResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Templates *GetCustomerTranscodeConfResponseTemplates `json:"Templates" xml:"Templates" require:"true" type:"Struct"`
}

func (s GetCustomerTranscodeConfResponse) String() string {
  return tea.Prettify(s)
}

func (s GetCustomerTranscodeConfResponse) GoString() string {
  return s.String()
}

func (s *GetCustomerTranscodeConfResponse) SetRequestId(v string) *GetCustomerTranscodeConfResponse {
  s.RequestId = &v
  return s
}

func (s *GetCustomerTranscodeConfResponse) SetTemplates(v *GetCustomerTranscodeConfResponseTemplates) *GetCustomerTranscodeConfResponse {
  s.Templates = v
  return s
}

type GetCustomerTranscodeConfResponseTemplates struct {
  Template []*GetCustomerTranscodeConfResponseTemplatesTemplate `json:"Template" xml:"Template" require:"true" type:"Repeated"`
}

func (s GetCustomerTranscodeConfResponseTemplates) String() string {
  return tea.Prettify(s)
}

func (s GetCustomerTranscodeConfResponseTemplates) GoString() string {
  return s.String()
}

func (s *GetCustomerTranscodeConfResponseTemplates) SetTemplate(v []*GetCustomerTranscodeConfResponseTemplatesTemplate) *GetCustomerTranscodeConfResponseTemplates {
  s.Template = v
  return s
}

type GetCustomerTranscodeConfResponseTemplatesTemplate struct     {
  Id *string `json:"Id" xml:"Id" require:"true"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
  TemplateId *string `json:"TemplateId" xml:"TemplateId" require:"true"`
  MtstemplateId *string `json:"MtstemplateId" xml:"MtstemplateId" require:"true"`
  Status *string `json:"Status" xml:"Status" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  Encrypt *string `json:"Encrypt" xml:"Encrypt" require:"true"`
}

func (s GetCustomerTranscodeConfResponseTemplatesTemplate) String() string {
  return tea.Prettify(s)
}

func (s GetCustomerTranscodeConfResponseTemplatesTemplate) GoString() string {
  return s.String()
}

func (s *GetCustomerTranscodeConfResponseTemplatesTemplate) SetId(v string) *GetCustomerTranscodeConfResponseTemplatesTemplate {
  s.Id = &v
  return s
}

func (s *GetCustomerTranscodeConfResponseTemplatesTemplate) SetCustomerId(v string) *GetCustomerTranscodeConfResponseTemplatesTemplate {
  s.CustomerId = &v
  return s
}

func (s *GetCustomerTranscodeConfResponseTemplatesTemplate) SetTemplateId(v string) *GetCustomerTranscodeConfResponseTemplatesTemplate {
  s.TemplateId = &v
  return s
}

func (s *GetCustomerTranscodeConfResponseTemplatesTemplate) SetMtstemplateId(v string) *GetCustomerTranscodeConfResponseTemplatesTemplate {
  s.MtstemplateId = &v
  return s
}

func (s *GetCustomerTranscodeConfResponseTemplatesTemplate) SetStatus(v string) *GetCustomerTranscodeConfResponseTemplatesTemplate {
  s.Status = &v
  return s
}

func (s *GetCustomerTranscodeConfResponseTemplatesTemplate) SetName(v string) *GetCustomerTranscodeConfResponseTemplatesTemplate {
  s.Name = &v
  return s
}

func (s *GetCustomerTranscodeConfResponseTemplatesTemplate) SetEncrypt(v string) *GetCustomerTranscodeConfResponseTemplatesTemplate {
  s.Encrypt = &v
  return s
}

type DeleteWatermarkRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
}

func (s DeleteWatermarkRequest) String() string {
  return tea.Prettify(s)
}

func (s DeleteWatermarkRequest) GoString() string {
  return s.String()
}

func (s *DeleteWatermarkRequest) SetAccessKeyId(v string) *DeleteWatermarkRequest {
  s.AccessKeyId = &v
  return s
}

func (s *DeleteWatermarkRequest) SetOwnerId(v int64) *DeleteWatermarkRequest {
  s.OwnerId = &v
  return s
}

func (s *DeleteWatermarkRequest) SetResourceOwnerAccount(v string) *DeleteWatermarkRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *DeleteWatermarkRequest) SetResourceOwnerId(v int64) *DeleteWatermarkRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *DeleteWatermarkRequest) SetWatermarkId(v string) *DeleteWatermarkRequest {
  s.WatermarkId = &v
  return s
}

type DeleteWatermarkResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s DeleteWatermarkResponse) String() string {
  return tea.Prettify(s)
}

func (s DeleteWatermarkResponse) GoString() string {
  return s.String()
}

func (s *DeleteWatermarkResponse) SetRequestId(v string) *DeleteWatermarkResponse {
  s.RequestId = &v
  return s
}

type GetWatermarkRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
}

func (s GetWatermarkRequest) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkRequest) GoString() string {
  return s.String()
}

func (s *GetWatermarkRequest) SetAccessKeyId(v string) *GetWatermarkRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetWatermarkRequest) SetOwnerId(v int64) *GetWatermarkRequest {
  s.OwnerId = &v
  return s
}

func (s *GetWatermarkRequest) SetResourceOwnerAccount(v string) *GetWatermarkRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetWatermarkRequest) SetResourceOwnerId(v int64) *GetWatermarkRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *GetWatermarkRequest) SetWatermarkId(v string) *GetWatermarkRequest {
  s.WatermarkId = &v
  return s
}

type GetWatermarkResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Watermark *GetWatermarkResponseWatermark `json:"Watermark" xml:"Watermark" require:"true" type:"Struct"`
  WatermarkInfo *GetWatermarkResponseWatermarkInfo `json:"WatermarkInfo" xml:"WatermarkInfo" require:"true" type:"Struct"`
}

func (s GetWatermarkResponse) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkResponse) GoString() string {
  return s.String()
}

func (s *GetWatermarkResponse) SetRequestId(v string) *GetWatermarkResponse {
  s.RequestId = &v
  return s
}

func (s *GetWatermarkResponse) SetWatermark(v *GetWatermarkResponseWatermark) *GetWatermarkResponse {
  s.Watermark = v
  return s
}

func (s *GetWatermarkResponse) SetWatermarkInfo(v *GetWatermarkResponseWatermarkInfo) *GetWatermarkResponse {
  s.WatermarkInfo = v
  return s
}

type GetWatermarkResponseWatermark struct {
  CreateTime *int `json:"CreateTime" xml:"CreateTime" require:"true"`
  HorizontalOffset *string `json:"HorizontalOffset" xml:"HorizontalOffset" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  Position *string `json:"Position" xml:"Position" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  VerticalOffset *string `json:"VerticalOffset" xml:"VerticalOffset" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  Active *string `json:"Active" xml:"Active" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  VideoHeight *int `json:"VideoHeight" xml:"VideoHeight" require:"true"`
  VideoWidth *int `json:"VideoWidth" xml:"VideoWidth" require:"true"`
  ScreenMode *string `json:"ScreenMode" xml:"ScreenMode" require:"true"`
}

func (s GetWatermarkResponseWatermark) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkResponseWatermark) GoString() string {
  return s.String()
}

func (s *GetWatermarkResponseWatermark) SetCreateTime(v int) *GetWatermarkResponseWatermark {
  s.CreateTime = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetHorizontalOffset(v string) *GetWatermarkResponseWatermark {
  s.HorizontalOffset = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetIsDefault(v string) *GetWatermarkResponseWatermark {
  s.IsDefault = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetPosition(v string) *GetWatermarkResponseWatermark {
  s.Position = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetWatermarkId(v string) *GetWatermarkResponseWatermark {
  s.WatermarkId = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetVerticalOffset(v string) *GetWatermarkResponseWatermark {
  s.VerticalOffset = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetWidth(v string) *GetWatermarkResponseWatermark {
  s.Width = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetHeight(v string) *GetWatermarkResponseWatermark {
  s.Height = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetActive(v string) *GetWatermarkResponseWatermark {
  s.Active = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetUrl(v string) *GetWatermarkResponseWatermark {
  s.Url = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetName(v string) *GetWatermarkResponseWatermark {
  s.Name = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetVideoHeight(v int) *GetWatermarkResponseWatermark {
  s.VideoHeight = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetVideoWidth(v int) *GetWatermarkResponseWatermark {
  s.VideoWidth = &v
  return s
}

func (s *GetWatermarkResponseWatermark) SetScreenMode(v string) *GetWatermarkResponseWatermark {
  s.ScreenMode = &v
  return s
}

type GetWatermarkResponseWatermarkInfo struct {
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  ScreenWidth *int `json:"ScreenWidth" xml:"ScreenWidth" require:"true"`
  ScreenHeight *int `json:"ScreenHeight" xml:"ScreenHeight" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  FileUrl *string `json:"FileUrl" xml:"FileUrl" require:"true"`
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig" require:"true"`
}

func (s GetWatermarkResponseWatermarkInfo) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkResponseWatermarkInfo) GoString() string {
  return s.String()
}

func (s *GetWatermarkResponseWatermarkInfo) SetCreationTime(v string) *GetWatermarkResponseWatermarkInfo {
  s.CreationTime = &v
  return s
}

func (s *GetWatermarkResponseWatermarkInfo) SetType(v string) *GetWatermarkResponseWatermarkInfo {
  s.Type = &v
  return s
}

func (s *GetWatermarkResponseWatermarkInfo) SetIsDefault(v string) *GetWatermarkResponseWatermarkInfo {
  s.IsDefault = &v
  return s
}

func (s *GetWatermarkResponseWatermarkInfo) SetWatermarkId(v string) *GetWatermarkResponseWatermarkInfo {
  s.WatermarkId = &v
  return s
}

func (s *GetWatermarkResponseWatermarkInfo) SetScreenWidth(v int) *GetWatermarkResponseWatermarkInfo {
  s.ScreenWidth = &v
  return s
}

func (s *GetWatermarkResponseWatermarkInfo) SetScreenHeight(v int) *GetWatermarkResponseWatermarkInfo {
  s.ScreenHeight = &v
  return s
}

func (s *GetWatermarkResponseWatermarkInfo) SetName(v string) *GetWatermarkResponseWatermarkInfo {
  s.Name = &v
  return s
}

func (s *GetWatermarkResponseWatermarkInfo) SetFileUrl(v string) *GetWatermarkResponseWatermarkInfo {
  s.FileUrl = &v
  return s
}

func (s *GetWatermarkResponseWatermarkInfo) SetWatermarkConfig(v string) *GetWatermarkResponseWatermarkInfo {
  s.WatermarkConfig = &v
  return s
}

type GetWatermarksRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
}

func (s GetWatermarksRequest) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarksRequest) GoString() string {
  return s.String()
}

func (s *GetWatermarksRequest) SetAccessKeyId(v string) *GetWatermarksRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetWatermarksRequest) SetOwnerId(v int64) *GetWatermarksRequest {
  s.OwnerId = &v
  return s
}

func (s *GetWatermarksRequest) SetResourceOwnerAccount(v string) *GetWatermarksRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetWatermarksRequest) SetResourceOwnerId(v int64) *GetWatermarksRequest {
  s.ResourceOwnerId = &v
  return s
}

type GetWatermarksResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Watermarks *GetWatermarksResponseWatermarks `json:"Watermarks" xml:"Watermarks" require:"true" type:"Struct"`
  WatermarkInfos *GetWatermarksResponseWatermarkInfos `json:"WatermarkInfos" xml:"WatermarkInfos" require:"true" type:"Struct"`
}

func (s GetWatermarksResponse) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarksResponse) GoString() string {
  return s.String()
}

func (s *GetWatermarksResponse) SetRequestId(v string) *GetWatermarksResponse {
  s.RequestId = &v
  return s
}

func (s *GetWatermarksResponse) SetWatermarks(v *GetWatermarksResponseWatermarks) *GetWatermarksResponse {
  s.Watermarks = v
  return s
}

func (s *GetWatermarksResponse) SetWatermarkInfos(v *GetWatermarksResponseWatermarkInfos) *GetWatermarksResponse {
  s.WatermarkInfos = v
  return s
}

type GetWatermarksResponseWatermarks struct {
  Watermark []*GetWatermarksResponseWatermarksWatermark `json:"Watermark" xml:"Watermark" require:"true" type:"Repeated"`
}

func (s GetWatermarksResponseWatermarks) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarksResponseWatermarks) GoString() string {
  return s.String()
}

func (s *GetWatermarksResponseWatermarks) SetWatermark(v []*GetWatermarksResponseWatermarksWatermark) *GetWatermarksResponseWatermarks {
  s.Watermark = v
  return s
}

type GetWatermarksResponseWatermarksWatermark struct     {
  CreateTime *int `json:"CreateTime" xml:"CreateTime" require:"true"`
  HorizontalOffset *string `json:"HorizontalOffset" xml:"HorizontalOffset" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  Position *string `json:"Position" xml:"Position" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  VerticalOffset *string `json:"VerticalOffset" xml:"VerticalOffset" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  Active *string `json:"Active" xml:"Active" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  VideoHeight *int `json:"VideoHeight" xml:"VideoHeight" require:"true"`
  VideoWidth *int `json:"VideoWidth" xml:"VideoWidth" require:"true"`
  ScreenMode *string `json:"ScreenMode" xml:"ScreenMode" require:"true"`
}

func (s GetWatermarksResponseWatermarksWatermark) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarksResponseWatermarksWatermark) GoString() string {
  return s.String()
}

func (s *GetWatermarksResponseWatermarksWatermark) SetCreateTime(v int) *GetWatermarksResponseWatermarksWatermark {
  s.CreateTime = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetHorizontalOffset(v string) *GetWatermarksResponseWatermarksWatermark {
  s.HorizontalOffset = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetIsDefault(v string) *GetWatermarksResponseWatermarksWatermark {
  s.IsDefault = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetPosition(v string) *GetWatermarksResponseWatermarksWatermark {
  s.Position = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetWatermarkId(v string) *GetWatermarksResponseWatermarksWatermark {
  s.WatermarkId = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetVerticalOffset(v string) *GetWatermarksResponseWatermarksWatermark {
  s.VerticalOffset = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetWidth(v string) *GetWatermarksResponseWatermarksWatermark {
  s.Width = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetHeight(v string) *GetWatermarksResponseWatermarksWatermark {
  s.Height = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetActive(v string) *GetWatermarksResponseWatermarksWatermark {
  s.Active = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetUrl(v string) *GetWatermarksResponseWatermarksWatermark {
  s.Url = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetName(v string) *GetWatermarksResponseWatermarksWatermark {
  s.Name = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetVideoHeight(v int) *GetWatermarksResponseWatermarksWatermark {
  s.VideoHeight = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetVideoWidth(v int) *GetWatermarksResponseWatermarksWatermark {
  s.VideoWidth = &v
  return s
}

func (s *GetWatermarksResponseWatermarksWatermark) SetScreenMode(v string) *GetWatermarksResponseWatermarksWatermark {
  s.ScreenMode = &v
  return s
}

type GetWatermarksResponseWatermarkInfos struct {
  WatermarkInfo []*GetWatermarksResponseWatermarkInfosWatermarkInfo `json:"WatermarkInfo" xml:"WatermarkInfo" require:"true" type:"Repeated"`
}

func (s GetWatermarksResponseWatermarkInfos) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarksResponseWatermarkInfos) GoString() string {
  return s.String()
}

func (s *GetWatermarksResponseWatermarkInfos) SetWatermarkInfo(v []*GetWatermarksResponseWatermarkInfosWatermarkInfo) *GetWatermarksResponseWatermarkInfos {
  s.WatermarkInfo = v
  return s
}

type GetWatermarksResponseWatermarkInfosWatermarkInfo struct     {
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  ScreenWidth *int `json:"ScreenWidth" xml:"ScreenWidth" require:"true"`
  ScreenHeight *int `json:"ScreenHeight" xml:"ScreenHeight" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  FileUrl *string `json:"FileUrl" xml:"FileUrl" require:"true"`
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig" require:"true"`
}

func (s GetWatermarksResponseWatermarkInfosWatermarkInfo) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarksResponseWatermarkInfosWatermarkInfo) GoString() string {
  return s.String()
}

func (s *GetWatermarksResponseWatermarkInfosWatermarkInfo) SetCreationTime(v string) *GetWatermarksResponseWatermarkInfosWatermarkInfo {
  s.CreationTime = &v
  return s
}

func (s *GetWatermarksResponseWatermarkInfosWatermarkInfo) SetType(v string) *GetWatermarksResponseWatermarkInfosWatermarkInfo {
  s.Type = &v
  return s
}

func (s *GetWatermarksResponseWatermarkInfosWatermarkInfo) SetIsDefault(v string) *GetWatermarksResponseWatermarkInfosWatermarkInfo {
  s.IsDefault = &v
  return s
}

func (s *GetWatermarksResponseWatermarkInfosWatermarkInfo) SetWatermarkId(v string) *GetWatermarksResponseWatermarkInfosWatermarkInfo {
  s.WatermarkId = &v
  return s
}

func (s *GetWatermarksResponseWatermarkInfosWatermarkInfo) SetScreenWidth(v int) *GetWatermarksResponseWatermarkInfosWatermarkInfo {
  s.ScreenWidth = &v
  return s
}

func (s *GetWatermarksResponseWatermarkInfosWatermarkInfo) SetScreenHeight(v int) *GetWatermarksResponseWatermarkInfosWatermarkInfo {
  s.ScreenHeight = &v
  return s
}

func (s *GetWatermarksResponseWatermarkInfosWatermarkInfo) SetName(v string) *GetWatermarksResponseWatermarkInfosWatermarkInfo {
  s.Name = &v
  return s
}

func (s *GetWatermarksResponseWatermarkInfosWatermarkInfo) SetFileUrl(v string) *GetWatermarksResponseWatermarkInfosWatermarkInfo {
  s.FileUrl = &v
  return s
}

func (s *GetWatermarksResponseWatermarkInfosWatermarkInfo) SetWatermarkConfig(v string) *GetWatermarksResponseWatermarkInfosWatermarkInfo {
  s.WatermarkConfig = &v
  return s
}

type SwitchWatermarkRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Status *string `json:"Status" xml:"Status" require:"true"`
}

func (s SwitchWatermarkRequest) String() string {
  return tea.Prettify(s)
}

func (s SwitchWatermarkRequest) GoString() string {
  return s.String()
}

func (s *SwitchWatermarkRequest) SetAccessKeyId(v string) *SwitchWatermarkRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SwitchWatermarkRequest) SetOwnerId(v int64) *SwitchWatermarkRequest {
  s.OwnerId = &v
  return s
}

func (s *SwitchWatermarkRequest) SetResourceOwnerAccount(v string) *SwitchWatermarkRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SwitchWatermarkRequest) SetResourceOwnerId(v int64) *SwitchWatermarkRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SwitchWatermarkRequest) SetStatus(v string) *SwitchWatermarkRequest {
  s.Status = &v
  return s
}

type SwitchWatermarkResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SwitchWatermarkResponse) String() string {
  return tea.Prettify(s)
}

func (s SwitchWatermarkResponse) GoString() string {
  return s.String()
}

func (s *SwitchWatermarkResponse) SetRequestId(v string) *SwitchWatermarkResponse {
  s.RequestId = &v
  return s
}

type GetWatermarkSwitchRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
}

func (s GetWatermarkSwitchRequest) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkSwitchRequest) GoString() string {
  return s.String()
}

func (s *GetWatermarkSwitchRequest) SetAccessKeyId(v string) *GetWatermarkSwitchRequest {
  s.AccessKeyId = &v
  return s
}

func (s *GetWatermarkSwitchRequest) SetOwnerId(v int64) *GetWatermarkSwitchRequest {
  s.OwnerId = &v
  return s
}

func (s *GetWatermarkSwitchRequest) SetResourceOwnerAccount(v string) *GetWatermarkSwitchRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *GetWatermarkSwitchRequest) SetResourceOwnerId(v int64) *GetWatermarkSwitchRequest {
  s.ResourceOwnerId = &v
  return s
}

type GetWatermarkSwitchResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  WaterMarkSwitch *GetWatermarkSwitchResponseWaterMarkSwitch `json:"WaterMarkSwitch" xml:"WaterMarkSwitch" require:"true" type:"Struct"`
}

func (s GetWatermarkSwitchResponse) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkSwitchResponse) GoString() string {
  return s.String()
}

func (s *GetWatermarkSwitchResponse) SetRequestId(v string) *GetWatermarkSwitchResponse {
  s.RequestId = &v
  return s
}

func (s *GetWatermarkSwitchResponse) SetWaterMarkSwitch(v *GetWatermarkSwitchResponseWaterMarkSwitch) *GetWatermarkSwitchResponse {
  s.WaterMarkSwitch = v
  return s
}

type GetWatermarkSwitchResponseWaterMarkSwitch struct {
  CreateTime *int `json:"CreateTime" xml:"CreateTime" require:"true"`
  UpdateTime *int `json:"UpdateTime" xml:"UpdateTime" require:"true"`
  Active *string `json:"Active" xml:"Active" require:"true"`
  CustomerId *string `json:"CustomerId" xml:"CustomerId" require:"true"`
}

func (s GetWatermarkSwitchResponseWaterMarkSwitch) String() string {
  return tea.Prettify(s)
}

func (s GetWatermarkSwitchResponseWaterMarkSwitch) GoString() string {
  return s.String()
}

func (s *GetWatermarkSwitchResponseWaterMarkSwitch) SetCreateTime(v int) *GetWatermarkSwitchResponseWaterMarkSwitch {
  s.CreateTime = &v
  return s
}

func (s *GetWatermarkSwitchResponseWaterMarkSwitch) SetUpdateTime(v int) *GetWatermarkSwitchResponseWaterMarkSwitch {
  s.UpdateTime = &v
  return s
}

func (s *GetWatermarkSwitchResponseWaterMarkSwitch) SetActive(v string) *GetWatermarkSwitchResponseWaterMarkSwitch {
  s.Active = &v
  return s
}

func (s *GetWatermarkSwitchResponseWaterMarkSwitch) SetCustomerId(v string) *GetWatermarkSwitchResponseWaterMarkSwitch {
  s.CustomerId = &v
  return s
}

type SetDefaultWatermarkRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
}

func (s SetDefaultWatermarkRequest) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultWatermarkRequest) GoString() string {
  return s.String()
}

func (s *SetDefaultWatermarkRequest) SetAccessKeyId(v string) *SetDefaultWatermarkRequest {
  s.AccessKeyId = &v
  return s
}

func (s *SetDefaultWatermarkRequest) SetOwnerId(v int64) *SetDefaultWatermarkRequest {
  s.OwnerId = &v
  return s
}

func (s *SetDefaultWatermarkRequest) SetResourceOwnerAccount(v string) *SetDefaultWatermarkRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *SetDefaultWatermarkRequest) SetResourceOwnerId(v int64) *SetDefaultWatermarkRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *SetDefaultWatermarkRequest) SetWatermarkId(v string) *SetDefaultWatermarkRequest {
  s.WatermarkId = &v
  return s
}

type SetDefaultWatermarkResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s SetDefaultWatermarkResponse) String() string {
  return tea.Prettify(s)
}

func (s SetDefaultWatermarkResponse) GoString() string {
  return s.String()
}

func (s *SetDefaultWatermarkResponse) SetRequestId(v string) *SetDefaultWatermarkResponse {
  s.RequestId = &v
  return s
}

type UpdateTranscodeTemplateRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Muxer *string `json:"Muxer" xml:"Muxer"`
  Resolution *string `json:"Resolution" xml:"Resolution"`
  Detail *string `json:"Detail" xml:"Detail"`
  Name *string `json:"Name" xml:"Name"`
  VideoBitrate *string `json:"VideoBitrate" xml:"VideoBitrate"`
  VideoCodec *string `json:"VideoCodec" xml:"VideoCodec"`
  AudioBitrate *string `json:"AudioBitrate" xml:"AudioBitrate"`
  AudioCodec *string `json:"AudioCodec" xml:"AudioCodec"`
}

func (s UpdateTranscodeTemplateRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateTranscodeTemplateRequest) GoString() string {
  return s.String()
}

func (s *UpdateTranscodeTemplateRequest) SetAccessKeyId(v string) *UpdateTranscodeTemplateRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetOwnerId(v int64) *UpdateTranscodeTemplateRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetResourceOwnerAccount(v string) *UpdateTranscodeTemplateRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetResourceOwnerId(v int64) *UpdateTranscodeTemplateRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetMuxer(v string) *UpdateTranscodeTemplateRequest {
  s.Muxer = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetResolution(v string) *UpdateTranscodeTemplateRequest {
  s.Resolution = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetDetail(v string) *UpdateTranscodeTemplateRequest {
  s.Detail = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetName(v string) *UpdateTranscodeTemplateRequest {
  s.Name = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetVideoBitrate(v string) *UpdateTranscodeTemplateRequest {
  s.VideoBitrate = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetVideoCodec(v string) *UpdateTranscodeTemplateRequest {
  s.VideoCodec = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetAudioBitrate(v string) *UpdateTranscodeTemplateRequest {
  s.AudioBitrate = &v
  return s
}

func (s *UpdateTranscodeTemplateRequest) SetAudioCodec(v string) *UpdateTranscodeTemplateRequest {
  s.AudioCodec = &v
  return s
}

type UpdateTranscodeTemplateResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
}

func (s UpdateTranscodeTemplateResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateTranscodeTemplateResponse) GoString() string {
  return s.String()
}

func (s *UpdateTranscodeTemplateResponse) SetRequestId(v string) *UpdateTranscodeTemplateResponse {
  s.RequestId = &v
  return s
}

type UpdateTranscodeConfRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  Ids *string `json:"ids" xml:"ids" require:"true"`
  EncryptTemplayeIds *string `json:"EncryptTemplayeIds" xml:"EncryptTemplayeIds"`
}

func (s UpdateTranscodeConfRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateTranscodeConfRequest) GoString() string {
  return s.String()
}

func (s *UpdateTranscodeConfRequest) SetAccessKeyId(v string) *UpdateTranscodeConfRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateTranscodeConfRequest) SetOwnerId(v int64) *UpdateTranscodeConfRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateTranscodeConfRequest) SetResourceOwnerAccount(v string) *UpdateTranscodeConfRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateTranscodeConfRequest) SetResourceOwnerId(v int64) *UpdateTranscodeConfRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateTranscodeConfRequest) SetIds(v string) *UpdateTranscodeConfRequest {
  s.Ids = &v
  return s
}

func (s *UpdateTranscodeConfRequest) SetEncryptTemplayeIds(v string) *UpdateTranscodeConfRequest {
  s.EncryptTemplayeIds = &v
  return s
}

type UpdateTranscodeConfResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Ret *bool `json:"Ret" xml:"Ret" require:"true"`
}

func (s UpdateTranscodeConfResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateTranscodeConfResponse) GoString() string {
  return s.String()
}

func (s *UpdateTranscodeConfResponse) SetRequestId(v string) *UpdateTranscodeConfResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateTranscodeConfResponse) SetRet(v bool) *UpdateTranscodeConfResponse {
  s.Ret = &v
  return s
}

type UpdateWatermarkRequest struct {
  AccessKeyId *string `json:"AccessKeyId" xml:"AccessKeyId"`
  OwnerId *int64 `json:"OwnerId" xml:"OwnerId"`
  ResourceOwnerAccount *string `json:"ResourceOwnerAccount" xml:"ResourceOwnerAccount"`
  ResourceOwnerId *int64 `json:"ResourceOwnerId" xml:"ResourceOwnerId"`
  HorizontalOffet *string `json:"HorizontalOffet" xml:"HorizontalOffet"`
  HorizontalOffset *string `json:"HorizontalOffset" xml:"HorizontalOffset"`
  VerticalOffset *string `json:"VerticalOffset" xml:"VerticalOffset"`
  Position *string `json:"Position" xml:"Position"`
  Type *string `json:"Type" xml:"Type"`
  Bucket *string `json:"Bucket" xml:"Bucket"`
  Object *string `json:"Object" xml:"Object"`
  Name *string `json:"Name" xml:"Name"`
  Width *string `json:"Width" xml:"Width"`
  Height *string `json:"Height" xml:"Height"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId"`
  ScreenMode *string `json:"ScreenMode" xml:"ScreenMode"`
  VideoWidth *int `json:"VideoWidth" xml:"VideoWidth"`
  VideoHeight *int `json:"VideoHeight" xml:"VideoHeight"`
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig"`
  FileUrl *string `json:"FileUrl" xml:"FileUrl"`
  ScreenWidth *int `json:"ScreenWidth" xml:"ScreenWidth"`
  ScreenHeight *int `json:"ScreenHeight" xml:"ScreenHeight"`
  ResourceRealOwnerId *int64 `json:"ResourceRealOwnerId" xml:"ResourceRealOwnerId"`
}

func (s UpdateWatermarkRequest) String() string {
  return tea.Prettify(s)
}

func (s UpdateWatermarkRequest) GoString() string {
  return s.String()
}

func (s *UpdateWatermarkRequest) SetAccessKeyId(v string) *UpdateWatermarkRequest {
  s.AccessKeyId = &v
  return s
}

func (s *UpdateWatermarkRequest) SetOwnerId(v int64) *UpdateWatermarkRequest {
  s.OwnerId = &v
  return s
}

func (s *UpdateWatermarkRequest) SetResourceOwnerAccount(v string) *UpdateWatermarkRequest {
  s.ResourceOwnerAccount = &v
  return s
}

func (s *UpdateWatermarkRequest) SetResourceOwnerId(v int64) *UpdateWatermarkRequest {
  s.ResourceOwnerId = &v
  return s
}

func (s *UpdateWatermarkRequest) SetHorizontalOffet(v string) *UpdateWatermarkRequest {
  s.HorizontalOffet = &v
  return s
}

func (s *UpdateWatermarkRequest) SetHorizontalOffset(v string) *UpdateWatermarkRequest {
  s.HorizontalOffset = &v
  return s
}

func (s *UpdateWatermarkRequest) SetVerticalOffset(v string) *UpdateWatermarkRequest {
  s.VerticalOffset = &v
  return s
}

func (s *UpdateWatermarkRequest) SetPosition(v string) *UpdateWatermarkRequest {
  s.Position = &v
  return s
}

func (s *UpdateWatermarkRequest) SetType(v string) *UpdateWatermarkRequest {
  s.Type = &v
  return s
}

func (s *UpdateWatermarkRequest) SetBucket(v string) *UpdateWatermarkRequest {
  s.Bucket = &v
  return s
}

func (s *UpdateWatermarkRequest) SetObject(v string) *UpdateWatermarkRequest {
  s.Object = &v
  return s
}

func (s *UpdateWatermarkRequest) SetName(v string) *UpdateWatermarkRequest {
  s.Name = &v
  return s
}

func (s *UpdateWatermarkRequest) SetWidth(v string) *UpdateWatermarkRequest {
  s.Width = &v
  return s
}

func (s *UpdateWatermarkRequest) SetHeight(v string) *UpdateWatermarkRequest {
  s.Height = &v
  return s
}

func (s *UpdateWatermarkRequest) SetWatermarkId(v string) *UpdateWatermarkRequest {
  s.WatermarkId = &v
  return s
}

func (s *UpdateWatermarkRequest) SetScreenMode(v string) *UpdateWatermarkRequest {
  s.ScreenMode = &v
  return s
}

func (s *UpdateWatermarkRequest) SetVideoWidth(v int) *UpdateWatermarkRequest {
  s.VideoWidth = &v
  return s
}

func (s *UpdateWatermarkRequest) SetVideoHeight(v int) *UpdateWatermarkRequest {
  s.VideoHeight = &v
  return s
}

func (s *UpdateWatermarkRequest) SetWatermarkConfig(v string) *UpdateWatermarkRequest {
  s.WatermarkConfig = &v
  return s
}

func (s *UpdateWatermarkRequest) SetFileUrl(v string) *UpdateWatermarkRequest {
  s.FileUrl = &v
  return s
}

func (s *UpdateWatermarkRequest) SetScreenWidth(v int) *UpdateWatermarkRequest {
  s.ScreenWidth = &v
  return s
}

func (s *UpdateWatermarkRequest) SetScreenHeight(v int) *UpdateWatermarkRequest {
  s.ScreenHeight = &v
  return s
}

func (s *UpdateWatermarkRequest) SetResourceRealOwnerId(v int64) *UpdateWatermarkRequest {
  s.ResourceRealOwnerId = &v
  return s
}

type UpdateWatermarkResponse struct {
  RequestId *string `json:"RequestId" xml:"RequestId" require:"true"`
  Watermark *UpdateWatermarkResponseWatermark `json:"Watermark" xml:"Watermark" require:"true" type:"Struct"`
  WatermarkInfo *UpdateWatermarkResponseWatermarkInfo `json:"WatermarkInfo" xml:"WatermarkInfo" require:"true" type:"Struct"`
}

func (s UpdateWatermarkResponse) String() string {
  return tea.Prettify(s)
}

func (s UpdateWatermarkResponse) GoString() string {
  return s.String()
}

func (s *UpdateWatermarkResponse) SetRequestId(v string) *UpdateWatermarkResponse {
  s.RequestId = &v
  return s
}

func (s *UpdateWatermarkResponse) SetWatermark(v *UpdateWatermarkResponseWatermark) *UpdateWatermarkResponse {
  s.Watermark = v
  return s
}

func (s *UpdateWatermarkResponse) SetWatermarkInfo(v *UpdateWatermarkResponseWatermarkInfo) *UpdateWatermarkResponse {
  s.WatermarkInfo = v
  return s
}

type UpdateWatermarkResponseWatermark struct {
  CreateTime *int `json:"CreateTime" xml:"CreateTime" require:"true"`
  HorizontalOffset *string `json:"HorizontalOffset" xml:"HorizontalOffset" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  Position *string `json:"Position" xml:"Position" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  VerticalOffset *string `json:"VerticalOffset" xml:"VerticalOffset" require:"true"`
  Width *string `json:"Width" xml:"Width" require:"true"`
  Height *string `json:"Height" xml:"Height" require:"true"`
  Url *string `json:"Url" xml:"Url" require:"true"`
  VideoHeight *int `json:"VideoHeight" xml:"VideoHeight" require:"true"`
  VideoWidth *int `json:"VideoWidth" xml:"VideoWidth" require:"true"`
  ScreenMode *string `json:"ScreenMode" xml:"ScreenMode" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
}

func (s UpdateWatermarkResponseWatermark) String() string {
  return tea.Prettify(s)
}

func (s UpdateWatermarkResponseWatermark) GoString() string {
  return s.String()
}

func (s *UpdateWatermarkResponseWatermark) SetCreateTime(v int) *UpdateWatermarkResponseWatermark {
  s.CreateTime = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetHorizontalOffset(v string) *UpdateWatermarkResponseWatermark {
  s.HorizontalOffset = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetIsDefault(v string) *UpdateWatermarkResponseWatermark {
  s.IsDefault = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetPosition(v string) *UpdateWatermarkResponseWatermark {
  s.Position = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetWatermarkId(v string) *UpdateWatermarkResponseWatermark {
  s.WatermarkId = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetVerticalOffset(v string) *UpdateWatermarkResponseWatermark {
  s.VerticalOffset = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetWidth(v string) *UpdateWatermarkResponseWatermark {
  s.Width = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetHeight(v string) *UpdateWatermarkResponseWatermark {
  s.Height = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetUrl(v string) *UpdateWatermarkResponseWatermark {
  s.Url = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetVideoHeight(v int) *UpdateWatermarkResponseWatermark {
  s.VideoHeight = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetVideoWidth(v int) *UpdateWatermarkResponseWatermark {
  s.VideoWidth = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetScreenMode(v string) *UpdateWatermarkResponseWatermark {
  s.ScreenMode = &v
  return s
}

func (s *UpdateWatermarkResponseWatermark) SetName(v string) *UpdateWatermarkResponseWatermark {
  s.Name = &v
  return s
}

type UpdateWatermarkResponseWatermarkInfo struct {
  CreationTime *string `json:"CreationTime" xml:"CreationTime" require:"true"`
  Type *string `json:"Type" xml:"Type" require:"true"`
  IsDefault *string `json:"IsDefault" xml:"IsDefault" require:"true"`
  WatermarkId *string `json:"WatermarkId" xml:"WatermarkId" require:"true"`
  ScreenWidth *int `json:"ScreenWidth" xml:"ScreenWidth" require:"true"`
  ScreenHeight *int `json:"ScreenHeight" xml:"ScreenHeight" require:"true"`
  Name *string `json:"Name" xml:"Name" require:"true"`
  FileUrl *string `json:"FileUrl" xml:"FileUrl" require:"true"`
  WatermarkConfig *string `json:"WatermarkConfig" xml:"WatermarkConfig" require:"true"`
}

func (s UpdateWatermarkResponseWatermarkInfo) String() string {
  return tea.Prettify(s)
}

func (s UpdateWatermarkResponseWatermarkInfo) GoString() string {
  return s.String()
}

func (s *UpdateWatermarkResponseWatermarkInfo) SetCreationTime(v string) *UpdateWatermarkResponseWatermarkInfo {
  s.CreationTime = &v
  return s
}

func (s *UpdateWatermarkResponseWatermarkInfo) SetType(v string) *UpdateWatermarkResponseWatermarkInfo {
  s.Type = &v
  return s
}

func (s *UpdateWatermarkResponseWatermarkInfo) SetIsDefault(v string) *UpdateWatermarkResponseWatermarkInfo {
  s.IsDefault = &v
  return s
}

func (s *UpdateWatermarkResponseWatermarkInfo) SetWatermarkId(v string) *UpdateWatermarkResponseWatermarkInfo {
  s.WatermarkId = &v
  return s
}

func (s *UpdateWatermarkResponseWatermarkInfo) SetScreenWidth(v int) *UpdateWatermarkResponseWatermarkInfo {
  s.ScreenWidth = &v
  return s
}

func (s *UpdateWatermarkResponseWatermarkInfo) SetScreenHeight(v int) *UpdateWatermarkResponseWatermarkInfo {
  s.ScreenHeight = &v
  return s
}

func (s *UpdateWatermarkResponseWatermarkInfo) SetName(v string) *UpdateWatermarkResponseWatermarkInfo {
  s.Name = &v
  return s
}

func (s *UpdateWatermarkResponseWatermarkInfo) SetFileUrl(v string) *UpdateWatermarkResponseWatermarkInfo {
  s.FileUrl = &v
  return s
}

func (s *UpdateWatermarkResponseWatermarkInfo) SetWatermarkConfig(v string) *UpdateWatermarkResponseWatermarkInfo {
  s.WatermarkConfig = &v
  return s
}

type Client struct {
  rpc.Client
}

func NewClient(config *rpc.Config)(*Client, error) {
  client := new(Client)
  err := client.Init(config)
  return client, err
}

func (client *Client)Init(config *rpc.Config)(_err error) {
  _err = client.Client.Init(config  )
  if _err != nil {
    return _err
  }
  client.EndpointRule = tea.String("regional")
  client.EndpointMap = map[string]*string{
    "cn-beijing": tea.String("vod.cn-shanghai.aliyuncs.com"),
    "cn-hangzhou": tea.String("vod.cn-shanghai.aliyuncs.com"),
    "cn-shenzhen": tea.String("vod.cn-shanghai.aliyuncs.com"),
    "ap-northeast-2-pop": tea.String("vod.ap-northeast-1.aliyuncs.com"),
    "ap-southeast-2": tea.String("vod.ap-northeast-1.aliyuncs.com"),
    "ap-southeast-3": tea.String("vod.ap-northeast-1.aliyuncs.com"),
    "cn-beijing-finance-1": tea.String("vod.aliyuncs.com"),
    "cn-beijing-finance-pop": tea.String("vod.aliyuncs.com"),
    "cn-beijing-gov-1": tea.String("vod.aliyuncs.com"),
    "cn-beijing-nu16-b01": tea.String("vod.aliyuncs.com"),
    "cn-chengdu": tea.String("vod.aliyuncs.com"),
    "cn-edge-1": tea.String("vod.aliyuncs.com"),
    "cn-fujian": tea.String("vod.aliyuncs.com"),
    "cn-haidian-cm12-c01": tea.String("vod.aliyuncs.com"),
    "cn-hangzhou-bj-b01": tea.String("vod.aliyuncs.com"),
    "cn-hangzhou-finance": tea.String("vod.aliyuncs.com"),
    "cn-hangzhou-internal-prod-1": tea.String("vod.aliyuncs.com"),
    "cn-hangzhou-internal-test-1": tea.String("vod.aliyuncs.com"),
    "cn-hangzhou-internal-test-2": tea.String("vod.aliyuncs.com"),
    "cn-hangzhou-internal-test-3": tea.String("vod.aliyuncs.com"),
    "cn-hangzhou-test-306": tea.String("vod.aliyuncs.com"),
    "cn-hongkong-finance-pop": tea.String("vod.aliyuncs.com"),
    "cn-huhehaote": tea.String("vod.aliyuncs.com"),
    "cn-qingdao": tea.String("vod.aliyuncs.com"),
    "cn-qingdao-nebula": tea.String("vod.aliyuncs.com"),
    "cn-shanghai-et15-b01": tea.String("vod.aliyuncs.com"),
    "cn-shanghai-et2-b01": tea.String("vod.aliyuncs.com"),
    "cn-shanghai-finance-1": tea.String("vod.aliyuncs.com"),
    "cn-shanghai-inner": tea.String("vod.aliyuncs.com"),
    "cn-shanghai-internal-test-1": tea.String("vod.aliyuncs.com"),
    "cn-shenzhen-finance-1": tea.String("vod.aliyuncs.com"),
    "cn-shenzhen-inner": tea.String("vod.aliyuncs.com"),
    "cn-shenzhen-st4-d01": tea.String("vod.aliyuncs.com"),
    "cn-shenzhen-su18-b01": tea.String("vod.aliyuncs.com"),
    "cn-wuhan": tea.String("vod.aliyuncs.com"),
    "cn-yushanfang": tea.String("vod.aliyuncs.com"),
    "cn-zhangbei-na61-b01": tea.String("vod.aliyuncs.com"),
    "cn-zhangjiakou-na62-a01": tea.String("vod.aliyuncs.com"),
    "cn-zhengzhou-nebula-1": tea.String("vod.aliyuncs.com"),
    "eu-west-1-oxs": tea.String("vod.ap-northeast-1.aliyuncs.com"),
    "me-east-1": tea.String("vod.ap-northeast-1.aliyuncs.com"),
    "rus-west-1-pop": tea.String("vod.ap-northeast-1.aliyuncs.com"),
    "us-east-1": tea.String("vod.ap-northeast-1.aliyuncs.com"),
  }
  _err = client.CheckConfig(config)
  if _err != nil {
    return _err
  }
  client.Endpoint, _err = client.GetEndpoint(client.ProductId, client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
  if _err != nil {
    return _err
  }

  return nil
}



func (client *Client) DescribeVodDomainISPDataWithOptions (request *DescribeVodDomainISPDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainISPDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainISPDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainISPData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainISPData (request *DescribeVodDomainISPDataRequest) (_result *DescribeVodDomainISPDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainISPDataResponse{}
  _body, _err := client.DescribeVodDomainISPDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainRegionDataWithOptions (request *DescribeVodDomainRegionDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainRegionDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainRegionDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainRegionData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainRegionData (request *DescribeVodDomainRegionDataRequest) (_result *DescribeVodDomainRegionDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainRegionDataResponse{}
  _body, _err := client.DescribeVodDomainRegionDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainTopReferVisitWithOptions (request *DescribeVodDomainTopReferVisitRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainTopReferVisitResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainTopReferVisitResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainTopReferVisit"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainTopReferVisit (request *DescribeVodDomainTopReferVisitRequest) (_result *DescribeVodDomainTopReferVisitResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainTopReferVisitResponse{}
  _body, _err := client.DescribeVodDomainTopReferVisitWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainTopUrlVisitWithOptions (request *DescribeVodDomainTopUrlVisitRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainTopUrlVisitResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainTopUrlVisitResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainTopUrlVisit"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainTopUrlVisit (request *DescribeVodDomainTopUrlVisitRequest) (_result *DescribeVodDomainTopUrlVisitResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainTopUrlVisitResponse{}
  _body, _err := client.DescribeVodDomainTopUrlVisitWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodTopDomainsByFlowWithOptions (request *DescribeVodTopDomainsByFlowRequest, runtime *util.RuntimeOptions) (_result *DescribeVodTopDomainsByFlowResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodTopDomainsByFlowResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodTopDomainsByFlow"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodTopDomainsByFlow (request *DescribeVodTopDomainsByFlowRequest) (_result *DescribeVodTopDomainsByFlowResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodTopDomainsByFlowResponse{}
  _body, _err := client.DescribeVodTopDomainsByFlowWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainPvDataWithOptions (request *DescribeVodDomainPvDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainPvDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainPvDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainPvData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainPvData (request *DescribeVodDomainPvDataRequest) (_result *DescribeVodDomainPvDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainPvDataResponse{}
  _body, _err := client.DescribeVodDomainPvDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainUvDataWithOptions (request *DescribeVodDomainUvDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainUvDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainUvDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainUvData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainUvData (request *DescribeVodDomainUvDataRequest) (_result *DescribeVodDomainUvDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainUvDataResponse{}
  _body, _err := client.DescribeVodDomainUvDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetOSSFlowStatisWithOptions (request *GetOSSFlowStatisRequest, runtime *util.RuntimeOptions) (_result *GetOSSFlowStatisResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetOSSFlowStatisResponse{}
  _body, _err := client.DoRequest(tea.String("GetOSSFlowStatis"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetOSSFlowStatis (request *GetOSSFlowStatisRequest) (_result *GetOSSFlowStatisResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetOSSFlowStatisResponse{}
  _body, _err := client.GetOSSFlowStatisWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAIStatisTypeWithOptions (request *ListAIStatisTypeRequest, runtime *util.RuntimeOptions) (_result *ListAIStatisTypeResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAIStatisTypeResponse{}
  _body, _err := client.DoRequest(tea.String("ListAIStatisType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAIStatisType (request *ListAIStatisTypeRequest) (_result *ListAIStatisTypeResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAIStatisTypeResponse{}
  _body, _err := client.ListAIStatisTypeWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAIStatisWithOptions (request *GetAIStatisRequest, runtime *util.RuntimeOptions) (_result *GetAIStatisResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAIStatisResponse{}
  _body, _err := client.DoRequest(tea.String("GetAIStatis"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAIStatis (request *GetAIStatisRequest) (_result *GetAIStatisResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAIStatisResponse{}
  _body, _err := client.GetAIStatisWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetDefaultAITemplateWithOptions (request *SetDefaultAITemplateRequest, runtime *util.RuntimeOptions) (_result *SetDefaultAITemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetDefaultAITemplateResponse{}
  _body, _err := client.DoRequest(tea.String("SetDefaultAITemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetDefaultAITemplate (request *SetDefaultAITemplateRequest) (_result *SetDefaultAITemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetDefaultAITemplateResponse{}
  _body, _err := client.SetDefaultAITemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetDefaultAITemplateWithOptions (request *GetDefaultAITemplateRequest, runtime *util.RuntimeOptions) (_result *GetDefaultAITemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetDefaultAITemplateResponse{}
  _body, _err := client.DoRequest(tea.String("GetDefaultAITemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetDefaultAITemplate (request *GetDefaultAITemplateRequest) (_result *GetDefaultAITemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetDefaultAITemplateResponse{}
  _body, _err := client.GetDefaultAITemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAITemplateWithOptions (request *ListAITemplateRequest, runtime *util.RuntimeOptions) (_result *ListAITemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAITemplateResponse{}
  _body, _err := client.DoRequest(tea.String("ListAITemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAITemplate (request *ListAITemplateRequest) (_result *ListAITemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAITemplateResponse{}
  _body, _err := client.ListAITemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAITemplateWithOptions (request *GetAITemplateRequest, runtime *util.RuntimeOptions) (_result *GetAITemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAITemplateResponse{}
  _body, _err := client.DoRequest(tea.String("GetAITemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAITemplate (request *GetAITemplateRequest) (_result *GetAITemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAITemplateResponse{}
  _body, _err := client.GetAITemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateAITemplateWithOptions (request *UpdateAITemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateAITemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateAITemplateResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateAITemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateAITemplate (request *UpdateAITemplateRequest) (_result *UpdateAITemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateAITemplateResponse{}
  _body, _err := client.UpdateAITemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteAITemplateWithOptions (request *DeleteAITemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteAITemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteAITemplateResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteAITemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteAITemplate (request *DeleteAITemplateRequest) (_result *DeleteAITemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteAITemplateResponse{}
  _body, _err := client.DeleteAITemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddAITemplateWithOptions (request *AddAITemplateRequest, runtime *util.RuntimeOptions) (_result *AddAITemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddAITemplateResponse{}
  _body, _err := client.DoRequest(tea.String("AddAITemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddAITemplate (request *AddAITemplateRequest) (_result *AddAITemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddAITemplateResponse{}
  _body, _err := client.AddAITemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMediaAuditResultTimelineWithOptions (request *GetMediaAuditResultTimelineRequest, runtime *util.RuntimeOptions) (_result *GetMediaAuditResultTimelineResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMediaAuditResultTimelineResponse{}
  _body, _err := client.DoRequest(tea.String("GetMediaAuditResultTimeline"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMediaAuditResultTimeline (request *GetMediaAuditResultTimelineRequest) (_result *GetMediaAuditResultTimelineResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMediaAuditResultTimelineResponse{}
  _body, _err := client.GetMediaAuditResultTimelineWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMediaAuditResultDetailWithOptions (request *GetMediaAuditResultDetailRequest, runtime *util.RuntimeOptions) (_result *GetMediaAuditResultDetailResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMediaAuditResultDetailResponse{}
  _body, _err := client.DoRequest(tea.String("GetMediaAuditResultDetail"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMediaAuditResultDetail (request *GetMediaAuditResultDetailRequest) (_result *GetMediaAuditResultDetailResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMediaAuditResultDetailResponse{}
  _body, _err := client.GetMediaAuditResultDetailWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMediaAuditResultWithOptions (request *GetMediaAuditResultRequest, runtime *util.RuntimeOptions) (_result *GetMediaAuditResultResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMediaAuditResultResponse{}
  _body, _err := client.DoRequest(tea.String("GetMediaAuditResult"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMediaAuditResult (request *GetMediaAuditResultRequest) (_result *GetMediaAuditResultResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMediaAuditResultResponse{}
  _body, _err := client.GetMediaAuditResultWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitAIMediaAuditJobWithOptions (request *SubmitAIMediaAuditJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAIMediaAuditJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitAIMediaAuditJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitAIMediaAuditJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitAIMediaAuditJob (request *SubmitAIMediaAuditJobRequest) (_result *SubmitAIMediaAuditJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitAIMediaAuditJobResponse{}
  _body, _err := client.SubmitAIMediaAuditJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAIMediaAuditJobWithOptions (request *GetAIMediaAuditJobRequest, runtime *util.RuntimeOptions) (_result *GetAIMediaAuditJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAIMediaAuditJobResponse{}
  _body, _err := client.DoRequest(tea.String("GetAIMediaAuditJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAIMediaAuditJob (request *GetAIMediaAuditJobRequest) (_result *GetAIMediaAuditJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAIMediaAuditJobResponse{}
  _body, _err := client.GetAIMediaAuditJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DisplayAIAuditSwitchWithOptions (request *DisplayAIAuditSwitchRequest, runtime *util.RuntimeOptions) (_result *DisplayAIAuditSwitchResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DisplayAIAuditSwitchResponse{}
  _body, _err := client.DoRequest(tea.String("DisplayAIAuditSwitch"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DisplayAIAuditSwitch (request *DisplayAIAuditSwitchRequest) (_result *DisplayAIAuditSwitchResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DisplayAIAuditSwitchResponse{}
  _body, _err := client.DisplayAIAuditSwitchWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribePlayVideoStatisWithOptions (request *DescribePlayVideoStatisRequest, runtime *util.RuntimeOptions) (_result *DescribePlayVideoStatisResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribePlayVideoStatisResponse{}
  _body, _err := client.DoRequest(tea.String("DescribePlayVideoStatis"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribePlayVideoStatis (request *DescribePlayVideoStatisRequest) (_result *DescribePlayVideoStatisResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribePlayVideoStatisResponse{}
  _body, _err := client.DescribePlayVideoStatisWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) TransferMediaDataWithOptions (request *TransferMediaDataRequest, runtime *util.RuntimeOptions) (_result *TransferMediaDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &TransferMediaDataResponse{}
  _body, _err := client.DoRequest(tea.String("TransferMediaData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) TransferMediaData (request *TransferMediaDataRequest) (_result *TransferMediaDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &TransferMediaDataResponse{}
  _body, _err := client.TransferMediaDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CreateUploadAttachedMediaWithOptions (request *CreateUploadAttachedMediaRequest, runtime *util.RuntimeOptions) (_result *CreateUploadAttachedMediaResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CreateUploadAttachedMediaResponse{}
  _body, _err := client.DoRequest(tea.String("CreateUploadAttachedMedia"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CreateUploadAttachedMedia (request *CreateUploadAttachedMediaRequest) (_result *CreateUploadAttachedMediaResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CreateUploadAttachedMediaResponse{}
  _body, _err := client.CreateUploadAttachedMediaWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetUploadProgressWithOptions (request *GetUploadProgressRequest, runtime *util.RuntimeOptions) (_result *GetUploadProgressResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetUploadProgressResponse{}
  _body, _err := client.DoRequest(tea.String("GetUploadProgress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("Anonymous"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetUploadProgress (request *GetUploadProgressRequest) (_result *GetUploadProgressResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetUploadProgressResponse{}
  _body, _err := client.GetUploadProgressWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateVodTemplateWithOptions (request *UpdateVodTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateVodTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateVodTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateVodTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateVodTemplate (request *UpdateVodTemplateRequest) (_result *UpdateVodTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateVodTemplateResponse{}
  _body, _err := client.UpdateVodTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetDefaultVodTemplateWithOptions (request *SetDefaultVodTemplateRequest, runtime *util.RuntimeOptions) (_result *SetDefaultVodTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetDefaultVodTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("SetDefaultVodTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetDefaultVodTemplate (request *SetDefaultVodTemplateRequest) (_result *SetDefaultVodTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetDefaultVodTemplateResponse{}
  _body, _err := client.SetDefaultVodTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListVodTemplateWithOptions (request *ListVodTemplateRequest, runtime *util.RuntimeOptions) (_result *ListVodTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListVodTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("ListVodTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListVodTemplate (request *ListVodTemplateRequest) (_result *ListVodTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListVodTemplateResponse{}
  _body, _err := client.ListVodTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetVodTemplateWithOptions (request *GetVodTemplateRequest, runtime *util.RuntimeOptions) (_result *GetVodTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetVodTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("GetVodTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetVodTemplate (request *GetVodTemplateRequest) (_result *GetVodTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetVodTemplateResponse{}
  _body, _err := client.GetVodTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteVodTemplateWithOptions (request *DeleteVodTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteVodTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteVodTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteVodTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteVodTemplate (request *DeleteVodTemplateRequest) (_result *DeleteVodTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteVodTemplateResponse{}
  _body, _err := client.DeleteVodTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddVodTemplateWithOptions (request *AddVodTemplateRequest, runtime *util.RuntimeOptions) (_result *AddVodTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddVodTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("AddVodTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddVodTemplate (request *AddVodTemplateRequest) (_result *AddVodTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddVodTemplateResponse{}
  _body, _err := client.AddVodTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMediaDNAResultWithOptions (request *GetMediaDNAResultRequest, runtime *util.RuntimeOptions) (_result *GetMediaDNAResultResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMediaDNAResultResponse{}
  _body, _err := client.DoRequest(tea.String("GetMediaDNAResult"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMediaDNAResult (request *GetMediaDNAResultRequest) (_result *GetMediaDNAResultResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMediaDNAResultResponse{}
  _body, _err := client.GetMediaDNAResultWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteMezzaninesWithOptions (request *DeleteMezzaninesRequest, runtime *util.RuntimeOptions) (_result *DeleteMezzaninesResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteMezzaninesResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteMezzanines"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteMezzanines (request *DeleteMezzaninesRequest) (_result *DeleteMezzaninesResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteMezzaninesResponse{}
  _body, _err := client.DeleteMezzaninesWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateImageInfosWithOptions (request *UpdateImageInfosRequest, runtime *util.RuntimeOptions) (_result *UpdateImageInfosResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateImageInfosResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateImageInfos"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateImageInfos (request *UpdateImageInfosRequest) (_result *UpdateImageInfosResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateImageInfosResponse{}
  _body, _err := client.UpdateImageInfosWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainUsageDataWithOptions (request *DescribeVodDomainUsageDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainUsageDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainUsageDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainUsageData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainUsageData (request *DescribeVodDomainUsageDataRequest) (_result *DescribeVodDomainUsageDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainUsageDataResponse{}
  _body, _err := client.DescribeVodDomainUsageDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainTrafficDataWithOptions (request *DescribeVodDomainTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainTrafficDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainTrafficDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainTrafficData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainTrafficData (request *DescribeVodDomainTrafficDataRequest) (_result *DescribeVodDomainTrafficDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainTrafficDataResponse{}
  _body, _err := client.DescribeVodDomainTrafficDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainsUsageByDayWithOptions (request *DescribeVodDomainsUsageByDayRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainsUsageByDayResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainsUsageByDayResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainsUsageByDay"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainsUsageByDay (request *DescribeVodDomainsUsageByDayRequest) (_result *DescribeVodDomainsUsageByDayResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainsUsageByDayResponse{}
  _body, _err := client.DescribeVodDomainsUsageByDayWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainSrcTrafficDataWithOptions (request *DescribeVodDomainSrcTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainSrcTrafficDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainSrcTrafficDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainSrcTrafficData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainSrcTrafficData (request *DescribeVodDomainSrcTrafficDataRequest) (_result *DescribeVodDomainSrcTrafficDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainSrcTrafficDataResponse{}
  _body, _err := client.DescribeVodDomainSrcTrafficDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainSrcBpsDataWithOptions (request *DescribeVodDomainSrcBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainSrcBpsDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainSrcBpsDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainSrcBpsData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainSrcBpsData (request *DescribeVodDomainSrcBpsDataRequest) (_result *DescribeVodDomainSrcBpsDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainSrcBpsDataResponse{}
  _body, _err := client.DescribeVodDomainSrcBpsDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeTrafficDataWithOptions (request *DescribeVodDomainRealTimeTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainRealTimeTrafficDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainRealTimeTrafficDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainRealTimeTrafficData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeTrafficData (request *DescribeVodDomainRealTimeTrafficDataRequest) (_result *DescribeVodDomainRealTimeTrafficDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainRealTimeTrafficDataResponse{}
  _body, _err := client.DescribeVodDomainRealTimeTrafficDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeSrcTrafficDataWithOptions (request *DescribeVodDomainRealTimeSrcTrafficDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainRealTimeSrcTrafficDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainRealTimeSrcTrafficDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainRealTimeSrcTrafficData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeSrcTrafficData (request *DescribeVodDomainRealTimeSrcTrafficDataRequest) (_result *DescribeVodDomainRealTimeSrcTrafficDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainRealTimeSrcTrafficDataResponse{}
  _body, _err := client.DescribeVodDomainRealTimeSrcTrafficDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeSrcBpsDataWithOptions (request *DescribeVodDomainRealTimeSrcBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainRealTimeSrcBpsDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainRealTimeSrcBpsDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainRealTimeSrcBpsData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeSrcBpsData (request *DescribeVodDomainRealTimeSrcBpsDataRequest) (_result *DescribeVodDomainRealTimeSrcBpsDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainRealTimeSrcBpsDataResponse{}
  _body, _err := client.DescribeVodDomainRealTimeSrcBpsDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeReqHitRateDataWithOptions (request *DescribeVodDomainRealTimeReqHitRateDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainRealTimeReqHitRateDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainRealTimeReqHitRateDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainRealTimeReqHitRateData"), tea.String("HTTPS"), tea.String("GET"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeReqHitRateData (request *DescribeVodDomainRealTimeReqHitRateDataRequest) (_result *DescribeVodDomainRealTimeReqHitRateDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainRealTimeReqHitRateDataResponse{}
  _body, _err := client.DescribeVodDomainRealTimeReqHitRateDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeQpsDataWithOptions (request *DescribeVodDomainRealTimeQpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainRealTimeQpsDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainRealTimeQpsDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainRealTimeQpsData"), tea.String("HTTPS"), tea.String("GET"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeQpsData (request *DescribeVodDomainRealTimeQpsDataRequest) (_result *DescribeVodDomainRealTimeQpsDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainRealTimeQpsDataResponse{}
  _body, _err := client.DescribeVodDomainRealTimeQpsDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeHttpCodeDataWithOptions (request *DescribeVodDomainRealTimeHttpCodeDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainRealTimeHttpCodeDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainRealTimeHttpCodeDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainRealTimeHttpCodeData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeHttpCodeData (request *DescribeVodDomainRealTimeHttpCodeDataRequest) (_result *DescribeVodDomainRealTimeHttpCodeDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainRealTimeHttpCodeDataResponse{}
  _body, _err := client.DescribeVodDomainRealTimeHttpCodeDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeByteHitRateDataWithOptions (request *DescribeVodDomainRealTimeByteHitRateDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainRealTimeByteHitRateDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainRealTimeByteHitRateDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainRealTimeByteHitRateData"), tea.String("HTTPS"), tea.String("GET"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeByteHitRateData (request *DescribeVodDomainRealTimeByteHitRateDataRequest) (_result *DescribeVodDomainRealTimeByteHitRateDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainRealTimeByteHitRateDataResponse{}
  _body, _err := client.DescribeVodDomainRealTimeByteHitRateDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeBpsDataWithOptions (request *DescribeVodDomainRealTimeBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainRealTimeBpsDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainRealTimeBpsDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainRealTimeBpsData"), tea.String("HTTPS"), tea.String("GET"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainRealTimeBpsData (request *DescribeVodDomainRealTimeBpsDataRequest) (_result *DescribeVodDomainRealTimeBpsDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainRealTimeBpsDataResponse{}
  _body, _err := client.DescribeVodDomainRealTimeBpsDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainQpsDataWithOptions (request *DescribeVodDomainQpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainQpsDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainQpsDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainQpsData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainQpsData (request *DescribeVodDomainQpsDataRequest) (_result *DescribeVodDomainQpsDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainQpsDataResponse{}
  _body, _err := client.DescribeVodDomainQpsDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainHttpCodeDataWithOptions (request *DescribeVodDomainHttpCodeDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainHttpCodeDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainHttpCodeDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainHttpCodeData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainHttpCodeData (request *DescribeVodDomainHttpCodeDataRequest) (_result *DescribeVodDomainHttpCodeDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainHttpCodeDataResponse{}
  _body, _err := client.DescribeVodDomainHttpCodeDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainHitRateDataWithOptions (request *DescribeVodDomainHitRateDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainHitRateDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainHitRateDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainHitRateData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainHitRateData (request *DescribeVodDomainHitRateDataRequest) (_result *DescribeVodDomainHitRateDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainHitRateDataResponse{}
  _body, _err := client.DescribeVodDomainHitRateDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainBpsDataWithOptions (request *DescribeVodDomainBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainBpsDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainBpsDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainBpsData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainBpsData (request *DescribeVodDomainBpsDataRequest) (_result *DescribeVodDomainBpsDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainBpsDataResponse{}
  _body, _err := client.DescribeVodDomainBpsDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetVideoDNAResultWithOptions (request *GetVideoDNAResultRequest, runtime *util.RuntimeOptions) (_result *GetVideoDNAResultResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetVideoDNAResultResponse{}
  _body, _err := client.DoRequest(tea.String("GetVideoDNAResult"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetVideoDNAResult (request *GetVideoDNAResultRequest) (_result *GetVideoDNAResultResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetVideoDNAResultResponse{}
  _body, _err := client.GetVideoDNAResultWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodCertificateDetailWithOptions (request *DescribeVodCertificateDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeVodCertificateDetailResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodCertificateDetailResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodCertificateDetail"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodCertificateDetail (request *DescribeVodCertificateDetailRequest) (_result *DescribeVodCertificateDetailResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodCertificateDetailResponse{}
  _body, _err := client.DescribeVodCertificateDetailWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteImageWithOptions (request *DeleteImageRequest, runtime *util.RuntimeOptions) (_result *DeleteImageResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteImageResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteImage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteImage (request *DeleteImageRequest) (_result *DeleteImageResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteImageResponse{}
  _body, _err := client.DeleteImageWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAuditResultDetailWithOptions (request *GetAuditResultDetailRequest, runtime *util.RuntimeOptions) (_result *GetAuditResultDetailResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAuditResultDetailResponse{}
  _body, _err := client.DoRequest(tea.String("GetAuditResultDetail"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAuditResultDetail (request *GetAuditResultDetailRequest) (_result *GetAuditResultDetailResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAuditResultDetailResponse{}
  _body, _err := client.GetAuditResultDetailWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMediaStreamWithOptions (request *GetMediaStreamRequest, runtime *util.RuntimeOptions) (_result *GetMediaStreamResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMediaStreamResponse{}
  _body, _err := client.DoRequest(tea.String("GetMediaStream"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMediaStream (request *GetMediaStreamRequest) (_result *GetMediaStreamResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMediaStreamResponse{}
  _body, _err := client.GetMediaStreamWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) PayOrderCallbackWithOptions (request *PayOrderCallbackRequest, runtime *util.RuntimeOptions) (_result *PayOrderCallbackResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &PayOrderCallbackResponse{}
  _body, _err := client.DoRequest(tea.String("PayOrderCallback"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) PayOrderCallback (request *PayOrderCallbackRequest) (_result *PayOrderCallbackResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &PayOrderCallbackResponse{}
  _body, _err := client.PayOrderCallbackWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ModifyWithOptions (request *ModifyRequest, runtime *util.RuntimeOptions) (_result *ModifyResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ModifyResponse{}
  _body, _err := client.DoRequest(tea.String("Modify"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) Modify (request *ModifyRequest) (_result *ModifyResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ModifyResponse{}
  _body, _err := client.ModifyWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CompleteOrderParamWithOptions (request *CompleteOrderParamRequest, runtime *util.RuntimeOptions) (_result *CompleteOrderParamResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CompleteOrderParamResponse{}
  _body, _err := client.DoRequest(tea.String("CompleteOrderParam"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CompleteOrderParam (request *CompleteOrderParamRequest) (_result *CompleteOrderParamResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CompleteOrderParamResponse{}
  _body, _err := client.CompleteOrderParamWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateTemplateGroupDaemonWithOptions (request *UpdateTemplateGroupDaemonRequest, runtime *util.RuntimeOptions) (_result *UpdateTemplateGroupDaemonResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateTemplateGroupDaemonResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateTemplateGroupDaemon"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateTemplateGroupDaemon (request *UpdateTemplateGroupDaemonRequest) (_result *UpdateTemplateGroupDaemonResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateTemplateGroupDaemonResponse{}
  _body, _err := client.UpdateTemplateGroupDaemonWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CreateKMSServiceKeyWithOptions (request *CreateKMSServiceKeyRequest, runtime *util.RuntimeOptions) (_result *CreateKMSServiceKeyResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CreateKMSServiceKeyResponse{}
  _body, _err := client.DoRequest(tea.String("CreateKMSServiceKey"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CreateKMSServiceKey (request *CreateKMSServiceKeyRequest) (_result *CreateKMSServiceKeyResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CreateKMSServiceKeyResponse{}
  _body, _err := client.CreateKMSServiceKeyWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetAuditSecurityIpWithOptions (request *SetAuditSecurityIpRequest, runtime *util.RuntimeOptions) (_result *SetAuditSecurityIpResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetAuditSecurityIpResponse{}
  _body, _err := client.DoRequest(tea.String("SetAuditSecurityIp"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetAuditSecurityIp (request *SetAuditSecurityIpRequest) (_result *SetAuditSecurityIpResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetAuditSecurityIpResponse{}
  _body, _err := client.SetAuditSecurityIpWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAuditSecurityIpWithOptions (request *ListAuditSecurityIpRequest, runtime *util.RuntimeOptions) (_result *ListAuditSecurityIpResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAuditSecurityIpResponse{}
  _body, _err := client.DoRequest(tea.String("ListAuditSecurityIp"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAuditSecurityIp (request *ListAuditSecurityIpRequest) (_result *ListAuditSecurityIpResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAuditSecurityIpResponse{}
  _body, _err := client.ListAuditSecurityIpWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetVideoInfosWithOptions (request *GetVideoInfosRequest, runtime *util.RuntimeOptions) (_result *GetVideoInfosResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetVideoInfosResponse{}
  _body, _err := client.DoRequest(tea.String("GetVideoInfos"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetVideoInfos (request *GetVideoInfosRequest) (_result *GetVideoInfosResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetVideoInfosResponse{}
  _body, _err := client.GetVideoInfosWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AssumeOssRoleWithOptions (request *AssumeOssRoleRequest, runtime *util.RuntimeOptions) (_result *AssumeOssRoleResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AssumeOssRoleResponse{}
  _body, _err := client.DoRequest(tea.String("AssumeOssRole"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("Anonymous"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AssumeOssRole (request *AssumeOssRoleRequest) (_result *AssumeOssRoleResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AssumeOssRoleResponse{}
  _body, _err := client.AssumeOssRoleWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateVodDomainWithOptions (request *UpdateVodDomainRequest, runtime *util.RuntimeOptions) (_result *UpdateVodDomainResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateVodDomainResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateVodDomain"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateVodDomain (request *UpdateVodDomainRequest) (_result *UpdateVodDomainResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateVodDomainResponse{}
  _body, _err := client.UpdateVodDomainWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) StopVodDomainWithOptions (request *StopVodDomainRequest, runtime *util.RuntimeOptions) (_result *StopVodDomainResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &StopVodDomainResponse{}
  _body, _err := client.DoRequest(tea.String("StopVodDomain"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) StopVodDomain (request *StopVodDomainRequest) (_result *StopVodDomainResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &StopVodDomainResponse{}
  _body, _err := client.StopVodDomainWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) StartVodDomainWithOptions (request *StartVodDomainRequest, runtime *util.RuntimeOptions) (_result *StartVodDomainResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &StartVodDomainResponse{}
  _body, _err := client.DoRequest(tea.String("StartVodDomain"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) StartVodDomain (request *StartVodDomainRequest) (_result *StartVodDomainResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &StartVodDomainResponse{}
  _body, _err := client.StartVodDomainWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetVodDomainCertificateWithOptions (request *SetVodDomainCertificateRequest, runtime *util.RuntimeOptions) (_result *SetVodDomainCertificateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetVodDomainCertificateResponse{}
  _body, _err := client.DoRequest(tea.String("SetVodDomainCertificate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetVodDomainCertificate (request *SetVodDomainCertificateRequest) (_result *SetVodDomainCertificateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetVodDomainCertificateResponse{}
  _body, _err := client.SetVodDomainCertificateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) RefreshVodObjectCachesWithOptions (request *RefreshVodObjectCachesRequest, runtime *util.RuntimeOptions) (_result *RefreshVodObjectCachesResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &RefreshVodObjectCachesResponse{}
  _body, _err := client.DoRequest(tea.String("RefreshVodObjectCaches"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) RefreshVodObjectCaches (request *RefreshVodObjectCachesRequest) (_result *RefreshVodObjectCachesResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &RefreshVodObjectCachesResponse{}
  _body, _err := client.RefreshVodObjectCachesWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) PreloadVodObjectCachesWithOptions (request *PreloadVodObjectCachesRequest, runtime *util.RuntimeOptions) (_result *PreloadVodObjectCachesResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &PreloadVodObjectCachesResponse{}
  _body, _err := client.DoRequest(tea.String("PreloadVodObjectCaches"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) PreloadVodObjectCaches (request *PreloadVodObjectCachesRequest) (_result *PreloadVodObjectCachesResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &PreloadVodObjectCachesResponse{}
  _body, _err := client.PreloadVodObjectCachesWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodUserResourcePackageWithOptions (request *DescribeVodUserResourcePackageRequest, runtime *util.RuntimeOptions) (_result *DescribeVodUserResourcePackageResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodUserResourcePackageResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodUserResourcePackage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodUserResourcePackage (request *DescribeVodUserResourcePackageRequest) (_result *DescribeVodUserResourcePackageResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodUserResourcePackageResponse{}
  _body, _err := client.DescribeVodUserResourcePackageWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodUserQuotaWithOptions (request *DescribeVodUserQuotaRequest, runtime *util.RuntimeOptions) (_result *DescribeVodUserQuotaResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodUserQuotaResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodUserQuota"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodUserQuota (request *DescribeVodUserQuotaRequest) (_result *DescribeVodUserQuotaResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodUserQuotaResponse{}
  _body, _err := client.DescribeVodUserQuotaWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodUserDomainsWithOptions (request *DescribeVodUserDomainsRequest, runtime *util.RuntimeOptions) (_result *DescribeVodUserDomainsResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodUserDomainsResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodUserDomains"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodUserDomains (request *DescribeVodUserDomainsRequest) (_result *DescribeVodUserDomainsResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodUserDomainsResponse{}
  _body, _err := client.DescribeVodUserDomainsWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodServiceWithOptions (request *DescribeVodServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeVodServiceResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodServiceResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodService"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodService (request *DescribeVodServiceRequest) (_result *DescribeVodServiceResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodServiceResponse{}
  _body, _err := client.DescribeVodServiceWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodRefreshTasksWithOptions (request *DescribeVodRefreshTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeVodRefreshTasksResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodRefreshTasksResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodRefreshTasks"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodRefreshTasks (request *DescribeVodRefreshTasksRequest) (_result *DescribeVodRefreshTasksResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodRefreshTasksResponse{}
  _body, _err := client.DescribeVodRefreshTasksWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodRefreshQuotaWithOptions (request *DescribeVodRefreshQuotaRequest, runtime *util.RuntimeOptions) (_result *DescribeVodRefreshQuotaResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodRefreshQuotaResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodRefreshQuota"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodRefreshQuota (request *DescribeVodRefreshQuotaRequest) (_result *DescribeVodRefreshQuotaResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodRefreshQuotaResponse{}
  _body, _err := client.DescribeVodRefreshQuotaWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainDetailWithOptions (request *DescribeVodDomainDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainDetailResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainDetailResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainDetail"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainDetail (request *DescribeVodDomainDetailRequest) (_result *DescribeVodDomainDetailResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainDetailResponse{}
  _body, _err := client.DescribeVodDomainDetailWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainConfigsWithOptions (request *DescribeVodDomainConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainConfigsResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainConfigsResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainConfigs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainConfigs (request *DescribeVodDomainConfigsRequest) (_result *DescribeVodDomainConfigsResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainConfigsResponse{}
  _body, _err := client.DescribeVodDomainConfigsWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodCertificateListWithOptions (request *DescribeVodCertificateListRequest, runtime *util.RuntimeOptions) (_result *DescribeVodCertificateListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodCertificateListResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodCertificateList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodCertificateList (request *DescribeVodCertificateListRequest) (_result *DescribeVodCertificateListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodCertificateListResponse{}
  _body, _err := client.DescribeVodCertificateListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeUserVodStatusWithOptions (request *DescribeUserVodStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeUserVodStatusResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeUserVodStatusResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeUserVodStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeUserVodStatus (request *DescribeUserVodStatusRequest) (_result *DescribeUserVodStatusResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeUserVodStatusResponse{}
  _body, _err := client.DescribeUserVodStatusWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteVodDomainWithOptions (request *DeleteVodDomainRequest, runtime *util.RuntimeOptions) (_result *DeleteVodDomainResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteVodDomainResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteVodDomain"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteVodDomain (request *DeleteVodDomainRequest) (_result *DeleteVodDomainResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteVodDomainResponse{}
  _body, _err := client.DeleteVodDomainWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddVodDomainWithOptions (request *AddVodDomainRequest, runtime *util.RuntimeOptions) (_result *AddVodDomainResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddVodDomainResponse{}
  _body, _err := client.DoRequest(tea.String("AddVodDomain"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddVodDomain (request *AddVodDomainRequest) (_result *AddVodDomainResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddVodDomainResponse{}
  _body, _err := client.AddVodDomainWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainLogWithOptions (request *DescribeVodDomainLogRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainLogResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainLogResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainLog"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainLog (request *DescribeVodDomainLogRequest) (_result *DescribeVodDomainLogResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainLogResponse{}
  _body, _err := client.DescribeVodDomainLogWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainCnameWithOptions (request *DescribeVodDomainCnameRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainCnameResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainCnameResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainCname"), tea.String("HTTPS"), tea.String("GET"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainCname (request *DescribeVodDomainCnameRequest) (_result *DescribeVodDomainCnameResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainCnameResponse{}
  _body, _err := client.DescribeVodDomainCnameWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeVodDomainCertificateInfoWithOptions (request *DescribeVodDomainCertificateInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeVodDomainCertificateInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeVodDomainCertificateInfoResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeVodDomainCertificateInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeVodDomainCertificateInfo (request *DescribeVodDomainCertificateInfoRequest) (_result *DescribeVodDomainCertificateInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeVodDomainCertificateInfoResponse{}
  _body, _err := client.DescribeVodDomainCertificateInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UploadMediaByURLWithOptions (request *UploadMediaByURLRequest, runtime *util.RuntimeOptions) (_result *UploadMediaByURLResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UploadMediaByURLResponse{}
  _body, _err := client.DoRequest(tea.String("UploadMediaByURL"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UploadMediaByURL (request *UploadMediaByURLRequest) (_result *UploadMediaByURLResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UploadMediaByURLResponse{}
  _body, _err := client.UploadMediaByURLWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAIServiceWithOptions (request *GetAIServiceRequest, runtime *util.RuntimeOptions) (_result *GetAIServiceResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAIServiceResponse{}
  _body, _err := client.DoRequest(tea.String("GetAIService"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAIService (request *GetAIServiceRequest) (_result *GetAIServiceResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAIServiceResponse{}
  _body, _err := client.GetAIServiceWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetAIServiceWithOptions (request *SetAIServiceRequest, runtime *util.RuntimeOptions) (_result *SetAIServiceResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetAIServiceResponse{}
  _body, _err := client.DoRequest(tea.String("SetAIService"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetAIService (request *SetAIServiceRequest) (_result *SetAIServiceResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetAIServiceResponse{}
  _body, _err := client.SetAIServiceWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetL2OssKeyConfigWithOptions (request *SetL2OssKeyConfigRequest, runtime *util.RuntimeOptions) (_result *SetL2OssKeyConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetL2OssKeyConfigResponse{}
  _body, _err := client.DoRequest(tea.String("SetL2OssKeyConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetL2OssKeyConfig (request *SetL2OssKeyConfigRequest) (_result *SetL2OssKeyConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetL2OssKeyConfigResponse{}
  _body, _err := client.SetL2OssKeyConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetDefaultUploadStorageWithOptions (request *SetDefaultUploadStorageRequest, runtime *util.RuntimeOptions) (_result *SetDefaultUploadStorageResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetDefaultUploadStorageResponse{}
  _body, _err := client.DoRequest(tea.String("SetDefaultUploadStorage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetDefaultUploadStorage (request *SetDefaultUploadStorageRequest) (_result *SetDefaultUploadStorageResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetDefaultUploadStorageResponse{}
  _body, _err := client.SetDefaultUploadStorageWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SearchMediaWithOptions (request *SearchMediaRequest, runtime *util.RuntimeOptions) (_result *SearchMediaResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SearchMediaResponse{}
  _body, _err := client.DoRequest(tea.String("SearchMedia"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SearchMedia (request *SearchMediaRequest) (_result *SearchMediaResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SearchMediaResponse{}
  _body, _err := client.SearchMediaWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateVideoInfosWithOptions (request *UpdateVideoInfosRequest, runtime *util.RuntimeOptions) (_result *UpdateVideoInfosResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateVideoInfosResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateVideoInfos"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateVideoInfos (request *UpdateVideoInfosRequest) (_result *UpdateVideoInfosResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateVideoInfosResponse{}
  _body, _err := client.UpdateVideoInfosWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GenerateDownloadSecretKeyWithOptions (request *GenerateDownloadSecretKeyRequest, runtime *util.RuntimeOptions) (_result *GenerateDownloadSecretKeyResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GenerateDownloadSecretKeyResponse{}
  _body, _err := client.DoRequest(tea.String("GenerateDownloadSecretKey"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GenerateDownloadSecretKey (request *GenerateDownloadSecretKeyRequest) (_result *GenerateDownloadSecretKeyResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GenerateDownloadSecretKeyResponse{}
  _body, _err := client.GenerateDownloadSecretKeyWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AssumeSlsRoleWithOptions (request *AssumeSlsRoleRequest, runtime *util.RuntimeOptions) (_result *AssumeSlsRoleResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AssumeSlsRoleResponse{}
  _body, _err := client.DoRequest(tea.String("AssumeSlsRole"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("Anonymous"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AssumeSlsRole (request *AssumeSlsRoleRequest) (_result *AssumeSlsRoleResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AssumeSlsRoleResponse{}
  _body, _err := client.AssumeSlsRoleWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetPersonalStorageListWithOptions (request *GetPersonalStorageListRequest, runtime *util.RuntimeOptions) (_result *GetPersonalStorageListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetPersonalStorageListResponse{}
  _body, _err := client.DoRequest(tea.String("GetPersonalStorageList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetPersonalStorageList (request *GetPersonalStorageListRequest) (_result *GetPersonalStorageListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetPersonalStorageListResponse{}
  _body, _err := client.GetPersonalStorageListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetStorageRegionListWithOptions (request *GetStorageRegionListRequest, runtime *util.RuntimeOptions) (_result *GetStorageRegionListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetStorageRegionListResponse{}
  _body, _err := client.DoRequest(tea.String("GetStorageRegionList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetStorageRegionList (request *GetStorageRegionListRequest) (_result *GetStorageRegionListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetStorageRegionListResponse{}
  _body, _err := client.GetStorageRegionListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetStorageACLWithOptions (request *SetStorageACLRequest, runtime *util.RuntimeOptions) (_result *SetStorageACLResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetStorageACLResponse{}
  _body, _err := client.DoRequest(tea.String("SetStorageACL"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetStorageACL (request *SetStorageACLRequest) (_result *SetStorageACLResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetStorageACLResponse{}
  _body, _err := client.SetStorageACLWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMessageCallbackEventListWithOptions (request *GetMessageCallbackEventListRequest, runtime *util.RuntimeOptions) (_result *GetMessageCallbackEventListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMessageCallbackEventListResponse{}
  _body, _err := client.DoRequest(tea.String("GetMessageCallbackEventList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMessageCallbackEventList (request *GetMessageCallbackEventListRequest) (_result *GetMessageCallbackEventListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMessageCallbackEventListResponse{}
  _body, _err := client.GetMessageCallbackEventListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetStorageInfoWithOptions (request *GetStorageInfoRequest, runtime *util.RuntimeOptions) (_result *GetStorageInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetStorageInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetStorageInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetStorageInfo (request *GetStorageInfoRequest) (_result *GetStorageInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetStorageInfoResponse{}
  _body, _err := client.GetStorageInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteStorageWithOptions (request *DeleteStorageRequest, runtime *util.RuntimeOptions) (_result *DeleteStorageResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteStorageResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteStorage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteStorage (request *DeleteStorageRequest) (_result *DeleteStorageResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteStorageResponse{}
  _body, _err := client.DeleteStorageWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddStorageWithOptions (request *AddStorageRequest, runtime *util.RuntimeOptions) (_result *AddStorageResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddStorageResponse{}
  _body, _err := client.DoRequest(tea.String("AddStorage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddStorage (request *AddStorageRequest) (_result *AddStorageResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddStorageResponse{}
  _body, _err := client.AddStorageWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetStorageListWithOptions (request *GetStorageListRequest, runtime *util.RuntimeOptions) (_result *GetStorageListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetStorageListResponse{}
  _body, _err := client.DoRequest(tea.String("GetStorageList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetStorageList (request *GetStorageListRequest) (_result *GetStorageListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetStorageListResponse{}
  _body, _err := client.GetStorageListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetThirdPartPlayPolicyWithOptions (request *GetThirdPartPlayPolicyRequest, runtime *util.RuntimeOptions) (_result *GetThirdPartPlayPolicyResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetThirdPartPlayPolicyResponse{}
  _body, _err := client.DoRequest(tea.String("GetThirdPartPlayPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("Anonymous"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetThirdPartPlayPolicy (request *GetThirdPartPlayPolicyRequest) (_result *GetThirdPartPlayPolicyResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetThirdPartPlayPolicyResponse{}
  _body, _err := client.GetThirdPartPlayPolicyWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddThirdPartPlayPolicyWithOptions (request *AddThirdPartPlayPolicyRequest, runtime *util.RuntimeOptions) (_result *AddThirdPartPlayPolicyResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddThirdPartPlayPolicyResponse{}
  _body, _err := client.DoRequest(tea.String("AddThirdPartPlayPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("Anonymous"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddThirdPartPlayPolicy (request *AddThirdPartPlayPolicyRequest) (_result *AddThirdPartPlayPolicyResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddThirdPartPlayPolicyResponse{}
  _body, _err := client.AddThirdPartPlayPolicyWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AuthorizeAppLicenseWithOptions (request *AuthorizeAppLicenseRequest, runtime *util.RuntimeOptions) (_result *AuthorizeAppLicenseResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AuthorizeAppLicenseResponse{}
  _body, _err := client.DoRequest(tea.String("AuthorizeAppLicense"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AuthorizeAppLicense (request *AuthorizeAppLicenseRequest) (_result *AuthorizeAppLicenseResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AuthorizeAppLicenseResponse{}
  _body, _err := client.AuthorizeAppLicenseWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAppLicenseWithOptions (request *GetAppLicenseRequest, runtime *util.RuntimeOptions) (_result *GetAppLicenseResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAppLicenseResponse{}
  _body, _err := client.DoRequest(tea.String("GetAppLicense"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAppLicense (request *GetAppLicenseRequest) (_result *GetAppLicenseResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAppLicenseResponse{}
  _body, _err := client.GetAppLicenseWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateAppLicenseWithOptions (request *UpdateAppLicenseRequest, runtime *util.RuntimeOptions) (_result *UpdateAppLicenseResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateAppLicenseResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateAppLicense"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateAppLicense (request *UpdateAppLicenseRequest) (_result *UpdateAppLicenseResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateAppLicenseResponse{}
  _body, _err := client.UpdateAppLicenseWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddAppLicenseWithOptions (request *AddAppLicenseRequest, runtime *util.RuntimeOptions) (_result *AddAppLicenseResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddAppLicenseResponse{}
  _body, _err := client.DoRequest(tea.String("AddAppLicense"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddAppLicense (request *AddAppLicenseRequest) (_result *AddAppLicenseResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddAppLicenseResponse{}
  _body, _err := client.AddAppLicenseWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAppLicenseListWithOptions (request *GetAppLicenseListRequest, runtime *util.RuntimeOptions) (_result *GetAppLicenseListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAppLicenseListResponse{}
  _body, _err := client.DoRequest(tea.String("GetAppLicenseList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAppLicenseList (request *GetAppLicenseListRequest) (_result *GetAppLicenseListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAppLicenseListResponse{}
  _body, _err := client.GetAppLicenseListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SPIPhysicalDeleteResourceActionWithOptions (request *SPIPhysicalDeleteResourceActionRequest, runtime *util.RuntimeOptions) (_result *SPIPhysicalDeleteResourceActionResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SPIPhysicalDeleteResourceActionResponse{}
  _body, _err := client.DoRequest(tea.String("SPIPhysicalDeleteResourceAction"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SPIPhysicalDeleteResourceAction (request *SPIPhysicalDeleteResourceActionRequest) (_result *SPIPhysicalDeleteResourceActionResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SPIPhysicalDeleteResourceActionResponse{}
  _body, _err := client.SPIPhysicalDeleteResourceActionWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SPICheckResourceActionWithOptions (request *SPICheckResourceActionRequest, runtime *util.RuntimeOptions) (_result *SPICheckResourceActionResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SPICheckResourceActionResponse{}
  _body, _err := client.DoRequest(tea.String("SPICheckResourceAction"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SPICheckResourceAction (request *SPICheckResourceActionRequest) (_result *SPICheckResourceActionResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SPICheckResourceActionResponse{}
  _body, _err := client.SPICheckResourceActionWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SPILogicalDeleteResourceActionWithOptions (request *SPILogicalDeleteResourceActionRequest, runtime *util.RuntimeOptions) (_result *SPILogicalDeleteResourceActionResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SPILogicalDeleteResourceActionResponse{}
  _body, _err := client.DoRequest(tea.String("SPILogicalDeleteResourceAction"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SPILogicalDeleteResourceAction (request *SPILogicalDeleteResourceActionRequest) (_result *SPILogicalDeleteResourceActionResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SPILogicalDeleteResourceActionResponse{}
  _body, _err := client.SPILogicalDeleteResourceActionWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitPreprocessJobsWithOptions (request *SubmitPreprocessJobsRequest, runtime *util.RuntimeOptions) (_result *SubmitPreprocessJobsResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitPreprocessJobsResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitPreprocessJobs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitPreprocessJobs (request *SubmitPreprocessJobsRequest) (_result *SubmitPreprocessJobsResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitPreprocessJobsResponse{}
  _body, _err := client.SubmitPreprocessJobsWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) QueryOrderParamWithOptions (request *QueryOrderParamRequest, runtime *util.RuntimeOptions) (_result *QueryOrderParamResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &QueryOrderParamResponse{}
  _body, _err := client.DoRequest(tea.String("QueryOrderParam"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) QueryOrderParam (request *QueryOrderParamRequest) (_result *QueryOrderParamResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &QueryOrderParamResponse{}
  _body, _err := client.QueryOrderParamWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AssumeExperienceRoleWithOptions (request *AssumeExperienceRoleRequest, runtime *util.RuntimeOptions) (_result *AssumeExperienceRoleResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AssumeExperienceRoleResponse{}
  _body, _err := client.DoRequest(tea.String("AssumeExperienceRole"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("Anonymous"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AssumeExperienceRole (request *AssumeExperienceRoleRequest) (_result *AssumeExperienceRoleResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AssumeExperienceRoleResponse{}
  _body, _err := client.AssumeExperienceRoleWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListSnapshotsWithOptions (request *ListSnapshotsRequest, runtime *util.RuntimeOptions) (_result *ListSnapshotsResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListSnapshotsResponse{}
  _body, _err := client.DoRequest(tea.String("ListSnapshots"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListSnapshots (request *ListSnapshotsRequest) (_result *ListSnapshotsResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListSnapshotsResponse{}
  _body, _err := client.ListSnapshotsWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetDefaultPlayDomainWithOptions (request *SetDefaultPlayDomainRequest, runtime *util.RuntimeOptions) (_result *SetDefaultPlayDomainResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetDefaultPlayDomainResponse{}
  _body, _err := client.DoRequest(tea.String("SetDefaultPlayDomain"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetDefaultPlayDomain (request *SetDefaultPlayDomainRequest) (_result *SetDefaultPlayDomainResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetDefaultPlayDomainResponse{}
  _body, _err := client.SetDefaultPlayDomainWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) EditVideoIndexFileWithOptions (request *EditVideoIndexFileRequest, runtime *util.RuntimeOptions) (_result *EditVideoIndexFileResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &EditVideoIndexFileResponse{}
  _body, _err := client.DoRequest(tea.String("EditVideoIndexFile"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) EditVideoIndexFile (request *EditVideoIndexFileRequest) (_result *EditVideoIndexFileResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &EditVideoIndexFileResponse{}
  _body, _err := client.EditVideoIndexFileWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetCDNDomainServerCertificateWithOptions (request *SetCDNDomainServerCertificateRequest, runtime *util.RuntimeOptions) (_result *SetCDNDomainServerCertificateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetCDNDomainServerCertificateResponse{}
  _body, _err := client.DoRequest(tea.String("SetCDNDomainServerCertificate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetCDNDomainServerCertificate (request *SetCDNDomainServerCertificateRequest) (_result *SetCDNDomainServerCertificateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetCDNDomainServerCertificateResponse{}
  _body, _err := client.SetCDNDomainServerCertificateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetCDNForceRedirectConfigWithOptions (request *SetCDNForceRedirectConfigRequest, runtime *util.RuntimeOptions) (_result *SetCDNForceRedirectConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetCDNForceRedirectConfigResponse{}
  _body, _err := client.DoRequest(tea.String("SetCDNForceRedirectConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetCDNForceRedirectConfig (request *SetCDNForceRedirectConfigRequest) (_result *SetCDNForceRedirectConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetCDNForceRedirectConfigResponse{}
  _body, _err := client.SetCDNForceRedirectConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitTranscodeJobsWithOptions (request *SubmitTranscodeJobsRequest, runtime *util.RuntimeOptions) (_result *SubmitTranscodeJobsResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitTranscodeJobsResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitTranscodeJobs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitTranscodeJobs (request *SubmitTranscodeJobsRequest) (_result *SubmitTranscodeJobsResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitTranscodeJobsResponse{}
  _body, _err := client.SubmitTranscodeJobsWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAuditResultWithOptions (request *GetAuditResultRequest, runtime *util.RuntimeOptions) (_result *GetAuditResultResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAuditResultResponse{}
  _body, _err := client.DoRequest(tea.String("GetAuditResult"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAuditResult (request *GetAuditResultRequest) (_result *GetAuditResultResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAuditResultResponse{}
  _body, _err := client.GetAuditResultWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CreateAuditWithOptions (request *CreateAuditRequest, runtime *util.RuntimeOptions) (_result *CreateAuditResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CreateAuditResponse{}
  _body, _err := client.DoRequest(tea.String("CreateAudit"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CreateAudit (request *CreateAuditRequest) (_result *CreateAuditResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CreateAuditResponse{}
  _body, _err := client.CreateAuditWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAuditHistoryWithOptions (request *GetAuditHistoryRequest, runtime *util.RuntimeOptions) (_result *GetAuditHistoryResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAuditHistoryResponse{}
  _body, _err := client.DoRequest(tea.String("GetAuditHistory"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAuditHistory (request *GetAuditHistoryRequest) (_result *GetAuditHistoryResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAuditHistoryResponse{}
  _body, _err := client.GetAuditHistoryWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) FinishLiveStreamRecordWithOptions (request *FinishLiveStreamRecordRequest, runtime *util.RuntimeOptions) (_result *FinishLiveStreamRecordResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &FinishLiveStreamRecordResponse{}
  _body, _err := client.DoRequest(tea.String("FinishLiveStreamRecord"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) FinishLiveStreamRecord (request *FinishLiveStreamRecordRequest) (_result *FinishLiveStreamRecordResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &FinishLiveStreamRecordResponse{}
  _body, _err := client.FinishLiveStreamRecordWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListLiveRecordVideoWithOptions (request *ListLiveRecordVideoRequest, runtime *util.RuntimeOptions) (_result *ListLiveRecordVideoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListLiveRecordVideoResponse{}
  _body, _err := client.DoRequest(tea.String("ListLiveRecordVideo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListLiveRecordVideo (request *ListLiveRecordVideoRequest) (_result *ListLiveRecordVideoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListLiveRecordVideoResponse{}
  _body, _err := client.ListLiveRecordVideoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddLiveStreamVideoWithOptions (request *AddLiveStreamVideoRequest, runtime *util.RuntimeOptions) (_result *AddLiveStreamVideoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddLiveStreamVideoResponse{}
  _body, _err := client.DoRequest(tea.String("AddLiveStreamVideo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddLiveStreamVideo (request *AddLiveStreamVideoRequest) (_result *AddLiveStreamVideoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddLiveStreamVideoResponse{}
  _body, _err := client.AddLiveStreamVideoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetTemplateGroupPropertyWithOptions (request *SetTemplateGroupPropertyRequest, runtime *util.RuntimeOptions) (_result *SetTemplateGroupPropertyResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetTemplateGroupPropertyResponse{}
  _body, _err := client.DoRequest(tea.String("SetTemplateGroupProperty"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetTemplateGroupProperty (request *SetTemplateGroupPropertyRequest) (_result *SetTemplateGroupPropertyResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetTemplateGroupPropertyResponse{}
  _body, _err := client.SetTemplateGroupPropertyWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) QueryUploadInfoWithOptions (request *QueryUploadInfoRequest, runtime *util.RuntimeOptions) (_result *QueryUploadInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &QueryUploadInfoResponse{}
  _body, _err := client.DoRequest(tea.String("QueryUploadInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) QueryUploadInfo (request *QueryUploadInfoRequest) (_result *QueryUploadInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &QueryUploadInfoResponse{}
  _body, _err := client.QueryUploadInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) FaceRegistrationWithOptions (request *FaceRegistrationRequest, runtime *util.RuntimeOptions) (_result *FaceRegistrationResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &FaceRegistrationResponse{}
  _body, _err := client.DoRequest(tea.String("FaceRegistration"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) FaceRegistration (request *FaceRegistrationRequest) (_result *FaceRegistrationResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &FaceRegistrationResponse{}
  _body, _err := client.FaceRegistrationWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAIJobWithOptions (request *ListAIJobRequest, runtime *util.RuntimeOptions) (_result *ListAIJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAIJobResponse{}
  _body, _err := client.DoRequest(tea.String("ListAIJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAIJob (request *ListAIJobRequest) (_result *ListAIJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAIJobResponse{}
  _body, _err := client.ListAIJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitAIJobWithOptions (request *SubmitAIJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAIJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitAIJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitAIJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitAIJob (request *SubmitAIJobRequest) (_result *SubmitAIJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitAIJobResponse{}
  _body, _err := client.SubmitAIJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetImageInfoWithOptions (request *GetImageInfoRequest, runtime *util.RuntimeOptions) (_result *GetImageInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetImageInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetImageInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetImageInfo (request *GetImageInfoRequest) (_result *GetImageInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetImageInfoResponse{}
  _body, _err := client.GetImageInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateWatermarkInfoWithOptions (request *UpdateWatermarkInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateWatermarkInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateWatermarkInfoResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateWatermarkInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateWatermarkInfo (request *UpdateWatermarkInfoRequest) (_result *UpdateWatermarkInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateWatermarkInfoResponse{}
  _body, _err := client.UpdateWatermarkInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateWatermarkGroupWithOptions (request *UpdateWatermarkGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateWatermarkGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateWatermarkGroupResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateWatermarkGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateWatermarkGroup (request *UpdateWatermarkGroupRequest) (_result *UpdateWatermarkGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateWatermarkGroupResponse{}
  _body, _err := client.UpdateWatermarkGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListWatermarkInfoWithOptions (request *ListWatermarkInfoRequest, runtime *util.RuntimeOptions) (_result *ListWatermarkInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListWatermarkInfoResponse{}
  _body, _err := client.DoRequest(tea.String("ListWatermarkInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListWatermarkInfo (request *ListWatermarkInfoRequest) (_result *ListWatermarkInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListWatermarkInfoResponse{}
  _body, _err := client.ListWatermarkInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListCompanionresourceInfoWithOptions (request *ListCompanionresourceInfoRequest, runtime *util.RuntimeOptions) (_result *ListCompanionresourceInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListCompanionresourceInfoResponse{}
  _body, _err := client.DoRequest(tea.String("ListCompanionresourceInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListCompanionresourceInfo (request *ListCompanionresourceInfoRequest) (_result *ListCompanionresourceInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListCompanionresourceInfoResponse{}
  _body, _err := client.ListCompanionresourceInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetWatermarkInfoWithOptions (request *GetWatermarkInfoRequest, runtime *util.RuntimeOptions) (_result *GetWatermarkInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetWatermarkInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetWatermarkInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetWatermarkInfo (request *GetWatermarkInfoRequest) (_result *GetWatermarkInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetWatermarkInfoResponse{}
  _body, _err := client.GetWatermarkInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetWatermarkGroupWithOptions (request *GetWatermarkGroupRequest, runtime *util.RuntimeOptions) (_result *GetWatermarkGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetWatermarkGroupResponse{}
  _body, _err := client.DoRequest(tea.String("GetWatermarkGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetWatermarkGroup (request *GetWatermarkGroupRequest) (_result *GetWatermarkGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetWatermarkGroupResponse{}
  _body, _err := client.GetWatermarkGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCompanionresourceInfoWithOptions (request *GetCompanionresourceInfoRequest, runtime *util.RuntimeOptions) (_result *GetCompanionresourceInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCompanionresourceInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetCompanionresourceInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCompanionresourceInfo (request *GetCompanionresourceInfoRequest) (_result *GetCompanionresourceInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCompanionresourceInfoResponse{}
  _body, _err := client.GetCompanionresourceInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteWatermarkRelationWithOptions (request *DeleteWatermarkRelationRequest, runtime *util.RuntimeOptions) (_result *DeleteWatermarkRelationResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteWatermarkRelationResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteWatermarkRelation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteWatermarkRelation (request *DeleteWatermarkRelationRequest) (_result *DeleteWatermarkRelationResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteWatermarkRelationResponse{}
  _body, _err := client.DeleteWatermarkRelationWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteWatermarkInfoWithOptions (request *DeleteWatermarkInfoRequest, runtime *util.RuntimeOptions) (_result *DeleteWatermarkInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteWatermarkInfoResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteWatermarkInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteWatermarkInfo (request *DeleteWatermarkInfoRequest) (_result *DeleteWatermarkInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteWatermarkInfoResponse{}
  _body, _err := client.DeleteWatermarkInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteWatermarkGroupWithOptions (request *DeleteWatermarkGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteWatermarkGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteWatermarkGroupResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteWatermarkGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteWatermarkGroup (request *DeleteWatermarkGroupRequest) (_result *DeleteWatermarkGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteWatermarkGroupResponse{}
  _body, _err := client.DeleteWatermarkGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteCompanionresourceInfoWithOptions (request *DeleteCompanionresourceInfoRequest, runtime *util.RuntimeOptions) (_result *DeleteCompanionresourceInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteCompanionresourceInfoResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteCompanionresourceInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteCompanionresourceInfo (request *DeleteCompanionresourceInfoRequest) (_result *DeleteCompanionresourceInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteCompanionresourceInfoResponse{}
  _body, _err := client.DeleteCompanionresourceInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CreateUploadMediaFileWithOptions (request *CreateUploadMediaFileRequest, runtime *util.RuntimeOptions) (_result *CreateUploadMediaFileResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CreateUploadMediaFileResponse{}
  _body, _err := client.DoRequest(tea.String("CreateUploadMediaFile"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CreateUploadMediaFile (request *CreateUploadMediaFileRequest) (_result *CreateUploadMediaFileResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CreateUploadMediaFileResponse{}
  _body, _err := client.CreateUploadMediaFileWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddWatermarkRelationWithOptions (request *AddWatermarkRelationRequest, runtime *util.RuntimeOptions) (_result *AddWatermarkRelationResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddWatermarkRelationResponse{}
  _body, _err := client.DoRequest(tea.String("AddWatermarkRelation"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddWatermarkRelation (request *AddWatermarkRelationRequest) (_result *AddWatermarkRelationResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddWatermarkRelationResponse{}
  _body, _err := client.AddWatermarkRelationWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddWatermarkInfoWithOptions (request *AddWatermarkInfoRequest, runtime *util.RuntimeOptions) (_result *AddWatermarkInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddWatermarkInfoResponse{}
  _body, _err := client.DoRequest(tea.String("AddWatermarkInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddWatermarkInfo (request *AddWatermarkInfoRequest) (_result *AddWatermarkInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddWatermarkInfoResponse{}
  _body, _err := client.AddWatermarkInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddWatermarkGroupWithOptions (request *AddWatermarkGroupRequest, runtime *util.RuntimeOptions) (_result *AddWatermarkGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddWatermarkGroupResponse{}
  _body, _err := client.DoRequest(tea.String("AddWatermarkGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddWatermarkGroup (request *AddWatermarkGroupRequest) (_result *AddWatermarkGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddWatermarkGroupResponse{}
  _body, _err := client.AddWatermarkGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddCompanionresourceInfoWithOptions (request *AddCompanionresourceInfoRequest, runtime *util.RuntimeOptions) (_result *AddCompanionresourceInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddCompanionresourceInfoResponse{}
  _body, _err := client.DoRequest(tea.String("AddCompanionresourceInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddCompanionresourceInfo (request *AddCompanionresourceInfoRequest) (_result *AddCompanionresourceInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddCompanionresourceInfoResponse{}
  _body, _err := client.AddCompanionresourceInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) OpenVodServiceWithOptions (request *OpenVodServiceRequest, runtime *util.RuntimeOptions) (_result *OpenVodServiceResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &OpenVodServiceResponse{}
  _body, _err := client.DoRequest(tea.String("OpenVodService"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) OpenVodService (request *OpenVodServiceRequest) (_result *OpenVodServiceResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &OpenVodServiceResponse{}
  _body, _err := client.OpenVodServiceWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitAIVideoCategoryJobWithOptions (request *SubmitAIVideoCategoryJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAIVideoCategoryJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitAIVideoCategoryJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitAIVideoCategoryJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitAIVideoCategoryJob (request *SubmitAIVideoCategoryJobRequest) (_result *SubmitAIVideoCategoryJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitAIVideoCategoryJobResponse{}
  _body, _err := client.SubmitAIVideoCategoryJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAIVideoCategoryJobWithOptions (request *ListAIVideoCategoryJobRequest, runtime *util.RuntimeOptions) (_result *ListAIVideoCategoryJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAIVideoCategoryJobResponse{}
  _body, _err := client.DoRequest(tea.String("ListAIVideoCategoryJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAIVideoCategoryJob (request *ListAIVideoCategoryJobRequest) (_result *ListAIVideoCategoryJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAIVideoCategoryJobResponse{}
  _body, _err := client.ListAIVideoCategoryJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CreateOrderWithOptions (request *CreateOrderRequest, runtime *util.RuntimeOptions) (_result *CreateOrderResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CreateOrderResponse{}
  _body, _err := client.DoRequest(tea.String("CreateOrder"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CreateOrder (request *CreateOrderRequest) (_result *CreateOrderResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CreateOrderResponse{}
  _body, _err := client.CreateOrderWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetBatchPlayInfoWithOptions (request *GetBatchPlayInfoRequest, runtime *util.RuntimeOptions) (_result *GetBatchPlayInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetBatchPlayInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetBatchPlayInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetBatchPlayInfo (request *GetBatchPlayInfoRequest) (_result *GetBatchPlayInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetBatchPlayInfoResponse{}
  _body, _err := client.GetBatchPlayInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitAIVideoTerrorismRecogJobWithOptions (request *SubmitAIVideoTerrorismRecogJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAIVideoTerrorismRecogJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitAIVideoTerrorismRecogJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitAIVideoTerrorismRecogJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitAIVideoTerrorismRecogJob (request *SubmitAIVideoTerrorismRecogJobRequest) (_result *SubmitAIVideoTerrorismRecogJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitAIVideoTerrorismRecogJobResponse{}
  _body, _err := client.SubmitAIVideoTerrorismRecogJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitAIVideoCensorJobWithOptions (request *SubmitAIVideoCensorJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAIVideoCensorJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitAIVideoCensorJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitAIVideoCensorJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitAIVideoCensorJob (request *SubmitAIVideoCensorJobRequest) (_result *SubmitAIVideoCensorJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitAIVideoCensorJobResponse{}
  _body, _err := client.SubmitAIVideoCensorJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAIVideoTerrorismRecogJobWithOptions (request *ListAIVideoTerrorismRecogJobRequest, runtime *util.RuntimeOptions) (_result *ListAIVideoTerrorismRecogJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAIVideoTerrorismRecogJobResponse{}
  _body, _err := client.DoRequest(tea.String("ListAIVideoTerrorismRecogJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAIVideoTerrorismRecogJob (request *ListAIVideoTerrorismRecogJobRequest) (_result *ListAIVideoTerrorismRecogJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAIVideoTerrorismRecogJobResponse{}
  _body, _err := client.ListAIVideoTerrorismRecogJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAIVideoCensorJobWithOptions (request *ListAIVideoCensorJobRequest, runtime *util.RuntimeOptions) (_result *ListAIVideoCensorJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAIVideoCensorJobResponse{}
  _body, _err := client.DoRequest(tea.String("ListAIVideoCensorJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAIVideoCensorJob (request *ListAIVideoCensorJobRequest) (_result *ListAIVideoCensorJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAIVideoCensorJobResponse{}
  _body, _err := client.ListAIVideoCensorJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteStreamWithOptions (request *DeleteStreamRequest, runtime *util.RuntimeOptions) (_result *DeleteStreamResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteStreamResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteStream"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteStream (request *DeleteStreamRequest) (_result *DeleteStreamResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteStreamResponse{}
  _body, _err := client.DeleteStreamWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitSnapshotJobWithOptions (request *SubmitSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSnapshotJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitSnapshotJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitSnapshotJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitSnapshotJob (request *SubmitSnapshotJobRequest) (_result *SubmitSnapshotJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitSnapshotJobResponse{}
  _body, _err := client.SubmitSnapshotJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeDomainFlowDataWithOptions (request *DescribeDomainFlowDataRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainFlowDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeDomainFlowDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeDomainFlowData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeDomainFlowData (request *DescribeDomainFlowDataRequest) (_result *DescribeDomainFlowDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeDomainFlowDataResponse{}
  _body, _err := client.DescribeDomainFlowDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeDomainBpsDataWithOptions (request *DescribeDomainBpsDataRequest, runtime *util.RuntimeOptions) (_result *DescribeDomainBpsDataResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeDomainBpsDataResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeDomainBpsData"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeDomainBpsData (request *DescribeDomainBpsDataRequest) (_result *DescribeDomainBpsDataResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeDomainBpsDataResponse{}
  _body, _err := client.DescribeDomainBpsDataWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeCdnDomainLogsWithOptions (request *DescribeCdnDomainLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeCdnDomainLogsResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeCdnDomainLogsResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeCdnDomainLogs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeCdnDomainLogs (request *DescribeCdnDomainLogsRequest) (_result *DescribeCdnDomainLogsResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeCdnDomainLogsResponse{}
  _body, _err := client.DescribeCdnDomainLogsWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitAIVideoSummaryJobWithOptions (request *SubmitAIVideoSummaryJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAIVideoSummaryJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitAIVideoSummaryJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitAIVideoSummaryJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitAIVideoSummaryJob (request *SubmitAIVideoSummaryJobRequest) (_result *SubmitAIVideoSummaryJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitAIVideoSummaryJobResponse{}
  _body, _err := client.SubmitAIVideoSummaryJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAIVideoSummaryJobWithOptions (request *ListAIVideoSummaryJobRequest, runtime *util.RuntimeOptions) (_result *ListAIVideoSummaryJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAIVideoSummaryJobResponse{}
  _body, _err := client.DoRequest(tea.String("ListAIVideoSummaryJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAIVideoSummaryJob (request *ListAIVideoSummaryJobRequest) (_result *ListAIVideoSummaryJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAIVideoSummaryJobResponse{}
  _body, _err := client.ListAIVideoSummaryJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeUserVvTopByDayWithOptions (request *DescribeUserVvTopByDayRequest, runtime *util.RuntimeOptions) (_result *DescribeUserVvTopByDayResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeUserVvTopByDayResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeUserVvTopByDay"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeUserVvTopByDay (request *DescribeUserVvTopByDayRequest) (_result *DescribeUserVvTopByDayResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeUserVvTopByDayResponse{}
  _body, _err := client.DescribeUserVvTopByDayWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeUserVvByVideoidWithOptions (request *DescribeUserVvByVideoidRequest, runtime *util.RuntimeOptions) (_result *DescribeUserVvByVideoidResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeUserVvByVideoidResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeUserVvByVideoid"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeUserVvByVideoid (request *DescribeUserVvByVideoidRequest) (_result *DescribeUserVvByVideoidResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeUserVvByVideoidResponse{}
  _body, _err := client.DescribeUserVvByVideoidWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeUserVvByDayWithOptions (request *DescribeUserVvByDayRequest, runtime *util.RuntimeOptions) (_result *DescribeUserVvByDayResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeUserVvByDayResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeUserVvByDay"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeUserVvByDay (request *DescribeUserVvByDayRequest) (_result *DescribeUserVvByDayResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeUserVvByDayResponse{}
  _body, _err := client.DescribeUserVvByDayWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeUserUvByDayWithOptions (request *DescribeUserUvByDayRequest, runtime *util.RuntimeOptions) (_result *DescribeUserUvByDayResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeUserUvByDayResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeUserUvByDay"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeUserUvByDay (request *DescribeUserUvByDayRequest) (_result *DescribeUserUvByDayResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeUserUvByDayResponse{}
  _body, _err := client.DescribeUserUvByDayWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeUserTimeRangeByDayWithOptions (request *DescribeUserTimeRangeByDayRequest, runtime *util.RuntimeOptions) (_result *DescribeUserTimeRangeByDayResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeUserTimeRangeByDayResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeUserTimeRangeByDay"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeUserTimeRangeByDay (request *DescribeUserTimeRangeByDayRequest) (_result *DescribeUserTimeRangeByDayResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeUserTimeRangeByDayResponse{}
  _body, _err := client.DescribeUserTimeRangeByDayWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeUserAvgTimeByDayWithOptions (request *DescribeUserAvgTimeByDayRequest, runtime *util.RuntimeOptions) (_result *DescribeUserAvgTimeByDayResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeUserAvgTimeByDayResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeUserAvgTimeByDay"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeUserAvgTimeByDay (request *DescribeUserAvgTimeByDayRequest) (_result *DescribeUserAvgTimeByDayResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeUserAvgTimeByDayResponse{}
  _body, _err := client.DescribeUserAvgTimeByDayWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DescribeUserAvgCountByDayWithOptions (request *DescribeUserAvgCountByDayRequest, runtime *util.RuntimeOptions) (_result *DescribeUserAvgCountByDayResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DescribeUserAvgCountByDayResponse{}
  _body, _err := client.DoRequest(tea.String("DescribeUserAvgCountByDay"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DescribeUserAvgCountByDay (request *DescribeUserAvgCountByDayRequest) (_result *DescribeUserAvgCountByDayResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DescribeUserAvgCountByDayResponse{}
  _body, _err := client.DescribeUserAvgCountByDayWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetDefaultTemplateGroupWithOptions (request *SetDefaultTemplateGroupRequest, runtime *util.RuntimeOptions) (_result *SetDefaultTemplateGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetDefaultTemplateGroupResponse{}
  _body, _err := client.DoRequest(tea.String("SetDefaultTemplateGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetDefaultTemplateGroup (request *SetDefaultTemplateGroupRequest) (_result *SetDefaultTemplateGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetDefaultTemplateGroupResponse{}
  _body, _err := client.SetDefaultTemplateGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitAIASRJobWithOptions (request *SubmitAIASRJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAIASRJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitAIASRJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitAIASRJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitAIASRJob (request *SubmitAIASRJobRequest) (_result *SubmitAIASRJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitAIASRJobResponse{}
  _body, _err := client.SubmitAIASRJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAIASRJobWithOptions (request *ListAIASRJobRequest, runtime *util.RuntimeOptions) (_result *ListAIASRJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAIASRJobResponse{}
  _body, _err := client.DoRequest(tea.String("ListAIASRJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAIASRJob (request *ListAIASRJobRequest) (_result *ListAIASRJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAIASRJobResponse{}
  _body, _err := client.ListAIASRJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMezzanineInfoWithOptions (request *GetMezzanineInfoRequest, runtime *util.RuntimeOptions) (_result *GetMezzanineInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMezzanineInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetMezzanineInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMezzanineInfo (request *GetMezzanineInfoRequest) (_result *GetMezzanineInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMezzanineInfoResponse{}
  _body, _err := client.GetMezzanineInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateTemplateGroupWithOptions (request *UpdateTemplateGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateTemplateGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateTemplateGroupResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateTemplateGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateTemplateGroup (request *UpdateTemplateGroupRequest) (_result *UpdateTemplateGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateTemplateGroupResponse{}
  _body, _err := client.UpdateTemplateGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateCustomTemplateAndGroupWithOptions (request *UpdateCustomTemplateAndGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateCustomTemplateAndGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateCustomTemplateAndGroupResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateCustomTemplateAndGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateCustomTemplateAndGroup (request *UpdateCustomTemplateAndGroupRequest) (_result *UpdateCustomTemplateAndGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateCustomTemplateAndGroupResponse{}
  _body, _err := client.UpdateCustomTemplateAndGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateCustomTemplateWithOptions (request *UpdateCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateCustomTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateCustomTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateCustomTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateCustomTemplate (request *UpdateCustomTemplateRequest) (_result *UpdateCustomTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateCustomTemplateResponse{}
  _body, _err := client.UpdateCustomTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListTemplateGroupWithOptions (request *ListTemplateGroupRequest, runtime *util.RuntimeOptions) (_result *ListTemplateGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListTemplateGroupResponse{}
  _body, _err := client.DoRequest(tea.String("ListTemplateGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListTemplateGroup (request *ListTemplateGroupRequest) (_result *ListTemplateGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListTemplateGroupResponse{}
  _body, _err := client.ListTemplateGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListCustomTemplateWithOptions (request *ListCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *ListCustomTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListCustomTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("ListCustomTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListCustomTemplate (request *ListCustomTemplateRequest) (_result *ListCustomTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListCustomTemplateResponse{}
  _body, _err := client.ListCustomTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) InitSystemTemplateGroupWithOptions (request *InitSystemTemplateGroupRequest, runtime *util.RuntimeOptions) (_result *InitSystemTemplateGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &InitSystemTemplateGroupResponse{}
  _body, _err := client.DoRequest(tea.String("InitSystemTemplateGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) InitSystemTemplateGroup (request *InitSystemTemplateGroupRequest) (_result *InitSystemTemplateGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &InitSystemTemplateGroupResponse{}
  _body, _err := client.InitSystemTemplateGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) InitCustomerWorkFlowWithOptions (request *InitCustomerWorkFlowRequest, runtime *util.RuntimeOptions) (_result *InitCustomerWorkFlowResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &InitCustomerWorkFlowResponse{}
  _body, _err := client.DoRequest(tea.String("InitCustomerWorkFlow"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) InitCustomerWorkFlow (request *InitCustomerWorkFlowRequest) (_result *InitCustomerWorkFlowResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &InitCustomerWorkFlowResponse{}
  _body, _err := client.InitCustomerWorkFlowWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) InitCustomerWithSystemTemplateAndGroupWithOptions (request *InitCustomerWithSystemTemplateAndGroupRequest, runtime *util.RuntimeOptions) (_result *InitCustomerWithSystemTemplateAndGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &InitCustomerWithSystemTemplateAndGroupResponse{}
  _body, _err := client.DoRequest(tea.String("InitCustomerWithSystemTemplateAndGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) InitCustomerWithSystemTemplateAndGroup (request *InitCustomerWithSystemTemplateAndGroupRequest) (_result *InitCustomerWithSystemTemplateAndGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &InitCustomerWithSystemTemplateAndGroupResponse{}
  _body, _err := client.InitCustomerWithSystemTemplateAndGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetTemplateGroupWithOptions (request *GetTemplateGroupRequest, runtime *util.RuntimeOptions) (_result *GetTemplateGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetTemplateGroupResponse{}
  _body, _err := client.DoRequest(tea.String("GetTemplateGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetTemplateGroup (request *GetTemplateGroupRequest) (_result *GetTemplateGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetTemplateGroupResponse{}
  _body, _err := client.GetTemplateGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCustomTemplateWithOptions (request *GetCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *GetCustomTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCustomTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("GetCustomTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCustomTemplate (request *GetCustomTemplateRequest) (_result *GetCustomTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCustomTemplateResponse{}
  _body, _err := client.GetCustomTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteTemplateGroupWithOptions (request *DeleteTemplateGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteTemplateGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteTemplateGroupResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteTemplateGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteTemplateGroup (request *DeleteTemplateGroupRequest) (_result *DeleteTemplateGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteTemplateGroupResponse{}
  _body, _err := client.DeleteTemplateGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteInitCustomTemplateInfoWithOptions (request *DeleteInitCustomTemplateInfoRequest, runtime *util.RuntimeOptions) (_result *DeleteInitCustomTemplateInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteInitCustomTemplateInfoResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteInitCustomTemplateInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteInitCustomTemplateInfo (request *DeleteInitCustomTemplateInfoRequest) (_result *DeleteInitCustomTemplateInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteInitCustomTemplateInfoResponse{}
  _body, _err := client.DeleteInitCustomTemplateInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteCustomTemplateAndGroupWithOptions (request *DeleteCustomTemplateAndGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomTemplateAndGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteCustomTemplateAndGroupResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteCustomTemplateAndGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteCustomTemplateAndGroup (request *DeleteCustomTemplateAndGroupRequest) (_result *DeleteCustomTemplateAndGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteCustomTemplateAndGroupResponse{}
  _body, _err := client.DeleteCustomTemplateAndGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteCustomTemplateWithOptions (request *DeleteCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteCustomTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteCustomTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteCustomTemplate (request *DeleteCustomTemplateRequest) (_result *DeleteCustomTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteCustomTemplateResponse{}
  _body, _err := client.DeleteCustomTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddTemplateGroupWithOptions (request *AddTemplateGroupRequest, runtime *util.RuntimeOptions) (_result *AddTemplateGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddTemplateGroupResponse{}
  _body, _err := client.DoRequest(tea.String("AddTemplateGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddTemplateGroup (request *AddTemplateGroupRequest) (_result *AddTemplateGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddTemplateGroupResponse{}
  _body, _err := client.AddTemplateGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddCustomTemplateAndGroupWithOptions (request *AddCustomTemplateAndGroupRequest, runtime *util.RuntimeOptions) (_result *AddCustomTemplateAndGroupResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddCustomTemplateAndGroupResponse{}
  _body, _err := client.DoRequest(tea.String("AddCustomTemplateAndGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddCustomTemplateAndGroup (request *AddCustomTemplateAndGroupRequest) (_result *AddCustomTemplateAndGroupResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddCustomTemplateAndGroupResponse{}
  _body, _err := client.AddCustomTemplateAndGroupWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddCustomTemplateWithOptions (request *AddCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *AddCustomTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddCustomTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("AddCustomTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddCustomTemplate (request *AddCustomTemplateRequest) (_result *AddCustomTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddCustomTemplateResponse{}
  _body, _err := client.AddCustomTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitAIVideoPornRecogJobWithOptions (request *SubmitAIVideoPornRecogJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAIVideoPornRecogJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitAIVideoPornRecogJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitAIVideoPornRecogJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitAIVideoPornRecogJob (request *SubmitAIVideoPornRecogJobRequest) (_result *SubmitAIVideoPornRecogJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitAIVideoPornRecogJobResponse{}
  _body, _err := client.SubmitAIVideoPornRecogJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAIVideoPornRecogJobWithOptions (request *ListAIVideoPornRecogJobRequest, runtime *util.RuntimeOptions) (_result *ListAIVideoPornRecogJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAIVideoPornRecogJobResponse{}
  _body, _err := client.DoRequest(tea.String("ListAIVideoPornRecogJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAIVideoPornRecogJob (request *ListAIVideoPornRecogJobRequest) (_result *ListAIVideoPornRecogJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAIVideoPornRecogJobResponse{}
  _body, _err := client.ListAIVideoPornRecogJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SubmitAIVideoCoverJobWithOptions (request *SubmitAIVideoCoverJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAIVideoCoverJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SubmitAIVideoCoverJobResponse{}
  _body, _err := client.DoRequest(tea.String("SubmitAIVideoCoverJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SubmitAIVideoCoverJob (request *SubmitAIVideoCoverJobRequest) (_result *SubmitAIVideoCoverJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SubmitAIVideoCoverJobResponse{}
  _body, _err := client.SubmitAIVideoCoverJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAIVideoCoverJobWithOptions (request *ListAIVideoCoverJobRequest, runtime *util.RuntimeOptions) (_result *ListAIVideoCoverJobResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAIVideoCoverJobResponse{}
  _body, _err := client.DoRequest(tea.String("ListAIVideoCoverJob"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAIVideoCoverJob (request *ListAIVideoCoverJobRequest) (_result *ListAIVideoCoverJobResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAIVideoCoverJobResponse{}
  _body, _err := client.ListAIVideoCoverJobWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteAudioTemplateWithOptions (request *DeleteAudioTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteAudioTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteAudioTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteAudioTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteAudioTemplate (request *DeleteAudioTemplateRequest) (_result *DeleteAudioTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteAudioTemplateResponse{}
  _body, _err := client.DeleteAudioTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteAudioConfigWithOptions (request *DeleteAudioConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteAudioConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteAudioConfigResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteAudioConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteAudioConfig (request *DeleteAudioConfigRequest) (_result *DeleteAudioConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteAudioConfigResponse{}
  _body, _err := client.DeleteAudioConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddOriginTemplateWithOptions (request *AddOriginTemplateRequest, runtime *util.RuntimeOptions) (_result *AddOriginTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddOriginTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("AddOriginTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddOriginTemplate (request *AddOriginTemplateRequest) (_result *AddOriginTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddOriginTemplateResponse{}
  _body, _err := client.AddOriginTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateMaterialStatusWithOptions (request *UpdateMaterialStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateMaterialStatusResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateMaterialStatusResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateMaterialStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateMaterialStatus (request *UpdateMaterialStatusRequest) (_result *UpdateMaterialStatusResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateMaterialStatusResponse{}
  _body, _err := client.UpdateMaterialStatusWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateMaterialWithOptions (request *UpdateMaterialRequest, runtime *util.RuntimeOptions) (_result *UpdateMaterialResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateMaterialResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateMaterial"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateMaterial (request *UpdateMaterialRequest) (_result *UpdateMaterialResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateMaterialResponse{}
  _body, _err := client.UpdateMaterialWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateEditingProjectStatusWithOptions (request *UpdateEditingProjectStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateEditingProjectStatusResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateEditingProjectStatusResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateEditingProjectStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateEditingProjectStatus (request *UpdateEditingProjectStatusRequest) (_result *UpdateEditingProjectStatusResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateEditingProjectStatusResponse{}
  _body, _err := client.UpdateEditingProjectStatusWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateEditingProjectWithOptions (request *UpdateEditingProjectRequest, runtime *util.RuntimeOptions) (_result *UpdateEditingProjectResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateEditingProjectResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateEditingProject"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateEditingProject (request *UpdateEditingProjectRequest) (_result *UpdateEditingProjectResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateEditingProjectResponse{}
  _body, _err := client.UpdateEditingProjectWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SyncMaterialWithOptions (request *SyncMaterialRequest, runtime *util.RuntimeOptions) (_result *SyncMaterialResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SyncMaterialResponse{}
  _body, _err := client.DoRequest(tea.String("SyncMaterial"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SyncMaterial (request *SyncMaterialRequest) (_result *SyncMaterialResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SyncMaterialResponse{}
  _body, _err := client.SyncMaterialWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetEditingProjectMaterialsWithOptions (request *SetEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *SetEditingProjectMaterialsResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetEditingProjectMaterialsResponse{}
  _body, _err := client.DoRequest(tea.String("SetEditingProjectMaterials"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetEditingProjectMaterials (request *SetEditingProjectMaterialsRequest) (_result *SetEditingProjectMaterialsResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetEditingProjectMaterialsResponse{}
  _body, _err := client.SetEditingProjectMaterialsWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SearchMaterialWithOptions (request *SearchMaterialRequest, runtime *util.RuntimeOptions) (_result *SearchMaterialResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SearchMaterialResponse{}
  _body, _err := client.DoRequest(tea.String("SearchMaterial"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SearchMaterial (request *SearchMaterialRequest) (_result *SearchMaterialResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SearchMaterialResponse{}
  _body, _err := client.SearchMaterialWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SearchEditingProjectWithOptions (request *SearchEditingProjectRequest, runtime *util.RuntimeOptions) (_result *SearchEditingProjectResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SearchEditingProjectResponse{}
  _body, _err := client.DoRequest(tea.String("SearchEditingProject"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SearchEditingProject (request *SearchEditingProjectRequest) (_result *SearchEditingProjectResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SearchEditingProjectResponse{}
  _body, _err := client.SearchEditingProjectWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) RefreshUploadMaterialTokenWithOptions (request *RefreshUploadMaterialTokenRequest, runtime *util.RuntimeOptions) (_result *RefreshUploadMaterialTokenResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &RefreshUploadMaterialTokenResponse{}
  _body, _err := client.DoRequest(tea.String("RefreshUploadMaterialToken"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) RefreshUploadMaterialToken (request *RefreshUploadMaterialTokenRequest) (_result *RefreshUploadMaterialTokenResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &RefreshUploadMaterialTokenResponse{}
  _body, _err := client.RefreshUploadMaterialTokenWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ProduceEditingProjectVideoWithOptions (request *ProduceEditingProjectVideoRequest, runtime *util.RuntimeOptions) (_result *ProduceEditingProjectVideoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ProduceEditingProjectVideoResponse{}
  _body, _err := client.DoRequest(tea.String("ProduceEditingProjectVideo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ProduceEditingProjectVideo (request *ProduceEditingProjectVideoRequest) (_result *ProduceEditingProjectVideoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ProduceEditingProjectVideoResponse{}
  _body, _err := client.ProduceEditingProjectVideoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMaterialListWithOptions (request *GetMaterialListRequest, runtime *util.RuntimeOptions) (_result *GetMaterialListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMaterialListResponse{}
  _body, _err := client.DoRequest(tea.String("GetMaterialList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMaterialList (request *GetMaterialListRequest) (_result *GetMaterialListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMaterialListResponse{}
  _body, _err := client.GetMaterialListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMaterialWithOptions (request *GetMaterialRequest, runtime *util.RuntimeOptions) (_result *GetMaterialResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMaterialResponse{}
  _body, _err := client.DoRequest(tea.String("GetMaterial"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMaterial (request *GetMaterialRequest) (_result *GetMaterialResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMaterialResponse{}
  _body, _err := client.GetMaterialWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetEditingProjectMaterialsWithOptions (request *GetEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *GetEditingProjectMaterialsResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetEditingProjectMaterialsResponse{}
  _body, _err := client.DoRequest(tea.String("GetEditingProjectMaterials"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetEditingProjectMaterials (request *GetEditingProjectMaterialsRequest) (_result *GetEditingProjectMaterialsResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetEditingProjectMaterialsResponse{}
  _body, _err := client.GetEditingProjectMaterialsWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetEditingProjectListWithOptions (request *GetEditingProjectListRequest, runtime *util.RuntimeOptions) (_result *GetEditingProjectListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetEditingProjectListResponse{}
  _body, _err := client.DoRequest(tea.String("GetEditingProjectList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetEditingProjectList (request *GetEditingProjectListRequest) (_result *GetEditingProjectListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetEditingProjectListResponse{}
  _body, _err := client.GetEditingProjectListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetEditingProjectWithOptions (request *GetEditingProjectRequest, runtime *util.RuntimeOptions) (_result *GetEditingProjectResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetEditingProjectResponse{}
  _body, _err := client.DoRequest(tea.String("GetEditingProject"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetEditingProject (request *GetEditingProjectRequest) (_result *GetEditingProjectResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetEditingProjectResponse{}
  _body, _err := client.GetEditingProjectWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteMaterialWithOptions (request *DeleteMaterialRequest, runtime *util.RuntimeOptions) (_result *DeleteMaterialResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteMaterialResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteMaterial"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteMaterial (request *DeleteMaterialRequest) (_result *DeleteMaterialResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteMaterialResponse{}
  _body, _err := client.DeleteMaterialWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteEditingProjectWithOptions (request *DeleteEditingProjectRequest, runtime *util.RuntimeOptions) (_result *DeleteEditingProjectResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteEditingProjectResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteEditingProject"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteEditingProject (request *DeleteEditingProjectRequest) (_result *DeleteEditingProjectResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteEditingProjectResponse{}
  _body, _err := client.DeleteEditingProjectWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CreateUploadMaterialWithOptions (request *CreateUploadMaterialRequest, runtime *util.RuntimeOptions) (_result *CreateUploadMaterialResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CreateUploadMaterialResponse{}
  _body, _err := client.DoRequest(tea.String("CreateUploadMaterial"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CreateUploadMaterial (request *CreateUploadMaterialRequest) (_result *CreateUploadMaterialResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CreateUploadMaterialResponse{}
  _body, _err := client.CreateUploadMaterialWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddEditingProjectWithOptions (request *AddEditingProjectRequest, runtime *util.RuntimeOptions) (_result *AddEditingProjectResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddEditingProjectResponse{}
  _body, _err := client.DoRequest(tea.String("AddEditingProject"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddEditingProject (request *AddEditingProjectRequest) (_result *AddEditingProjectResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddEditingProjectResponse{}
  _body, _err := client.AddEditingProjectWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCategoriesWithOptions (request *GetCategoriesRequest, runtime *util.RuntimeOptions) (_result *GetCategoriesResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCategoriesResponse{}
  _body, _err := client.DoRequest(tea.String("GetCategories"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCategories (request *GetCategoriesRequest) (_result *GetCategoriesResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCategoriesResponse{}
  _body, _err := client.GetCategoriesWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateCategoryWithOptions (request *UpdateCategoryRequest, runtime *util.RuntimeOptions) (_result *UpdateCategoryResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateCategoryResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateCategory"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateCategory (request *UpdateCategoryRequest) (_result *UpdateCategoryResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateCategoryResponse{}
  _body, _err := client.UpdateCategoryWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetAudioTemplateWithOptions (request *GetAudioTemplateRequest, runtime *util.RuntimeOptions) (_result *GetAudioTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetAudioTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("GetAudioTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetAudioTemplate (request *GetAudioTemplateRequest) (_result *GetAudioTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetAudioTemplateResponse{}
  _body, _err := client.GetAudioTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAudioTemplateWithOptions (request *ListAudioTemplateRequest, runtime *util.RuntimeOptions) (_result *ListAudioTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAudioTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("ListAudioTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAudioTemplate (request *ListAudioTemplateRequest) (_result *ListAudioTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAudioTemplateResponse{}
  _body, _err := client.ListAudioTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAudioConfigWithOptions (request *ListAudioConfigRequest, runtime *util.RuntimeOptions) (_result *ListAudioConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAudioConfigResponse{}
  _body, _err := client.DoRequest(tea.String("ListAudioConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAudioConfig (request *ListAudioConfigRequest) (_result *ListAudioConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAudioConfigResponse{}
  _body, _err := client.ListAudioConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) RefreshMaterialWorkFlowWithOptions (request *RefreshMaterialWorkFlowRequest, runtime *util.RuntimeOptions) (_result *RefreshMaterialWorkFlowResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &RefreshMaterialWorkFlowResponse{}
  _body, _err := client.DoRequest(tea.String("RefreshMaterialWorkFlow"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) RefreshMaterialWorkFlow (request *RefreshMaterialWorkFlowRequest) (_result *RefreshMaterialWorkFlowResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &RefreshMaterialWorkFlowResponse{}
  _body, _err := client.RefreshMaterialWorkFlowWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateAudioConfigWithOptions (request *UpdateAudioConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateAudioConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateAudioConfigResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateAudioConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateAudioConfig (request *UpdateAudioConfigRequest) (_result *UpdateAudioConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateAudioConfigResponse{}
  _body, _err := client.UpdateAudioConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateAudioTemplateWithOptions (request *UpdateAudioTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateAudioTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateAudioTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateAudioTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateAudioTemplate (request *UpdateAudioTemplateRequest) (_result *UpdateAudioTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateAudioTemplateResponse{}
  _body, _err := client.UpdateAudioTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddAudioConfigWithOptions (request *AddAudioConfigRequest, runtime *util.RuntimeOptions) (_result *AddAudioConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddAudioConfigResponse{}
  _body, _err := client.DoRequest(tea.String("AddAudioConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddAudioConfig (request *AddAudioConfigRequest) (_result *AddAudioConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddAudioConfigResponse{}
  _body, _err := client.AddAudioConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddAudioTemplateWithOptions (request *AddAudioTemplateRequest, runtime *util.RuntimeOptions) (_result *AddAudioTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddAudioTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("AddAudioTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddAudioTemplate (request *AddAudioTemplateRequest) (_result *AddAudioTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddAudioTemplateResponse{}
  _body, _err := client.AddAudioTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateSpecifyCustomerTemplateConfigWithOptions (request *UpdateSpecifyCustomerTemplateConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateSpecifyCustomerTemplateConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateSpecifyCustomerTemplateConfigResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateSpecifyCustomerTemplateConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateSpecifyCustomerTemplateConfig (request *UpdateSpecifyCustomerTemplateConfigRequest) (_result *UpdateSpecifyCustomerTemplateConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateSpecifyCustomerTemplateConfigResponse{}
  _body, _err := client.UpdateSpecifyCustomerTemplateConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetPlayInfoWithOptions (request *GetPlayInfoRequest, runtime *util.RuntimeOptions) (_result *GetPlayInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetPlayInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetPlayInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetPlayInfo (request *GetPlayInfoRequest) (_result *GetPlayInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetPlayInfoResponse{}
  _body, _err := client.GetPlayInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetVideoConfigWithOptions (request *GetVideoConfigRequest, runtime *util.RuntimeOptions) (_result *GetVideoConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetVideoConfigResponse{}
  _body, _err := client.DoRequest(tea.String("GetVideoConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetVideoConfig (request *GetVideoConfigRequest) (_result *GetVideoConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetVideoConfigResponse{}
  _body, _err := client.GetVideoConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetCustomerConfigWithOptions (request *SetCustomerConfigRequest, runtime *util.RuntimeOptions) (_result *SetCustomerConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetCustomerConfigResponse{}
  _body, _err := client.DoRequest(tea.String("SetCustomerConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetCustomerConfig (request *SetCustomerConfigRequest) (_result *SetCustomerConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetCustomerConfigResponse{}
  _body, _err := client.SetCustomerConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCustomerConfigWithOptions (request *GetCustomerConfigRequest, runtime *util.RuntimeOptions) (_result *GetCustomerConfigResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCustomerConfigResponse{}
  _body, _err := client.DoRequest(tea.String("GetCustomerConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCustomerConfig (request *GetCustomerConfigRequest) (_result *GetCustomerConfigResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCustomerConfigResponse{}
  _body, _err := client.GetCustomerConfigWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CreateUploadImageWithOptions (request *CreateUploadImageRequest, runtime *util.RuntimeOptions) (_result *CreateUploadImageResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CreateUploadImageResponse{}
  _body, _err := client.DoRequest(tea.String("CreateUploadImage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CreateUploadImage (request *CreateUploadImageRequest) (_result *CreateUploadImageResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CreateUploadImageResponse{}
  _body, _err := client.CreateUploadImageWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateSnapshotWithOptions (request *UpdateSnapshotRequest, runtime *util.RuntimeOptions) (_result *UpdateSnapshotResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateSnapshotResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateSnapshot"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateSnapshot (request *UpdateSnapshotRequest) (_result *UpdateSnapshotResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateSnapshotResponse{}
  _body, _err := client.UpdateSnapshotWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) RefreshWorkFlowWithOptions (request *RefreshWorkFlowRequest, runtime *util.RuntimeOptions) (_result *RefreshWorkFlowResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &RefreshWorkFlowResponse{}
  _body, _err := client.DoRequest(tea.String("RefreshWorkFlow"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) RefreshWorkFlow (request *RefreshWorkFlowRequest) (_result *RefreshWorkFlowResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &RefreshWorkFlowResponse{}
  _body, _err := client.RefreshWorkFlowWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddPipelineWithOptions (request *AddPipelineRequest, runtime *util.RuntimeOptions) (_result *AddPipelineResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddPipelineResponse{}
  _body, _err := client.DoRequest(tea.String("AddPipeline"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddPipeline (request *AddPipelineRequest) (_result *AddPipelineResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddPipelineResponse{}
  _body, _err := client.AddPipelineWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCheckChannelWithOptions (request *GetCheckChannelRequest, runtime *util.RuntimeOptions) (_result *GetCheckChannelResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCheckChannelResponse{}
  _body, _err := client.DoRequest(tea.String("GetCheckChannel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCheckChannel (request *GetCheckChannelRequest) (_result *GetCheckChannelResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCheckChannelResponse{}
  _body, _err := client.GetCheckChannelWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetCheckChannelWithOptions (request *SetCheckChannelRequest, runtime *util.RuntimeOptions) (_result *SetCheckChannelResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetCheckChannelResponse{}
  _body, _err := client.DoRequest(tea.String("SetCheckChannel"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetCheckChannel (request *SetCheckChannelRequest) (_result *SetCheckChannelResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetCheckChannelResponse{}
  _body, _err := client.SetCheckChannelWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetPlayStatisWithOptions (request *GetPlayStatisRequest, runtime *util.RuntimeOptions) (_result *GetPlayStatisResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetPlayStatisResponse{}
  _body, _err := client.DoRequest(tea.String("GetPlayStatis"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetPlayStatis (request *GetPlayStatisRequest) (_result *GetPlayStatisResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetPlayStatisResponse{}
  _body, _err := client.GetPlayStatisWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMTSStatisWithOptions (request *GetMTSStatisRequest, runtime *util.RuntimeOptions) (_result *GetMTSStatisResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMTSStatisResponse{}
  _body, _err := client.DoRequest(tea.String("GetMTSStatis"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMTSStatis (request *GetMTSStatisRequest) (_result *GetMTSStatisResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMTSStatisResponse{}
  _body, _err := client.GetMTSStatisWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListDomainRefererWithOptions (request *ListDomainRefererRequest, runtime *util.RuntimeOptions) (_result *ListDomainRefererResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListDomainRefererResponse{}
  _body, _err := client.DoRequest(tea.String("ListDomainReferer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListDomainReferer (request *ListDomainRefererRequest) (_result *ListDomainRefererResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListDomainRefererResponse{}
  _body, _err := client.ListDomainRefererWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetMessageCallbackWithOptions (request *SetMessageCallbackRequest, runtime *util.RuntimeOptions) (_result *SetMessageCallbackResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetMessageCallbackResponse{}
  _body, _err := client.DoRequest(tea.String("SetMessageCallback"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetMessageCallback (request *SetMessageCallbackRequest) (_result *SetMessageCallbackResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetMessageCallbackResponse{}
  _body, _err := client.SetMessageCallbackWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMessageCallbackWithOptions (request *GetMessageCallbackRequest, runtime *util.RuntimeOptions) (_result *GetMessageCallbackResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMessageCallbackResponse{}
  _body, _err := client.DoRequest(tea.String("GetMessageCallback"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMessageCallback (request *GetMessageCallbackRequest) (_result *GetMessageCallbackResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMessageCallbackResponse{}
  _body, _err := client.GetMessageCallbackWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetVideoPlayInfoForCloudWithOptions (request *GetVideoPlayInfoForCloudRequest, runtime *util.RuntimeOptions) (_result *GetVideoPlayInfoForCloudResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetVideoPlayInfoForCloudResponse{}
  _body, _err := client.DoRequest(tea.String("GetVideoPlayInfoForCloud"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetVideoPlayInfoForCloud (request *GetVideoPlayInfoForCloudRequest) (_result *GetVideoPlayInfoForCloudResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetVideoPlayInfoForCloudResponse{}
  _body, _err := client.GetVideoPlayInfoForCloudWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetVideoPlayAuthWithOptions (request *GetVideoPlayAuthRequest, runtime *util.RuntimeOptions) (_result *GetVideoPlayAuthResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetVideoPlayAuthResponse{}
  _body, _err := client.DoRequest(tea.String("GetVideoPlayAuth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetVideoPlayAuth (request *GetVideoPlayAuthRequest) (_result *GetVideoPlayAuthResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetVideoPlayAuthResponse{}
  _body, _err := client.GetVideoPlayAuthWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMidYKVidWithOptions (request *GetMidYKVidRequest, runtime *util.RuntimeOptions) (_result *GetMidYKVidResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMidYKVidResponse{}
  _body, _err := client.DoRequest(tea.String("GetMidYKVid"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMidYKVid (request *GetMidYKVidRequest) (_result *GetMidYKVidResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMidYKVidResponse{}
  _body, _err := client.GetMidYKVidWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteMidYKVidWithOptions (request *DeleteMidYKVidRequest, runtime *util.RuntimeOptions) (_result *DeleteMidYKVidResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteMidYKVidResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteMidYKVid"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteMidYKVid (request *DeleteMidYKVidRequest) (_result *DeleteMidYKVidResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteMidYKVidResponse{}
  _body, _err := client.DeleteMidYKVidWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddMidYKVidWithOptions (request *AddMidYKVidRequest, runtime *util.RuntimeOptions) (_result *AddMidYKVidResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddMidYKVidResponse{}
  _body, _err := client.DoRequest(tea.String("AddMidYKVid"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddMidYKVid (request *AddMidYKVidRequest) (_result *AddMidYKVidResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddMidYKVidResponse{}
  _body, _err := client.AddMidYKVidWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateVideoStatusWithOptions (request *UpdateVideoStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateVideoStatusResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateVideoStatusResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateVideoStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateVideoStatus (request *UpdateVideoStatusRequest) (_result *UpdateVideoStatusResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateVideoStatusResponse{}
  _body, _err := client.UpdateVideoStatusWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateVideoInfoWithOptions (request *UpdateVideoInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateVideoInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateVideoInfoResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateVideoInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateVideoInfo (request *UpdateVideoInfoRequest) (_result *UpdateVideoInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateVideoInfoResponse{}
  _body, _err := client.UpdateVideoInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SearchVideoWithOptions (request *SearchVideoRequest, runtime *util.RuntimeOptions) (_result *SearchVideoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SearchVideoResponse{}
  _body, _err := client.DoRequest(tea.String("SearchVideo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SearchVideo (request *SearchVideoRequest) (_result *SearchVideoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SearchVideoResponse{}
  _body, _err := client.SearchVideoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) RefreshUploadVideoWithOptions (request *RefreshUploadVideoRequest, runtime *util.RuntimeOptions) (_result *RefreshUploadVideoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &RefreshUploadVideoResponse{}
  _body, _err := client.DoRequest(tea.String("RefreshUploadVideo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) RefreshUploadVideo (request *RefreshUploadVideoRequest) (_result *RefreshUploadVideoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &RefreshUploadVideoResponse{}
  _body, _err := client.RefreshUploadVideoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetVideoListWithOptions (request *GetVideoListRequest, runtime *util.RuntimeOptions) (_result *GetVideoListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetVideoListResponse{}
  _body, _err := client.DoRequest(tea.String("GetVideoList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetVideoList (request *GetVideoListRequest) (_result *GetVideoListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetVideoListResponse{}
  _body, _err := client.GetVideoListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetVideoInfoWithOptions (request *GetVideoInfoRequest, runtime *util.RuntimeOptions) (_result *GetVideoInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetVideoInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetVideoInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetVideoInfo (request *GetVideoInfoRequest) (_result *GetVideoInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetVideoInfoResponse{}
  _body, _err := client.GetVideoInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCategoryTreeWithOptions (request *GetCategoryTreeRequest, runtime *util.RuntimeOptions) (_result *GetCategoryTreeResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCategoryTreeResponse{}
  _body, _err := client.DoRequest(tea.String("GetCategoryTree"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCategoryTree (request *GetCategoryTreeRequest) (_result *GetCategoryTreeResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCategoryTreeResponse{}
  _body, _err := client.GetCategoryTreeWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCategoryListWithOptions (request *GetCategoryListRequest, runtime *util.RuntimeOptions) (_result *GetCategoryListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCategoryListResponse{}
  _body, _err := client.DoRequest(tea.String("GetCategoryList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCategoryList (request *GetCategoryListRequest) (_result *GetCategoryListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCategoryListResponse{}
  _body, _err := client.GetCategoryListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteVideoTagWithOptions (request *DeleteVideoTagRequest, runtime *util.RuntimeOptions) (_result *DeleteVideoTagResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteVideoTagResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteVideoTag"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteVideoTag (request *DeleteVideoTagRequest) (_result *DeleteVideoTagResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteVideoTagResponse{}
  _body, _err := client.DeleteVideoTagWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteVideoWithOptions (request *DeleteVideoRequest, runtime *util.RuntimeOptions) (_result *DeleteVideoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteVideoResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteVideo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteVideo (request *DeleteVideoRequest) (_result *DeleteVideoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteVideoResponse{}
  _body, _err := client.DeleteVideoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CreateUploadVideoWithOptions (request *CreateUploadVideoRequest, runtime *util.RuntimeOptions) (_result *CreateUploadVideoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CreateUploadVideoResponse{}
  _body, _err := client.DoRequest(tea.String("CreateUploadVideo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CreateUploadVideo (request *CreateUploadVideoRequest) (_result *CreateUploadVideoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CreateUploadVideoResponse{}
  _body, _err := client.CreateUploadVideoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CheckVideoWithOptions (request *CheckVideoRequest, runtime *util.RuntimeOptions) (_result *CheckVideoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CheckVideoResponse{}
  _body, _err := client.DoRequest(tea.String("CheckVideo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CheckVideo (request *CheckVideoRequest) (_result *CheckVideoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CheckVideoResponse{}
  _body, _err := client.CheckVideoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddVideoTagWithOptions (request *AddVideoTagRequest, runtime *util.RuntimeOptions) (_result *AddVideoTagResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddVideoTagResponse{}
  _body, _err := client.DoRequest(tea.String("AddVideoTag"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddVideoTag (request *AddVideoTagRequest) (_result *AddVideoTagResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddVideoTagResponse{}
  _body, _err := client.AddVideoTagWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddApiAuthWithOptions (request *AddApiAuthRequest, runtime *util.RuntimeOptions) (_result *AddApiAuthResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddApiAuthResponse{}
  _body, _err := client.DoRequest(tea.String("AddApiAuth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddApiAuth (request *AddApiAuthRequest) (_result *AddApiAuthResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddApiAuthResponse{}
  _body, _err := client.AddApiAuthWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetPlayChannelKeyWithOptions (request *GetPlayChannelKeyRequest, runtime *util.RuntimeOptions) (_result *GetPlayChannelKeyResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetPlayChannelKeyResponse{}
  _body, _err := client.DoRequest(tea.String("GetPlayChannelKey"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetPlayChannelKey (request *GetPlayChannelKeyRequest) (_result *GetPlayChannelKeyResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetPlayChannelKeyResponse{}
  _body, _err := client.GetPlayChannelKeyWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetDomainListWithOptions (request *GetDomainListRequest, runtime *util.RuntimeOptions) (_result *GetDomainListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetDomainListResponse{}
  _body, _err := client.DoRequest(tea.String("GetDomainList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetDomainList (request *GetDomainListRequest) (_result *GetDomainListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetDomainListResponse{}
  _body, _err := client.GetDomainListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetServiceStatusWithOptions (request *GetServiceStatusRequest, runtime *util.RuntimeOptions) (_result *GetServiceStatusResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetServiceStatusResponse{}
  _body, _err := client.DoRequest(tea.String("GetServiceStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetServiceStatus (request *GetServiceStatusRequest) (_result *GetServiceStatusResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetServiceStatusResponse{}
  _body, _err := client.GetServiceStatusWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) NotifyProduceWithOptions (request *NotifyProduceRequest, runtime *util.RuntimeOptions) (_result *NotifyProduceResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &NotifyProduceResponse{}
  _body, _err := client.DoRequest(tea.String("NotifyProduce"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) NotifyProduce (request *NotifyProduceRequest) (_result *NotifyProduceResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &NotifyProduceResponse{}
  _body, _err := client.NotifyProduceWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) NotifyInitResourceWithOptions (request *NotifyInitResourceRequest, runtime *util.RuntimeOptions) (_result *NotifyInitResourceResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &NotifyInitResourceResponse{}
  _body, _err := client.DoRequest(tea.String("NotifyInitResource"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) NotifyInitResource (request *NotifyInitResourceRequest) (_result *NotifyInitResourceResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &NotifyInitResourceResponse{}
  _body, _err := client.NotifyInitResourceWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetPlayChannelListWithOptions (request *GetPlayChannelListRequest, runtime *util.RuntimeOptions) (_result *GetPlayChannelListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetPlayChannelListResponse{}
  _body, _err := client.DoRequest(tea.String("GetPlayChannelList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetPlayChannelList (request *GetPlayChannelListRequest) (_result *GetPlayChannelListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetPlayChannelListResponse{}
  _body, _err := client.GetPlayChannelListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateApiAuthWithOptions (request *UpdateApiAuthRequest, runtime *util.RuntimeOptions) (_result *UpdateApiAuthResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateApiAuthResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateApiAuth"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateApiAuth (request *UpdateApiAuthRequest) (_result *UpdateApiAuthResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateApiAuthResponse{}
  _body, _err := client.UpdateApiAuthWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UserExistWithOptions (request *UserExistRequest, runtime *util.RuntimeOptions) (_result *UserExistResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UserExistResponse{}
  _body, _err := client.DoRequest(tea.String("UserExist"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UserExist (request *UserExistRequest) (_result *UserExistResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UserExistResponse{}
  _body, _err := client.UserExistWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddMediaInfoWithOptions (request *AddMediaInfoRequest, runtime *util.RuntimeOptions) (_result *AddMediaInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddMediaInfoResponse{}
  _body, _err := client.DoRequest(tea.String("AddMediaInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddMediaInfo (request *AddMediaInfoRequest) (_result *AddMediaInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddMediaInfoResponse{}
  _body, _err := client.AddMediaInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddCategoryWithOptions (request *AddCategoryRequest, runtime *util.RuntimeOptions) (_result *AddCategoryResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddCategoryResponse{}
  _body, _err := client.DoRequest(tea.String("AddCategory"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddCategory (request *AddCategoryRequest) (_result *AddCategoryResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddCategoryResponse{}
  _body, _err := client.AddCategoryWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteCategoryWithOptions (request *DeleteCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteCategoryResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteCategoryResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteCategory"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteCategory (request *DeleteCategoryRequest) (_result *DeleteCategoryResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteCategoryResponse{}
  _body, _err := client.DeleteCategoryWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateMediaInfoStatusWithOptions (request *UpdateMediaInfoStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaInfoStatusResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateMediaInfoStatusResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateMediaInfoStatus"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateMediaInfoStatus (request *UpdateMediaInfoStatusRequest) (_result *UpdateMediaInfoStatusResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateMediaInfoStatusResponse{}
  _body, _err := client.UpdateMediaInfoStatusWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) CategoryTreeWithOptions (request *CategoryTreeRequest, runtime *util.RuntimeOptions) (_result *CategoryTreeResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &CategoryTreeResponse{}
  _body, _err := client.DoRequest(tea.String("CategoryTree"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) CategoryTree (request *CategoryTreeRequest) (_result *CategoryTreeResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &CategoryTreeResponse{}
  _body, _err := client.CategoryTreeWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddMediaTagWithOptions (request *AddMediaTagRequest, runtime *util.RuntimeOptions) (_result *AddMediaTagResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddMediaTagResponse{}
  _body, _err := client.DoRequest(tea.String("AddMediaTag"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddMediaTag (request *AddMediaTagRequest) (_result *AddMediaTagResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddMediaTagResponse{}
  _body, _err := client.AddMediaTagWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCDNStatisSumWithOptions (request *GetCDNStatisSumRequest, runtime *util.RuntimeOptions) (_result *GetCDNStatisSumResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCDNStatisSumResponse{}
  _body, _err := client.DoRequest(tea.String("GetCDNStatisSum"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCDNStatisSum (request *GetCDNStatisSumRequest) (_result *GetCDNStatisSumResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCDNStatisSumResponse{}
  _body, _err := client.GetCDNStatisSumWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCDNStatisWithOptions (request *GetCDNStatisRequest, runtime *util.RuntimeOptions) (_result *GetCDNStatisResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCDNStatisResponse{}
  _body, _err := client.DoRequest(tea.String("GetCDNStatis"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCDNStatis (request *GetCDNStatisRequest) (_result *GetCDNStatisResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCDNStatisResponse{}
  _body, _err := client.GetCDNStatisWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteMediaTagWithOptions (request *DeleteMediaTagRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaTagResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteMediaTagResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteMediaTag"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteMediaTag (request *DeleteMediaTagRequest) (_result *DeleteMediaTagResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteMediaTagResponse{}
  _body, _err := client.DeleteMediaTagWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteMediaInfoWithOptions (request *DeleteMediaInfoRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteMediaInfoResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteMediaInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteMediaInfo (request *DeleteMediaInfoRequest) (_result *DeleteMediaInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteMediaInfoResponse{}
  _body, _err := client.DeleteMediaInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetOSSStatisWithOptions (request *GetOSSStatisRequest, runtime *util.RuntimeOptions) (_result *GetOSSStatisResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetOSSStatisResponse{}
  _body, _err := client.DoRequest(tea.String("GetOSSStatis"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetOSSStatis (request *GetOSSStatisRequest) (_result *GetOSSStatisResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetOSSStatisResponse{}
  _body, _err := client.GetOSSStatisWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetVideoPlayInfoWithOptions (request *GetVideoPlayInfoRequest, runtime *util.RuntimeOptions) (_result *GetVideoPlayInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetVideoPlayInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetVideoPlayInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetVideoPlayInfo (request *GetVideoPlayInfoRequest) (_result *GetVideoPlayInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetVideoPlayInfoResponse{}
  _body, _err := client.GetVideoPlayInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMediaInfoListWithOptions (request *GetMediaInfoListRequest, runtime *util.RuntimeOptions) (_result *GetMediaInfoListResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMediaInfoListResponse{}
  _body, _err := client.DoRequest(tea.String("GetMediaInfoList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMediaInfoList (request *GetMediaInfoListRequest) (_result *GetMediaInfoListResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMediaInfoListResponse{}
  _body, _err := client.GetMediaInfoListWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetMediaInfoWithOptions (request *GetMediaInfoRequest, runtime *util.RuntimeOptions) (_result *GetMediaInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetMediaInfoResponse{}
  _body, _err := client.DoRequest(tea.String("GetMediaInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetMediaInfo (request *GetMediaInfoRequest) (_result *GetMediaInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetMediaInfoResponse{}
  _body, _err := client.GetMediaInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SearchMediaInfoWithOptions (request *SearchMediaInfoRequest, runtime *util.RuntimeOptions) (_result *SearchMediaInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SearchMediaInfoResponse{}
  _body, _err := client.DoRequest(tea.String("SearchMediaInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SearchMediaInfo (request *SearchMediaInfoRequest) (_result *SearchMediaInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SearchMediaInfoResponse{}
  _body, _err := client.SearchMediaInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) RefreshUploadTokenWithOptions (request *RefreshUploadTokenRequest, runtime *util.RuntimeOptions) (_result *RefreshUploadTokenResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &RefreshUploadTokenResponse{}
  _body, _err := client.DoRequest(tea.String("RefreshUploadToken"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) RefreshUploadToken (request *RefreshUploadTokenRequest) (_result *RefreshUploadTokenResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &RefreshUploadTokenResponse{}
  _body, _err := client.RefreshUploadTokenWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) ListAllCategoryWithOptions (request *ListAllCategoryRequest, runtime *util.RuntimeOptions) (_result *ListAllCategoryResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &ListAllCategoryResponse{}
  _body, _err := client.DoRequest(tea.String("ListAllCategory"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) ListAllCategory (request *ListAllCategoryRequest) (_result *ListAllCategoryResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &ListAllCategoryResponse{}
  _body, _err := client.ListAllCategoryWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetTotalStatisWithOptions (request *GetTotalStatisRequest, runtime *util.RuntimeOptions) (_result *GetTotalStatisResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetTotalStatisResponse{}
  _body, _err := client.DoRequest(tea.String("GetTotalStatis"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetTotalStatis (request *GetTotalStatisRequest) (_result *GetTotalStatisResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetTotalStatisResponse{}
  _body, _err := client.GetTotalStatisWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateMediaInfoWithOptions (request *UpdateMediaInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaInfoResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateMediaInfoResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateMediaInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateMediaInfo (request *UpdateMediaInfoRequest) (_result *UpdateMediaInfoResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateMediaInfoResponse{}
  _body, _err := client.UpdateMediaInfoWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateMediaCategoryWithOptions (request *UpdateMediaCategoryRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaCategoryResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateMediaCategoryResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateMediaCategory"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateMediaCategory (request *UpdateMediaCategoryRequest) (_result *UpdateMediaCategoryResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateMediaCategoryResponse{}
  _body, _err := client.UpdateMediaCategoryWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateCategoryNameWithOptions (request *UpdateCategoryNameRequest, runtime *util.RuntimeOptions) (_result *UpdateCategoryNameResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateCategoryNameResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateCategoryName"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateCategoryName (request *UpdateCategoryNameRequest) (_result *UpdateCategoryNameResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateCategoryNameResponse{}
  _body, _err := client.UpdateCategoryNameWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddWatermarkWithOptions (request *AddWatermarkRequest, runtime *util.RuntimeOptions) (_result *AddWatermarkResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddWatermarkResponse{}
  _body, _err := client.DoRequest(tea.String("AddWatermark"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddWatermark (request *AddWatermarkRequest) (_result *AddWatermarkResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddWatermarkResponse{}
  _body, _err := client.AddWatermarkWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddTranscodeTemplateWithOptions (request *AddTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *AddTranscodeTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddTranscodeTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("AddTranscodeTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddTranscodeTemplate (request *AddTranscodeTemplateRequest) (_result *AddTranscodeTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddTranscodeTemplateResponse{}
  _body, _err := client.AddTranscodeTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) AddSnapshotWithOptions (request *AddSnapshotRequest, runtime *util.RuntimeOptions) (_result *AddSnapshotResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &AddSnapshotResponse{}
  _body, _err := client.DoRequest(tea.String("AddSnapshot"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) AddSnapshot (request *AddSnapshotRequest) (_result *AddSnapshotResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &AddSnapshotResponse{}
  _body, _err := client.AddSnapshotWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetCustomerTranscodeConfWithOptions (request *GetCustomerTranscodeConfRequest, runtime *util.RuntimeOptions) (_result *GetCustomerTranscodeConfResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetCustomerTranscodeConfResponse{}
  _body, _err := client.DoRequest(tea.String("GetCustomerTranscodeConf"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetCustomerTranscodeConf (request *GetCustomerTranscodeConfRequest) (_result *GetCustomerTranscodeConfResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetCustomerTranscodeConfResponse{}
  _body, _err := client.GetCustomerTranscodeConfWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) DeleteWatermarkWithOptions (request *DeleteWatermarkRequest, runtime *util.RuntimeOptions) (_result *DeleteWatermarkResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &DeleteWatermarkResponse{}
  _body, _err := client.DoRequest(tea.String("DeleteWatermark"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) DeleteWatermark (request *DeleteWatermarkRequest) (_result *DeleteWatermarkResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &DeleteWatermarkResponse{}
  _body, _err := client.DeleteWatermarkWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetWatermarkWithOptions (request *GetWatermarkRequest, runtime *util.RuntimeOptions) (_result *GetWatermarkResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetWatermarkResponse{}
  _body, _err := client.DoRequest(tea.String("GetWatermark"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetWatermark (request *GetWatermarkRequest) (_result *GetWatermarkResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetWatermarkResponse{}
  _body, _err := client.GetWatermarkWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetWatermarksWithOptions (request *GetWatermarksRequest, runtime *util.RuntimeOptions) (_result *GetWatermarksResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetWatermarksResponse{}
  _body, _err := client.DoRequest(tea.String("GetWatermarks"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetWatermarks (request *GetWatermarksRequest) (_result *GetWatermarksResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetWatermarksResponse{}
  _body, _err := client.GetWatermarksWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SwitchWatermarkWithOptions (request *SwitchWatermarkRequest, runtime *util.RuntimeOptions) (_result *SwitchWatermarkResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SwitchWatermarkResponse{}
  _body, _err := client.DoRequest(tea.String("SwitchWatermark"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SwitchWatermark (request *SwitchWatermarkRequest) (_result *SwitchWatermarkResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SwitchWatermarkResponse{}
  _body, _err := client.SwitchWatermarkWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetWatermarkSwitchWithOptions (request *GetWatermarkSwitchRequest, runtime *util.RuntimeOptions) (_result *GetWatermarkSwitchResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &GetWatermarkSwitchResponse{}
  _body, _err := client.DoRequest(tea.String("GetWatermarkSwitch"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) GetWatermarkSwitch (request *GetWatermarkSwitchRequest) (_result *GetWatermarkSwitchResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &GetWatermarkSwitchResponse{}
  _body, _err := client.GetWatermarkSwitchWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) SetDefaultWatermarkWithOptions (request *SetDefaultWatermarkRequest, runtime *util.RuntimeOptions) (_result *SetDefaultWatermarkResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &SetDefaultWatermarkResponse{}
  _body, _err := client.DoRequest(tea.String("SetDefaultWatermark"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) SetDefaultWatermark (request *SetDefaultWatermarkRequest) (_result *SetDefaultWatermarkResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &SetDefaultWatermarkResponse{}
  _body, _err := client.SetDefaultWatermarkWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateTranscodeTemplateWithOptions (request *UpdateTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateTranscodeTemplateResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateTranscodeTemplateResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateTranscodeTemplate"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateTranscodeTemplate (request *UpdateTranscodeTemplateRequest) (_result *UpdateTranscodeTemplateResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateTranscodeTemplateResponse{}
  _body, _err := client.UpdateTranscodeTemplateWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateTranscodeConfWithOptions (request *UpdateTranscodeConfRequest, runtime *util.RuntimeOptions) (_result *UpdateTranscodeConfResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateTranscodeConfResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateTranscodeConf"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateTranscodeConf (request *UpdateTranscodeConfRequest) (_result *UpdateTranscodeConfResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateTranscodeConfResponse{}
  _body, _err := client.UpdateTranscodeConfWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) UpdateWatermarkWithOptions (request *UpdateWatermarkRequest, runtime *util.RuntimeOptions) (_result *UpdateWatermarkResponse, _err error) {
  _err = util.ValidateModel(request)
  if _err != nil {
    return _result, _err
  }
  _result = &UpdateWatermarkResponse{}
  _body, _err := client.DoRequest(tea.String("UpdateWatermark"), tea.String("HTTPS"), tea.String("POST"), tea.String("2017-03-14"), tea.String("AK"), tea.ToMap(request), nil, runtime)
  if _err != nil {
    return _result, _err
  }
  _err = tea.Convert(_body, &_result)
  return _result, _err
}

func (client *Client) UpdateWatermark (request *UpdateWatermarkRequest) (_result *UpdateWatermarkResponse, _err error) {
  runtime := &util.RuntimeOptions{}
  _result = &UpdateWatermarkResponse{}
  _body, _err := client.UpdateWatermarkWithOptions(request, runtime)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

func (client *Client) GetEndpoint (productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
  if !tea.BoolValue(util.Empty(endpoint)) {
    _result = endpoint
    return _result , _err
  }

  if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
    _result = endpointMap[tea.StringValue(regionId)]
    return _result, _err
  }

  _body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
  if _err != nil {
    return _result, _err
  }
  _result = _body
  return _result, _err
}

